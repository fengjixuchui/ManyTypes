struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
struct _TOKEN_SOURCE;
struct _SECURITY_DESCRIPTOR;
struct _EVENT_TRACE_GROUPMASK_INFORMATION;
struct _REARRANGE_FILE_DATA32;
struct _TAPE_ERASE;
struct _SYSTEM_ALARM_CALLBACK_ACE;
enum _EXCEPTION_DISPOSITION;
struct _EXCEPTION_RECORD;
struct _CONTEXT;
struct _DISPATCHER_CONTEXT;
enum _STORAGE_IDENTIFIER_CODE_SET;
struct _MEMORY_BASIC_INFORMATION;
struct _GUID;
enum _TOKEN_INFORMATION_CLASS;
struct SERVICE_STATUS_HANDLE__;
struct _SE_TOKEN_USER;
struct _IMAGE_FUNCTION_ENTRY64;
struct _ACL_REVISION_INFORMATION;
struct _IMAGE_FUNCTION_ENTRY;
struct _FILE_IO_COMPLETION_INFORMATION;
struct _LUID;
struct _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY;
struct _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION;
struct _TOKEN_AUDIT_POLICY;
struct _OBJECTID;
struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;
enum _SECURITY_IMPERSONATION_LEVEL;
struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION;
enum SYSTEM_POWER_CONDITION;
struct _FILE_NOTIFY_EXTENDED_INFORMATION;
struct _XSAVE_FORMAT;
struct _JOBOBJECT_BASIC_PROCESS_ID_LIST;
enum WELL_KNOWN_SID_TYPE;
struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
struct __crt_locale_data_public;
enum _AUDIT_EVENT_TYPE;
struct __crt_locale_pointers;
struct __crt_locale_data;
struct __crt_multibyte_data;
enum _SYSTEM_POWER_STATE;
struct _Mbstatet;
struct _TOKEN_ELEVATION;
struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE;
struct _XSTATE_CONTEXT;
struct _TOKEN_MANDATORY_POLICY;
struct WIN32_MEMORY_REGION_INFORMATION;
struct _TOKEN_ACCESS_INFORMATION;
struct _FILETIME;
struct _KERNEL_CET_CONTEXT;
union _RATE_QUOTA_LIMIT;
struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION;
struct _RIP_INFO;
struct _ENCLAVE_INIT_INFO_VBS;
struct _SID_AND_ATTRIBUTES_HASH;
struct _QUOTA_LIMITS_EX;
struct _SCRUB_PARITY_EXTENT_DATA;
struct _ACCESS_ALLOWED_OBJECT_ACE;
struct _SE_IMPERSONATION_STATE;
struct _CONSOLE_CURSOR_INFO;
struct _MEMORYSTATUSEX;
struct _POWER_SESSION_WINLOGON;
enum POWER_USER_PRESENCE_TYPE;
struct _ENLISTMENT_CRM_INFORMATION;
struct _LOAD_DLL_DEBUG_INFO;
struct _ENCLAVE_CREATE_INFO_VBS_BASIC;
struct _POWER_SESSION_TIMEOUTS;
struct tagVS_FIXEDFILEINFO;
struct _SYSTEM_SCOPED_POLICY_ID_ACE;
struct _TRANSACTIONMANAGER_LOG_INFORMATION;
union _ULARGE_INTEGER;
enum JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS;
struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION;
struct HMENU__;
struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;
struct _SYSTEM_CALL_COUNT_INFORMATION;
struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY;
enum _ACL_INFORMATION_CLASS;
struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION;
struct _SERVICE_DELAYED_AUTO_START_INFO;
struct _GROUP_AFFINITY;
struct _KCRM_TRANSACTION_BLOB;
struct HMONITOR__;
struct _TP_IO;
enum _SharedVirtualDiskHandleState;
struct _TOKEN_BNO_ISOLATION_INFORMATION;
struct _ACCESS_ALLOWED_CALLBACK_ACE;
struct _FLOAT128;
struct _FILE_NOTIFY_FULL_INFORMATION;
struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
struct _WOW64_LDT_ENTRY;
union _DISPATCHER_CONTEXT_NONVOLREG_ARM64;
struct _DISPATCHER_CONTEXT_ARM64;
struct _STORAGE_LB_PROVISIONING_MAP_RESOURCES;
struct _RTL_CONDITION_VARIABLE;
struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES;
struct _currencyfmtA;
struct _PROCESSOR_NUMBER;
struct _SID;
struct _TOKEN_PRIMARY_GROUP;
struct _TOKEN_USER_CLAIMS;
struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3;
enum COMPARTMENT_ID;
enum _CPU_SET_INFORMATION_TYPE;
union _LARGE_INTEGER;
struct _GENERIC_MAPPING;
struct _STORAGE_DEVICE_NUMBER;
struct _IMAGE_RUNTIME_FUNCTION_ENTRY;
struct _LIST_ENTRY;
struct _SINGLE_LIST_ENTRY;
struct LIST_ENTRY32;
struct _TOKEN_DEVICE_CLAIMS;
struct LIST_ENTRY64;
enum _TRANSACTION_OUTCOME;
struct _SCOPE_TABLE_AMD64;
struct _SCOPE_TABLE_ARM64;
struct _MESSAGE_RESOURCE_ENTRY;
struct _CACHE_DESCRIPTOR;
union _ARM64_NT_NEON128;
enum SERVICE_SHARED_DIRECTORY_TYPE;
struct _M128A;
struct _SYSTEM_POOL_ZEROING_INFORMATION;
struct _WOW64_CONTEXT;
struct _XSAVE_CET_U_FORMAT;
struct _ARM64EC_NT_CONTEXT;
enum DPI_AWARENESS;
struct _XSAVE_AREA_HEADER;
struct _XSAVE_AREA;
struct _SCOPE_TABLE_ARM;
struct tagUPDATELAYEREDWINDOWINFO;
struct _SECURITY_CAPABILITIES;
struct _UNWIND_HISTORY_TABLE;
struct _IMAGE_OS2_HEADER;
struct _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY;
struct _IMAGE_DOS_HEADER;
enum _MONITOR_DISPLAY_STATE;
struct _EXCEPTION_POINTERS;
struct _KNONVOLATILE_CONTEXT_POINTERS;
enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;
enum _TRANSACTIONMANAGER_INFORMATION_CLASS;
enum POWER_ACTION;
struct _ARM64_NT_CONTEXT;
struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
struct HKL__;
enum WIN32_MEMORY_PARTITION_INFORMATION_CLASS;
struct _POWER_MONITOR_INVOCATION;
enum POWER_MONITOR_REQUEST_REASON;
struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;
struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64;
struct _LDT_ENTRY;
struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION;
enum _ENLISTMENT_INFORMATION_CLASS;
struct _WOW64_FLOATING_SAVE_AREA;
struct HLSURF__;
struct _GET_MEDIA_TYPES;
struct _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION;
struct _EXIT_PROCESS_DEBUG_INFO;
struct _WOW64_DESCRIPTOR_TABLE_ENTRY;
struct _SCRUB_DATA_INPUT;
enum _STORAGE_SET_TYPE;
struct _SCRUB_PARITY_EXTENT;
struct _EXCEPTION_RECORD32;
struct tagWNDCLASSEXW;
struct _SERVICE_FAILURE_ACTIONS_FLAG;
struct _EXCEPTION_RECORD64;
struct PPM_WMI_PERF_STATE;
enum _USER_ACTIVITY_PRESENCE;
struct _STORAGE_PROPERTY_QUERY;
struct _TEB;
struct _PROCESS_MACHINE_INFORMATION;
struct _HARDWARE_COUNTER_DATA;
struct _SHARED_VIRTUAL_DISK_SUPPORT;
struct _LUID_AND_ATTRIBUTES;
struct _SID_IDENTIFIER_AUTHORITY;
struct _REPARSE_GUID_DATA_BUFFER;
enum _STREAM_INFO_LEVELS;
struct _SYSTEM_FIRMWARE_TABLE_HANDLER;
union _SE_SID;
struct _SYSTEM_SESSION_POOLTAG_INFORMATION;
enum _SID_NAME_USE;
struct _SID_AND_ATTRIBUTES;
struct _OVERLAPPED_ENTRY;
struct _GROUP_RELATIONSHIP;
struct _CONSOLE_SCREEN_BUFFER_INFOEX;
struct _ACL;
struct _IMAGE_BOUND_IMPORT_DESCRIPTOR;
struct MENUITEMTEMPLATEHEADER;
struct _ACE_HEADER;
struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
struct _ACCESS_ALLOWED_ACE;
struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
struct _ACCESS_DENIED_ACE;
struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
struct _SYSTEM_AUDIT_ACE;
struct _EXIT_THREAD_DEBUG_INFO;
struct _SYSTEM_ALARM_ACE;
enum MEM_SECTION_EXTENDED_PARAMETER_TYPE;
struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET;
struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE;
struct _PROCESS_HEAP_ENTRY;
struct _SYSTEM_MANDATORY_LABEL_ACE;
struct _SYSTEM_PROCESS_TRUST_LABEL_ACE;
struct _SYSTEM_ACCESS_FILTER_ACE;
struct _ACCESS_DENIED_OBJECT_ACE;
struct _SYSTEM_CPU_SET_INFORMATION;
struct _SYSTEM_AUDIT_OBJECT_ACE;
struct _EXCEPTION_DEBUG_INFO;
struct _SYSTEM_ALARM_OBJECT_ACE;
struct _TRANSACTIONMANAGER_BASIC_INFORMATION;
struct _NT_TIB64;
struct _ACCESS_DENIED_CALLBACK_ACE;
enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS;
struct _SYSTEM_AUDIT_CALLBACK_ACE;
enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS;
struct HDESK__;
struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE;
struct _TAPE_PREPARE;
struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
struct _PROCESSOR_RELATIONSHIP;
struct _MEMORY_BASIC_INFORMATION64;
struct _ACL_SIZE_INFORMATION;
enum _JOBOBJECTINFOCLASS;
struct _SECURITY_DESCRIPTOR_RELATIVE;
struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION;
struct HBRUSH__;
struct _SECURITY_OBJECT_AI_PARAMS;
struct _OBJECT_TYPE_LIST;
struct _SYSTEM_GDI_DRIVER_INFORMATION;
struct _PRIVILEGE_SET;
struct ANON_OBJECT_HEADER_BIGOBJ;
enum _PROCESS_MITIGATION_POLICY;
enum _ACCESS_REASON_TYPE;
struct _ACCESS_REASONS;
struct _IMAGE_SYMBOL_EX;
struct _SE_SECURITY_DESCRIPTOR;
struct _NUMA_NODE_RELATIONSHIP;
struct _SE_ACCESS_REQUEST;
struct _SE_ACCESS_REPLY;
struct _SYSTEM_VERIFIER_INFORMATION;
struct tagCOMPOSITIONFORM;
enum _TOKEN_TYPE;
enum _TOKEN_ELEVATION_TYPE;
enum _POWER_REQUEST_TYPE;
struct _TOKEN_USER;
enum tagBINDSTRING;
struct _TOKEN_GROUPS;
enum _IMAGE_POLICY_ENTRY_TYPE;
struct _SHUFFLE_FILE_DATA;
struct _TOKEN_PRIVILEGES;
struct _TOKEN_OWNER;
struct _IMAGE_DEBUG_MISC;
struct _TOKEN_DEFAULT_DACL;
struct _IMAGE_SEPARATE_DEBUG_HEADER;
struct _IMAGE_TLS_DIRECTORY64;
struct _TOKEN_GROUPS_AND_PRIVILEGES;
struct _TOKEN_LINKED_TOKEN;
enum TOOLTIP_DISMISS_FLAGS;
struct _tagDATAINFO;
struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY;
struct _TOKEN_MANDATORY_LABEL;
struct _LDR_SOFTWARE_ENCLAVE;
struct _TOKEN_STATISTICS;
enum _DEVICE_POWER_STATE;
struct _TOKEN_CONTROL;
struct _TOKEN_ORIGIN;
struct _POWER_IDLE_RESILIENCY;
struct _ACTIVATION_CONTEXT_QUERY_INDEX;
enum _MANDATORY_LEVEL;
enum _POWER_MONITOR_REQUEST_TYPE;
struct _TOKEN_APPCONTAINER_INFORMATION;
struct _nlsversioninfoex;
struct _TOKEN_SID_INFORMATION;
struct _ENCLAVE_INIT_INFO_VBS_BASIC;
enum __MIDL_IMonikerProp_0001;
struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;
struct tagRAWINPUTHEADER;
struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
struct _CLAIM_SECURITY_ATTRIBUTE_V1;
union _IMAGE_AUX_SYMBOL_EX;
struct _SECURITY_QUALITY_OF_SERVICE;
struct _ENCLAVE_CREATE_INFO_VBS;
enum _SE_IMAGE_SIGNATURE_TYPE;
struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;
struct _JOB_SET_ARRAY;
struct _EXCEPTION_REGISTRATION_RECORD;
enum _RTL_SYSTEM_GLOBAL_DATA_ID;
struct _NT_TIB;
enum LATENCY_TIME;
struct _IMAGE_THUNK_DATA32;
struct _NT_TIB32;
struct _REARRANGE_FILE_DATA;
struct tagCHANGEFILTERSTRUCT;
struct _UMS_CREATE_THREAD_ATTRIBUTES;
struct _COMPONENT_FILTER;
union _FILE_SEGMENT_ELEMENT;
union _IMAGE_AUX_SYMBOL;
struct IMAGE_AUX_SYMBOL_TOKEN_DEF;
struct IXMLDOMProcessingInstruction;
struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
struct _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE;
struct _XSTATE_FEATURE;
struct _QUOTA_LIMITS;
struct _SYSTEM_POWER_POLICY;
enum ARM64_FNPDATA_CR;
enum _FIRMWARE_TYPE;
struct _IO_COUNTERS;
enum _HEAP_INFORMATION_CLASS;
enum _HARDWARE_COUNTER_TYPE;
enum _PROCESSOR_CACHE_TYPE;
struct _STORAGE_DEVICE_RESILIENCY_DESCRIPTOR;
struct _PROCESS_MITIGATION_ASLR_POLICY;
enum _COMPUTER_NAME_FORMAT;
struct _PROCESS_MITIGATION_DEP_POLICY;
struct tagSOUNDSENTRYA;
struct _PROCESS_MITIGATION_SEHOP_POLICY;
struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
struct IXMLDOMParseError;
struct _ENCLAVE_INIT_INFO_SGX;
struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE;
struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
struct _MEMORY_BASIC_INFORMATION32;
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
struct PROCESSOR_IDLESTATE_POLICY;
struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;
struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY;
enum MEM_EXTENDED_PARAMETER_TYPE;
struct _IMAGE_DATA_DIRECTORY;
struct _ImageArchitectureHeader;
struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY;
struct DLGITEMTEMPLATE;
enum _MEM_DEDICATED_ATTRIBUTE_TYPE;
struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY;
struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY;
struct _POWER_PLATFORM_INFORMATION;
struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY;
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION;
struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY;
struct PPM_PERFSTATE_EVENT;
struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY;
struct _JOBOBJECT_IO_ATTRIBUTION_STATS;
struct PPM_WMI_IDLE_STATES_EX;
struct _PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY;
struct _IMAGE_DYNAMIC_RELOCATION32;
struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2;
struct _APPLICATIONLAUNCH_SETTING_VALUE;
struct _JOBOBJECT_BASIC_LIMIT_INFORMATION;
enum PIDMSI_STATUS_VALUE;
struct tagTYPEDESC;
enum _LOGICAL_PROCESSOR_RELATIONSHIP;
struct _RTL_BARRIER;
struct _JOBOBJECT_BASIC_UI_RESTRICTIONS;
struct _OSVERSIONINFOA;
struct _MESSAGE_RESOURCE_DATA;
struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
struct tagWINDOWPOS;
struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
struct _JOBOBJECT_JOBSET_INFORMATION;
struct _CACHE_RELATIONSHIP;
struct PPM_IDLESTATE_EVENT;
enum _JOBOBJECT_RATE_CONTROL_TOLERANCE;
enum _SERVERSILO_STATE;
struct _IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION;
struct PPM_IDLE_STATE_ACCOUNTING;
struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2;
struct _LDR_DLL_LOADED_NOTIFICATION_DATA;
enum __MIDL_IInternetSecurityManager_0002;
struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION;
struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION;
struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2;
struct _RTL_CRITICAL_SECTION;
struct _cpinfo;
struct _NETRESOURCEW;
struct _SILOOBJECT_BASIC_INFORMATION;
struct tagDROPSTRUCT;
struct _SERVERSILO_BASIC_INFORMATION;
struct _PROCESSOR_GROUP_INFO;
struct tagINPUT;
enum _RTL_UMS_SCHEDULER_REASON;
struct _SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION;
struct _IMAGE_NT_HEADERS64;
struct _XSTATE_CONFIGURATION;
struct _CFG_CALL_TARGET_INFO;
struct _MEM_ADDRESS_REQUIREMENTS;
struct tagPOINTER_DEVICE_INFO;
struct MEM_EXTENDED_PARAMETER;
enum _OS_DEPLOYEMENT_STATE_VALUES;
struct _ENCLAVE_CREATE_INFO_SGX;
struct _tagAUTHENTICATEINFO;
struct _IMAGE_DEBUG_DIRECTORY;
struct _ENCLAVE_LOAD_DATA_VBS_BASIC;
struct _MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE;
struct HRGN__;
struct _FILE_ID_128;
struct _FILE_NOTIFY_INFORMATION;
struct HSTR__;
struct IMAGE_COR20_HEADER;
enum tagXMLEMEM_TYPE;
struct PROCESSOR_IDLESTATE_INFO;
struct _SCRUB_DATA_OUTPUT;
enum _SharedVirtualDiskSupportType;
struct tagGUITHREADINFO;
struct _ImageArchitectureEntry;
enum POWER_SETTING_ALTITUDE;
struct _NETWORK_APP_INSTANCE_EA;
struct _IMAGE_HOT_PATCH_INFO;
struct CM_Power_Data_s;
struct _IMAGE_DYNAMIC_RELOCATION_TABLE;
enum POWER_INFORMATION_LEVEL;
struct _POWER_USER_PRESENCE;
enum _TRANSACTION_INFORMATION_CLASS;
struct _POWER_SESSION_CONNECT;
struct _POWER_SESSION_RIT_STATE;
struct tagMINIMIZEDMETRICS;
struct PPM_THERMALCHANGE_EVENT;
struct _IMAGE_HOT_PATCH_HASHES;
struct _RESUME_PERFORMANCE;
struct SET_POWER_SETTING_VALUE;
enum tagOLECONTF;
struct NOTIFY_USER_POWER_SETTING;
struct _RTL_SRWLOCK;
enum _POWER_PLATFORM_ROLE;
struct HKEY__;
struct BATTERY_REPORTING_SCALE;
struct _IMAGE_POLICY_ENTRY;
struct PPM_WMI_LEGACY_PERFSTATE;
struct PPM_WMI_IDLE_STATE;
struct tagPELARRAY;
struct PPM_WMI_IDLE_STATES;
struct PPM_WMI_PERF_STATES;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct _REASON_CONTEXT;
struct PPM_WMI_PERF_STATES_EX;
struct HWND__;
struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
struct PPM_IDLE_ACCOUNTING;
struct PPM_IDLE_STATE_BUCKET_EX;
struct PPM_IDLE_STATE_ACCOUNTING_EX;
struct _MESSAGE_RESOURCE_BLOCK;
struct tagWTSSESSION_NOTIFICATION;
struct PPM_IDLE_ACCOUNTING_EX;
struct PPM_PERFSTATE_DOMAIN_EVENT;
struct tagEMRSETCOLORADJUSTMENT;
struct PPM_THERMAL_POLICY_EVENT;
struct POWER_ACTION_POLICY;
union _SLIST_HEADER;
struct ICreateTypeLib2;
struct SYSTEM_POWER_LEVEL;
union _RTL_RUN_ONCE;
struct _TP_POOL_STACK_INFORMATION;
struct _PROCESSOR_POWER_POLICY_INFO;
struct _CREATEFILE2_EXTENDED_PARAMETERS;
struct _PROCESSOR_POWER_POLICY;
struct PROCESSOR_PERFSTATE_POLICY;
struct _TRANSACTION_BIND_INFORMATION;
struct _TRANSACTION_ENLISTMENTS_INFORMATION;
struct _ADMINISTRATOR_POWER_POLICY;
enum tagCOMSD;
enum _HIBERFILE_BUCKET_SIZE;
struct HPALETTE__;
struct _OSVERSIONINFOEXW;
struct _HIBERFILE_BUCKET;
struct _wireVARIANT;
struct HWINEVENTHOOK__;
struct SYSTEM_POWER_CAPABILITIES;
struct _TP_POOL;
struct SYSTEM_BATTERY_STATE;
struct HUMPD__;
struct tagRECT;
struct _ACTIVATION_CONTEXT;
struct _IMAGE_VXD_HEADER;
struct _NV_MEMORY_RANGE;
struct _IMAGE_FILE_HEADER;
struct _STARTUPINFOW;
enum _KTMOBJECT_TYPE;
struct _IMAGE_OPTIONAL_HEADER;
struct ITypeLibRegistration;
struct _IMAGE_ROM_OPTIONAL_HEADER;
struct _IMAGE_OPTIONAL_HEADER64;
struct _IMAGE_ENCLAVE_IMPORT;
struct _IMAGE_NT_HEADERS;
struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
struct _IMAGE_ROM_HEADERS;
struct _TAPE_CREATE_PARTITION;
struct ANON_OBJECT_HEADER;
struct ANON_OBJECT_HEADER_V2;
struct _IMAGE_SECTION_HEADER;
struct _POINTL;
enum _CM_ERROR_CONTROL_TYPE;
struct _IMAGE_SYMBOL;
enum _CM_SERVICE_NODE_TYPE;
struct DISPLAYCONFIG_PATH_TARGET_INFO;
struct _WIN32_MEMORY_RANGE_ENTRY;
struct _TRANSACTION_NOTIFICATION;
struct IMPORT_OBJECT_HEADER;
struct _CREATE_THREAD_DEBUG_INFO;
enum IMPORT_OBJECT_TYPE;
struct _FLAG_STGMEDIUM;
struct _TRANSACTION_PROPERTIES_INFORMATION;
struct _SUPPORTED_OS_INFO;
struct _KCRM_MARSHAL_HEADER;
struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
enum _TAPE_DRIVE_PROBLEM_TYPE;
struct tagAXISINFOW;
enum IMAGE_AUX_SYMBOL_TYPE;
struct _IMAGE_RELOCATION;
struct _TRANSACTION_BASIC_INFORMATION;
struct _IMAGE_LINENUMBER;
struct tagEMRCREATEMONOBRUSH;
struct _IMAGE_DYNAMIC_RELOCATION32_V2;
struct _IMAGE_BASE_RELOCATION;
struct tagCLIPDATA;
struct _IMAGE_ARCHIVE_MEMBER_HEADER;
struct tagEMRSCALEVIEWPORTEXTEX;
struct _IMAGE_EXPORT_DIRECTORY;
struct _IMAGE_IMPORT_BY_NAME;
struct _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION;
struct _IMAGE_THUNK_DATA64;
struct _IMAGE_HOT_PATCH_BASE;
struct _TAPE_WRITE_MARKS;
struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
struct _IMAGE_TLS_DIRECTORY32;
struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
enum ACTCTX_COMPATIBILITY_ELEMENT_TYPE;
struct tagPOINT;
struct _IMAGE_IMPORT_DESCRIPTOR;
struct _IMAGE_LOAD_CONFIG_DIRECTORY32;
struct _IMAGE_BOUND_FORWARDER_REF;
struct DISK_SPACE_INFORMATION;
enum _CM_SERVICE_LOAD_TYPE;
struct _IMAGE_DELAYLOAD_DESCRIPTOR;
struct _BY_HANDLE_FILE_INFORMATION;
struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
struct _IMAGE_RESOURCE_DIRECTORY;
struct _TAPE_SET_POSITION;
struct DPI_AWARENESS_CONTEXT__;
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY;
struct _IMAGE_RESOURCE_DIRECTORY_STRING;
struct _IMAGE_FUNCTION_OVERRIDE_HEADER;
struct _EVENTLOGRECORD;
struct _IMAGE_RESOURCE_DIR_STRING_U;
struct tagPOINTFX;
struct _IMAGE_RESOURCE_DATA_ENTRY;
struct _IMAGE_BDD_INFO;
struct _PROCESS_POWER_THROTTLING_STATE;
struct _PROCESS_MEMORY_EXHAUSTION_INFO;
struct _PROCESS_LEAP_SECOND_INFO;
struct _IMAGE_DYNAMIC_RELOCATION64;
struct _APC_CALLBACK_DATA;
struct _IMAGE_DYNAMIC_RELOCATION64_V2;
struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
struct tagCBT_CREATEWNDA;
struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION;
struct IDropTarget;
struct HACCEL__;
struct tagENUMUILANG;
struct _IMAGE_BDD_DYNAMIC_RELOCATION;
struct _IMAGE_LOAD_CONFIG_DIRECTORY64;
enum _THREAD_INFORMATION_CLASS;
struct _APP_MEMORY_INFORMATION;
struct _THREAD_POWER_THROTTLING_STATE;
struct HWINSTA__;
struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY;
struct tagEMREOF;
enum ARM64_FNPDATA_FLAGS;
struct _DEBUG_EVENT;
union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA;
struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
struct HSPRITE__;
struct _IMAGE_ENCLAVE_CONFIG32;
struct _IMAGE_ENCLAVE_CONFIG64;
struct _UNLOAD_DLL_DEBUG_INFO;
struct _TP_CALLBACK_INSTANCE;
struct _IMAGE_COFF_SYMBOLS_HEADER;
struct _FPO_DATA;
enum _PROCESS_MEMORY_EXHAUSTION_TYPE;
struct _NON_PAGED_DEBUG_INFO;
enum IMPORT_OBJECT_NAME_TYPE;
struct _HEAP_SUMMARY;
struct _KTMOBJECT_CURSOR;
enum ReplacesCorHdrNumericDefines;
struct _UNWIND_HISTORY_TABLE_ENTRY;
enum _FINDEX_SEARCH_OPS;
enum _GET_FILEEX_INFO_LEVELS;
struct _SLIST_ENTRY;
struct _TAPE_SET_MEDIA_PARAMETERS;
struct HMETAFILE__;
struct tagSIZE;
struct FILE_ID_DESCRIPTOR;
struct _OSVERSIONINFOW;
struct _TRANSACTIONMANAGER_OLDEST_INFORMATION;
struct IEnumSTATPROPSETSTG;
struct _OSVERSIONINFOEXA;
struct _MAXVERSIONTESTED_INFO;
struct tagGLYPHSET;
enum _RTL_UMS_THREAD_INFO_CLASS;
struct _WIN32_FIND_DATAA;
struct _SYSTEMTIME;
struct CORRELATION_VECTOR;
struct HENHMETAFILE__;
struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
struct HICON__;
enum _IMAGE_POLICY_ID;
struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
struct _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION;
struct _IMAGE_POLICY_METADATA;
struct _OUTLINETEXTMETRICA;
struct HCOLORSPACE__;
struct HGLRC__;
struct tagENUMTEXTMETRICW;
struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION;
struct _ENLISTMENT_BASIC_INFORMATION;
struct tagACTCTX_SECTION_KEYED_DATA_2600;
enum _FINDEX_INFO_LEVELS;
enum _ACTIVATION_CONTEXT_INFO_CLASS;
struct _TAPE_GET_DRIVE_PARAMETERS;
struct tagTTPOLYCURVE;
struct _ASSEMBLY_FILE_DETAILED_INFORMATION;
union tagBINDPTR;
struct _EVENTSFORLOGFILE;
enum ACTCTX_REQUESTED_RUN_LEVEL;
struct PROCESS_PROTECTION_LEVEL_INFORMATION;
struct _userBITMAP;
struct _COMPATIBILITY_CONTEXT_ELEMENT;
enum _QUEUE_USER_APC_FLAGS;
struct _PROC_THREAD_ATTRIBUTE_LIST;
struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION;
struct _PERFORMANCE_DATA;
enum DISPLAYCONFIG_SCALING;
struct _FILE_REMOTE_PROTOCOL_INFO;
struct _PACKEDEVENTINFO;
struct _SYSTEM_INFO;
struct _MEMORY_PRIORITY_INFORMATION;
enum _PROCESS_INFORMATION_CLASS;
enum OFFER_PRIORITY;
struct _TAPE_GET_POSITION;
struct tagXFORM;
struct _OUTPUT_DEBUG_STRING_INFO;
struct _TAPE_SET_DRIVE_PARAMETERS;
struct _TAPE_GET_MEDIA_PARAMETERS;
struct _TAPE_WMI_OPERATIONS;
enum _MEMORY_RESOURCE_NOTIFICATION_TYPE;
struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
struct tagEMRMODIFYWORLDTRANSFORM;
enum _MACHINE_ATTRIBUTES;
struct _KCRM_PROTOCOL_BLOB;
enum _TRANSACTION_STATE;
struct _STARTUPINFOA;
struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION;
struct _WIN32_FIND_STREAM_DATA;
struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION;
struct _FILE_END_OF_FILE_INFO;
struct ITimeAndNoticeControl;
enum _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS;
struct _TRANSACTION_ENLISTMENT_PAIR;
enum _FILE_INFO_BY_HANDLE_CLASS;
struct _OVERLAPPED;
struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
struct _RESOURCEMANAGER_BASIC_INFORMATION;
struct _RESOURCEMANAGER_COMPLETION_INFORMATION;
enum _RESOURCEMANAGER_INFORMATION_CLASS;
struct _WIN32_FIND_DATAW;
struct _TRANSACTION_LIST_ENTRY;
struct _TRANSACTION_LIST_INFORMATION;
struct _NDR_USER_MARSHAL_INFO;
struct _CREATE_PROCESS_DEBUG_INFO;
struct IEnumMoniker;
enum _TP_CALLBACK_PRIORITY;
struct _TP_CLEANUP_GROUP;
struct _TP_CALLBACK_ENVIRON_V3;
struct tagHW_PROFILE_INFOA;
struct _TP_WORK;
struct _TP_TIMER;
struct _REDIRECTION_FUNCTION_DESCRIPTOR;
struct _TP_WAIT;
struct _COMMCONFIG;
struct HINSTANCE__;
struct HRSRC__;
struct HTASK__;
struct _SECURITY_ATTRIBUTES;
struct HHOOK__;
struct _RECTL;
struct HBITMAP__;
union __MIDL_IWinTypes_0005;
enum tagSTGC;
struct HDC__;
struct HFONT__;
struct HPEN__;
struct _FILE_ALIGNMENT_INFO;
struct IAsyncManager;
struct tagPOINTS;
struct APP_LOCAL_DEVICE_ID;
enum DPI_HOSTING_BEHAVIOR;
struct IPersistStream;
struct tagEXTLOGFONTA;
struct _FILE_STREAM_INFO;
struct IClassActivator;
enum tagMSHCTX;
struct _WIN32_FILE_ATTRIBUTE_DATA;
struct tagEMRRESIZEPALETTE;
enum _APTTYPEQUALIFIER;
struct _PROCESS_INFORMATION;
struct IWaitMultiple;
enum WIN32_MEMORY_INFORMATION_CLASS;
struct WIN32_MEMORY_PARTITION_INFORMATION;
struct ISupportAllowLowerTrustActivation;
struct _ENUM_SERVICE_STATUSW;
struct tagEMRRESTOREDC;
enum DISPLAYCONFIG_MODE_INFO_TYPE;
struct _SERVICE_PREFERRED_NODE_INFO;
struct tagABORTPATH;
struct _REDIRECTION_DESCRIPTOR;
struct _POINTFLOAT;
struct tagEMRSETDIBITSTODEVICE;
struct tagAUDIODESCRIPTION;
enum FILE_WRITE_FLAGS;
enum FILE_FLUSH_MODE;
struct _SERVICE_STATUS;
struct tagMONITORINFOEXW;
struct _COMMPROP;
struct _COMSTAT;
struct tagKBDLLHOOKSTRUCT;
struct _DCB;
struct _COMMTIMEOUTS;
struct tagEMRFILLPATH;
struct DISPLAYCONFIG_TARGET_BASE_TYPE;
struct _MEMORYSTATUS;
struct _DEVICE_MEDIA_INFO;
struct tagEMRSETMAPPERFLAGS;
struct _TRIVERTEX;
struct _JIT_DEBUG_INFO;
struct tagENUMLOGFONTA;
struct _OFSTRUCT;
enum DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY;
struct _UMS_SCHEDULER_STARTUP_INFO;
struct tagEMRGDICOMMENT;
struct _UMS_SYSTEM_THREAD_INFORMATION;
struct tagEMRSETCOLORSPACE;
enum _DEP_SYSTEM_POLICY_TYPE;
struct _REMOTE_NAME_INFOW;
struct _WIN32_STREAM_ID;
struct _STORAGE_DESCRIPTOR_HEADER;
struct _DOCINFOA;
struct _STARTUPINFOEXA;
struct _STARTUPINFOEXW;
struct _QUERY_SERVICE_LOCK_STATUSW;
enum _PROC_THREAD_ATTRIBUTE_NUM;
struct _SERVICE_DESCRIPTIONW;
struct tagENUMLOGFONTEXA;
enum _COPYFILE2_MESSAGE_TYPE;
enum _COPYFILE2_MESSAGE_ACTION;
struct tagLOGPALETTE;
enum _COPYFILE2_COPY_PHASE;
struct tagEMRSETWORLDTRANSFORM;
struct COPYFILE2_MESSAGE;
struct tagDIBSECTION;
struct tagEXTLOGFONTW;
struct _SERVICE_NOTIFY_2W;
struct tagEMREXTFLOODFILL;
struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO;
struct COPYFILE2_EXTENDED_PARAMETERS;
struct COPYFILE2_EXTENDED_PARAMETERS_V2;
struct _EVENTLOG_FULL_INFORMATION;
struct _OPERATION_START_PARAMETERS;
struct _OPERATION_END_PARAMETERS;
struct tagHW_PROFILE_INFOW;
struct tagEMRBITBLT;
struct _TIME_ZONE_INFORMATION;
struct _TIME_DYNAMIC_ZONE_INFORMATION;
struct _SYSTEM_POWER_STATUS;
struct tagACTCTXA;
struct tagACTCTXW;
struct _FOCUS_EVENT_RECORD;
struct tagEMRANGLEARC;
enum SERVICE_REGISTRY_STATE_TYPE;
struct tagTEXTMETRICA;
struct _STORAGE_RPMB_DESCRIPTOR;
struct tagEMREXTTEXTOUTA;
struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
struct tagEMRPOLYTEXTOUTA;
struct tagEVENTMSG;
struct tagACTCTX_SECTION_KEYED_DATA;
struct _ACTIVATION_CONTEXT_BASIC_INFORMATION;
struct _RGNDATAHEADER;
struct value_entW;
struct tagLOGCOLORSPACEW;
struct _FILE_BASIC_INFO;
struct tagNEWTEXTMETRICEXA;
struct _FILE_STANDARD_INFO;
struct _FILE_NAME_INFO;
struct tagGCP_RESULTSW;
struct tagREGISTERWORDW;
struct tagENHMETAHEADER;
struct _FILE_CASE_SENSITIVE_INFO;
struct tagPIXELFORMATDESCRIPTOR;
struct _FILE_RENAME_INFO;
struct tagEMREXTCREATEPEN;
struct _FILE_ALLOCATION_INFO;
struct tagLOGBRUSH32;
struct _FILE_COMPRESSION_INFO;
struct tagCIEXYZ;
struct _SERVICE_NOTIFY_1;
struct _FILE_ATTRIBUTE_TAG_INFO;
struct _FILE_DISPOSITION_INFO;
struct tagFONTSIGNATURE;
struct _FILE_DISPOSITION_INFO_EX;
struct _FILE_ID_BOTH_DIR_INFO;
struct _INPUT_RECORD;
struct _FIXED;
struct _FILE_FULL_DIR_INFO;
struct tagNEWTEXTMETRICEXW;
enum _PRIORITY_HINT;
struct _FILE_IO_PRIORITY_HINT_INFO;
struct tagEMRELLIPSE;
struct tagLOGBRUSH;
struct _FILE_STORAGE_INFO;
struct DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION;
struct _FILE_ID_INFO;
struct tagRGBQUAD;
struct _FILE_ID_EXTD_DIR_INFO;
struct _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO;
struct tagPOLYTEXTA;
struct _MENU_EVENT_RECORD;
enum _STORAGE_BUS_TYPE;
enum _FILE_ID_TYPE;
struct val_context;
struct tagRAWHID;
struct _DRAWPATRECT;
struct tagHANDLETABLE;
struct _PSINJECTDATA;
struct _PSFEATURE_OUTPUT;
struct tagMETARECORD;
struct _PSFEATURE_CUSTPAPER;
struct tagBITMAP;
struct tagRGBTRIPLE;
struct tagEMRSETMITERLIMIT;
struct tagEMRTEXT;
struct tagICEXYZTRIPLE;
struct tagLOGCOLORSPACEA;
struct _GLYPHMETRICSFLOAT;
struct tagWCRANGE;
struct tagBITMAPCOREHEADER;
struct tagBITMAPINFOHEADER;
struct BITMAPV4HEADER;
struct BITMAPV5HEADER;
struct tagBITMAPINFO;
struct tagEMROFFSETCLIPRGN;
struct tagBITMAPCOREINFO;
struct _DEVICE_COPY_OFFLOAD_DESCRIPTOR;
struct _ENUM_SERVICE_STATUS_PROCESSA;
struct tagEMRNAMEDESCAPE;
struct tagBITMAPFILEHEADER;
struct tagCBTACTIVATESTRUCT;
enum _STORAGE_ASSOCIATION_TYPE;
struct tagCHARSETINFO;
struct tagLOCALESIGNATURE;
struct tagMETAFILEPICT;
struct tagMETAHEADER;
struct _TAPE_GET_STATISTICS;
struct tagEMREXTESCAPE;
struct tagENHMETARECORD;
struct _WGLSWAP;
struct tagTEXTMETRICW;
struct _QUERY_SERVICE_LOCK_STATUSA;
struct _GRADIENT_RECT;
struct tagCOLORCORRECTPALETTE;
struct tagNEWTEXTMETRICA;
struct tagNEWTEXTMETRICW;
struct tagLAYERPLANEDESCRIPTOR;
struct tagCOLORADJUSTMENT;
struct _FILEMUIINFO;
enum _SC_STATUS_TYPE;
struct _STORAGE_IDENTIFIER;
struct _SERVICE_PRESHUTDOWN_INFO;
struct tagEMRGRADIENTFILL;
struct tagLOGPEN;
struct tagEXTLOGPEN;
struct tagEXTLOGPEN32;
struct tagEMRSTRETCHBLT;
struct tagPALETTEENTRY;
struct tagLOGFONTA;
struct tagLOGFONTW;
struct _ENUM_SERVICE_STATUS_PROCESSW;
struct tagEMRPOLYLINE;
struct tagENUMLOGFONTW;
struct MENUITEMTEMPLATE;
struct tagENUMLOGFONTEXW;
struct _DISCDLGSTRUCTW;
struct tagPANOSE;
struct tagEMRPLGBLT;
struct value_entA;
struct _devicemodeA;
struct _RASTERIZER_STATUS;
struct _devicemodeW;
struct _DISPLAY_DEVICEA;
struct _DISPLAY_DEVICEW;
struct DISPLAYCONFIG_RATIONAL;
struct _MODEMSETTINGS;
struct _MODEMDEVCAPS;
enum DISPLAYCONFIG_SCANLINE_ORDERING;
struct DISPLAYCONFIG_2DREGION;
struct tagEMREXTCREATEFONTINDIRECTW;
enum DISPLAYCONFIG_ROTATION;
enum DISPLAYCONFIG_PIXELFORMAT;
struct DISPLAYCONFIG_SOURCE_MODE;
struct DISPLAYCONFIG_TARGET_MODE;
struct DISPLAYCONFIG_DESKTOP_IMAGE_INFO;
struct DISPLAYCONFIG_MODE_INFO;
struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
struct DISPLAYCONFIG_PATH_SOURCE_INFO;
struct _SC_NOTIFICATION_REGISTRATION;
struct _GRADIENT_TRIANGLE;
struct DISPLAYCONFIG_PATH_INFO;
enum DISPLAYCONFIG_TOPOLOGY_ID;
enum DISPLAYCONFIG_DEVICE_INFO_TYPE;
struct DISPLAYCONFIG_DEVICE_INFO_HEADER;
struct tagEMRPOLYDRAW;
struct DISPLAYCONFIG_SOURCE_DEVICE_NAME;
struct tagEMRPOLYPOLYLINE;
struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS;
struct HIMCC__;
struct DISPLAYCONFIG_TARGET_DEVICE_NAME;
struct DISPLAYCONFIG_TARGET_PREFERRED_MODE;
struct DISPLAYCONFIG_ADAPTER_NAME;
struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE;
enum _DISPLAYCONFIG_COLOR_ENCODING;
struct _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE;
struct _DISPLAYCONFIG_SDR_WHITE_LEVEL;
struct tagMONITORINFOEXA;
struct _RGNDATA;
struct _ABC;
enum tagAR_STATE;
struct _ABCFLOAT;
struct _OUTLINETEXTMETRICW;
struct tagSCROLLINFO;
struct tagMSLLHOOKSTRUCT;
struct _QUERY_BAD_RANGES_INPUT_RANGE;
struct tagEMRSETICMPROFILE;
struct tagPOLYTEXTW;
struct tagGESTURECONFIG;
struct _MAT2;
struct _GLYPHMETRICS;
struct tagCWPSTRUCT;
struct tagTTPOLYGONHEADER;
struct tagGCP_RESULTSA;
struct tagGETCLIPBMETADATA;
struct tagEMRCREATECOLORSPACE;
enum DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS;
struct tagDESIGNVECTOR;
struct tagAXISINFOA;
struct tagAXESLISTA;
struct tagEMRALPHABLEND;
enum _FILE_STORAGE_TIER_CLASS;
struct tagAXESLISTW;
struct tagEMRTRANSPARENTBLT;
struct tagENUMLOGFONTEXDVA;
struct tagENUMLOGFONTEXDVW;
struct tagEMRMASKBLT;
struct tagENUMTEXTMETRICA;
struct tagEMRINVERTRGN;
struct _numberfmtA;
struct _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER;
struct _BLENDFUNCTION;
struct tagTITLEBARINFO;
struct tagEMRFORMAT;
struct tagWNDCLASSEXA;
struct tagEMRSTRETCHDIBITS;
struct _DOCINFOW;
struct tagEMRFRAMERGN;
struct tagKERNINGPAIR;
struct tagEMRCREATEBRUSHINDIRECT;
struct tagEMR;
struct tagEMRPOLYLINE16;
struct tagEMRSELECTCLIPPATH;
struct tagEMRSETPIXELV;
struct tagEMRCREATEPEN;
struct tagEMRSETARCDIRECTION;
enum _CSV_CONTROL_OP;
struct tagEMRSETTEXTCOLOR;
struct tagMINMAXINFO;
struct tagEMRSELECTOBJECT;
struct tagEMRSELECTPALETTE;
struct tagRAWINPUT;
struct tagEMRSETPALETTEENTRIES;
struct tagSERIALKEYSA;
struct tagEMRPOLYDRAW16;
struct _CSV_MGMT_LOCK;
struct tagEMRLINETO;
struct tagWNDCLASSW;
struct _cpinfoexA;
struct tagEMREXCLUDECLIPRECT;
struct _ETW_PMC_COUNTER_OWNERSHIP_STATUS;
struct tagEMRSETVIEWPORTORGEX;
struct tagEMRSETVIEWPORTEXTEX;
enum ORIENTATION_PREFERENCE;
struct tagEMRROUNDRECT;
struct tagEMRARC;
enum _NORM_FORM;
struct tagMENUITEMINFOA;
enum tagINPUT_MESSAGE_DEVICE_TYPE;
struct tagEMRPOLYPOLYLINE16;
struct tagEMRFILLRGN;
struct tagRAWINPUTDEVICELIST;
struct tagEMREXTSELECTCLIPRGN;
struct tagEMRCREATEPALETTE;
struct tagINPUT_TRANSFORM;
enum tagPOINTER_DEVICE_CURSOR_TYPE;
struct tagEMRCREATEDIBPATTERNBRUSHPT;
struct tagEMRGLSRECORD;
struct tagWNODE_ALL_DATA;
struct tagEMRGLSBOUNDEDRECORD;
struct tagEMRPIXELFORMAT;
struct tagEMRCREATECOLORSPACEW;
struct tagCOLORMATCHTOTARGET;
struct DLGTEMPLATE;
struct tagMOUSEMOVEPOINT;
struct tagMULTIKEYHELPA;
struct tagCLIENTCREATESTRUCT;
struct tagCREATESTRUCTA;
struct tagCBT_CREATEWNDW;
struct tagCREATESTRUCTW;
struct HTOUCHINPUT__;
struct SHELLHOOKINFO;
struct tagSTYLESTRUCT;
enum tagPOINTER_BUTTON_CHANGE_TYPE;
struct _SERVICE_DESCRIPTIONA;
struct tagCWPRETSTRUCT;
struct tagANIMATIONINFO;
struct tagNONCLIENTMETRICSA;
struct _CSV_CONTROL_PARAM;
struct tagDEBUGHOOKINFO;
struct _ENUM_SERVICE_STATUSA;
struct tagMOUSEHOOKSTRUCT;
struct tagMOUSEHOOKSTRUCTEX;
struct tagHARDWAREHOOKSTRUCT;
struct _SERVICE_TRIGGER_INFO;
struct HGESTUREINFO__;
struct _SERVICE_TRIGGER;
struct tagGESTUREINFO;
struct tagUSEROBJECTFLAGS;
struct tagRID_DEVICE_INFO;
struct _SERVICE_FAILURE_ACTIONSW;
struct tagWNDCLASSA;
struct _STORAGE_DEVICE_ID_DESCRIPTOR;
struct tagIMECHARPOSITION;
enum SYSGEOCLASS;
enum _STORAGE_TIER_MEDIA_TYPE;
struct tagMSG;
struct SERVICE_TRIGGER_CUSTOM_STATE_ID;
struct tagRAWMOUSE;
struct tagRAWKEYBOARD;
struct tagCOPYDATASTRUCT;
struct tagMDINEXTMENU;
struct _SERVICE_LAUNCH_PROTECTED_INFO;
struct POWERBROADCAST_SETTING;
enum _STORAGE_CRYPTO_ALGORITHM_ID;
struct tagNCCALCSIZE_PARAMS;
struct tagTRACKMOUSEEVENT;
struct _QUERY_SERVICE_CONFIGW;
struct tagACCEL;
struct _TAPE_STATISTICS;
struct tagALTTABINFO;
struct tagPAINTSTRUCT;
struct _SERVICE_SID_INFO;
struct _SERVICE_REQUIRED_PRIVILEGES_INFOW;
struct tagWINDOWPLACEMENT;
enum tagPOINTER_DEVICE_TYPE;
struct tagNMHDR;
struct _numberfmtW;
struct tagMEASUREITEMSTRUCT;
struct tagDRAWITEMSTRUCT;
struct _UNIVERSAL_NAME_INFOW;
struct tagDELETEITEMSTRUCT;
struct tagSCROLLBARINFO;
struct tagCOMPAREITEMSTRUCT;
struct BSMINFO;
struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA;
struct tagINPUT_MESSAGE_SOURCE;
struct FLASHWINFO;
struct tagPOINTER_DEVICE_PROPERTY;
struct _STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR;
struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM;
struct tagRID_DEVICE_INFO_MOUSE;
struct _SC_ACTION;
enum _STORAGE_QUERY_TYPE;
enum DIALOG_DPI_CHANGE_BEHAVIORS;
struct pvalueW;
struct provider_info;
struct tagMOUSEINPUT;
struct tagTOGGLEKEYS;
struct BULK_SECURITY_TEST_DATA;
struct tagKEYBDINPUT;
struct tagHARDWAREINPUT;
struct tagTOUCHINPUT;
struct _DEVICE_POWER_DESCRIPTOR;
enum _STORAGE_RPMB_FRAME_TYPE;
struct tagMOUSEKEYS;
enum tagPOINTER_INPUT_TYPE;
struct tagPOINTER_INFO;
struct tagPOINTER_TOUCH_INFO;
struct _DISCDLGSTRUCTA;
struct _STORAGE_DEVICE_NUMBER_EX;
struct tagPOINTER_PEN_INFO;
struct _UNIVERSAL_NAME_INFOA;
struct tagTITLEBARINFOEX;
enum POINTER_FEEDBACK_MODE;
struct tagIMEMENUITEMINFOA;
struct tagUSAGE_PROPERTIES;
struct tagPOINTER_TYPE_INFO;
struct HSAVEDUILANGUAGES__;
struct tagINPUT_INJECTION_VALUE;
struct HSYNTHETICPOINTERDEVICE__;
struct tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION;
struct _CONSOLE_SELECTION_INFO;
struct tagTOUCH_HIT_TESTING_INPUT;
enum tagFEEDBACK_TYPE;
struct tagLASTINPUTINFO;
struct tagTPMPARAMS;
struct tagMENUINFO;
struct tagMENUGETOBJECTINFO;
struct _CHAR_INFO;
struct tagMENUITEMINFOW;
struct tagHELPWININFOW;
struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW;
struct _COORD;
struct tagDRAWTEXTPARAMS;
struct tagMDICREATESTRUCTW;
struct tagHELPINFO;
struct tagMSGBOXPARAMSA;
struct tagMSGBOXPARAMSW;
struct tagACCESSTIMEOUT;
struct _ICONINFO;
struct pvalueA;
struct tagCURSORSHAPE;
struct _ICONINFOEXA;
struct _ICONINFOEXW;
struct _KEY_EVENT_RECORD;
enum EDIT_CONTROL_FEATURE;
struct _SERVICE_STATUS_PROCESS;
struct tagMDICREATESTRUCTA;
struct _DEVICE_TRIM_DESCRIPTOR;
struct tagMULTIKEYHELPW;
struct tagHELPWININFOA;
enum _SC_ENUM_TYPE;
struct _DEVICE_SEEK_PENALTY_DESCRIPTOR;
struct tagTouchPredictionParameters;
enum tagHANDEDNESS;
enum _STORAGE_TIER_CLASS;
struct tagNONCLIENTMETRICSW;
struct tagICONMETRICSA;
struct _SERVICE_TIMECHANGE_INFO;
struct tagICONMETRICSW;
enum _STORAGE_CRYPTO_KEY_SIZE;
struct tagSERIALKEYSW;
struct tagHIGHCONTRASTA;
struct tagHIGHCONTRASTW;
struct _NETINFOSTRUCT;
struct _VIDEOPARAMETERS;
struct tagFILTERKEYS;
struct tagSTICKYKEYS;
struct _STORAGE_DEVICE_DESCRIPTOR;
struct _FILE_OBJECTID_BUFFER;
struct tagSOUNDSENTRYW;
struct STORAGE_BREAK_RESERVATION_REQUEST;
struct _CLASS_MEDIA_CHANGE_CONTEXT;
struct tagMONITORINFO;
struct _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR;
struct tagCURSORINFO;
struct tagWINDOWINFO;
struct _STORAGE_FAILURE_PREDICTION_CONFIG;
struct tagMENUBARINFO;
struct tagCOMBOBOXINFO;
struct tagCANDIDATEFORM;
struct HRAWINPUT__;
struct tagREGISTERWORDA;
enum SERVICE_DIRECTORY_TYPE;
struct tagRID_DEVICE_INFO_KEYBOARD;
struct _STORAGE_BUS_RESET_REQUEST;
struct _DISK_PARTITION_INFO;
struct tagRID_DEVICE_INFO_HID;
struct tagRAWINPUTDEVICE;
struct tagIMEMENUITEMINFOW;
struct _CONNECTDLGSTRUCTA;
struct tagPOINTER_DEVICE_CURSOR_INFO;
struct _STORAGE_HOTPLUG_INFO;
struct RETRIEVAL_POINTERS_BUFFER;
struct tagGESTURENOTIFYSTRUCT;
struct HIMC__;
enum tagINPUT_MESSAGE_ORIGIN_ID;
struct VOLUME_BITMAP_BUFFER;
struct _SERVICE_TABLE_ENTRYW;
struct _cpinfoexW;
struct _WINDOW_BUFFER_SIZE_RECORD;
enum SERVICE_SHARED_REGISTRY_STATE_TYPE;
struct _currencyfmtW;
struct tagSTYLEBUFA;
enum SYSNLS_FUNCTION;
struct _nlsversioninfo;
struct _CONSOLE_READCONSOLE_CONTROL;
enum SYSGEOTYPE;
struct _SERVICE_START_REASON;
struct _DEVICE_WRITE_AGGREGATION_DESCRIPTOR;
enum _STORAGE_PORT_CODE_SET;
struct _DEVICE_DSM_CONVERSION_OUTPUT;
struct _SMALL_RECT;
struct _MOUSE_EVENT_RECORD;
enum _SCM_PD_HEALTH_STATUS;
enum _STORAGE_ID_NAA_FORMAT;
struct _CONSOLE_FONT_INFO;
struct _STORAGE_CRYPTO_CAPABILITY;
struct _CONSOLE_SCREEN_BUFFER_INFO;
enum _STORAGE_MEDIA_TYPE;
struct _STORAGE_PROPERTY_SET;
struct _CONSOLE_FONT_INFOEX;
struct _CONSOLE_HISTORY_INFO;
struct _PREVENT_MEDIA_REMOVAL;
enum _STORAGE_PROPERTY_ID;
struct _NETRESOURCEA;
struct _STORAGE_ADAPTER_DESCRIPTOR;
struct _CONNECTDLGSTRUCTW;
struct _STORAGE_PREDICT_FAILURE;
struct _REMOTE_NAME_INFOA;
struct tagCANDIDATELIST;
struct _NETCONNECTINFOSTRUCT;
enum _SC_ACTION_TYPE;
struct _STORAGE_ZONE_GROUP;
struct _SERVICE_FAILURE_ACTIONSA;
struct _SERVICE_REQUIRED_PRIVILEGES_INFOA;
struct _SERVICE_NOTIFY_2A;
struct SC_HANDLE__;
struct tagRECONVERTSTRING;
struct _QUERY_SERVICE_CONFIGA;
enum _SC_EVENT_TYPE;
struct _SERVICE_TABLE_ENTRYA;
struct _SCM_PD_PROPERTY_QUERY;
struct tagSTYLEBUFW;
struct _SCM_LOGICAL_DEVICES;
struct _SCM_PD_HEALTH_NOTIFICATION_DATA;
struct _STORAGE_DEVICE_NUMBERS;
struct _STORAGE_DEVICE_LED_STATE_DESCRIPTOR;
struct _STORAGE_MINIPORT_DESCRIPTOR;
enum _STORAGE_IDENTIFIER_TYPE;
struct _DEVICE_LB_PROVISIONING_DESCRIPTOR;
struct _DEVICE_INTERNAL_STATUS_DATA;
struct _STORAGE_CRYPTO_DESCRIPTOR;
struct _CHANGER_INITIALIZE_ELEMENT_STATUS;
struct _STORAGE_TIER;
struct _STORAGE_DEVICE_TIERING_DESCRIPTOR;
struct _STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR;
enum _SCM_BUS_FIRMWARE_ACTIVATION_STATE;
struct _SET_DISK_ATTRIBUTES;
enum _STORAGE_PROTOCOL_TYPE;
struct _EVENT_TRACE_SESSION_SECURITY_INFORMATION;
enum _STORAGE_PROTOCOL_NVME_DATA_TYPE;
enum _STORAGE_PROTOCOL_ATA_DATA_TYPE;
struct _RPC_VERSION;
struct _MINIDUMP_USER_STREAM_INFORMATION;
enum _STORAGE_PROTOCOL_UFS_DATA_TYPE;
union _RPC_ASYNC_NOTIFICATION_INFO;
union _STORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE;
struct _STORAGE_PROTOCOL_SPECIFIC_DATA;
struct WMIREGGUIDW;
struct _CHANGER_SET_ACCESS;
struct _STORAGE_PROTOCOL_SPECIFIC_DATA_EXT;
struct tagWNODE_EVENT_REFERENCE;
struct _TXFS_CREATE_MINIVERSION_INFO;
struct _STORAGE_PROTOCOL_DATA_DESCRIPTOR;
struct _EXFAT_STATISTICS;
struct _STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT;
struct RPC_STATS_VECTOR;
struct _STORAGE_TEMPERATURE_INFO;
struct _SD_CHANGE_MACHINE_SID_OUTPUT;
struct _STORAGE_TEMPERATURE_DATA_DESCRIPTOR;
struct _STORAGE_HW_FIRMWARE_DOWNLOAD;
enum _SCM_PD_PROPERTY_ID;
struct _HISTOGRAM_BUCKET;
struct _STORAGE_TEMPERATURE_THRESHOLD;
struct _CHANGER_EXCHANGE_MEDIUM;
struct _ENCRYPTED_DATA_INFO;
enum _STORAGE_DEVICE_FORM_FACTOR;
struct _SCM_PD_PROPERTY_SET;
struct _MINIDUMP_SYSTEM_BASIC_INFORMATION;
enum _STORAGE_COMPONENT_HEALTH_STATUS;
struct _GET_CHANGER_PARAMETERS;
union _STORAGE_SPEC_VERSION;
struct _CHANGER_ELEMENT_LIST;
struct _MINIDUMP_VM_POST_READ_CALLBACK;
struct _SCM_BUS_DEDICATED_MEMORY_DEVICES_INFO;
struct _STORAGE_PHYSICAL_DEVICE_DATA;
struct _RPC_POLICY;
struct _FSCTL_QUERY_FAT_BPB_BUFFER;
struct _STORAGE_PHYSICAL_ADAPTER_DATA;
struct _STORAGE_PHYSICAL_NODE_DATA;
struct _STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR;
struct _DISK_CACHE_INFORMATION;
struct _STORAGE_HW_FIRMWARE_SLOT_INFO;
struct _RDR_CALLOUT_STATE;
struct _STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR;
struct _MINIDUMP_TOKEN_INFO_HEADER;
struct _STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR;
enum _STORAGE_DISK_HEALTH_STATUS;
struct _RTL_PROCESS_BACKTRACE_INFORMATION;
enum _STORAGE_DISK_OPERATIONAL_STATUS;
struct _TXFS_QUERY_RM_INFORMATION;
enum _STORAGE_OPERATIONAL_STATUS_REASON;
struct _STORAGE_OPERATIONAL_REASON;
enum _STORAGE_ATTRIBUTE_MGMT_ACTION;
enum _CHANGER_DEVICE_PROBLEM_TYPE;
struct _UUID_VECTOR;
struct _STORAGE_DEVICE_MANAGEMENT_STATUS;
struct _SCM_PD_DEVICE_HANDLE;
struct _DISK_LOGGING;
struct _RPC_TRANSFER_SYNTAX;
struct _STORAGE_ADAPTER_SERIAL_NUMBER;
struct _STORAGE_COUNTERS;
struct _DISK_CONTROLLER_NUMBER;
enum _STORAGE_ZONED_DEVICE_TYPES;
struct _MINIDUMP_THREAD_NAME;
enum _STORAGE_ZONE_TYPES;
struct _SCM_PHYSICAL_DEVICE_INSTANCE;
struct _FILE_PROVIDER_EXTERNAL_INFO_V1;
struct MOVE_FILE_RECORD_DATA;
enum _SHRINK_VOLUME_REQUEST_TYPES;
struct _STORAGE_ZONED_DEVICE_DESCRIPTOR;
struct _MINIDUMP_USER_STREAM;
enum _SCM_REGION_FLAG;
struct _SYSTEM_VA_LIST_INFORMATION;
struct _GETVERSIONINPARAMS;
struct _CONTAINER_ROOT_INFO_OUTPUT;
struct _CHANGER_READ_ELEMENT_STATUS;
struct _SCM_BUS_DEDICATED_MEMORY_STATE;
struct tagMETHODDATA;
enum _RPC_NOTIFICATIONS;
struct _DEVICE_LOCATION;
struct FIND_BY_SID_OUTPUT;
struct _CHANGER_ELEMENT_STATUS;
struct _STORAGE_DEVICE_LOCATION_DESCRIPTOR;
struct _STORAGE_DEVICE_NUMA_PROPERTY;
struct _SCM_BUS_PROPERTY_QUERY;
struct _STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT;
struct _GET_DISK_ATTRIBUTES;
struct _STORAGE_HW_ENDURANCE_INFO;
struct _SCM_LOGICAL_DEVICE_INSTANCE;
struct _BIN_RANGE;
struct _STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR;
struct _MARK_HANDLE_INFO;
struct _STORAGE_DEVICE_SELF_ENCRYPTION_PROPERTY;
struct RPC_ENDPOINT_TEMPLATEA;
enum _STORAGE_ENCRYPTION_TYPE;
struct _CREATE_DISK;
struct _STORAGE_DEVICE_SELF_ENCRYPTION_PROPERTY_V2;
struct _STORAGE_FRU_ID_DESCRIPTOR;
struct _DEVICE_DATA_SET_RANGE;
struct _REASSIGN_BLOCKS;
struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES;
enum _STORAGE_SANITIZE_METHOD;
struct _MIDL_STUB_DESC;
struct _MINIDUMP_THREAD_LIST;
enum _SCM_PD_MEDIA_REINITIALIZATION_STATUS;
struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT;
struct _MIDL_STUB_MESSAGE;
struct _STORAGE_MEDIA_SERIAL_NUMBER_DATA;
struct _DEVICE_DSM_DEFINITION;
struct _RTL_PROCESS_MODULES;
struct _DEVICEDUMP_PUBLIC_SUBSECTION;
struct _NDR_ASYNC_MESSAGE;
struct _DEVICE_DSM_NOTIFICATION_PARAMETERS;
struct _MINIDUMP_HANDLE_DESCRIPTOR_2;
struct _DEVICEDUMP_RESTRICTED_SUBSECTION;
struct _STORAGE_OFFLOAD_TOKEN;
struct _RTL_PROCESS_MODULE_INFORMATION_EX;
enum _STORAGE_RPMB_COMMAND_TYPE;
struct _MINIDUMP_MEMORY_INFO_LIST;
struct _DEVICE_DSM_OFFLOAD_READ_PARAMETERS;
struct _STORAGE_OFFLOAD_READ_OUTPUT;
struct _DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS;
struct _SCM_PD_FIRMWARE_ACTIVATE;
struct _STORAGE_OFFLOAD_WRITE_OUTPUT;
struct _GET_LENGTH_INFORMATION;
struct _DEVICE_DATA_SET_LBP_STATE_PARAMETERS;
struct _MINIDUMP_MEMORY_DESCRIPTOR64;
struct _PHYSICAL_ELEMENT_STATUS;
struct _MINIDUMP_MEMORY_DESCRIPTOR;
struct _DEVICE_DATA_SET_LB_PROVISIONING_STATE;
struct _DEVICEDUMP_STRUCTURE_VERSION;
struct _DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2;
struct _MINIDUMP_EXCEPTION_INFORMATION64;
struct USN_JOURNAL_DATA_V0;
struct _DEVICE_DATA_SET_REPAIR_PARAMETERS;
struct _MINIDUMP_MISC_INFO_5;
enum _DETECTION_TYPE;
struct _DEVICE_DATA_SET_REPAIR_OUTPUT;
struct _DISK_EX_INT13_INFO;
struct _DEVICE_DATA_SET_SCRUB_OUTPUT;
struct _DEVICE_DATA_SET_SCRUB_EX_OUTPUT;
struct _DEVICE_DSM_TIERING_QUERY_INPUT;
struct _SCM_PD_FRU_ID_STRING;
struct _STORAGE_TIER_REGION;
struct _DEVICE_DSM_TIERING_QUERY_OUTPUT;
enum _WRITE_CACHE_CHANGE;
struct _DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS;
struct _MOVE_FILE_DATA32;
struct _MINIDUMP_MISC_INFO_2;
struct _DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT;
enum _DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE;
struct _STORAGE_IDLE_POWERUP_REASON;
struct _DEVICE_STORAGE_ADDRESS_RANGE;
struct _MINIDUMP_STRING;
struct _DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT;
struct _SCM_PD_PASSTHROUGH_INPUT;
struct _DEVICE_DSM_REPORT_ZONES_PARAMETERS;
struct _RPC_SECURITY_QOS;
enum _STORAGE_ZONES_ATTRIBUTES;
enum _STORAGE_DIAGNOSTIC_LEVEL;
enum _STORAGE_ZONE_CONDITION;
struct _REQUEST_RAW_ENCRYPTED_DATA;
struct _STORAGE_REINITIALIZE_MEDIA;
struct _STORAGE_ZONE_DESCRIPTOR;
struct _DEVICE_DSM_REPORT_ZONES_DATA;
struct READ_USN_JOURNAL_DATA_V0;
struct _SCM_PD_REINITIALIZE_MEDIA_OUTPUT;
struct _DEVICE_STORAGE_RANGE_ATTRIBUTES;
struct _PLEX_READ_DATA_REQUEST;
struct _DEVICE_DSM_RANGE_ERROR_INFO;
struct _DEVICEDUMP_PRIVATE_SUBSECTION;
struct _SET_PARTITION_INFORMATION_EX;
struct USN_RECORD_V2;
struct _SEMAPHORE_BASIC_INFORMATION;
struct _DEVICE_DSM_LOST_QUERY_PARAMETERS;
struct _DISK_GEOMETRY;
struct _SET_PARTITION_INFORMATION;
struct _DEVICE_DSM_LOST_QUERY_OUTPUT;
struct _DEVICE_DSM_FREE_SPACE_OUTPUT;
struct _SCM_PD_PASSTHROUGH_INVDIMM_INPUT;
struct _STORAGE_GET_BC_PROPERTIES_OUTPUT;
struct _STORAGE_ALLOCATE_BC_STREAM_INPUT;
struct _CHANGER_ELEMENT_STATUS_EX;
struct _STORAGE_ALLOCATE_BC_STREAM_OUTPUT;
struct _STORAGE_PRIORITY_HINT_SUPPORT;
struct _ST_IO_STATS;
enum _STORAGE_DIAGNOSTIC_TARGET_TYPE;
struct _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY;
struct _STORAGE_DIAGNOSTIC_REQUEST;
struct _STORAGE_DIAGNOSTIC_DATA;
struct _PHYSICAL_ELEMENT_STATUS_REQUEST;
struct _QUERY_FILE_LAYOUT_INPUT;
struct _PHYSICAL_ELEMENT_STATUS_DESCRIPTOR;
struct DOMDocument;
struct _REMOVE_ELEMENT_AND_TRUNCATE_REQUEST;
struct _FILE_LAYOUT_NAME_ENTRY;
struct _TXFS_TRANSACTION_ACTIVE_INFO;
enum _DEVICE_INTERNAL_STATUS_DATA_SET;
struct _DRIVE_LAYOUT_INFORMATION_MBR;
struct _GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST;
struct _SD_QUERY_STATS_INPUT;
struct _FULL_PTR_XLAT_TABLES;
struct _FILE_FS_PERSISTENT_VOLUME_INFORMATION;
struct _MINIDUMP_SYSTEM_FILECACHE_INFORMATION;
struct _DISK_HISTOGRAM;
struct _STORAGE_READ_CAPACITY;
struct _MINIDUMP_VM_PRE_READ_CALLBACK;
enum _WRITE_CACHE_TYPE;
enum _WRITE_CACHE_ENABLE;
struct _SM_STORE_LIST_REQUEST_EX;
enum _WRITE_THROUGH;
struct _STORAGE_WRITE_CACHE_PROPERTY;
struct NDR_POINTER_QUEUE_STATE;
struct _SMC_CACHE_CREATE_PARAMETERS;
struct _PERSISTENT_RESERVE_COMMAND;
enum DISK_CACHE_RETENTION_PRIORITY;
enum _DEVICEDUMP_COLLECTION_TYPE;
struct _DEVICEDUMP_SUBSECTION_POINTER;
struct _ENCRYPTION_BUFFER;
struct _TXFS_MODIFY_RM;
struct _DEVICEDUMP_SECTION_HEADER;
struct _GP_LOG_PAGE_DESCRIPTOR;
struct _REQUEST_OPLOCK_OUTPUT_BUFFER;
struct _DEVICEDUMP_STORAGEDEVICE_DATA;
struct _MINIDUMP_THREAD_NAME_LIST;
struct _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD;
struct _RPC_SEC_CONTEXT_KEY_INFO;
struct _RTL_BITMAP;
struct _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP;
struct _SD_GLOBAL_CHANGE_OUTPUT;
struct _STORAGE_IDLE_POWER;
enum _STORAGE_POWERUP_REASON_TYPE;
enum _SYSTEM_VA_TYPE;
struct _SCM_PD_RUNTIME_FW_ACTIVATION_INFO;
enum tagOLEUPDATE;
struct tagRPC_CALL_ATTRIBUTES_V3_A;
enum _STORAGE_DEVICE_POWER_CAP_UNITS;
struct _SM_STATS_REQUEST;
struct _STORAGE_DEVICE_POWER_CAP;
struct _STORAGE_RPMB_DATA_FRAME;
struct _EVENT_TRACE_VERSION_INFORMATION;
struct _STORAGE_EVENT_NOTIFICATION;
struct _FILE_SET_DEFECT_MGMT_BUFFER;
struct _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER;
enum _STORAGE_COUNTER_TYPE;
enum _RPC_NOTIFICATION_TYPES;
struct _STORAGE_COUNTER;
struct _CREATE_DISK_MBR;
struct _STORAGE_HW_FIRMWARE_INFO_QUERY;
struct USN_RECORD_COMMON_HEADER;
struct _RPC_BINDING_HANDLE_SECURITY_V1_A;
struct _STORAGE_HW_FIRMWARE_INFO;
struct _VERIFY_INFORMATION;
struct CREATE_USN_JOURNAL_DATA;
struct _STORAGE_HW_FIRMWARE_DOWNLOAD_V2;
struct _QUERY_BAD_RANGES_INPUT;
struct _STORAGE_HW_FIRMWARE_ACTIVATE;
enum __MIDL_IInternetZoneManager_0002;
struct _STORAGE_PROTOCOL_COMMAND;
struct _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT;
struct _QUERY_BAD_RANGES_OUTPUT;
struct _READ_ELEMENT_ADDRESS_INFO;
struct _MINIDUMP_HANDLE_DESCRIPTOR;
struct _QUERY_BAD_RANGES_OUTPUT_RANGE;
struct _STORAGE_ATTRIBUTE_MGMT;
enum _LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION;
struct _NTFS_STATISTICS_EX;
struct _SCM_PHYSICAL_DEVICES;
struct NTFS_FILE_RECORD_OUTPUT_BUFFER;
enum _SCM_PD_LAST_FW_ACTIVATION_STATUS;
struct _FILE_PREFETCH_EX;
struct _SYSTEM_PROCESSOR_INFORMATION;
struct _SCM_REGION;
struct _MINIDUMP_EXCEPTION_INFORMATION;
struct _SCM_REGIONS;
enum _PARTITION_STYLE;
struct USN_JOURNAL_DATA_V1;
enum _SCM_BUS_QUERY_TYPE;
enum _SCM_BUS_SET_TYPE;
enum _SCM_BUS_PROPERTY_ID;
struct _SYSTEM_IMAGE_FILE_EXECUTION_OPTIONS_INFORMATION;
struct _DISK_INT13_INFO;
struct _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO;
struct _SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO;
struct USN_RANGE_TRACK_OUTPUT;
struct _RPC_SECURITY_QOS_V5_W;
struct _SCM_BUS_PROPERTY_SET;
struct _SCM_INTERLEAVED_PD_INFO;
struct _SCM_LD_INTERLEAVE_SET_INFO;
enum _SCM_PD_OPERATIONAL_STATUS;
enum _SCM_PD_QUERY_TYPE;
enum _SCM_PD_SET_TYPE;
struct READ_FILE_USN_DATA;
struct _SYSTEM_NUMA_INFORMATION;
struct _MINIDUMP_THREAD;
enum _MUTANT_INFORMATION_CLASS;
struct _SCM_PD_RUNTIME_FW_ACTIVATION_ARM_STATE;
struct _PARTITION_INFORMATION_MBR;
struct USN_JOURNAL_DATA_V2;
struct _SCM_PD_DESCRIPTOR_HEADER;
struct _SCM_PD_DEVICE_INFO;
struct _SCM_PD_DEVICE_SPECIFIC_PROPERTY;
struct _SCM_PD_DEVICE_SPECIFIC_INFO;
struct _SCM_PD_FIRMWARE_SLOT_INFO;
struct _SCM_PD_FIRMWARE_INFO;
struct _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT;
struct _BOOT_AREA_INFO;
struct ETW_BUFFER_HEADER;
struct _STREAMS_ASSOCIATE_ID_INPUT_BUFFER;
enum _SCM_PD_OPERATIONAL_STATUS_REASON;
struct _RETRIEVAL_POINTER_BASE;
struct _SCM_PD_MANAGEMENT_STATUS;
enum _DUPLICATE_EXTENTS_STATE;
struct _SCM_PD_LOCATION_STRING;
struct _SCM_PD_FIRMWARE_DOWNLOAD;
struct tagWNODE_EVENT_ITEM;
struct _TRACE_GUID_REGISTRATION;
struct _Ea;
enum _SCM_PD_FIRMWARE_ACTIVATION_STATE;
enum _tagOIBDG_FLAGS;
struct _TXFS_GET_TRANSACTED_VERSION;
enum _tagQUERYOPTION;
struct _SCM_PD_PASSTHROUGH_OUTPUT;
struct _DECRYPTION_STATUS_BUFFER;
struct _SCM_PD_REINITIALIZE_MEDIA_INPUT;
struct _REQUEST_OPLOCK_INPUT_BUFFER;
struct _TXFS_LIST_TRANSACTIONS;
struct _REFS_SMR_VOLUME_INFO_OUTPUT;
enum _MEDIA_TYPE;
struct _FORMAT_PARAMETERS;
struct _FORMAT_EX_PARAMETERS;
struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY;
struct _ENCRYPTION_KEY_CTRL_INPUT;
struct _PARTITION_INFORMATION;
struct _DRIVE_LAYOUT_INFORMATION;
struct _REASSIGN_BLOCKS_EX;
struct _FSCTL_QUERY_REGION_INFO_INPUT;
struct _PARTITION_INFORMATION_GPT;
enum __MIDL_IBindStatusCallback_0006;
struct _CREATE_DISK_GPT;
struct _FILE_ZERO_DATA_INFORMATION;
struct _FSCTL_OFFLOAD_READ_INPUT;
struct _FILE_INITIATE_REPAIR_OUTPUT_BUFFER;
struct _PARTITION_INFORMATION_EX;
struct _SYSTEM_LEGACY_DRIVER_INFORMATION;
struct _DRIVE_LAYOUT_INFORMATION_GPT;
struct _TXFS_SAVEPOINT_INFORMATION;
struct _CONTAINER_ROOT_INFO_INPUT;
struct _DRIVE_LAYOUT_INFORMATION_EX;
struct _TXFS_START_RM_INFORMATION;
struct _PROFILE_SOURCE_INFO;
struct _DUPLICATE_EXTENTS_DATA;
struct _DISK_DETECTION_INFO;
struct _FILE_QUERY_SPARING_BUFFER;
struct _DISK_GEOMETRY_EX;
struct _MARK_HANDLE_INFO32;
struct tagOLEVERB;
struct IXMLDOMNode;
struct _DISK_GROW_PARTITION;
enum ETW_PROCESS_TRACE_MODES;
struct _SM_CREATE_REQUEST;
struct _DISK_PERFORMANCE;
struct _DISK_RECORD;
struct _WNODE_HEADER;
enum _BIN_TYPES;
struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX;
struct _PERF_BIN;
struct _BIN_COUNT;
struct _BIN_RESULTS;
struct MOVE_FILE_DATA;
struct _IDEREGS;
struct _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION;
struct _SENDCMDINPARAMS;
struct _DRIVERSTATUS;
struct IXMLDocument;
struct _SENDCMDOUTPARAMS;
struct _STREAM_EXTENT_ENTRY;
struct XMLDocument;
struct _FILESYSTEM_STATISTICS_EX;
enum _ELEMENT_TYPE;
struct _CHANGER_ELEMENT;
enum tagOLEGETMONIKER;
struct USN_TRACK_MODIFIED_RANGES;
struct _CHANGER_PRODUCT_DATA;
struct STARTING_VCN_INPUT_BUFFER;
struct _CHANGER_SET_POSITION;
struct _CHANGER_MOVE_MEDIUM;
struct _CHANGER_SEND_VOLUME_TAG_INFORMATION;
struct _SYSTEM_NUMA_PROXIMITY_MAP;
struct _FILE_LEVEL_TRIM;
struct _PATHNAME_BUFFER;
struct DELETE_USN_JOURNAL_DATA;
struct NTFS_VOLUME_DATA_BUFFER;
struct NTFS_EXTENDED_VOLUME_DATA;
struct REFS_VOLUME_DATA_BUFFER;
struct STARTING_LCN_INPUT_BUFFER;
struct STARTING_LCN_INPUT_BUFFER_EX;
struct _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER;
struct ETW_BUFFER_CALLBACK_INFORMATION;
struct RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER;
struct RETRIEVAL_POINTER_COUNT;
enum _tagPI_FLAGS;
struct NTFS_FILE_RECORD_INPUT_BUFFER;
struct FIND_BY_SID_DATA;
struct MFT_ENUM_DATA_V0;
struct MFT_ENUM_DATA_V1;
struct READ_USN_JOURNAL_DATA_V1;
enum _TRACE_QUERY_INFO_CLASS;
struct USN_RECORD_V3;
struct USN_RECORD_EXTENT;
struct USN_RECORD_V4;
enum __MIDL_IBindStatusCallback_0004;
union USN_RECORD_UNION;
struct _FILE_STORAGE_TIER_REGION;
struct _TRACE_ENABLE_INFO;
struct _FSCTL_OFFLOAD_READ_OUTPUT;
struct _EVENT_INSTANCE_HEADER;
struct _LDR_DEPENDENCY_RECORD;
struct _FILE_PREFETCH;
struct _DataStream;
struct _FILESYSTEM_STATISTICS;
struct _FAT_STATISTICS;
struct _NTFS_STATISTICS;
struct _MINIDUMP_DIRECTORY;
struct _TRACE_GUID_INFO;
struct _FILE_SET_SPARSE_BUFFER;
struct _FILE_ZERO_DATA_INFORMATION_EX;
struct _FILE_ALLOCATED_RANGE_BUFFER;
struct _FS_BPIO_INPUT;
struct _EXTENDED_ENCRYPTED_DATA_INFO;
struct _UNICODE_STRING;
struct _SI_COPYFILE;
struct _FILE_MAKE_COMPATIBLE_BUFFER;
struct _SHRINK_VOLUME_INFORMATION;
struct _IO_IRP_EXT_TRACK_OFFSET_HEADER;
struct _TXFS_ROLLFORWARD_REDO_INFORMATION;
struct _STREAM_LAYOUT_ENTRY;
struct _TXFS_GET_METADATA_INFO_OUT;
struct tagSERIALIZEDPROPERTYVALUE;
struct _TXFS_LIST_TRANSACTION_LOCKED_FILES;
struct _TXFS_LIST_TRANSACTIONS_ENTRY;
struct _TXFS_READ_BACKUP_INFORMATION_OUT;
struct _TXFS_WRITE_BACKUP_INFORMATION;
enum _FS_BPIO_OUTFLAGS;
struct _FILE_SYSTEM_RECOGNITION_INFORMATION;
enum _FS_BPIO_INFLAGS;
struct _SYSTEM_HANDLE_INFORMATION;
struct tagOIFI;
struct _VIRTUAL_STORAGE_TYPE;
struct _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST;
struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY;
struct _SMB_SHARE_FLUSH_AND_PURGE_INPUT;
struct _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE;
struct _SD_CHANGE_MACHINE_SID_INPUT;
struct _SD_QUERY_STATS_OUTPUT;
struct _SD_ENUM_SDS_INPUT;
enum _MINIDUMP_SECONDARY_FLAGS;
struct _SD_ENUM_SDS_ENTRY;
struct _SD_ENUM_SDS_OUTPUT;
struct _MINIDUMP_IO_CALLBACK;
struct _SD_GLOBAL_CHANGE_INPUT;
struct ETW_PMC_SESSION_INFO;
struct _LOOKUP_STREAM_FROM_CLUSTER_INPUT;
struct _RPC_SYNTAX_IDENTIFIER;
struct _TRACE_GUID_PROPERTIES;
struct MachineGlobalObjectTableRegistrationToken__;
struct _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT;
struct _LOOKUP_STREAM_FROM_CLUSTER_ENTRY;
struct RPC_IMPORT_CONTEXT_P;
struct _FILE_TYPE_NOTIFICATION_INPUT;
struct IGetBindHandle;
struct _CSV_NAMESPACE_INFO;
struct RPC_IF_ID_VECTOR;
struct _TRACE_PROFILE_INTERVAL;
struct _TRACE_LOGFILE_HEADER32;
struct _MINIDUMP_CALLBACK_INFORMATION;
struct _CSV_QUERY_REDIRECT_STATE;
struct _CSV_QUERY_FILE_REVISION;
struct _MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION;
struct _CSV_QUERY_FILE_REVISION_FILE_ID_128;
enum tagRpcCallClientLocality;
struct _CSV_QUERY_MDS_PATH;
struct _MINIDUMP_VM_QUERY_CALLBACK;
enum _CSVFS_DISK_CONNECTIVITY;
struct _EVENT_TRACE_LOGFILEW;
struct _CSV_QUERY_VOLUME_REDIRECT_STATE;
struct _CSV_QUERY_MDS_PATH_V2;
struct _ENABLE_TRACE_PARAMETERS;
enum tagFUNCKIND;
struct _CSV_SET_VOLUME_ID;
struct NDR_ALLOC_ALL_NODES_CONTEXT;
struct _RPC_PROTSEQ_VECTORW;
struct _CSV_QUERY_VOLUME_ID;
struct IEnumVARIANT;
struct _MOF_FIELD;
enum _LMR_QUERY_INFO_CLASS;
struct _LMR_QUERY_INFO_PARAM;
struct _LMR_QUERY_SESSION_INFO;
struct _ETW_BUFFER_CONTEXT;
struct _MINIDUMP_THREAD_CALLBACK;
struct _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT;
enum _STORAGE_RESERVE_ID;
struct _TRACE_PROVIDER_INSTANCE_INFO;
struct _CSV_IS_OWNED_BY_CSVFS;
struct _MINIDUMP_THREAD_EX_CALLBACK;
struct _MINIDUMP_SYSTEM_MEMORY_INFO_1;
struct _FILE_LEVEL_TRIM_RANGE;
struct _RPC_BINDING_VECTOR;
struct tagI_RpcProxyCallbackInterface;
struct IUriContainer;
struct _FILE_LEVEL_TRIM_OUTPUT;
enum _QUERY_FILE_LAYOUT_FILTER_TYPE;
struct IPropertyBag;
struct _CLUSTER_RANGE;
struct _MINIDUMP_THREAD_INFO;
struct _FILE_REFERENCE_RANGE;
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W;
struct _QUERY_FILE_LAYOUT_OUTPUT;
struct _EVENT_TRACE_LOGFILEA;
struct _FILE_LAYOUT_ENTRY;
struct IObjContext;
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A;
struct _FILE_LAYOUT_INFO_ENTRY;
enum _THREAD_WRITE_FLAGS;
struct _MINIDUMP_PROCESS_VM_COUNTERS_1;
struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER;
enum _RPC_ASYNC_EVENT;
struct _MINIDUMP_FUNCTION_TABLE_DESCRIPTOR;
struct _FSCTL_OFFLOAD_WRITE_INPUT;
struct tagWNODE_SINGLE_INSTANCE;
struct _FSCTL_OFFLOAD_WRITE_OUTPUT;
struct _SET_PURGE_FAILURE_MODE_INPUT;
struct _REPAIR_COPIES_INPUT;
struct _MINIDUMP_MEMORY64_LIST;
struct _MINIDUMP_MEMORY_LIST;
struct _REPAIR_COPIES_OUTPUT;
struct IParseDisplayName;
struct _GET_FILTER_FILE_IDENTIFIER_OUTPUT;
struct _FILE_REGION_INFO;
struct _FILE_REGION_OUTPUT;
struct _RPC_SECURITY_QOS_V4_W;
struct _RemotableHandle;
struct _GDI_OBJECT;
struct _FILE_REGION_INPUT;
struct ARRAY_INFO;
struct _WRITE_USN_REASON_INPUT;
enum _FILE_STORAGE_TIER_MEDIA_TYPE;
struct _FILE_STORAGE_TIER;
struct _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT;
struct _STREAM_INFORMATION_ENTRY;
union _StreamInformation;
struct _DesiredStorageClass;
struct _Reparse;
struct _CONTAINER_VOLUME_STATE;
struct _MINIDUMP_UNLOADED_MODULE;
struct _FSCTL_QUERY_REGION_INFO_OUTPUT;
struct tagINTERFACEINFO;
struct _FILE_DESIRED_STORAGE_CLASS_INFORMATION;
struct _MINIDUMP_MISC_INFO_4;
struct IPropertyStorage;
struct _RPC_PROTSEQ_ENDPOINT;
struct _DUPLICATE_EXTENTS_DATA32;
struct _DUPLICATE_EXTENTS_DATA_EX;
struct _tagpropertykey;
struct _WIM_PROVIDER_SUSPEND_OVERLAY_INPUT;
struct _DUPLICATE_EXTENTS_DATA_EX32;
struct _MINIDUMP_LOCATION_DESCRIPTOR64;
struct _ASYNC_DUPLICATE_EXTENTS_STATUS;
struct _FS_BPIO_RESULTS;
struct _MINIDUMP_THREAD_EX;
enum _REFS_SMR_VOLUME_GC_STATE;
enum _REFS_SMR_VOLUME_GC_ACTION;
struct tagWNODE_TOO_SMALL;
enum _MINIDUMP_STREAM_TYPE;
enum _REFS_SMR_VOLUME_GC_METHOD;
struct _REFS_SMR_VOLUME_GC_PARAMETERS;
struct _WIM_PROVIDER_EXTERNAL_INFO;
struct _TRACE_PERIODIC_CAPTURE_STATE_INFO;
struct tagBIND_OPTS3;
struct _ETW_TRACE_PARTITION_INFORMATION;
struct _STREAMS_QUERY_ID_OUTPUT_BUFFER;
struct _RPC_SECURITY_QOS_V3_A;
struct IBindStatusCallbackEx;
enum _FS_BPIO_OPERATIONS;
struct IAdviseSink;
struct MINIDUMP_EXCEPTION_STREAM;
enum _VIRTUAL_STORAGE_BEHAVIOR_CODE;
struct _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT;
struct _MINIDUMP_MODULE;
struct _VIRTUALIZATION_INSTANCE_INFO_INPUT_EX;
struct _RPC_SECURITY_QOS_V2_A;
struct _WOF_EXTERNAL_INFO;
struct _WOF_EXTERNAL_FILE_ID;
struct _WOF_VERSION_INFO;
struct _MINIDUMP_SYSTEM_INFO;
struct _NDR_SCONTEXT;
struct _WIM_PROVIDER_ADD_OVERLAY_INPUT;
struct _WIM_PROVIDER_UPDATE_OVERLAY_INPUT;
struct _WIM_PROVIDER_REMOVE_OVERLAY_INPUT;
struct _WIM_PROVIDER_OVERLAY_ENTRY;
enum tagRpcCallType;
struct tagRPC_CALL_ATTRIBUTES_V1_W;
struct _FILE_PROVIDER_EXTERNAL_INFO_V0;
enum XLAT_SIDE;
struct _VIRTUALIZATION_INSTANCE_INFO_INPUT;
struct _MINIDUMP_MISC_INFO;
struct _VIRTUALIZATION_INSTANCE_INFO_OUTPUT;
struct _GET_FILTER_FILE_IDENTIFIER_INPUT;
struct IRpcChannelBuffer;
struct IOleItemContainer;
struct tagIDLDESC;
struct _FS_BPIO_INFO;
struct tagRPC_CALL_ATTRIBUTES_V3_W;
struct _FS_BPIO_OUTPUT;
struct _RPC_IF_ID;
struct _SMB_SHARE_FLUSH_AND_PURGE_OUTPUT;
struct _MINIDUMP_THREAD_INFO_LIST;
struct _RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR;
struct _DISK_EXTENT;
struct ITypeLib2;
struct _VOLUME_DISK_EXTENTS;
enum _MINIDUMP_CALLBACK_TYPE;
struct tagBinaryParam;
struct IHttpNegotiate3;
struct OFFSETINSTANCEDATAANDLENGTH;
struct _MINIDUMP_USER_RECORD;
struct tagWNODE_SINGLE_ITEM;
struct tagWNODE_METHOD_ITEM;
struct _MINIDUMP_HEADER;
struct IBindHost;
struct _COMM_FAULT_OFFSETS;
struct tagRPC_EXTENDED_ERROR_INFO;
struct WMIREGINFOW;
enum WMIDPREQUESTCODE;
enum ETW_COMPRESSION_RESUMPTION_MODE;
struct _RPC_ASYNC_STATE;
struct _EVENT_TRACE_HEADER;
struct RPC_ENDPOINT_TEMPLATEW;
struct _MINIDUMP_HANDLE_OPERATION_LIST;
struct _MINIDUMP_MODULE_LIST;
struct tagCAFLT;
struct _TRACE_LOGFILE_HEADER;
struct _TRACE_LOGFILE_HEADER64;
struct EVENT_INSTANCE_INFO;
struct _EVENT_FILTER_DESCRIPTOR;
struct _RPC_CLIENT_INTERFACE;
struct _EVENT_TRACE_PROPERTIES;
struct _EVENT_TRACE_PROPERTIES_V2;
enum tagDATADIR;
struct _MINIDUMP_MISC_INFO_3;
struct _RPC_SERVER_INTERFACE;
enum _ETW_PMC_COUNTER_OWNER_TYPE;
struct _ETW_PMC_COUNTER_OWNER;
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W;
struct _ETW_TRACE_PARTITION_INFORMATION_V2;
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A;
union __MIDL___MIDL_itf_wtypes_0000_0001_0005;
struct _EVENT_TRACE;
struct tagCLEANLOCALSTORAGE;
struct _EVENT_RECORD;
enum tagBIND_FLAGS;
enum _ETW_PROCESS_HANDLE_INFO_TYPE;
struct _SEC_WINNT_AUTH_IDENTITY_W;
enum tagSYSKIND;
struct ETW_OPEN_TRACE_OPTIONS;
struct _MINIDUMP_HANDLE_OBJECT_INFORMATION;
struct _RPC_BINDING_HANDLE_TEMPLATE_V1_W;
struct _ENABLE_TRACE_PARAMETERS_V1;
struct _CLASSIC_EVENT_ID;
struct _TRACE_STACK_CACHING_INFO;
struct _RPC_SECURITY_QOS_V3_W;
struct _TRACE_VERSION_INFO;
enum tagRpcLocalAddressFormat;
struct _MINIDUMP_LOCATION_DESCRIPTOR;
struct tagRPC_CALL_ATTRIBUTES_V1_A;
union _CPU_INFORMATION;
struct _MINIDUMP_THREAD_EX_LIST;
struct tagRPC_CALL_ATTRIBUTES_V2_A;
struct IGlobalOptions;
struct _MINIDUMP_EXCEPTION;
struct _NDR_CORRELATION_INFO;
struct ISynchronizeContainer;
struct _NDR_PROC_CONTEXT;
struct ILockBytes;
enum tagExtendedErrorParamTypes;
enum RpcProxyPerfCounters;
enum _MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE;
struct _MINIDUMP_HANDLE_DATA_STREAM;
struct _MINIDUMP_FUNCTION_TABLE_STREAM;
struct _MINIDUMP_UNLOADED_MODULE_LIST;
struct _XSTATE_CONFIG_FEATURE_MSC_INFO;
struct tagRPC_ERROR_ENUM_HANDLE;
struct tagRemBRUSH;
struct _MINIDUMP_MEMORY_INFO;
struct RPC_INTERFACE_TEMPLATEA;
struct _RPC_BINDING_HANDLE_SECURITY_V1_W;
struct _MINIDUMP_TOKEN_INFO_LIST;
struct IOleLink;
struct _MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION;
struct _MINIDUMP_PROCESS_VM_COUNTERS_2;
struct RPC_INTERFACE_TEMPLATEW;
struct _RPC_BINDING_HANDLE_OPTIONS_V1;
struct _MINIDUMP_INCLUDE_THREAD_CALLBACK;
struct _MINIDUMP_MODULE_CALLBACK;
struct _MINIDUMP_INCLUDE_MODULE_CALLBACK;
struct _SEC_WINNT_AUTH_IDENTITY_A;
enum _MODULE_WRITE_FLAGS;
struct _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK;
struct IPipeDouble;
struct _RPC_SECURITY_QOS_V4_A;
struct _MINIDUMP_CALLBACK_INPUT;
struct _MINIDUMP_CALLBACK_OUTPUT;
enum _MINIDUMP_TYPE;
struct RPC_CLIENT_INFORMATION1;
struct _RPC_PROTSEQ_VECTORA;
struct _RPC_BINDING_HANDLE_TEMPLATE_V1_A;
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A;
struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W;
struct _RPC_SECURITY_QOS_V2_W;
struct IMultiQI;
struct _RPC_SECURITY_QOS_V5_A;
struct IROTData;
enum _RPC_HTTP_REDIRECTOR_STAGE;
struct IDataAdviseHolder;
struct _RPC_MESSAGE;
enum RPC_ADDRESS_CHANGE_TYPE;
struct tagRemHGLOBAL;
struct RPC_DISPATCH_TABLE;
struct tagRPC_EE_INFO_PARAM;
struct IAddrExclusionControl;
struct _RPC_CALL_LOCAL_ADDRESS_V1;
struct tagRPC_CALL_ATTRIBUTES_V2_W;
struct IAgileReference;
struct _SCONTEXT_QUEUE;
struct ISupportErrorInfo;
enum tagEXTCONN;
struct _MIDL_SYNTAX_INFO;
struct tagARRAYDESC;
struct _SMKM_REGION_EXTENT;
struct IOleCache;
struct _GENERIC_BINDING_ROUTINE_PAIR;
struct __GENERIC_BINDING_INFO;
struct _EVENT_TRACE_PERFORMANCE_INFORMATION;
enum tagSTGMOVE;
struct IInternetSecurityManagerEx2;
struct _XMIT_ROUTINE_QUINTUPLE;
struct _SYSTEM_VERIFIER_ISSUE;
struct _wireSAFEARR_UNKNOWN;
struct tagCAFILETIME;
struct IUrlMon;
struct _USER_MARSHAL_ROUTINE_QUADRUPLE;
struct _userHGLOBAL;
struct _OBJECT_ATTRIBUTES64;
struct ICatalogFileInfo;
enum _USER_MARSHAL_CB_TYPE;
struct _USER_MARSHAL_CB;
struct _userHMETAFILE;
struct _MALLOC_FREE_STRUCT;
struct _EVENT_TRACE_PROFILE_REMOVE_INFORMATION;
enum _IDL_CS_CONVERT;
struct tagDEC;
struct _EVENT_TRACE_PROFILE_LIST_INFORMATION;
struct IEnumSTATDATA;
struct tagPARAMDESC;
struct _SYSTEM_SYSTEM_DISK_INFORMATION;
struct _NDR_CS_SIZE_CONVERT_ROUTINES;
struct _userHPALETTE;
struct ITypeFactory;
struct _NDR_CS_ROUTINES;
struct _NDR_EXPR_DESC;
struct _ST_STATS_REGION_INFO;
union __MIDL_IWinTypes_0002;
union _EVENT_TRACE_PROFILE_ADD_INFORMATION_V3;
struct IViewObject;
struct tagEXCEPINFO;
struct ITypeInfo;
struct IPersistFile;
struct IBinding;
struct ITypeLib;
struct IDummyHICONIncluder;
struct _MIDL_FORMAT_STRING;
struct _wireSAFEARR_BRECORD;
struct IInternetBindInfoEx;
struct _SYSTEM_STORE_INFORMATION;
struct _MIDL_METHOD_PROPERTY;
enum tagSF_TYPE;
struct _SYSTEM_QUERY_TIME_ADJUST_INFORMATION;
struct IApartmentShutdown;
struct _MIDL_METHOD_PROPERTY_MAP;
struct IAdviseSink2;
struct IWinInetFileStream;
struct _MIDL_INTERFACE_METHOD_PROPERTIES;
struct IRecordInfo;
struct _SYSTEM_OBJECT_INFORMATION;
struct IMessageFilter;
struct _MIDL_SERVER_INFO_;
struct IRunnableObject;
struct ICreateTypeInfo2;
struct _MIDL_STUBLESS_PROXY_INFO;
struct IMoniker;
struct _SYSTEM_FLAGS_INFORMATION;
struct IDirectWriterLock;
union _CLIENT_CALL_RETURN;
struct _SYSTEM_REGISTRY_QUOTA_INFORMATION;
union __MIDL_IWinTypes_0003;
enum _system_handle_t;
union __MIDL_IWinTypes_0004;
struct IWrappedProtocol;
struct _MIDL_INTERCEPTION_INFO;
struct _remoteMETAFILEPICT;
enum tagDESCKIND;
struct _MIDL_WINRT_TYPE_SERIALIZATION_INFO;
enum STUB_PHASE;
struct tagRemHBITMAP;
enum PROXY_PHASE;
struct IInternetPriority;
struct IRpcStubBuffer;
struct _SYSTEM_SET_TIME_ADJUST_INFORMATION;
struct _NDR_USER_MARSHAL_INFO_LEVEL1;
struct tagSAFEARRAYBOUND;
struct ILayoutStorage;
struct _wireBRECORD;
struct IHttpSecurity;
struct _SYSTEM_VDM_INSTEMUL_INFO;
enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES;
struct _WORKER_FACTORY_BASIC_INFORMATION;
struct _div_t;
struct tagCALPSTR;
struct _ldiv_t;
struct _userFLAG_STGMEDIUM;
enum tagDCOM_CALL_STATE;
struct _lldiv_t;
struct _LDOUBLE;
struct SChannelHookCallInfo;
struct _CRT_DOUBLE;
struct _CRT_FLOAT;
struct _LONGDOUBLE;
struct tagSTATDATA;
struct _LDBL12;
enum tagREGCLS;
enum tagMKREDUCE;
struct IOleCacheControl;
enum tagCOINITBASE;
struct _SM_STORE_PARAMETERS;
struct IOleWindow;
enum tagGLOBALOPT_PROPERTIES;
enum _SYSTEM_FIRMWARE_TABLE_ACTION;
struct _COAUTHIDENTITY;
struct _COAUTHINFO;
struct IOleInPlaceUIWindow;
struct _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION;
struct CO_DEVICE_CATALOG_COOKIE__;
enum tagMEMCTX;
struct IMallocSpy;
enum tagCLSCTX;
enum tagMSHLFLAGS;
struct tagCUSTDATA;
struct _BYTE_BLOB;
struct IEnumContextProps;
struct _SYSTEM_PROCESSOR_IDLE_INFORMATION;
enum _APTTYPE;
struct tagBIND_OPTS;
struct _WORD_BLOB;
struct _VARIABLE_NAME;
struct _DWORD_BLOB;
struct tagSOLE_AUTHENTICATION_INFO;
struct tagCAUL;
struct _FLAGGED_BYTE_BLOB;
struct _FLAGGED_WORD_BLOB;
struct tagRemSTGMEDIUM;
struct _SYSTEM_PROCESS_INFORMATION;
struct _BYTE_SIZEDARR;
struct _SHORT_SIZEDARR;
enum CWMO_FLAGS;
struct _LONG_SIZEDARR;
enum tagShutdownType;
struct _HYPER_SIZEDARR;
struct tagStorageLayout;
struct tagQUERYCONTEXT;
struct tagBLOB;
struct IUnknown;
struct IPipeLong;
struct __MIDL___MIDL_itf_wtypes_0000_0001_0001;
struct AsyncIUnknown;
struct IClassFactory;
struct IMarshal;
struct INoMarshal;
struct IAgileObject;
struct _MUTANT_BASIC_INFORMATION;
struct IActivationFilter;
struct IProcessInitControl;
struct _SYSTEM_THREAD_INFORMATION;
struct IMarshal2;
enum tagCALLTYPE;
struct IMalloc;
struct IStdMarshalInfo;
struct _BOOT_ENTRY_LIST;
struct IExternalConnection;
struct IMachineGlobalObjectTable;
struct _BOOT_ENTRY;
struct ICallFactory;
struct AsyncIMultiQI;
struct IInternalUnknown;
struct tagBSTRBLOB;
struct IEnumUnknown;
enum VARENUM;
struct IEnumString;
struct IAddrTrackingControl;
struct ISequentialStream;
struct IStream;
enum _KPROFILE_SOURCE;
enum tagLIBFLAGS;
struct IRpcChannelBuffer2;
struct IAsyncRpcChannelBuffer;
enum tagMKSYS;
struct IRpcChannelBuffer3;
struct _SYSTEM_SYSTEM_PARTITION_INFORMATION;
struct IRpcSyntaxNegotiate;
struct IHttpNegotiate2;
struct IRpcProxyBuffer;
struct IWindowForBindingUI;
enum tagRPCOPT_SERVER_LOCALITY_VALUES;
struct IPSFactoryBuffer;
struct IChannelHook;
union __MIDL_IAdviseSink_0002;
struct IClientSecurity;
enum tagGLOBALOPT_RO_FLAGS;
enum _WNF_DATA_SCOPE;
struct IServerSecurity;
struct _STGMEDIUM_UNION;
struct IRpcOptions;
enum tagSTREAM_SEEK;
struct ISurrogate;
struct IGlobalInterfaceTable;
struct _TIMER_BASIC_INFORMATION;
struct ISynchronize;
struct ISynchronizeHandle;
struct ISynchronizeEvent;
struct ISynchronizeMutex;
struct _EFI_DRIVER_ENTRY;
struct ICancelMethodCalls;
struct IOleAdviseHolder;
struct IRpcHelper;
struct IBindCallbackRedirect;
struct _EVENT_TRACE_TAG_FILTER_INFORMATION;
struct IReleaseMarshalBuffers;
struct _SMKM_FILE_INFO;
struct IPipeByte;
struct IInternetSecurityManagerEx;
struct IInternetSecurityMgrSite;
struct AsyncIPipeByte;
struct tagSAFEARRAY;
struct AsyncIPipeLong;
struct AsyncIPipeDouble;
struct _wireSAFEARR_BSTR;
struct IWinInetCacheHints2;
struct IWinInetHttpTimeouts;
struct IContext;
struct IComThreadingInfo;
struct XMLDSOControl;
struct IFastRundown;
struct IMarshalingStream;
struct DOMFreeThreadedDocument;
struct IXMLDSOControl;
enum tagCALLCONV;
struct _COSERVERINFO;
enum tagACTIVATIONTYPE;
struct IEnterpriseDropTarget;
struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO;
struct IAuthenticate;
struct IOleClientSite;
struct tagMULTI_QI;
struct _ST_STATS_SPACE_BITMAP;
struct ISoftDistExt;
struct IInternetZoneManagerEx;
struct tagSTATSTG;
enum tagSTGTY;
struct IContinue;
struct IOleInPlaceObject;
enum tagLOCKTYPE;
struct tagRPCOLEMESSAGE;
struct ITypeComp;
struct tagSOLE_AUTHENTICATION_SERVICE;
struct IBindStatusCallback;
struct _SYSTEM_VERIFIER_FAULTS_INFORMATION;
enum tagEOLE_AUTHENTICATION_CAPABILITIES;
struct IInternetProtocolRoot;
struct tagSOLE_AUTHENTICATION_LIST;
struct _wireSAFEARR_HAVEIID;
enum tagRPCOPT_PROPERTIES;
struct IInternetProtocolEx;
struct _SM_STORE_LIST_REQUEST;
enum tagGLOBALOPT_EH_VALUES;
enum tagGLOBALOPT_RPCTP_VALUES;
struct IUri;
enum tagCOINIT;
struct _SYSTEM_POOLTAG_INFORMATION;
struct IWinInetCacheHints;
struct _wireSAFEARR_DISPATCH;
enum _THDTYPE;
enum tagOLEMISC;
enum CO_MARSHALING_CONTEXT_ATTRIBUTES;
struct tagServerInformation;
struct CO_MTA_USAGE_COOKIE__;
enum tagSTDMSHLFLAGS;
struct tagPROPVARIANT;
enum tagCOWAIT_FLAGS;
struct _SYSTEM_SET_TIME_ADJUST_INFORMATION_PRECISE;
struct IInternetProtocolInfo;
enum AgileReferenceOptions;
struct _SYSTEM_FILECACHE_INFORMATION;
struct IWinInetHttpInfo;
struct IBindCtx;
struct _SYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION_WIN8;
struct tagCAUH;
struct IRunningObjectTable;
enum _WORKERFACTORYINFOCLASS;
struct IPersist;
struct IEnumSTATSTG;
struct tagCAC;
struct IStorage;
struct tagCAL;
struct IPersistStorage;
struct tagCAI;
struct IEnumFORMATETC;
enum __MIDL_IInternetZoneManager_0001;
struct tagPARAMDESCEX;
enum _EVENT_INFORMATION_CLASS;
enum __MIDL_IInternetSecurityManager_0003;
struct IRootStorage;
enum tagURLTEMPLATE;
struct tagTLIBATTR;
struct AsyncIAdviseSink;
struct AsyncIAdviseSink2;
struct tagCABSTR;
struct IDataObject;
struct _ZONEATTRIBUTES;
struct tagCAPROPVARIANT;
struct tagCABOOL;
struct _COVERAGE_MODULE_REQUEST;
struct IFillLockBytes;
struct tagPROPSPEC;
struct IProgressNotify;
struct IBlockingLock;
struct tagSTATPROPSETSTG;
struct IOplockStorage;
enum _SYSTEM_INFORMATION_CLASS;
struct IForegroundTransfer;
struct tagCACLSID;
struct IThumbnailExtractor;
enum _WATCHDOG_INFORMATION_CLASS;
struct IProcessLock;
struct ISurrogateService;
struct IInitializeSpy;
struct _SYSTEM_BOOT_ENVIRONMENT_INFORMATION;
struct tagRemHMETAFILEPICT;
struct tagRemHENHMETAFILE;
struct tagRemHPALETTE;
struct tagCSPLATFORM;
enum tagDVASPECT;
enum tagFUNCFLAGS;
enum tagTYSPEC;
struct _SYSTEM_KERNEL_DEBUGGER_INFORMATION;
enum tagSTATFLAG;
struct _SYSTEM_CRASH_DUMP_STATE_INFORMATION;
enum tagCHANGEKIND;
struct _userCLIPFORMAT;
union __MIDL_IWinTypes_0001;
struct _MUTANT_OWNER_INFORMATION;
struct _GDI_NONREMOTE;
struct tagBIND_OPTS2;
struct _SYSTEM_SPECIAL_POOL_INFORMATION;
enum tagSERVERCALL;
enum tagVARKIND;
struct _userHMETAFILEPICT;
struct _userHENHMETAFILE;
union __MIDL_IWinTypes_0006;
struct _SYSTEM_EXCEPTION_INFORMATION;
struct _userHBITMAP;
union __MIDL_IWinTypes_0007;
struct IErrorInfo;
union __MIDL_IWinTypes_0008;
union __MIDL_IWinTypes_0009;
enum __MIDL_IBindStatusCallback_0005;
struct tagCABSTRBLOB;
struct _userSTGMEDIUM;
struct tagCASCODE;
struct ITypeLibRegistrationReader;
struct tagFORMATETC;
struct _SYSTEM_POOL_ENTRY;
union tagCY;
struct IBindHttpSecurity;
struct _RTL_SCPCFG_NTDLL_EXPORTS;
enum __MIDL_IInternetSecurityManager_0001;
struct IInternetSecurityManager;
enum _LDR_DLL_LOAD_REASON;
struct _SYSTEM_VERIFIER_CANCELLATION_INFORMATION;
struct IEncodingFilterFactory;
struct IDropSource;
struct IEnumOLEVERB;
struct IOleObject;
struct _tagBINDINFO;
struct tagRemSNB;
struct IZoneIdentifier2;
struct IInternetZoneManagerEx2;
struct _tagPROTOCOLFILTERDATA;
struct IOleInPlaceSite;
struct tagDVTARGETDEVICE;
struct _DELAYLOAD_PROC_DESCRIPTOR;
struct IMonikerProp;
enum tagADVF;
enum tagTYMED;
struct IInternetProtocol;
struct tagSTGMEDIUM;
struct ICodeInstall;
struct _tagCODEBASEHOLD;
union __MIDL_IAdviseSink_0003;
struct tagSTGOPTIONS;
enum tagREGKIND;
struct IInternet;
struct IDataFilter;
struct _PS_MITIGATION_AUDIT_OPTIONS_MAP;
struct _OLESTREAM;
struct tagINTERFACEDATA;
enum tagPENDINGTYPE;
enum tagPENDINGMSG;
struct IInternetSession;
enum tagApplicationType;
struct IUriBuilderFactory;
struct IPropertySetStorage;
struct IEnumSTATPROPSTG;
struct ICreateTypeInfo;
struct tagCAH;
struct ICreateTypeLib;
struct IDispatch;
struct tagCAUB;
struct ITypeInfo2;
struct tagCAUI;
struct ITypeChangeEvents;
struct _RTL_PROCESS_MODULE_INFORMATION;
struct ICreateErrorInfo;
struct ITypeMarshal;
struct IXMLDOMText;
struct IErrorLog;
enum tagDOMNodeType;
struct tagCACLIPDATA;
struct XMLDOMDocumentEvents;
struct _wireSAFEARR_VARIANT;
struct IXMLDOMDocument;
struct tagCADBL;
struct _wireSAFEARRAY_UNION;
union __MIDL_IOleAutomationTypes_0001;
struct _OBJECT_ATTRIBUTES32;
enum tagTYPEFLAGS;
struct _wireSAFEARRAY;
struct UDATE;
struct tagCUSTDATAITEM;
struct tagVARIANT;
enum tagTYPEKIND;
struct tagVARDESC;
enum tagDISCARDCACHE;
enum _KWAIT_REASON;
struct tagELEMDESC;
struct tagTYPEATTR;
struct tagDISPPARAMS;
struct tagVersionedStream;
enum tagINVOKEKIND;
struct tagFUNCDESC;
struct _LDR_RESOURCE_INFO;
enum tagVARFLAGS;
struct _LDR_DLL_UNLOADED_NOTIFICATION_DATA;
enum _LDR_HOT_PATCH_STATE;
struct _tagHIT_LOGGING_INFO;
struct _DELAYLOAD_INFO;
enum _KTHREAD_STATE;
struct _NLSTABLEINFO;
enum __MIDL_IUri_0001;
struct tagCACY;
struct tagCADATE;
struct tagCALPWSTR;
enum tagOLERENDER;
struct _LDR_SECTION_INFO;
struct _LDR_IMPORT_CALLBACK_INFO;
struct tagSTATPROPSTG;
struct _STRING32;
struct IXMLDOMCDATASection;
struct IPersistMoniker;
struct IBindProtocol;
struct IAuthenticateEx;
struct _EVENT_TRACE_PROFILE_COUNTER_INFORMATION;
struct IHttpNegotiate;
struct _RTL_BALANCED_NODE;
struct _EVENT_TRACE_SOFT_RESTART_INFORMATION;
struct IUriBuilder;
struct IWinInetInfo;
struct IInternetBindInfo;
struct IInternetProtocolSink;
struct IInternetProtocolSinkStackable;
struct IXMLDocument2;
struct IInternetThreadSwitch;
struct IZoneIdentifier;
struct IInternetHostSecurityManager;
struct IInternetZoneManager;
struct IOleCache2;
struct IOleContainer;
struct IXMLDOMAttribute;
struct IOleInPlaceActiveObject;
struct _SYSTEM_OBJECTTYPE_INFORMATION;
struct IOleInPlaceFrame;
struct IViewObject2;
struct IDropSourceNotify;
struct _EVENT_TRACE_HEAP_TRACING_INFORMATION;
struct _ST_READ_LATENCY_BUCKET;
enum tagOLEWHICHMK;
enum tagUSERCLASSTYPE;
struct _SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION;
enum tagOLECLOSE;
struct _SYSTEM_POOLTAG;
struct tagOBJECTDESCRIPTOR;
struct _PS_SYSTEM_DLL_INIT_BLOCK;
struct _SYSTEM_REF_TRACE_INFORMATION;
enum tagOLELINKBIND;
enum tagBINDSPEED;
struct _LDRP_LOAD_CONTEXT;
union _LDR_DLL_NOTIFICATION_DATA;
struct tagOleMenuGroupWidths;
struct _EVENT_TRACE_SYSTEM_EVENT_INFORMATION;
struct _LDR_FAILURE_DATA;
struct _SMC_CACHE_LIST_REQUEST;
struct _SYSTEM_PREFETCH_PATCH_INFORMATION;
enum tagOLEVERBATTRIB;
enum _KHETERO_CPU_POLICY;
struct IServiceProvider;
struct IXMLDOMImplementation;
struct IXMLDOMDocumentFragment;
struct IXMLDOMNodeList;
struct IXMLDOMNamedNodeMap;
struct IXMLDOMCharacterData;
struct IXMLDOMElement;
struct _LDRP_CSLIST;
enum _EVENT_TRACE_PROFILE_ADD_INFORMATION_VERSIONS;
struct _CLIENT_ID64;
struct IXMLDOMComment;
struct _RTL_PROCESS_LOCK_INFORMATION;
struct IXMLDOMDocumentType;
struct _COVERAGE_MODULES;
struct IXMLDOMNotation;
struct IXMLDOMEntity;
struct IXMLDOMEntityReference;
struct IXTLRuntime;
struct _SYSTEM_INTERRUPT_INFORMATION;
struct _SYSTEM_RANGE_START_INFORMATION;
struct _PS_MITIGATION_OPTIONS_MAP;
struct IXMLHttpRequest;
struct XMLHTTPRequest;
struct _EVENT_TRACE_EXECUTIVE_RESOURCE_INFORMATION;
struct IXMLElementCollection;
struct IXMLElement;
struct IXMLElement2;
enum _EVENT_TRACE_INFORMATION_CLASS;
struct IXMLAttribute;
struct IXMLError;
struct _xml_error;
struct _SYSTEM_BASIC_WORKING_SET_INFORMATION;
enum IEObjectType;
struct _SINGLE_LIST_ENTRY32;
enum _TIMER_TYPE;
enum _TIMER_SET_INFORMATION_CLASS;
enum __MIDL_IBindStatusCallback_0001;
enum __MIDL_IBindStatusCallback_0002;
struct _SYSTEM_SESSION_MAPPED_VIEW_INFORMATION;
enum __MIDL_IBindStatusCallback_0003;
struct _QUAD_PTR;
struct _REMSECURITY_ATTRIBUTES;
struct _tagRemBINDINFO;
struct _EVENT_BASIC_INFORMATION;
struct tagRemFORMATETC;
enum tagBINDSTATUS;
struct _SM_DELETE_REQUEST;
enum __MIDL_IBindStatusCallbackEx_0001;
enum _SUITE_TYPE;
enum _COVERAGE_REQUEST_CODES;
enum __MIDL_IAuthenticateEx_0001;
struct _CLIENT_ID32;
struct _SYSTEM_THREAD_CID_PRIORITY_INFORMATION;
struct _STRING64;
struct _SYSTEM_BASIC_INFORMATION;
enum __MIDL_ICodeInstall_0001;
enum __MIDL_IUri_0002;
enum _WNF_STATE_NAME_INFORMATION;
struct _SYSTEM_PROCESS_ID_INFORMATION;
struct _tagPROTOCOLDATA;
struct _SYSTEM_HANDLE_INFORMATION_EX;
struct _tagStartParam;
struct _BOOT_OPTIONS;
struct _SYSTEM_VERIFIER_INFORMATION_LEGACY;
struct _OLESTREAMVTBL;
enum _tagPARSEACTION;
struct _COUNTED_REASON_CONTEXT;
struct _EVENT_TRACE_COVERAGE_SAMPLER_INFORMATION;
enum _tagPSUACTION;
enum _tagINTERNETFEATURELIST;
struct _PORT_MESSAGE;
enum tagURLZONE;
struct _SYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION;
enum _URLZONEREG;
struct _SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT_WIN8;
struct _tagSOFTDISTINFO;
struct CONFIRMSAFETY;
enum __MIDL_IGetBindHandle_0001;
struct _tagPROTOCOL_ARGUMENT;
struct PMemoryAllocator;
struct NUMPARSE;
struct _ST_READ_LATENCY_STATS;
struct tagPARAMDATA;
struct _WORKER_FACTORY_DEFERRED_WORK;
struct _SM_STORE_BASIC_PARAMS;
struct _SYSTEM_TIMEOFDAY_INFORMATION;
struct _QUAD;
struct _EVENT_TRACE_SPINLOCK_INFORMATION;
union _EVENT_TRACE_PROFILE_ADD_INFORMATION_V2;
struct _LARGE_INTEGER_128;
struct _ULARGE_INTEGER_128;
enum _EVENT_TYPE;
struct _RTL_PROCESS_LOCKS;
enum _WAIT_TYPE;
struct _STRING;
struct _SYSTEM_DPC_BEHAVIOR_INFORMATION;
enum _STORE_INFORMATION_CLASS;
struct _COVERAGE_MODULE_INFO;
enum _SYSTEM_ENVIRONMENT_INFORMATION_CLASS;
struct _VARIABLE_NAME_AND_VALUE;
struct _OBJECT_ATTRIBUTES;
enum _SM_STORE_TYPE;
enum _NT_PRODUCT_TYPE;
struct _CLIENT_ID;
struct _SYSTEM_CODEINTEGRITY_INFORMATION;
struct _KSYSTEM_TIME;
struct _CPTABLEINFO;
enum _SYSTEM_MEMORY_LIST_COMMAND;
struct _SYSTEM_MEMORY_LIST_INFORMATION;
enum _WATCHDOG_HANDLER_ACTION;
struct _SYSTEM_PROCESSOR_POWER_INFORMATION;
struct _LDR_SERVICE_TAG_RECORD;
struct _SYSTEM_FIRMWARE_TABLE_INFORMATION;
enum _LDR_DDAG_STATE;
struct _LDR_DDAG_NODE;
struct _LDR_DATA_TABLE_ENTRY;
struct _WNF_STATE_NAME;
struct _SYSTEM_WATCHDOG_HANDLER_INFORMATION;
struct _SYSTEM_HYPERVISOR_QUERY_INFORMATION;
struct _LDR_VERIFY_IMAGE_INFO;
enum _FILTER_BOOT_OPTION_OPERATION;
struct _LDR_ENUM_RESOURCE_ENTRY;
struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX;
struct _SYSTEM_PAGEFILE_INFORMATION;
struct _SYSTEM_POOL_INFORMATION;
struct _FILE_PATH;
struct _FILE_OBJECT;
struct _DEVICE_OBJECT;
struct _IRP;
struct _ST_STATS;
struct _SMC_CACHE_PARAMETERS;
struct _SMC_CACHE_CREATE_REQUEST;
struct _EFI_DRIVER_ENTRY_LIST;
struct _SM_STORE_CACHE_BACKED_PARAMS;
enum _SEMAPHORE_INFORMATION_CLASS;
enum _TIMER_INFORMATION_CLASS;
struct _TIMER_SET_COALESCABLE_TIMER_INFO;
struct _SYSTEM_VERIFIER_INFORMATION_EX;
struct _T2_SET_PARAMETERS_V0;
enum _ST_STATS_LEVEL;
enum _WNF_STATE_NAME_LIFETIME;
struct _SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT;
struct _WNF_TYPE_ID;
struct _WNF_DELIVERY_DESCRIPTOR;
struct _SYSTEM_PROCESSOR_MICROCODE_UPDATE_INFORMATION;
struct _SYSTEM_PERFORMANCE_INFORMATION;
struct _ST_DATA_MGR_STATS;
struct _SYSTEM_EXTENDED_THREAD_INFORMATION;
struct _ST_IO_STATS_PERIOD;
struct _SYSTEM_PROCESSOR_PERFORMANCE_DISTRIBUTION;
struct _SYSTEM_DEVICE_INFORMATION;
struct _SYSTEM_CALL_TIME_INFORMATION;
struct _RTL_PROCESS_BACKTRACES;
struct _SYSTEM_WATCHDOG_TIMER_INFORMATION;
struct _SYSTEM_QUERY_TIME_ADJUST_INFORMATION_PRECISE;
struct _SYSTEM_CONTEXT_SWITCH_INFORMATION;
struct _EVENT_TRACE_TIME_PROFILE_INFORMATION;
struct _SYSTEM_LOOKASIDE_INFORMATION;
enum _SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS;
struct _EVENT_TRACE_STACK_CACHING_INFORMATION;
struct _SYSTEM_BIGPOOL_INFORMATION;
struct _SYSTEM_SESSION_PROCESS_INFORMATION;
struct _EVENT_TRACE_PROFILE_ADD_INFORMATION;
struct _SYSTEM_BIGPOOL_ENTRY;
struct _SMC_CACHE_DELETE_REQUEST;
enum _SM_STORE_MANAGER_TYPE;
struct _SMC_STORE_CREATE_REQUEST;
struct _SMC_STORE_DELETE_REQUEST;
struct _SMC_CACHE_STATS;
struct _SMC_CACHE_STATS_REQUEST;
struct _SM_REGISTRATION_INFO;
struct _ALPC_MESSAGE_ATTRIBUTES;
struct _DBGKM_UNLOAD_DLL;
struct _API_SET_NAMESPACE;
struct _SM_REGISTRATION_REQUEST;
struct _SM_STORE_RESIZE_REQUEST;
struct _SMC_STORE_RESIZE_REQUEST;
enum _SM_CONFIG_TYPE;
struct _SM_CONFIG_REQUEST;
struct _SM_STORE_HIGH_MEM_PRIORITY_REQUEST;
struct _USER_EXPIRES_INFORMATION;
struct _SM_SYSTEM_STORE_TRIM_REQUEST;
struct _SM_MEM_COMPRESSION_INFO_REQUEST;
struct _SYSTEM_REGISTRY_APPEND_STRING_PARAMETERS;
struct _SYSTEM_VHD_BOOT_INFORMATION;
struct _PS_CPU_QUOTA_QUERY_ENTRY;
struct _PS_CPU_QUOTA_QUERY_INFORMATION;
struct _SYSTEM_ERROR_PORT_TIMEOUTS;
struct _SYSTEM_LOW_PRIORITY_IO_INFORMATION;
enum _BOOT_ENTROPY_SOURCE_RESULT_CODE;
enum _BOOT_ENTROPY_SOURCE_ID;
struct _TPM_BOOT_ENTROPY_NT_RESULT;
struct _BOOT_ENTROPY_SOURCE_NT_RESULT;
struct _BOOT_ENTROPY_NT_RESULT;
struct _SYSTEM_VERIFIER_COUNTERS_INFORMATION;
struct _SYSTEM_ACPI_AUDIT_INFORMATION;
struct _SYSTEM_BASIC_PERFORMANCE_INFORMATION;
struct _QUERY_PERFORMANCE_COUNTER_FLAGS;
struct _SYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION;
enum _SYSTEM_PIXEL_FORMAT;
struct _SYSTEM_BOOT_GRAPHICS_INFORMATION;
struct _MEMORY_SCRUB_INFORMATION;
union _SYSTEM_BAD_PAGE_INFORMATION;
struct _PEBS_DS_SAVE_AREA32;
struct _PEBS_DS_SAVE_AREA64;
union _PEBS_DS_SAVE_AREA;
struct _ACTIVATION_CONTEXT_STRING_SECTION_HASH_BUCKET;
struct _MUP_FSCTL_UNC_CACHE_INFORMATION;
struct _PROCESSOR_PROFILE_CONTROL_AREA;
struct _SYSTEM_PROCESSOR_PROFILE_CONTROL_AREA;
struct _ACTIVATION_CONTEXT_DATA_ASSEMBLY_INFORMATION;
union _DOMAIN_LOCALIZABLE_INFO_BUFFER;
struct _MEMORY_COMBINE_INFORMATION;
struct _MEMORY_COMBINE_INFORMATION_EX;
struct _MEMORY_COMBINE_INFORMATION_EX2;
struct _SYSTEM_ENTROPY_TIMING_INFORMATION;
struct _SYSTEM_CONSOLE_INFORMATION;
struct _SYSTEM_PLATFORM_BINARY_INFORMATION;
struct _SYSTEM_POLICY_INFORMATION;
struct _SYSTEM_HYPERVISOR_PROCESSOR_COUNT_INFORMATION;
struct _SYSTEM_DEVICE_DATA_INFORMATION;
struct _PHYSICAL_CHANNEL_RUN;
struct _SYSTEM_MEMORY_TOPOLOGY_INFORMATION;
struct _SYSTEM_MEMORY_CHANNEL_INFORMATION;
struct _SYSTEM_BOOT_LOGO_INFORMATION;
struct _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION_EX;
struct _CRITICAL_PROCESS_EXCEPTION_DATA;
struct _FILE_REPARSE_POINT_INFORMATION;
struct _SYSTEM_SECUREBOOT_POLICY_INFORMATION;
union _SAM_GENERIC_OPERATION_OUTPUT;
struct _SYSTEM_PAGEFILE_INFORMATION_EX;
struct _PROCESS_WS_WATCH_INFORMATION;
struct _SYSTEM_SECUREBOOT_INFORMATION;
struct _FILE_NETWORK_PHYSICAL_NAME_INFORMATION;
struct _PROCESS_DISK_COUNTERS;
enum _SECURE_SETTING_VALUE_TYPE;
union _ENERGY_STATE_DURATION;
struct _PROCESS_ENERGY_VALUES;
union _TIMELINE_BITMAP;
struct _PROCESS_ENERGY_VALUES_EXTENSION;
struct _PROCESS_EXTENDED_ENERGY_VALUES;
enum _SYSTEM_PROCESS_CLASSIFICATION;
struct _SYSTEM_PROCESS_INFORMATION_EXTENSION;
struct _SYSTEM_PORTABLE_WORKSPACE_EFI_LAUNCHER_INFORMATION;
struct _SYSTEM_KERNEL_DEBUGGER_INFORMATION_EX;
struct _SYSTEM_ELAM_CERTIFICATE_INFORMATION;
struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2;
struct _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V1;
struct _SYSTEM_PROCESSOR_FEATURES_INFORMATION;
struct _SYSTEM_EDID_INFORMATION;
struct _SYSTEM_MANUFACTURING_INFORMATION;
struct _SYSTEM_ENERGY_ESTIMATION_CONFIG_INFORMATION;
struct _HV_DETAILS;
struct _SYSTEM_HYPERVISOR_DETAIL_INFORMATION;
struct _SYSTEM_PROCESSOR_CYCLE_STATS_INFORMATION;
struct _SYSTEM_TPM_INFORMATION;
struct _SYSTEM_VSM_PROTECTION_INFORMATION;
struct _SYSTEM_KERNEL_DEBUGGER_FLAGS;
struct _SYSTEM_CODEINTEGRITYPOLICY_INFORMATION;
struct _FILE_STANDARD_INFORMATION_EX;
struct _ALPC_SERVER_SESSION_INFORMATION;
struct _SYSTEM_ISOLATED_USER_MODE_INFORMATION;
struct _FILE_STANDARD_INFORMATION;
struct _SYSTEM_SINGLE_MODULE_INFORMATION;
struct _FILE_EA_INFORMATION;
struct _SYSTEM_INTERRUPT_CPU_SET_INFORMATION;
struct _SYSTEM_SECUREBOOT_POLICY_FULL_INFORMATION;
struct _KAFFINITY_EX;
struct _SYSTEM_ROOT_SILO_INFORMATION;
struct _SYSTEM_CPU_SET_TAG_INFORMATION;
struct _SYSTEM_SECURE_KERNEL_HYPERGUARD_PROFILE_INFORMATION;
struct _SYSTEM_SECUREBOOT_PLATFORM_MANIFEST_INFORMATION;
struct _SYSTEM_INTERRUPT_STEERING_INFORMATION_INPUT;
union _SYSTEM_INTERRUPT_STEERING_INFORMATION_OUTPUT;
struct _SYSTEM_MEMORY_USAGE_INFORMATION;
struct _SYSTEM_CODEINTEGRITY_CERTIFICATE_INFORMATION;
struct _SYSTEM_PHYSICAL_MEMORY_INFORMATION;
enum _SYSTEM_ACTIVITY_MODERATION_STATE;
struct _SYSTEM_ACTIVITY_MODERATION_EXE_STATE;
struct _FILE_GET_EA_INFORMATION;
enum _SYSTEM_ACTIVITY_MODERATION_APP_TYPE;
struct _POWER_THROTTLING_PROCESS_STATE;
struct _SYSTEM_ACTIVITY_MODERATION_INFO;
struct _PROCESS_CHILD_PROCESS_INFORMATION;
struct _SYSTEM_ACTIVITY_MODERATION_APP_SETTINGS;
struct _SYSTEM_ACTIVITY_MODERATION_USER_SETTINGS;
struct _MEMORY_WORKING_SET_EX_INFORMATION;
struct _SYSTEM_CODEINTEGRITY_UNLOCK_INFORMATION;
enum _FSINFOCLASS;
struct _SYSTEM_FLUSH_INFORMATION;
struct _SYSTEM_WRITE_CONSTRAINT_INFORMATION;
struct _SYSTEM_KERNEL_VA_SHADOW_INFORMATION;
struct _SYSTEM_CODEINTEGRITYVERIFICATION_INFORMATION;
struct _SYSTEM_HYPERVISOR_USER_SHARED_DATA;
struct _SYSTEM_HYPERVISOR_SHARED_PAGE_INFORMATION;
struct _SYSTEM_FIRMWARE_PARTITION_INFORMATION;
struct _SYSTEM_SPECULATION_CONTROL_INFORMATION;
struct _SYSTEM_DMA_GUARD_POLICY_INFORMATION;
struct _SYSTEM_ENCLAVE_LAUNCH_CONTROL_INFORMATION;
struct _SYSTEM_WORKLOAD_ALLOWED_CPU_SET_INFORMATION;
struct _SYSTEM_SECURITY_MODEL_INFORMATION;
union _SECURE_SPECULATION_CONTROL_INFORMATION;
struct _SYSTEM_FIRMWARE_RAMDISK_INFORMATION;
struct _SYSTEM_SHADOW_STACK_INFORMATION;
union _SYSTEM_BUILD_VERSION_INFORMATION_FLAGS;
struct _SYSTEM_BUILD_VERSION_INFORMATION;
struct _SYSTEM_POOL_LIMIT_MEM_INFO;
struct _SYSTEM_POOL_LIMIT_INFO;
struct _SYSTEM_POOL_LIMIT_INFORMATION;
struct _HV_MINROOT_NUMA_LPS;
struct _SYSTEM_XFG_FAILURE_INFORMATION;
enum _SYSTEM_IOMMU_STATE;
struct _PROCESS_TLS_INFORMATION;
struct _SYSTEM_IOMMU_STATE_INFORMATION;
struct _SYSTEM_HYPERVISOR_MINROOT_INFORMATION;
struct _FILE_VOLUME_NAME_INFORMATION;
struct _SYSTEM_HYPERVISOR_BOOT_PAGES_INFORMATION;
struct _SYSTEM_POINTER_AUTH_INFORMATION;
enum _BCD_ELEMENT_DATATYPE_CLASS;
struct _PROCESS_STACK_ALLOCATION_INFORMATION_EX;
struct _PROCESS_STACK_ALLOCATION_INFORMATION;
struct _SYSTEM_ORIGINAL_IMAGE_FEATURE_INFORMATION_INPUT;
struct _SYSTEM_ORIGINAL_IMAGE_FEATURE_INFORMATION_OUTPUT;
struct _SYSTEM_MEMORY_NUMA_INFORMATION_INPUT;
struct _SYSTEM_MEMORY_NUMA_INFORMATION_OUTPUT;
enum _SYSTEM_MEMORY_NUMA_PERFORMANCE_QUERY_DATA_TYPES;
struct _SYSTEM_MEMORY_NUMA_PERFORMANCE_INFORMATION_INPUT;
struct _SYSTEM_MEMORY_NUMA_PERFORMANCE_ENTRY;
struct _SYSTEM_MEMORY_NUMA_PERFORMANCE_INFORMATION_OUTPUT;
struct _SYSTEM_OSL_RAMDISK_ENTRY;
struct _SYSTEM_TRUSTEDAPPS_RUNTIME_INFORMATION;
struct _SYSTEM_OSL_RAMDISK_INFORMATION;
enum _SYSDBG_COMMAND;
enum _PS_ATTRIBUTE_NUM;
struct _SYSDBG_VIRTUAL;
struct _OBJECT_NAME_INFORMATION;
struct _MOUNTMGR_TARGET_NAME;
struct _SYSDBG_PHYSICAL;
struct _SYSDBG_CONTROL_SPACE;
struct _DOMAIN_GENERAL_INFORMATION2;
enum _INTERFACE_TYPE;
struct _SYSDBG_IO_SPACE;
struct _SYSDBG_MSR;
enum _BUS_DATA_TYPE;
struct _SYSDBG_BUS_DATA;
struct _SYSDBG_TRIAGE_DUMP;
union _SYSDBG_LIVEDUMP_CONTROL_FLAGS;
union _SYSDBG_LIVEDUMP_CONTROL_ADDPAGES;
struct _SYSDBG_LIVEDUMP_SELECTIVE_CONTROL;
struct _SYSDBG_LIVEDUMP_CONTROL_V1;
struct _SYSDBG_LIVEDUMP_CONTROL;
struct _SYSDBG_KD_PULL_REMOTE_FILE;
enum _HARDERROR_RESPONSE_OPTION;
enum _HARDERROR_RESPONSE;
enum _ALTERNATIVE_ARCHITECTURE_TYPE;
struct _KUSER_SHARED_DATA;
struct _RTL_RETPOLINE_ROUTINES;
struct _LSA_FOREST_TRUST_INFORMATION2;
enum _ATOM_INFORMATION_CLASS;
struct _ATOM_BASIC_INFORMATION;
struct _ATOM_TABLE_INFORMATION;
enum _SHUTDOWN_ACTION;
enum _BCD_MESSAGE_TYPE;
enum _BCD_IMPORT_FLAGS;
enum _BCD_OPEN_FLAGS;
enum _BCD_OBJECT_TYPE;
enum _BCD_APPLICATION_OBJECT_TYPE;
enum _BCD_APPLICATION_IMAGE_TYPE;
enum _BCD_INHERITED_CLASS_TYPE;
union _BCD_OBJECT_DATATYPE;
struct _ALPC_PORT_ATTRIBUTES;
struct _BCD_OBJECT_DESCRIPTION;
enum _PORT_INFORMATION_CLASS;
struct _BCD_OBJECT;
enum _BCD_COPY_FLAGS;
struct _DBGUI_CREATE_PROCESS;
enum _BCD_ELEMENT_DATATYPE_FORMAT;
struct _ALPC_COMPLETION_LIST_STATE;
struct _ALPC_COMPLETION_LIST_HEADER;
enum _BCD_ELEMENT_DEVICE_TYPE;
union _BCD_ELEMENT_DATATYPE;
struct _ETW_UMS_EVENT_DISASSOCIATE;
struct _BCD_ELEMENT_DEVICE_QUALIFIED_PARTITION;
struct _BCD_ELEMENT_DEVICE;
struct _BCD_ELEMENT_STRING;
struct _BCD_ELEMENT_OBJECT;
struct _BCD_ELEMENT_OBJECT_LIST;
struct _BCD_ELEMENT_INTEGER;
struct _BCD_ELEMENT_INTEGER_LIST;
struct _BCD_ELEMENT_BOOLEAN;
struct BCD_ELEMENT_DESCRIPTION;
struct _BCD_ELEMENT;
enum _BCD_FLAGS;
enum _BcdBootMgrElementTypes;
enum _BcdLibrary_FirstMegabytePolicy;
enum _BcdLibrary_DebuggerType;
enum _BcdLibrary_DebuggerStartPolicy;
enum _BcdLibrary_ConfigAccessPolicy;
enum _BcdLibrary_UxDisplayMessageType;
enum BcdLibrary_SafeBoot;
enum _BcdLibrary_BootUxPolicy;
enum _BcdLibraryElementTypes;
enum _BcdTemplateElementTypes;
enum _BcdOSLoader_NxPolicy;
enum _BcdOSLoader_PAEPolicy;
enum _BcdOSLoader_BootStatusPolicy;
enum _BcdOSLoaderElementTypes;
enum _MEMORY_INFORMATION_CLASS;
struct _MEMORY_WORKING_SET_BLOCK;
struct _MEMORY_WORKING_SET_INFORMATION;
struct _MEMORY_REGION_INFORMATION;
struct _MUP_FSCTL_UNC_CACHE_ENTRY;
enum _MEMORY_WORKING_SET_EX_LOCATION;
union _MEMORY_WORKING_SET_EX_BLOCK;
struct _MEMORY_SHARED_COMMIT_INFORMATION;
struct _MEMORY_IMAGE_INFORMATION;
struct _MEMORY_ENCLAVE_IMAGE_INFORMATION;
enum _MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE;
struct _MEMORY_PHYSICAL_CONTIGUITY_UNIT_INFORMATION;
struct _MEMORY_PHYSICAL_CONTIGUITY_INFORMATION;
struct _RTL_SCP_CFG_ARM64_HEADER;
enum _RTL_SCP_CFG_PAGE_TYPE;
struct _RTL_SCP_CFG_COMMON_HEADER;
struct _RTL_SCP_CFG_HEADER;
struct _RTL_SCP_CFG_REGION_BOUNDS;
struct _RTL_SCP_CFG_NTDLL_EXPORTS;
struct _RTL_SCP_CFG_NTDLL_EXPORTS_ARM64EC;
struct _SAM_OPERATION_OBJCHG_OUTPUT;
struct _RTL_KSCP_ROUTINES;
enum _MEMORY_IMAGE_EXTENSION_TYPE;
struct _MEMORY_IMAGE_EXTENSION_INFORMATION;
struct _PF_GPU_UTILIZATION_INFO;
struct _MEMORY_FRAME_INFORMATION;
struct _FILEOFFSET_INFORMATION;
struct _PERFINFO_SET_POWER_ACTION;
struct _PAGEDIR_INFORMATION;
struct _UNIQUE_PROCESS_INFORMATION;
struct _MMPFN_IDENTITY;
struct _MMPFN_MEMSNAP_INFORMATION;
enum _SECTION_INFORMATION_CLASS;
struct _SECTION_BASIC_INFORMATION;
struct _SECTION_IMAGE_INFORMATION;
struct _SECTION_INTERNAL_IMAGE_INFORMATION;
enum _SECTION_INHERIT;
struct _IO_STATUS_BLOCK;
enum _VIRTUAL_MEMORY_INFORMATION_CLASS;
struct _MEMORY_RANGE_ENTRY;
struct _MEMORY_PREFETCH_INFORMATION;
struct _CFG_CALL_TARGET_LIST_INFORMATION;
enum _PARTITION_INFORMATION_CLASS;
struct _MEMORY_PARTITION_CONFIGURATION_INFORMATION;
struct _MEMORY_PARTITION_TRANSFER_INFORMATION;
struct _MEMORY_PARTITION_PAGEFILE_INFORMATION;
struct _MEMORY_PARTITION_PAGE_COMBINE_INFORMATION;
struct _MEMORY_PARTITION_PAGE_RANGE;
struct _MEMORY_PARTITION_INITIAL_ADD_INFORMATION;
struct _MEMORY_PARTITION_MEMORY_EVENTS_INFORMATION;
enum _OBJECT_INFORMATION_CLASS;
enum _ALPC_MESSAGE_INFORMATION_CLASS;
struct _OBJECT_BASIC_INFORMATION;
struct _OBJECT_TYPE_INFORMATION;
struct _PF_TRACE_LIMITS;
struct _OBJECT_TYPES_INFORMATION;
struct _ETW_DFSS_START_NEW_INTERVAL;
struct _ETW_PER_SESSION_QUOTA;
enum _PF_ENABLE_STATUS;
struct _OBJECT_HANDLE_FLAG_INFORMATION;
struct _FILE_ACCESS_INFORMATION;
struct _OBJECT_DIRECTORY_INFORMATION;
enum _BOUNDARY_ENTRY_TYPE;
struct _OBJECT_BOUNDARY_ENTRY;
struct _OBJECT_BOUNDARY_DESCRIPTOR;
enum _SYMBOLIC_LINK_INFO_CLASS;
struct _ACTIVATION_CONTEXT_DATA;
struct _ACTIVATION_CONTEXT_DATA_TOC_HEADER;
struct _ACTIVATION_CONTEXT_DATA_TOC_ENTRY;
struct _ACTIVATION_CONTEXT_DATA_EXTENDED_TOC_HEADER;
struct _ACTIVATION_CONTEXT_DATA_EXTENDED_TOC_ENTRY;
struct _ACTIVATION_CONTEXT_DATA_ASSEMBLY_ROSTER_HEADER;
struct _ACTIVATION_CONTEXT_DATA_ASSEMBLY_ROSTER_ENTRY;
struct _ACTIVATION_CONTEXT_STRING_SECTION_HEADER;
struct _ACTIVATION_CONTEXT_STRING_SECTION_ENTRY;
struct _ACTIVATION_CONTEXT_STRING_SECTION_HASH_TABLE;
struct _WIN32K_SYSCALL_FILTER;
struct _ACTIVATION_CONTEXT_GUID_SECTION_HEADER;
struct _ACTIVATION_CONTEXT_GUID_SECTION_ENTRY;
struct _FILE_QUOTA_INFORMATION;
struct _ACTIVATION_CONTEXT_GUID_SECTION_HASH_TABLE;
struct _FILE_GET_QUOTA_INFORMATION;
struct _PROCESS_ENERGY_TRACKING_STATE;
struct _ACTIVATION_CONTEXT_GUID_SECTION_HASH_BUCKET;
struct _ACTIVATION_CONTEXT_DATA_ASSEMBLY_GLOBAL_INFORMATION;
struct _ACTIVATION_CONTEXT_DATA_DLL_REDIRECTION;
struct _ACTIVATION_CONTEXT_DATA_DLL_REDIRECTION_PATH_SEGMENT;
struct _ACTIVATION_CONTEXT_DATA_WINDOW_CLASS_REDIRECTION;
struct _ACTIVATION_CONTEXT_DATA_COM_SERVER_REDIRECTION;
struct _ACTIVATION_CONTEXT_DATA_COM_SERVER_REDIRECTION_SHIM;
struct _ACTIVATION_CONTEXT_DATA_COM_INTERFACE_REDIRECTION;
struct _ACTIVATION_CONTEXT_DATA_TYPE_LIBRARY_VERSION;
struct _ACTIVATION_CONTEXT_DATA_COM_TYPE_LIBRARY_REDIRECTION;
struct _ACTIVATION_CONTEXT_DATA_COM_PROGID_REDIRECTION;
struct _ACTIVATION_CONTEXT_DATA_CLR_SURROGATE;
struct _ACTIVATION_CONTEXT_DATA_APPLICATION_SETTINGS;
struct _COMPATIBILITY_CONTEXT_ELEMENT_LEGACY;
struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION_LEGACY;
struct _ASSEMBLY_STORAGE_MAP_ENTRY;
struct _ASSEMBLY_STORAGE_MAP;
struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME;
struct _ACTIVATION_CONTEXT_STACK;
struct _RTL_USER_PROCESS_PARAMETERS;
struct _SILO_USER_SHARED_DATA;
struct _LEAP_SECOND_DATA;
struct _PEB_LDR_DATA;
struct _FILE_INTEGRITY_STREAM_INFORMATION;
enum _PROCESS_TLS_INFORMATION_TYPE;
struct _API_SET_HASH_ENTRY;
struct _API_SET_NAMESPACE_ENTRY;
struct _API_SET_VALUE_ENTRY;
struct _TELEMETRY_COVERAGE_HEADER;
struct _WER_RECOVERY_INFO;
struct _WER_FILE;
struct _WER_MEMORY;
struct _WER_GATHER;
struct _WER_METADATA;
struct _WER_RUNTIME_DLL;
struct _WER_DUMP_COLLECTION;
struct _WER_HEAP_MAIN_HEADER;
struct _WER_PEB_HEADER_BLOCK;
struct _PEB;
struct _MOUNTMGR_CHANGE_NOTIFY_INFO;
struct _MOUNTMGR_VOLUME_MOUNT_POINT;
struct _ETW_THREAD_AFFINITY_EVENT;
struct _GDI_TEB_BATCH;
struct _TEB_ACTIVE_FRAME_CONTEXT;
struct _TEB_ACTIVE_FRAME_CONTEXT_EX;
struct _TEB_ACTIVE_FRAME;
struct _TEB_ACTIVE_FRAME_EX;
struct _INITIAL_TEB;
enum _PROCESSINFOCLASS;
enum _THREADINFOCLASS;
struct _PAGE_PRIORITY_INFORMATION;
struct _PROCESS_BASIC_INFORMATION;
struct _PROCESS_EXTENDED_BASIC_INFORMATION;
struct _VM_COUNTERS;
struct _VM_COUNTERS_EX;
struct _VM_COUNTERS_EX2;
struct _KERNEL_USER_TIMES;
struct _POOLED_USAGE_AND_LIMITS;
struct _PROCESS_EXCEPTION_PORT;
struct _PROCESS_ACCESS_TOKEN;
struct _PROCESS_LDT_INFORMATION;
struct _PROCESS_LDT_SIZE;
struct _IO_COMPLETION_BASIC_INFORMATION;
struct _PROCESS_WS_WATCH_INFORMATION_EX;
enum _IO_COMPLETION_INFORMATION_CLASS;
struct _PROCESS_PRIORITY_CLASS;
struct _PROCESS_PRIORITY_CLASS_EX;
struct _PROCESS_FOREGROUND_BACKGROUND;
struct _PROCESS_DEVICEMAP_INFORMATION;
struct _PROCESS_DEVICEMAP_INFORMATION_EX;
struct _PROCESS_SESSION_INFORMATION;
struct _PROCESS_HANDLE_TRACING_ENABLE;
struct _PROCESS_HANDLE_TRACING_ENABLE_EX;
struct _PROCESS_HANDLE_TRACING_ENTRY;
struct _PROCESS_HANDLE_TRACING_QUERY;
struct _THREAD_TLS_INFORMATION;
struct _PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION;
union _PROCESS_AFFINITY_UPDATE_MODE;
union _PROCESS_MEMORY_ALLOCATION_MODE;
struct _PROCESS_HANDLE_INFORMATION;
struct _PROCESS_CYCLE_TIME_INFORMATION;
struct _PROCESS_WINDOW_INFORMATION;
struct _PROCESS_HANDLE_TABLE_ENTRY_INFO;
struct _PROCESS_HANDLE_SNAPSHOT_INFORMATION;
struct _PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY2;
struct _PROCESS_MITIGATION_POLICY_INFORMATION;
struct _PROCESS_DYNAMIC_FUNCTION_TABLE_INFORMATION;
struct _DYNAMIC_FUNCTION_TABLE;
struct _PROCESS_KEEPALIVE_COUNT_INFORMATION;
struct _PROCESS_REVOKE_FILE_HANDLES_INFORMATION;
enum _PROCESS_WORKING_SET_OPERATION;
struct _PROCESS_WORKING_SET_CONTROL;
enum _PS_PROTECTED_TYPE;
enum _PS_PROTECTED_SIGNER;
struct _PS_PROTECTION;
struct _PROCESS_FAULT_INFORMATION;
struct _PROCESS_TELEMETRY_ID_INFORMATION;
struct _PROCESS_COMMIT_RELEASE_INFORMATION;
struct _PROCESS_JOB_MEMORY_INFO;
struct _VR_LOAD_DIFFERENCING_HIVE_FOR_HOST;
struct _JOBOBJECT_WAKE_FILTER;
struct _PROCESS_WAKE_INFORMATION;
struct _MUP_FSCTL_UNC_PROVIDER_INFORMATION;
struct _MANAGE_WRITES_TO_EXECUTABLE_MEMORY;
struct _POWER_THROTTLING_THREAD_STATE;
union _PROCESS_READWRITEVM_LOGGING_INFORMATION;
struct _PROCESS_UPTIME_INFORMATION;
union _PROCESS_SYSTEM_RESOURCE_MANAGEMENT;
struct _PROCESS_SECURITY_DOMAIN_INFORMATION;
struct _PROCESS_COMBINE_SECURITY_DOMAINS_INFORMATION;
union _PROCESS_LOGGING_INFORMATION;
struct _PROCESS_LEAP_SECOND_INFORMATION;
struct _PROCESS_FIBER_SHADOW_STACK_ALLOCATION_INFORMATION;
struct _PROCESS_FREE_FIBER_SHADOW_STACK_ALLOCATION_INFORMATION;
struct _PROCESS_SYSCALL_PROVIDER_INFORMATION;
struct _PROCESS_MEMBERSHIP_INFORMATION;
struct _PF_VIRTUAL_QUERY;
struct _PROCESS_NETWORK_COUNTERS;
struct _PROCESS_TEB_VALUE_INFORMATION;
struct _SEGMENT_HEAP_PERFORMANCE_COUNTER_INFORMATION;
struct _THREAD_BASIC_INFORMATION;
struct _THREAD_LAST_SYSCALL_INFORMATION;
struct _THREAD_CYCLE_TIME_INFORMATION;
enum _SUPERFETCH_INFORMATION_CLASS;
struct _HEAP_INFORMATION_ITEM;
struct _THREAD_LOCK_OWNERSHIP;
enum _SCHEDULER_SHARED_DATA_SLOT_ACTION;
struct _SCHEDULER_SHARED_DATA_SLOT_INFORMATION;
struct _THREAD_TEB_INFORMATION;
struct _COUNTER_READING;
struct _THREAD_PERFORMANCE_DATA;
struct _THREAD_PROFILING_INFORMATION;
struct _RTL_UMS_CONTEXT;
enum _THREAD_UMS_INFORMATION_COMMAND;
struct _RTL_UMS_COMPLETION_LIST;
struct _THREAD_UMS_INFORMATION;
struct _THREAD_NAME_INFORMATION;
struct _ALPC_WORK_ON_BEHALF_TICKET;
struct _RTL_WORK_ON_BEHALF_TICKET_EX;
enum _SUBSYSTEM_INFORMATION_TYPE;
enum _THREAD_WORKLOAD_CLASS;
struct _THREAD_INDEX_INFORMATION;
enum _PROCESS_STATE_CHANGE_TYPE;
enum _THREAD_STATE_CHANGE_TYPE;
struct _APC_CALLBACK_DATA_CONTEXT;
struct _PROC_THREAD_ATTRIBUTE;
enum _SE_SAFE_OPEN_PROMPT_EXPERIENCE_RESULTS;
struct _SE_SAFE_OPEN_PROMPT_RESULTS;
struct _PROC_THREAD_BNOISOLATION_ATTRIBUTE;
struct _ISOLATION_MANIFEST_PROPERTIES;
struct _PS_ATTRIBUTE;
struct _RTL_HEAP_INFORMATION_V1;
struct _PS_ATTRIBUTE_LIST;
struct _PS_MEMORY_RESERVE;
enum _PS_STD_HANDLE_STATE;
struct _PS_STD_HANDLE_INFO;
union _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS;
struct _PS_TRUSTLET_ATTRIBUTE_TYPE;
struct _PS_TRUSTLET_ATTRIBUTE_HEADER;
struct _PS_TRUSTLET_ATTRIBUTE_DATA;
struct _PS_TRUSTLET_CREATE_ATTRIBUTES;
struct _PS_BNO_ISOLATION_PARAMETERS;
union _PS_PROCESS_CREATION_SVE_VECTOR_LENGTH;
enum _PS_MITIGATION_OPTION;
enum _PS_CREATE_STATE;
struct _PS_CREATE_INFO;
struct _FILE_FULL_EA_INFORMATION;
struct _PO_WAKE_SOURCE_INTERNAL;
struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION_V2;
struct _JOBOBJECT_EXTENDED_ACCOUNTING_INFORMATION;
struct _POWER_REQUEST;
struct _JOBOBJECT_WAKE_INFORMATION;
struct _JOBOBJECT_WAKE_INFORMATION_V1;
struct _JOBOBJECT_INTERFERENCE_INFORMATION;
struct _JOBOBJECT_FREEZE_INFORMATION;
struct _JOBOBJECT_CONTAINER_IDENTIFIER_V2;
struct _JOBOBJECT_MEMORY_USAGE_INFORMATION;
struct _JOBOBJECT_MEMORY_USAGE_INFORMATION_V2;
struct _SILOOBJECT_ROOT_DIRECTORY;
struct _SERVERSILO_INIT_INFORMATION;
struct _JOBOBJECT_ENERGY_TRACKING_STATE;
enum _JOBOBJECT_IO_PRIORITY_LIMIT_FLAGS;
struct _JOBOBJECT_IO_PRIORITY_LIMIT;
enum _JOBOBJECT_PAGE_PRIORITY_LIMIT_FLAGS;
struct _JOBOBJECT_PAGE_PRIORITY_LIMIT;
struct _SERVERSILO_DIAGNOSTIC_INFORMATION;
struct _JOBOBJECT_NETWORK_ACCOUNTING_INFORMATION;
enum _MEMORY_RESERVE_TYPE;
enum _PSSNT_CAPTURE_FLAGS;
enum _PSSNT_DUPLICATE_FLAGS;
enum _PSSNT_QUERY_INFORMATION_CLASS;
struct _NTPSS_MEMORY_BULK_INFORMATION;
struct _DBGKM_EXCEPTION;
struct _DBGKM_CREATE_THREAD;
struct _DBGKM_CREATE_PROCESS;
struct _DBGKM_EXIT_THREAD;
struct _DBGKM_EXIT_PROCESS;
struct _FILE_ID_INFORMATION;
struct _DBGKM_LOAD_DLL;
struct _SYSTEM_HIBERFILE_INFORMATION;
enum _DBG_STATE;
struct _SYSTEM_POWER_INFORMATION;
struct _FILE_ID_EXTD_DIR_INFORMATION;
struct _DBGUI_CREATE_THREAD;
struct _SYSTEM_POWER_STATE_DISABLE_REASON;
struct _DBGUI_WAIT_STATE_CHANGE;
enum _DEBUGOBJECTINFOCLASS;
struct _EXTENDED_CREATE_DUAL_OPLOCK_KEYS;
struct _EXTENDED_CREATE_INFORMATION;
struct _EXTENDED_CREATE_INFORMATION_32;
enum _FILE_INFORMATION_CLASS;
struct _FILE_BASIC_INFORMATION;
struct _FILE_INTERNAL_INFORMATION;
enum _MOUNTMGR_AUTO_MOUNT_STATE;
struct _FILE_POSITION_INFORMATION;
enum _CM_EXTENDED_PARAMETER_TYPE;
struct _FILE_MODE_INFORMATION;
struct _FILE_ALIGNMENT_INFORMATION;
struct _FILE_NAME_INFORMATION;
struct _FILE_ALL_INFORMATION;
struct _FILE_NETWORK_OPEN_INFORMATION;
struct _FILE_ATTRIBUTE_TAG_INFORMATION;
struct _FILE_ALLOCATION_INFORMATION;
struct _FILE_COMPRESSION_INFORMATION;
struct _FILE_DISPOSITION_INFORMATION;
struct _FILE_END_OF_FILE_INFORMATION;
struct _FILE_END_OF_FILE_INFORMATION_EX;
struct _FILE_VALID_DATA_LENGTH_INFORMATION;
struct _FILE_LINK_INFORMATION;
struct _FILE_LINK_INFORMATION_EX;
struct _FILE_MOVE_CLUSTER_INFORMATION;
struct _FILE_RENAME_INFORMATION;
struct _FILE_RENAME_INFORMATION_EX;
struct _FILE_STREAM_INFORMATION;
struct _FILE_TRACKING_INFORMATION;
struct _FILE_COMPLETION_INFORMATION;
struct _FILE_PIPE_INFORMATION;
struct _FILE_PIPE_LOCAL_INFORMATION;
struct _FILE_PIPE_REMOTE_INFORMATION;
struct _FILE_MAILSLOT_QUERY_INFORMATION;
struct _FILE_MAILSLOT_SET_INFORMATION;
struct _FILE_FS_FULL_SIZE_INFORMATION_EX;
struct _FILE_LINK_ENTRY_INFORMATION;
struct _FILE_LINKS_INFORMATION;
struct _FILE_STANDARD_LINK_INFORMATION;
struct _FILE_SFIO_RESERVE_INFORMATION;
struct _FILE_SFIO_VOLUME_INFORMATION;
enum _IO_PRIORITY_HINT;
struct _FILE_IO_PRIORITY_HINT_INFORMATION;
struct _FILE_IO_PRIORITY_HINT_INFORMATION_EX;
struct _FILE_IO_COMPLETION_NOTIFICATION_INFORMATION;
struct _FILE_PROCESS_IDS_USING_FILE_INFORMATION;
struct _FILE_IS_REMOTE_DEVICE_INFORMATION;
struct _FILE_NUMA_NODE_INFORMATION;
struct _FILE_IOSTATUSBLOCK_RANGE_INFORMATION;
struct _FILE_REMOTE_PROTOCOL_INFORMATION;
struct _FILE_LINK_ENTRY_FULL_ID_INFORMATION;
struct _FILE_LINKS_FULL_ID_INFORMATION;
struct _FILE_ID_EXTD_BOTH_DIR_INFORMATION;
struct _FILE_ID_64_EXTD_DIR_INFORMATION;
struct _FILE_ID_64_EXTD_BOTH_DIR_INFORMATION;
struct _FILE_ID_ALL_EXTD_DIR_INFORMATION;
struct _FILE_ID_ALL_EXTD_BOTH_DIR_INFORMATION;
struct _FILE_STAT_INFORMATION;
struct _FILE_STAT_BASIC_INFORMATION;
struct _FILE_MEMORY_PARTITION_INFORMATION;
struct _FILE_STAT_LX_INFORMATION;
struct _FILE_STORAGE_RESERVE_ID_INFORMATION;
struct _FILE_CASE_SENSITIVE_INFORMATION;
enum _FILE_KNOWN_FOLDER_TYPE;
struct _FILE_KNOWN_FOLDER_INFORMATION;
struct _FILE_STREAM_RESERVATION_INFORMATION;
struct _MUP_PROVIDER_INFORMATION;
struct _FILE_INFORMATION_DEFINITION;
struct _FILE_DIRECTORY_INFORMATION;
struct _FILE_FULL_DIR_INFORMATION;
struct _FILE_ID_FULL_DIR_INFORMATION;
struct _FILE_BOTH_DIR_INFORMATION;
struct _FILE_ID_BOTH_DIR_INFORMATION;
struct _FILE_NAMES_INFORMATION;
struct _FILE_ID_GLOBAL_TX_DIR_INFORMATION;
struct _FILE_OBJECTID_INFORMATION;
struct _FILE_DIRECTORY_NEXT_INFORMATION;
struct _FILE_FS_VOLUME_INFORMATION;
struct _FILE_FS_LABEL_INFORMATION;
struct _FILE_FS_SIZE_INFORMATION;
struct _FILE_FS_CONTROL_INFORMATION;
struct _FILE_FS_FULL_SIZE_INFORMATION;
struct _FILE_FS_OBJECTID_INFORMATION;
struct _FILE_FS_DEVICE_INFORMATION;
struct _FILE_FS_ATTRIBUTE_INFORMATION;
struct _FILE_FS_DRIVER_PATH_INFORMATION;
struct _FILE_FS_VOLUME_FLAGS_INFORMATION;
struct _FILE_FS_SECTOR_SIZE_INFORMATION;
struct _FILE_FS_DATA_COPY_INFORMATION;
struct _FILE_FS_METADATA_SIZE_INFORMATION;
struct _FILE_FS_GUID_INFORMATION;
enum _DIRECTORY_NOTIFY_INFORMATION_CLASS;
enum _IO_SESSION_EVENT;
enum _IO_SESSION_STATE;
enum _DMA_WIDTH;
enum _DMA_SPEED;
struct _REPARSE_DATA_BUFFER;
struct _REPARSE_DATA_BUFFER_EX;
struct _FILE_PIPE_ASSIGN_EVENT_BUFFER;
struct _FILE_PIPE_PEEK_BUFFER;
struct _FILE_PIPE_EVENT_BUFFER;
struct _FILE_PIPE_WAIT_FOR_BUFFER;
struct _FILE_PIPE_CLIENT_PROCESS_BUFFER;
struct _FILE_PIPE_CLIENT_PROCESS_BUFFER_V2;
struct _FILE_PIPE_CLIENT_PROCESS_BUFFER_EX;
struct _FILE_PIPE_SILO_ARRIVAL_INPUT;
struct _FILE_PIPE_CREATE_SYMLINK_INPUT;
struct _FILE_PIPE_DELETE_SYMLINK_INPUT;
struct _FILE_MAILSLOT_PEEK_BUFFER;
struct _MOUNTMGR_CREATE_POINT_INPUT;
struct _MOUNTMGR_MOUNT_POINT;
struct _MOUNTMGR_MOUNT_POINTS;
struct _MOUNTMGR_DRIVE_LETTER_TARGET;
struct _MOUNTMGR_DRIVE_LETTER_INFORMATION;
struct _LSA_TRUST_INFORMATION;
struct _MOUNTMGR_QUERY_AUTO_MOUNT;
struct _MOUNTMGR_SET_AUTO_MOUNT;
struct _MOUNTMGR_SILO_ARRIVAL_INPUT;
struct _MOUNTDEV_NAME;
struct _MOUNTMGR_VOLUME_PATHS;
struct _FLT_CONNECT_CONTEXT;
struct _FLT_PORT_FULL_EA;
struct _FLT_LOAD_PARAMETERS;
enum _FLT_LINK_TYPE;
struct _FLT_LINK;
struct _FLT_FILTER_PARAMETERS;
struct _FLT_INSTANCE_PARAMETERS;
struct _FLT_VOLUME_PARAMETERS;
enum _ATTACH_TYPE;
struct _FLT_ATTACH;
struct _MUP_FSCTL_UNC_PROVIDER_ENTRY;
struct _MUP_FSCTL_SURROGATE_PROVIDER_ENTRY;
struct _MUP_FSCTL_SURROGATE_PROVIDER_INFORMATION;
struct _MUP_FSCTL_UNC_HARDENING_PREFIX_TABLE_ENTRY;
struct _MUP_FSCTL_QUERY_UNC_HARDENING_CONFIGURATION_IN;
struct _MUP_FSCTL_QUERY_UNC_HARDENING_CONFIGURATION_OUT;
enum _FS_FILTER_SECTION_SYNC_TYPE;
enum _CREATE_FILE_TYPE;
struct _NAMED_PIPE_CREATE_PARAMETERS;
struct _MAILSLOT_CREATE_PARAMETERS;
struct _OPLOCK_KEY_ECP_CONTEXT;
struct _OPLOCK_KEY_CONTEXT;
struct _PORT_DATA_ENTRY;
struct _PORT_DATA_INFORMATION;
struct _LPC_CLIENT_DIED_MSG;
struct _PORT_VIEW;
struct _REMOTE_PORT_VIEW;
struct _PORT_MESSAGE64;
struct _LPC_CLIENT_DIED_MSG64;
struct _PORT_VIEW64;
struct _REMOTE_PORT_VIEW64;
enum _DEVICE_USAGE_NOTIFICATION_TYPE;
struct _ALPC_CONTEXT_ATTR;
struct _ALPC_HANDLE_ATTR32;
struct _ALPC_HANDLE_ATTR;
struct _ALPC_SECURITY_ATTR;
struct _ALPC_DATA_VIEW_ATTR;
enum _ALPC_PORT_INFORMATION_CLASS;
struct _ALPC_BASIC_INFORMATION;
struct _ALPC_PORT_ASSOCIATE_COMPLETION_PORT;
struct _ALPC_SERVER_INFORMATION;
struct _ALPC_PORT_MESSAGE_ZONE_INFORMATION;
struct _ALPC_PORT_COMPLETION_LIST_INFORMATION;
struct _ALPC_REGISTER_CALLBACK;
struct _ALPC_MESSAGE_HANDLE_INFORMATION;
enum _PF_BOOT_PHASE_ID;
struct _PF_SYSTEM_PREFETCH_PARAMETERS;
struct _SYSTEM_FEATURE_USAGE_SUBSCRIPTION_UPDATE_ENTRY;
struct _PF_BOOT_CONTROL;
enum _PREFETCHER_INFORMATION_CLASS;
struct _PREFETCHER_INFORMATION;
struct _PF_SYSTEM_SUPERFETCH_PARAMETERS;
enum _PF_EVENT_TYPE;
struct _PF_LOG_EVENT_DATA;
struct _PF_PFN_PRIO_REQUEST;
enum _PFS_PRIVATE_PAGE_SOURCE_TYPE;
struct _PFS_PRIVATE_PAGE_SOURCE;
struct _PF_PRIVSOURCE_INFO;
struct _PF_PRIVSOURCE_QUERY_REQUEST;
enum _PF_PHASED_SCENARIO_TYPE;
struct _PF_SCENARIO_PHASE_INFO;
struct _PF_MEMORY_LIST_NODE;
struct _PF_ROBUST_PROCESS_ENTRY;
struct _PF_ROBUST_FILE_ENTRY;
enum _PF_ROBUSTNESS_CONTROL_COMMAND;
struct _PF_ROBUSTNESS_CONTROL;
struct _PF_TIME_CONTROL;
struct _PF_MEMORY_LIST_INFO;
struct _PF_PHYSICAL_MEMORY_RANGE;
struct _PF_PHYSICAL_MEMORY_RANGE_INFO_V1;
struct _PF_PHYSICAL_MEMORY_RANGE_INFO_V2;
struct _PF_REPURPOSED_BY_PREFETCH_INFO;
struct _PF_MIN_WS_AGE_RATE_CONTROL;
struct _PF_DEPRIORITIZE_OLD_PAGES;
struct _SUPERFETCH_INFORMATION;
enum _PNP_VETO_TYPE;
enum _PLUGPLAY_EVENT_CATEGORY;
struct _PLUGPLAY_EVENT_BLOCK;
enum _PLUGPLAY_CONTROL_CLASS;
enum _DEVICE_RELATION_TYPE;
enum _BUS_QUERY_ID_TYPE;
enum _DEVICE_TEXT_TYPE;
struct _PROCESSOR_POWER_INFORMATION;
struct _USER_WORKSTATIONS_INFORMATION;
struct _SYSTEM_POWER_LOGGING_ENTRY;
struct _RTL_USER_PROCESS_PARAMETERS32;
enum _POWER_STATE_DISABLED_TYPE;
enum _POWER_REQUEST_TYPE_INTERNAL;
struct _POWER_REQUEST_ACTION;
union _POWER_STATE;
enum _POWER_STATE_TYPE;
struct _SYSTEM_POWER_STATE_CONTEXT;
enum _REQUESTER_TYPE;
struct _COUNTED_REASON_CONTEXT_RELATIVE;
struct _DIAGNOSTIC_BUFFER;
struct _WAKE_TIMER_INFO;
struct _PROCESSOR_PERF_CAP_HV;
struct PROCESSOR_IDLE_TIMES;
struct _PROCESSOR_IDLE_STATE;
struct _PROCESSOR_IDLE_STATES;
struct _PROCESSOR_LOAD;
struct _PROCESSOR_CAP;
struct _PO_WAKE_SOURCE_INFO;
struct _PO_WAKE_SOURCE_HISTORY;
enum _PO_WAKE_SOURCE_TYPE;
enum _PO_INTERNAL_WAKE_SOURCE_TYPE;
enum _PO_FIXED_WAKE_SOURCE_TYPE;
struct _PO_WAKE_SOURCE_HEADER;
struct _PO_WAKE_SOURCE_DEVICE;
struct _DOMAIN_DISPLAY_OEM_USER;
struct _PO_WAKE_SOURCE_FIXED;
struct _ETW_HEAP_EVENT_CONTRACTION;
struct _PO_WAKE_SOURCE_TIMER;
struct _DOMAIN_LOCALIZABLE_ACCOUNTS;
struct _DOMAIN_LOCALIZABLE_ACCOUNTS_ENTRY;
struct _TOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
struct _POWER_REQUEST_LIST;
enum _POWER_STATE_HANDLER_TYPE;
struct _POWER_STATE_HANDLER;
struct _POWER_STATE_NOTIFY_HANDLER;
struct _POWER_REQUEST_ACTION_INTERNAL;
enum _POWER_INFORMATION_LEVEL_INTERNAL;
enum _POWER_S0_DISCONNECTED_REASON;
struct _POWER_S0_LOW_POWER_IDLE_INFO;
struct _POWER_INFORMATION_INTERNAL_HEADER;
struct _POWER_USER_ABSENCE_PREDICTION;
struct _POWER_USER_ABSENCE_PREDICTION_CAPABILITY;
struct _POWER_PROCESSOR_LATENCY_HINT;
struct _POWER_STANDBY_NETWORK_REQUEST;
struct _POWER_SET_BACKGROUND_TASK_STATE;
struct _POWER_BOOT_SESSION_STANDBY_ACTIVATION_INFO;
struct _POWER_SESSION_POWER_STATE;
struct _POWER_INTERNAL_PROCESSOR_QOS_SUPPORT;
struct _POWER_INTERNAL_HOST_ENERGY_SAVER_STATE;
struct _POWER_INTERNAL_PROCESSOR_BRANDED_FREQUENCY_INPUT;
struct _POWER_INTERNAL_PROCESSOR_BRANDED_FREQUENCY_OUTPUT;
struct _PROCESSOR_IDLE_VETO;
struct _PLATFORM_IDLE_VETO;
struct _POWER_INTERNAL_BOOTAPP_DIAGNOSTIC;
enum _KEY_INFORMATION_CLASS;
struct _KEY_BASIC_INFORMATION;
struct _KEY_NODE_INFORMATION;
struct _KEY_FULL_INFORMATION;
struct _KEY_NAME_INFORMATION;
struct _KEY_CACHED_INFORMATION;
struct _KEY_FLAGS_INFORMATION;
struct _KEY_VIRTUALIZATION_INFORMATION;
struct _KEY_TRUST_INFORMATION;
struct _KEY_LAYER_INFORMATION;
enum _KEY_SET_INFORMATION_CLASS;
struct _KEY_WRITE_TIME_INFORMATION;
struct _KEY_WOW64_FLAGS_INFORMATION;
struct _KEY_HANDLE_TAGS_INFORMATION;
struct _KEY_SET_LAYER_INFORMATION;
struct _KEY_CONTROL_FLAGS_INFORMATION;
struct _KEY_SET_VIRTUALIZATION_INFORMATION;
enum _KEY_VALUE_INFORMATION_CLASS;
struct _KEY_VALUE_BASIC_INFORMATION;
struct _KEY_VALUE_FULL_INFORMATION;
struct _KEY_VALUE_PARTIAL_INFORMATION;
struct _USER_INTERNAL4_INFORMATION_NEW;
struct _KEY_VALUE_PARTIAL_INFORMATION_ALIGN64;
struct _LSA_REFERENCED_DOMAIN_LIST;
struct _KEY_VALUE_LAYER_INFORMATION;
struct _CM_EXTENDED_PARAMETER;
struct _USER_INTERNAL6_INFORMATION;
struct _KEY_VALUE_ENTRY;
enum _REG_ACTION;
struct _REG_NOTIFY_INFORMATION;
struct _KEY_PID_ARRAY;
struct _KEY_OPEN_SUBKEYS_INFORMATION;
struct _VR_INITIALIZE_JOB_FOR_VREG;
struct _VR_LOAD_DIFFERENCING_HIVE;
struct _VR_CREATE_NAMESPACE_NODE;
struct _VR_MODIFY_FLAGS;
struct _NAMESPACE_NODE_DATA;
struct _VR_CREATE_MULTIPLE_NAMESPACE_NODES;
struct _VR_UNLOAD_DYNAMICALLY_LOADED_HIVES;
struct _WMI_JOB_SET_QUERY_INFORMATION;
struct _VR_GET_VIRTUAL_ROOT;
struct _TRUSTED_CONTROLLERS_INFO;
struct _RTL_IMAGE_MITIGATION_ASLR_POLICY;
struct _TRUSTED_DOMAIN_NAME_INFO;
struct _VR_GET_VIRTUAL_ROOT_RESULT;
struct _VR_UNLOAD_DIFFERENCING_HIVE_FOR_HOST;
struct _TRUSTED_DOMAIN_INFORMATION_EX2;
enum _TABLE_SEARCH_RESULT;
struct _WMI_PROCESS_INFORMATION64;
enum _RTL_GENERIC_COMPARE_RESULTS;
struct _RTL_AVL_TABLE;
struct _RTL_BALANCED_LINKS;
struct _RTL_SPLAY_LINKS;
struct _RTL_GENERIC_TABLE;
struct _RTL_RB_TREE;
struct _RTL_DYNAMIC_HASH_TABLE_ENTRY;
struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT;
struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
struct _RTL_DYNAMIC_HASH_TABLE;
struct _RTL_RESOURCE;
enum _RTL_NORM_FORM;
struct _PREFIX_TABLE_ENTRY;
struct _PREFIX_TABLE;
struct _UNICODE_PREFIX_TABLE_ENTRY;
struct _UNICODE_PREFIX_TABLE;
struct _COMPRESSED_DATA_INFO;
struct _RTL_MEMORY_ZONE;
struct _CURDIR;
struct _RTL_DRIVE_LETTER_CURDIR;
struct _ETW_REF_CLOCK;
struct _RTL_USER_PROCESS_INFORMATION;
struct _RTL_DEBUG_INFORMATION;
struct _RTL_USER_PROCESS_EXTENDED_PARAMETERS;
struct _RTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION;
struct _CONTEXT_CHUNK;
struct _CONTEXT_EX;
enum _FUNCTION_TABLE_TYPE;
struct _RTLP_CURDIR_REF;
struct _RTL_RELATIVE_NAME_U;
enum _RTL_PATH_TYPE;
struct _RTL_BUFFER;
struct _RTL_UNICODE_STRING_BUFFER;
struct _GENERATE_NAME_CONTEXT;
struct _RTL_HEAP_ENTRY;
enum _DOMAIN_SERVER_ROLE;
struct _SYSTEM_FEATURE_CONFIGURATION_SECTIONS_REQUEST;
enum _DOMAIN_SERVER_ENABLE_STATE;
struct _RTL_HEAP_TAG;
struct _RTL_HEAP_INFORMATION_V2;
struct _RTL_PROCESS_HEAPS_V1;
struct _RTL_PROCESS_HEAPS_V2;
enum _RTL_MEMORY_TYPE;
enum _HEAP_MEMORY_INFO_CLASS;
struct _RTL_SEGMENT_HEAP_VA_CALLBACKS;
struct _RTL_SEGMENT_HEAP_MEMORY_SOURCE;
struct _RTL_SEGMENT_HEAP_PARAMETERS;
struct _RTL_HEAP_PARAMETERS;
struct _RTL_HEAP_TAG_INFO;
struct _RTL_HEAP_USAGE_ENTRY;
struct _RTL_HEAP_USAGE;
struct _RTL_HEAP_WALK_ENTRY;
enum _HEAP_COMPATIBILITY_MODE;
struct _RTLP_TAG_INFO;
struct _RTLP_HEAP_TAGGING_INFO;
struct _PROCESS_HEAP_INFORMATION;
struct _HEAP_REGION_INFORMATION;
struct _HEAP_RANGE_INFORMATION;
struct _HEAP_BLOCK_INFORMATION;
struct _LSA_FOREST_TRUST_INFORMATION;
struct _HEAP_INFORMATION;
struct _RTL_BSD_POWER_BUTTON_PRESS_INFO;
struct _HEAP_PERFORMANCE_COUNTERS_INFORMATION;
struct _WMI_DISKIO_IO_REDIRECTED_INIT;
struct _RTL_BSD_ITEM;
struct _HEAP_EXTENDED_INFORMATION;
struct _RTLP_HEAP_STACK_TRACE_SERIALIZATION_INIT;
struct _RTLP_HEAP_STACK_TRACE_SERIALIZATION_HEADER;
struct _RTLP_HEAP_STACK_TRACE_SERIALIZATION_ALLOCATION;
struct _RTLP_HEAP_STACK_TRACE_SERIALIZATION_STACKFRAME;
struct _RTL_HEAP_STACK_QUERY;
struct _RTL_HEAP_STACK_CONTROL;
struct _HEAP_DEBUGGING_INFORMATION;
struct _RTL_MEMORY_ZONE_SEGMENT;
struct _ETW_UMS_EVENT_DIRECTED_SWITCH_START;
struct _RTL_PROCESS_VERIFIER_OPTIONS;
struct _PARSE_MESSAGE_CONTEXT;
struct in_addr;
struct in6_addr;
struct _TIME_FIELDS;
struct _RTL_TIME_ZONE_INFORMATION;
struct _RTL_BITMAP_RUN;
struct _RTL_BITMAP_EX;
struct _RTL_HANDLE_TABLE_ENTRY;
struct _RTL_HANDLE_TABLE;
struct _COMPOUND_ACCESS_ALLOWED_ACE;
struct _RTL_ACE_DATA;
struct _RTL_QUERY_REGISTRY_TABLE;
union _RTL_ELEVATION_FLAGS;
struct _RTL_UNLOAD_EVENT_TRACE;
struct _RTL_UNLOAD_EVENT_TRACE32;
enum _IMAGE_MITIGATION_POLICY;
union _RTL_IMAGE_MITIGATION_POLICY;
struct _RTL_IMAGE_MITIGATION_DEP_POLICY;
struct _ETW_HEAP_EVENT_EXPANSION;
struct _DOMAIN_DISPLAY_OEM_GROUP;
struct _RTL_IMAGE_MITIGATION_DYNAMIC_CODE_POLICY;
struct _RTL_IMAGE_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
struct _RTL_IMAGE_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
struct _HEAP_COMMIT_DECOMMIT;
struct _RTL_IMAGE_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
struct _HEAP_EVENT_COMMIT_DECOMMIT;
struct _RTL_IMAGE_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
struct _RTL_IMAGE_MITIGATION_BINARY_SIGNATURE_POLICY;
struct _RTL_IMAGE_MITIGATION_FONT_DISABLE_POLICY;
struct _RTL_IMAGE_MITIGATION_IMAGE_LOAD_POLICY;
struct _RTL_IMAGE_MITIGATION_PAYLOAD_RESTRICTION_POLICY;
struct _RTL_IMAGE_MITIGATION_CHILD_PROCESS_POLICY;
struct _RTL_IMAGE_MITIGATION_SEHOP_POLICY;
struct _RTL_IMAGE_MITIGATION_HEAP_POLICY;
struct _RTL_IMAGE_MITIGATION_USER_SHADOW_STACK_POLICY;
struct _RTL_IMAGE_MITIGATION_REDIRECTION_TRUST_POLICY;
struct _RTL_IMAGE_MITIGATION_USER_POINTER_AUTH_POLICY;
enum _RTL_IMAGE_MITIGATION_OPTION_STATE;
enum _APPCONTAINER_SID_TYPE;
enum _STATE_LOCATION_TYPE;
struct _PS_PKG_CLAIM;
enum _RTL_BSD_ITEM_TYPE;
struct _PERFINFO_DRIVER_COMPLETIONROUTINE;
struct _RTL_BSD_DATA_POWER_TRANSITION;
struct _RTL_BSD_DATA_ERROR_INFO;
struct _RTL_FEATURE_USAGE_REPORT;
enum _RTL_FEATURE_CONFIGURATION_TYPE;
struct _RTL_FEATURE_CONFIGURATION;
struct _RTL_FEATURE_CONFIGURATION_TABLE;
enum _RTL_FEATURE_CONFIGURATION_PRIORITY;
enum _RTL_FEATURE_ENABLED_STATE;
enum _RTL_FEATURE_ENABLED_STATE_OPTIONS;
enum _RTL_FEATURE_VARIANT_PAYLOAD_KIND;
enum _RTL_FEATURE_CONFIGURATION_OPERATION;
struct _RTL_FEATURE_CONFIGURATION_UPDATE;
struct _RTL_FEATURE_USAGE_SUBSCRIPTION_TARGET;
struct _RTL_FEATURE_USAGE_DATA;
struct _RTL_FEATURE_USAGE_SUBSCRIPTION_DETAILS;
struct _RTL_FEATURE_USAGE_SUBSCRIPTION_TABLE;
struct _SYSTEM_FEATURE_CONFIGURATION_QUERY;
struct _SYSTEM_FEATURE_CONFIGURATION_INFORMATION;
enum _SYSTEM_FEATURE_CONFIGURATION_UPDATE_TYPE;
struct _SYSTEM_FEATURE_CONFIGURATION_UPDATE;
struct _SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION_ENTRY;
enum _SYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE;
struct _ETW_CLOCK_STATE_CHANGE_EVENT;
struct _USER_INTERNAL5_INFORMATION_NEW;
struct _SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION;
struct _ETW_DFSS_RELEASE_THREAD_ON_IDLE;
struct _SYSTEM_FEATURE_USAGE_SUBSCRIPTION_DETAILS;
struct _SYSTEM_FEATURE_USAGE_SUBSCRIPTION_UPDATE;
struct _IMAGE_DEBUG_POGO_ENTRY;
struct _IMAGE_DEBUG_POGO_SIGNATURE;
struct _IMAGE_RELOCATION_RECORD;
struct _IMAGE_CHPE_METADATA_X86;
struct _IMAGE_CHPE_RANGE_ENTRY;
struct _IMAGE_ARM64EC_METADATA;
struct _IMAGE_ARM64EC_CODE_MAP_ENTRY;
struct _IMAGE_ARM64EC_REDIRECTION_ENTRY;
struct _IMAGE_ARM64EC_CODE_RANGE_ENTRY_POINT;
struct _IMAGE_DVRT_ARM64X_FIXUP_RECORD;
struct _TRUSTED_POSIX_OFFSET_INFO;
struct _IMAGE_DVRT_ARM64X_DELTA_FIXUP_RECORD;
struct _WMI_PROCESS_INFORMATION;
struct _WMI_JOB_SEND_NOTIFICATION_INFORMATION;
struct _TOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE;
struct _TOKEN_SECURITY_ATTRIBUTE_V1;
struct _TOKEN_SECURITY_ATTRIBUTE_RELATIVE_V1;
struct _TOKEN_SECURITY_ATTRIBUTES_INFORMATION;
enum _TOKEN_SECURITY_ATTRIBUTE_OPERATION;
struct _TOKEN_SECURITY_ATTRIBUTES_AND_OPERATION_INFORMATION;
struct _TOKEN_PROCESS_TRUST_LEVEL;
struct _TOKEN_LOGGING_INFORMATION;
struct _SE_FILE_CACHE_CLAIM_INFORMATION;
struct _SE_SET_FILE_CACHE_INFORMATION;
struct _TP_ALPC;
enum _TP_TRACE_TYPE;
enum _KCONTINUE_TYPE;
struct _KCONTINUE_ARGUMENT;
enum _WOW64_SHARED_INFORMATION;
struct _RTL_BALANCED_NODE32;
struct _RTL_RB_TREE32;
struct _PEB_LDR_DATA32;
struct _LDR_SERVICE_TAG_RECORD32;
struct _LDRP_CSLIST32;
struct _LDR_DDAG_NODE32;
struct _LDR_DATA_TABLE_ENTRY32;
struct _MESSAGE_TRACE_USER;
struct _CURDIR32;
struct _RTL_DRIVE_LETTER_CURDIR32;
struct _WMI_BUFFER_HEADER;
struct _PEB32;
enum _ETW_RT_EVENT_LOSS;
struct _GDI_TEB_BATCH32;
struct _TEB32;
union _WOW64_EXECUTE_OPTIONS;
struct _WOW64INFO;
struct _PEB32_WITH_WOW64INFO;
struct _DOMAIN_GENERAL_INFORMATION;
struct _DOMAIN_PASSWORD_INFORMATION;
struct _LSA_TRANSLATED_SID2;
struct _LSA_TRANSLATED_NAME;
struct _POLICY_ACCOUNT_DOMAIN_INFO;
struct _POLICY_DNS_DOMAIN_INFO;
enum _LSA_LOOKUP_DOMAIN_INFO_CLASS;
enum _SECURITY_LOGON_TYPE;
enum _SE_ADT_PARAMETER_TYPE;
struct _SE_ADT_OBJECT_TYPE;
struct _SE_ADT_PARAMETER_ARRAY_ENTRY;
struct _SE_ADT_ACCESS_REASON;
struct _SE_ADT_CLAIMS;
struct _SE_ADT_PARAMETER_ARRAY;
struct _SE_ADT_PARAMETER_ARRAY_EX;
struct _LSA_ADT_STRING_LIST_ENTRY;
struct _LSA_ADT_STRING_LIST;
struct _LSA_ADT_SID_LIST_ENTRY;
struct _LSA_ADT_SID_LIST;
enum _POLICY_AUDIT_EVENT_TYPE_EX;
enum _POLICY_AUDIT_EVENT_TYPE;
struct _LSA_AUTH_CALLBACKS;
enum _LSA_TOKEN_INFORMATION_TYPE;
struct _ETW_OPTICALIO_READWRITE;
struct _LSA_TOKEN_INFORMATION_NULL;
struct _LSA_TOKEN_INFORMATION_V1;
enum LSA_FOREST_TRUST_COLLISION_RECORD_TYPE;
struct _LSA_TOKEN_INFORMATION_V3;
struct _LSA_DISPATCH_TABLE;
struct _CI_LOG_MMCSS_START;
struct _ETW_UMS_EVENT_DIRECTED_SWITCH_END;
struct _LSA_TRANSLATED_SID;
enum _POLICY_LSA_SERVER_ROLE;
struct _POLICY_PRIVILEGE_DEFINITION;
enum _POLICY_INFORMATION_CLASS;
struct _POLICY_AUDIT_LOG_INFO;
struct _POLICY_AUDIT_EVENTS_INFO;
struct _POLICY_AUDIT_SUBCATEGORIES_INFO;
struct _POLICY_AUDIT_CATEGORIES_INFO;
struct _POLICY_PRIMARY_DOMAIN_INFO;
struct _POLICY_PD_ACCOUNT_INFO;
struct _POLICY_LSA_SERVER_ROLE_INFO;
struct _POLICY_REPLICA_SOURCE_INFO;
struct _POLICY_DEFAULT_QUOTA_INFO;
struct _POLICY_MODIFICATION_INFO;
struct _POLICY_AUDIT_FULL_SET_INFO;
struct _POLICY_AUDIT_FULL_QUERY_INFO;
enum _POLICY_DOMAIN_INFORMATION_CLASS;
struct _POLICY_DOMAIN_EFS_INFO;
struct _POLICY_DOMAIN_KERBEROS_TICKET_INFO;
struct _POLICY_MACHINE_ACCT_INFO;
struct _POLICY_MACHINE_ACCT_INFO2;
enum _POLICY_NOTIFICATION_INFORMATION_CLASS;
enum _TRUSTED_INFORMATION_CLASS;
struct _ETW_HEAP_EVENT_CREATE;
struct _TRUSTED_PASSWORD_INFO;
struct _HEAP_EVENT_SUBSEGMENT_ALLOC_FREE;
struct _TRUSTED_DOMAIN_INFORMATION_EX;
struct _LSA_AUTH_INFORMATION;
struct _TRUSTED_DOMAIN_AUTH_INFORMATION;
struct _TRUSTED_DOMAIN_FULL_INFORMATION;
struct _TRUSTED_DOMAIN_FULL_INFORMATION2;
struct _TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES;
enum LSA_FOREST_TRUST_RECORD_TYPE;
struct _LSA_FOREST_TRUST_DOMAIN_INFO;
struct _LSA_FOREST_TRUST_SCANNER_INFO;
struct _LSA_FOREST_TRUST_BINARY_DATA;
struct _LSA_FOREST_TRUST_RECORD;
struct _LSA_FOREST_TRUST_RECORD2;
struct _PERFINFO_DRIVER_COMPLETE_REQUEST;
struct _PERFINFO_BATTERY_LIFE_INFO;
struct _LSA_FOREST_TRUST_COLLISION_RECORD;
struct _LSA_FOREST_TRUST_COLLISION_INFORMATION;
struct _LSA_ENUMERATION_INFORMATION;
struct _LSA_LAST_INTER_LOGON_INFO;
struct _SECURITY_LOGON_SESSION_DATA;
struct _CENTRAL_ACCESS_POLICY_ENTRY;
struct _CENTRAL_ACCESS_POLICY;
enum NEGOTIATE_MESSAGES;
struct _NEGOTIATE_PACKAGE_PREFIX;
struct _NEGOTIATE_PACKAGE_PREFIXES;
struct _NEGOTIATE_CALLER_NAME_REQUEST;
struct _NEGOTIATE_CALLER_NAME_RESPONSE;
struct _NEGOTIATE_PACKAGE_NAMES;
struct _NEGOTIATE_PACKAGE_PREFIX_WOW;
struct _NEGOTIATE_CALLER_NAME_RESPONSE_WOW;
struct _LSA_USER_REGISTRATION_INFO;
struct _LSA_REGISTRATION_INFO;
enum _LSA_CREDENTIAL_KEY_SOURCE_TYPE;
struct _SAM_RID_ENUMERATION;
struct _SAM_SID_ENUMERATION;
struct _SAM_BYTE_ARRAY;
struct _SAM_BYTE_ARRAY_32K;
struct _RPC_AUTH_IDENTITY_HANDLE;
enum _DOMAIN_INFORMATION_CLASS;
struct _DOMAIN_UAS_INFORMATION;
enum _DOMAIN_PASSWORD_CONSTRUCTION;
struct _DOMAIN_LOGOFF_INFORMATION;
struct _DOMAIN_OEM_INFORMATION;
struct _DOMAIN_NAME_INFORMATION;
struct _DOMAIN_SERVER_ROLE_INFORMATION;
struct _DOMAIN_REPLICATION_INFORMATION;
struct _DOMAIN_MODIFIED_INFORMATION;
struct _DOMAIN_MODIFIED_INFORMATION2;
struct _DOMAIN_STATE_INFORMATION;
struct _DOMAIN_LOCKOUT_INFORMATION;
enum _DOMAIN_DISPLAY_INFORMATION;
struct _DOMAIN_DISPLAY_USER;
struct _DOMAIN_DISPLAY_MACHINE;
struct _DOMAIN_DISPLAY_GROUP;
struct _WMI_JOB_SET_QUERY_NET_RATE;
enum _DOMAIN_LOCALIZABLE_ACCOUNTS_INFORMATION;
struct _GROUP_MEMBERSHIP;
enum _GROUP_INFORMATION_CLASS;
struct _GROUP_GENERAL_INFORMATION;
struct _GROUP_NAME_INFORMATION;
struct _GROUP_ATTRIBUTE_INFORMATION;
struct _GROUP_ADM_COMMENT_INFORMATION;
enum _ALIAS_INFORMATION_CLASS;
struct _ALIAS_GENERAL_INFORMATION;
struct _ALIAS_NAME_INFORMATION;
struct _ALIAS_ADM_COMMENT_INFORMATION;
struct _ALIAS_EXTENDED_INFORMATION;
struct _LOGON_HOURS;
struct _SR_SECURITY_DESCRIPTOR;
enum _USER_INFORMATION_CLASS;
struct _USER_GENERAL_INFORMATION;
struct _USER_PREFERENCES_INFORMATION;
struct _USER_LOGON_INFORMATION;
struct _USER_LOGON_HOURS_INFORMATION;
struct _USER_ACCOUNT_INFORMATION;
struct _USER_NAME_INFORMATION;
struct _USER_ACCOUNT_NAME_INFORMATION;
struct _USER_FULL_NAME_INFORMATION;
struct _USER_PRIMARY_GROUP_INFORMATION;
struct _USER_HOME_INFORMATION;
struct _USER_SCRIPT_INFORMATION;
struct _USER_PROFILE_INFORMATION;
struct _USER_ADMIN_COMMENT_INFORMATION;
enum _ETW_BUFFER_STATE;
struct _USER_SET_PASSWORD_INFORMATION;
struct _USER_CONTROL_INFORMATION;
struct _CYPHER_BLOCK;
struct _ENCRYPTED_NT_OWF_PASSWORD;
struct _ENCRYPTED_LM_OWF_PASSWORD;
struct _USER_INTERNAL1_INFORMATION;
struct _USER_INTERNAL2_INFORMATION;
struct _USER_PARAMETERS_INFORMATION;
struct _USER_ALL_INFORMATION;
struct _USER_INTERNAL3_INFORMATION;
struct _ENCRYPTED_USER_PASSWORD;
struct _USER_INTERNAL4_INFORMATION;
struct _USER_INTERNAL5_INFORMATION;
struct _ENCRYPTED_USER_PASSWORD_NEW;
struct _ETW_AUTOBOOST_NO_ENTRIES_EVENT;
struct _ETW_AUTOBOOST_CLEAR_PRIORITY_FLOOR_EVENT;
struct _USER_ALLOWED_TO_DELEGATE_TO_LIST;
struct _USER_EXTENDED_INFORMATION;
struct _USER_LOGON_UI_INFORMATION;
struct _ENCRYPTED_PASSWORD_AES;
struct _USER_INTERNAL7_INFORMATION;
struct _USER_INTERNAL8_INFORMATION;
struct _USER_PWD_CHANGE_FAILURE_INFORMATION;
enum _SECURITY_DB_DELTA_TYPE;
enum _SECURITY_DB_OBJECT_TYPE;
enum _SAM_ACCOUNT_TYPE;
struct _SAM_GROUP_MEMBER_ID;
struct _SAM_ALIAS_MEMBER_ID;
union _SAM_DELTA_DATA;
enum _PASSWORD_POLICY_VALIDATION_TYPE;
struct _SAM_VALIDATE_PASSWORD_HASH;
struct _SAM_VALIDATE_PERSISTED_FIELDS;
enum _SAM_VALIDATE_VALIDATION_STATUS;
struct _SAM_VALIDATE_STANDARD_OUTPUT_ARG;
struct _SAM_VALIDATE_AUTHENTICATION_INPUT_ARG;
struct _SAM_VALIDATE_PASSWORD_CHANGE_INPUT_ARG;
struct _SAM_VALIDATE_PASSWORD_RESET_INPUT_ARG;
union _SAM_VALIDATE_INPUT_ARG;
union _SAM_VALIDATE_OUTPUT_ARG;
enum _SAM_GENERIC_OPERATION_TYPE;
struct _SAM_OPERATION_OBJCHG_INPUT;
union _SAM_GENERIC_OPERATION_INPUT;
struct _WMI_DISKIO_READWRITE_INIT;
enum _VDMSERVICECLASS;
enum _PROCESS_ACTIVITY_TYPE;
struct _WMI_TRACE_PACKET;
struct _EVENT_INSTANCE_GUID_HEADER;
struct _PERFINFO_TRACE_HEADER;
struct _SYSTEM_TRACE_HEADER;
struct _WMI_TRACE_MESSAGE_PACKET;
struct _MESSAGE_TRACE_HEADER;
struct _MESSAGE_TRACE;
struct _TRACE_ENABLE_FLAG_EXTENSION;
struct _TRACE_ENABLE_FLAG_EXT_HEADER;
struct _TRACE_ENABLE_FLAG_EXT_ITEM;
struct _ETW_STACK_CACHING_CONFIG;
struct _PERFINFO_GROUPMASK;
struct _CPU_CONFIG_RECORD;
struct _PHYSICAL_DISK_RECORD;
struct _LOGICAL_DISK_EXTENTS;
struct _OPTICAL_MEDIA_RECORD;
struct _NIC_RECORD;
struct _VIDEO_RECORD;
struct _WMI_DPI_RECORD;
struct _WMI_POWER_RECORD;
struct _WMI_IRQ_RECORD;
struct _WMI_PNP_RECORD_V3;
struct _WMI_PNP_RECORD_V4;
struct _WMI_PNP_RECORD_V5;
struct _WMI_IDE_CHANNEL_RECORD;
struct _WMI_JOB_INFORMATION;
struct _WMI_JOB_ASSIGN_PROCESS;
struct _WMI_JOB_REMOVE_PROCESS;
struct _WMI_JOB_SET_QUERY_CPU_RATE;
struct _WMI_THREAD_INFORMATION;
struct _WMI_EXTENDED_THREAD_INFORMATION;
struct _WMI_EXTENDED_THREAD_INFORMATION64;
struct _WMI_IMAGELOAD_INFORMATION;
struct _WMI_IMAGELOAD_INFORMATION32;
struct _WMI_IMAGELOAD_INFORMATION64;
struct _WMI_IMAGEID_INFORMATION;
struct _WMI_IMAGEID_INFORMATION32;
struct _WMI_IMAGEID_INFORMATION64;
struct _ETW_DISKIO_READWRITE_V2;
struct _ETW_DISKIO_READWRITE_V3;
struct _ETW_DISKIO_FLUSH_BUFFERS_V2;
struct _ETW_DISKIO_FLUSH_BUFFERS_V3;
struct _ETW_OPTICALIO_FLUSH_BUFFERS;
struct _ETW_OPTICALIO_INIT;
struct _WMI_REGISTRY;
struct _WMI_TXR;
struct _ETW_REGNOTIF_REGISTER;
struct _WMI_FILE_IO;
struct _WMI_TCPIP_V4;
struct _WMI_TCPIP_V6;
struct _WMI_UDP_V4;
struct _WMI_UDP_V6;
struct _WMI_PAGE_FAULT;
struct _WMI_CONTEXTSWAP;
struct _WMI_SPINLOCK;
struct _WMI_RESOURCE;
struct _WMI_QUEUE;
struct _WMI_PUSHLOCK;
struct _WMI_WAIT_SINGLE;
struct _WMI_WAIT_OBJECT_RECORD;
struct _WMI_WAIT_MULTIPLE;
struct _WMI_DELAY_EXECUTION;
struct _ETW_READY_THREAD_EVENT;
struct _ETW_KQUEUE_ENQUEUE_EVENT;
struct _ETW_KQUEUE_DEQUEUE_EVENT;
struct _ETW_ANTI_STARVATION_BOOST_EVENT;
struct _ETW_AUTOBOOST_SET_PRIORITY_FLOOR_EVENT;
struct _ETW_PRIORITY_EVENT;
struct _ETW_DEBUG_PRINT_EVENT;
struct _ETW_POOL_EVENT;
struct _ETW_CREATE_HANDLE_EVENT;
struct _ETW_DUPLICATE_HANDLE_EVENT;
struct _ETW_OBJECT_TYPE_EVENT;
struct _ETW_OBJECT_HANDLE_EVENT;
struct _ETW_REFDEREF_OBJECT_EVENT;
struct _ETW_CREATEDELETE_OBJECT_EVENT;
struct _ETW_WAKE_COUNTER_EVENT;
struct _ETW_HEAP_EVENT_COMMON;
struct _ETW_HEAP_EVENT_ALLOC;
struct _ETW_HEAP_EVENT_FREE;
struct _ETW_HEAP_EVENT_REALLOC;
struct _HEAP_SUBSEGMENT_FREE;
struct _HEAP_SUBSEGMENT_ALLOC;
struct _HEAP_SUBSEGMENT_INIT;
struct _HEAP_AFFINITY_MANAGER_ENABLE;
struct _HEAP_AFFINITY_SLOT_ASSIGN;
struct _HEAP_REUSE_THRESHOLD_ACTIVATED;
struct _HEAP_SUBSEGMENT_ACTIVATED;
struct _ETW_HEAP_EVENT_SNAPSHOT;
struct _ETW_HEAP_EVENT_RUNDOWN_RANGE;
struct _ETW_HEAP_EVENT_RUNDOWN;
struct _HEAP_EVENT_RANGE_CREATE;
struct _HEAP_EVENT_RANGE;
struct _HEAP_RANGE_CREATE;
struct _HEAP_RANGE_DESTROY;
struct _HEAP_RANGE_LOG;
struct _ETW_CRITSEC_EVENT_COLLISION;
struct _ETW_CRITSEC_EVENT_INIT;
struct _STACK_WALK_EVENT_DATA;
struct _LOAD_DLL_EVENT_DATA;
struct _CM_PERF_COUNTERS;
struct _CI_LOG_SCHEDULER_EVENT;
struct _CI_LOG_SCHEDULER_WAKEUP;
struct _CI_LOG_SCHEDULER_SLEEP;
struct _CI_LOG_SCHEDULER_SLEEP_RESPONSE;
struct _CI_LOG_MMCSS_STOP;
struct _ETW_UMS_EVENT_PARK;
struct _ETW_UMS_EVENT_CONTEXT_SWITCH;
struct _ETW_SET_TIMER_EVENT;
struct _ETW_CANCEL_TIMER_EVENT;
struct _ETW_TIMER_EXPIRATION_EVENT;
struct _ETW_TIMER_EXPIRATION_START_EVENT;
struct _ETW_SET_KTIMER2_EVENT;
struct _ETW_CANCEL_KTIMER2_EVENT;
struct _ETW_DISABLE_KTIMER2_EVENT;
struct _ETW_FINALIZE_KTIMER2_EVENT;
enum _PERFINFO_DYNAMIC_TICK_VETO_REASON;
enum _PERFINFO_DYNAMIC_TICK_DISABLE_REASON;
struct _ETW_CLOCK_CONFIGURATION_EVENT;
struct _ETW_CLOCK_TIME_UPDATE;
struct _ETW_CPU_CACHE_FLUSH_EVENT;
struct _ETW_TP_EVENT_CALLBACK_ENQUEUE;
struct _ETW_TP_EVENT_CALLBACK_START;
struct _ETW_TP_EVENT_CALLBACK_CANCEL;
struct _ETW_TP_EVENT_POOL_CREATE;
struct _ETW_TP_EVENT_POOL_CLOSE;
struct _ETW_TP_EVENT_POOL_TH_MIN_SET;
struct _ETW_TP_EVENT_POOL_TH_MAX_SET;
struct _ETW_TP_EVENT_WORKER_NUMANODE_SWITCH;
struct _ETW_TP_EVENT_TIMER_SET;
struct _ETW_TP_EVENT_TIMER_CANCELLED;
struct _ETW_TP_EVENT_TIMER_SET_NTTIMER;
struct _ETW_TP_EVENT_TIMER_CANCEL_NTTIMER;
struct _ETW_TP_EVENT_TIMER_EXPIRATION_BEGIN;
struct _ETW_TP_EVENT_TIMER_EXPIRATION_END;
struct _ETW_TP_EVENT_TIMER_EXPIRATION;
struct _ETW_THREAD_EVENT_SUBPROCESSTAG;
struct _ETW_WNF_EVENT_SUBSCRIBE;
struct _ETW_WNF_EVENT_CALLBACK;
struct _ETW_WNF_EVENT_PUBLISH;
struct _ETW_WNF_EVENT_NAME_SUB_RUNDOWN;
struct _PERFINFO_MARK_EVENT;
struct _PERFINFO_DRIVER_MAJORFUNCTION;
struct _PERFINFO_DRIVER_MAJORFUNCTION_RET;
struct _PERFINFO_DRIVER_COMPLETE_REQUEST_RET;
struct _PERFINFO_IDLE_STATE_CHANGE;
struct _PERFINFO_SET_POWER_ACTION_RET;
struct _PERFINFO_SET_DEVICES_STATE;
struct _PERFINFO_SET_DEVICES_STATE_RET;
struct _PERFINFO_PO_NOTIFY_DEVICE;
struct _PERFINFO_PO_NOTIFY_DEVICE_COMPLETE;
struct _PERFINFO_PO_SESSION_CALLOUT;
struct _PERFINFO_PO_PRESLEEP;
struct _PERFINFO_PO_POSTSLEEP;
struct _PERFINFO_PO_CALIBRATED_PERFCOUNTER;
struct _PERFINFO_BOOT_PHASE_START;
struct _PERFINFO_BOOT_PREFETCH_INFORMATION;
struct _PERFINFO_PO_SESSION_CALLOUT_RET;
struct _PERFINFO_PPM_IDLE_STATE_CHANGE;
struct _PERFINFO_PPM_IDLE_STATE_ENTER;
struct _PERFINFO_PPM_IDLE_STATE_EXIT;
struct _PERFINFO_PPM_STATE_SELECTION;
struct _PERFINFO_PPM_IDLE_EXIT_LATENCY;
struct _PERFINFO_PPM_PERF_STATE_CHANGE;
struct _PERFINFO_PPM_THERMAL_CONSTRAINT;
struct _PERFINFO_FILEOBJECT_INFORMATION;
struct _PERFINFO_FILENAME_SAME_INFORMATION;
struct _PERFINFO_PFMAPPED_SECTION_INFORMATION;
struct _PERFINFO_PFMAPPED_SECTION_OBJECT_INFORMATION;
struct _PERFINFO_SAMPLED_PROFILE_INFORMATION;
struct _PERFINFO_SAMPLED_PROFILE_CACHE;
struct _PERFINFO_SAMPLED_PROFILE_CONFIG;
struct _PERFINFO_PMC_SAMPLE_INFORMATION;
struct _PERFINFO_DPC_INFORMATION;
struct _PERFINFO_DPC_ENQUEUE_INFORMATION;
struct _PERFINFO_DPC_EXECUTION_INFORMATION;
struct _PERFINFO_YIELD_PROCESSOR_INFORMATION;
struct _PERFINFO_INTERRUPT_INFORMATION;
struct _PERFINFO_CLOCK_INTERRUPT_INFORMATION;
struct _PERFINFO_SPINLOCK_CONFIG;
struct _PERFINFO_EXECUTIVE_RESOURCE_CONFIG;
struct _PERFINFO_SESSIONCREATE_INFORMATION;
struct _PERFINFO_PAGE_RANGE_IDENTITY;
enum _PERFINFO_KERNELMEMORY_USAGE_TYPE;
struct _PERFINFO_KERNELMEMORY_RANGE_USAGE;
enum _PERFINFO_MM_STAT;
struct _PERFINFO_PAGECOMBINE_AGGREGATE_STAT;
struct _PERFINFO_PAGECOMBINE_ITERATION_STAT;
struct _PERFINFO_HARDPAGEFAULT_INFORMATION;
struct _PERFINFO_VIRTUAL_ALLOC;
struct _PERFINFO_VAD_ROTATE_INFO;
enum _PERFINFO_MEM_RESET_INFO_TYPE;
struct _PERFINFO_MEM_RESET_INFO;
struct _PERFINFO_CC_WORKITEM_ENQUEUE;
struct _PERFINFO_CC_WORKITEM_DEQUEUE;
struct _PERFINFO_CC_WORKITEM_COMPLETE;
struct _PERFINFO_CC_READ_AHEAD;
struct _PERFINFO_CC_SCHEDULE_READ_AHEAD;
struct _PERFINFO_CC_LAZY_WRITE_SCAN;
struct _PERFINFO_CC_CAN_WRITE_FAIL;
struct _PERFINFO_CC_FLUSH_SECTION;
struct _PERFINFO_CC_FLUSH_CACHE;
struct _PERFINFO_CC_LOGGED_STREAM_INFO;
struct _PERFINFO_CC_EXTRA_WB_THREAD_INFO;
struct _PERFINFO_IMAGELOAD_IN_PAGEFILE_INFO;
struct _PERFINFO_SYSCALL_ENTER_DATA;
struct _PERFINFO_SYSCALL_EXIT_DATA;
struct _PERFINFO_MARK_INFORMATION;
struct _PERFINFO_FILE_CREATE;
struct _PERFINFO_FILE_INFORMATION;
struct _PERFINFO_FILE_DIRENUM;
struct _PERFINFO_FILE_PATH_OPERATION;
struct _PERFINFO_FILE_READ_WRITE;
struct _PERFINFO_FILE_SIMPLE_OPERATION;
struct _PERFINFO_FILE_OPERATION_END;
struct _PERFINFO_FLT_OPERATION;
struct _PERFINFO_FLT_OPERATION_STATUS;
struct _PERFINFO_MEMORY_INFORMATION;
struct _PERFINFO_SYSTEM_MEMORY_INFORMATION;
struct _PERFINFO_WORKINGSET_ENTRY;
struct _PERFINFO_WORKINGSET_INFORMATION;
struct _PERFINFO_CONTIGUOUS_PAGE_GENERATE;
enum _PERFINFO_DEBUG_EVENT_REASON;
struct _PERFINFO_DEBUG_EVENT;
enum _PERFINFO_CCSWAP_TYPE;
struct _PERFINFO_CCSWAP_BUFFER;
struct _PERFINFO_CCSWAP_IDLE_SHORT;
struct _PERFINFO_CCSWAP_IDLE;
struct _PERFINFO_CCSWAP_LITE;
struct _PERFINFO_CCSWAP;
struct _PERFINFO_PROCESS_PERFCTR;
struct _PERFINFO_PROCESS_PERFCTR32;
struct _PERFINFO_PROCESS_PERFCTR64;
struct _PERFINFO_PROCESS_INSWAP;
struct _PERFINFO_IO_TIMER;
struct _WMI_LOGGER_INFORMATION;
struct _ETW_UMGL_KEY;
struct _ETW_KERNEL_HEADER_EXTENSION;
struct _ETW_SET_MARK_INFORMATION;
enum _ETW_NOTIFICATION_TYPE;
struct _ETW_NOTIFICATION_HEADER;
enum _ETW_SESSION_NOTIFICATION_TYPE;
struct _ETW_SESSION_NOTIFICATION_PACKET;
struct _EVENT_DESCRIPTOR;
struct _EVENT_DATA_DESCRIPTOR;
enum _EVENT_INFO_CLASS;
struct _ETW_TRACE_PROVIDER_INSTANCE_INFO;
struct _ETW_TRACE_GUID_INFO;
enum _ETWTRACECONTROLCODE;
struct _TELEMETRY_COVERAGE_POINT;
struct _MOFRESOURCEINFOA;
struct _MOFRESOURCEINFOW;
struct _WMIGUIDINFORMATION;
typedef unsigned short WORD;
typedef WORD SECURITY_DESCRIPTOR_CONTROL;
typedef _LUID* PLUID;
typedef _TOKEN_PRIVILEGES* PTOKEN_PRIVILEGES;
typedef HKEY__* HKEY;
typedef _POWER_REQUEST_TYPE POWER_REQUEST_TYPE;
typedef long LONG;
typedef LONG RTL_REFERENCE_COUNT32;
typedef char CHAR;
typedef CHAR* LPSTR;
typedef unsigned long DWORD;
typedef DWORD CALID;
typedef int BOOL;
typedef BOOL ( *CALINFO_ENUMPROCEXA )( LPSTR, CALID );
typedef ACTCTX_COMPATIBILITY_ELEMENT_TYPE ACTCTX_COMPATIBILITY_ELEMENT_TYPE;
typedef unsigned long long ULONGLONG;
typedef ULONGLONG DWORDLONG;
typedef DWORDLONG* PDWORDLONG;
typedef _PROCESS_MEMORY_EXHAUSTION_INFO* PPROCESS_MEMORY_EXHAUSTION_INFO;
typedef unsigned char BYTE;
typedef BYTE BOOLEAN;
typedef BOOLEAN* PBOOLEAN;
typedef CM_Power_Data_s CM_POWER_DATA;
typedef wchar_t WCHAR;
typedef WCHAR* LPWSTR;
typedef BOOL ( *CODEPAGE_ENUMPROCW )( LPWSTR );
typedef _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
    JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
typedef _IRP* PIRP;
typedef _TOKEN_STATISTICS TOKEN_STATISTICS;
typedef _ACCESS_DENIED_CALLBACK_ACE ACCESS_DENIED_CALLBACK_ACE;
typedef _LIST_ENTRY* PRLIST_ENTRY;
typedef _TOKEN_STATISTICS* PTOKEN_STATISTICS;
typedef _TP_CALLBACK_INSTANCE* PTP_CALLBACK_INSTANCE;
typedef void* PVOID;
typedef _TP_WORK* PTP_WORK;
typedef void ( *PTP_WORK_CALLBACK )( PTP_CALLBACK_INSTANCE, PVOID, PTP_WORK );
typedef unsigned long long uintptr_t;
typedef char* va_list;
typedef unsigned long long size_t;
typedef long long ptrdiff_t;
typedef _QUEUE_USER_APC_FLAGS QUEUE_USER_APC_FLAGS;
typedef long long intptr_t;
typedef _XSAVE_CET_U_FORMAT* PXSAVE_CET_U_FORMAT;
typedef _TOKEN_CONTROL* PTOKEN_CONTROL;
typedef bool __vcrt_bool;
typedef _XSAVE_FORMAT* PXSAVE_FORMAT;
typedef _EXCEPTION_DISPOSITION EXCEPTION_DISPOSITION;
typedef _SHUFFLE_FILE_DATA SHUFFLE_FILE_DATA;
typedef _SYSTEM_ALARM_CALLBACK_ACE* PSYSTEM_ALARM_CALLBACK_ACE;
typedef _XSAVE_CET_U_FORMAT XSAVE_CET_U_FORMAT;
typedef unsigned long ULONG;
typedef _TOKEN_GROUPS_AND_PRIVILEGES TOKEN_GROUPS_AND_PRIVILEGES;
typedef _SYSTEM_RESOURCE_ATTRIBUTE_ACE* PSYSTEM_RESOURCE_ATTRIBUTE_ACE;
typedef _TOKEN_GROUPS_AND_PRIVILEGES* PTOKEN_GROUPS_AND_PRIVILEGES;
typedef LIST_ENTRY64 LIST_ENTRY64;
typedef ULONG* PULONG;
typedef _OVERLAPPED* LPOVERLAPPED;
typedef void ( *LPOVERLAPPED_COMPLETION_ROUTINE )( DWORD, DWORD, LPOVERLAPPED );
typedef unsigned short USHORT;
typedef LIST_ENTRY32 LIST_ENTRY32;
typedef _IMAGE_COFF_SYMBOLS_HEADER* PIMAGE_COFF_SYMBOLS_HEADER;
typedef PVOID PACCESS_TOKEN;
typedef _ACTIVATION_CONTEXT_DETAILED_INFORMATION
    ACTIVATION_CONTEXT_DETAILED_INFORMATION;
typedef _XSTATE_FEATURE XSTATE_FEATURE;
typedef USHORT* PUSHORT;
typedef _RTL_SRWLOCK RTL_SRWLOCK;
typedef RTL_SRWLOCK SRWLOCK;
typedef unsigned char UCHAR;
typedef _IMAGE_DEBUG_DIRECTORY* PIMAGE_DEBUG_DIRECTORY;
typedef _GUID GUID;
typedef GUID IID;
typedef void ( *PTP_SIMPLE_CALLBACK )( PTP_CALLBACK_INSTANCE, PVOID );
typedef _SYSTEM_MANDATORY_LABEL_ACE SYSTEM_MANDATORY_LABEL_ACE;
typedef _TOKEN_INFORMATION_CLASS TOKEN_INFORMATION_CLASS;
typedef UCHAR* PUCHAR;
typedef tagMONITORINFOEXW* LPMONITORINFOEXW;
typedef char* PSZ;
typedef _CFG_CALL_TARGET_INFO* PCFG_CALL_TARGET_INFO;
typedef const _ACTIVATION_CONTEXT_DETAILED_INFORMATION* PCACTIVATION_CONTEXT_DETAILED_INFORMATION;
typedef tagMONITORINFOEXA MONITORINFOEXA;
typedef long long LONG_PTR;
typedef LONG_PTR LPARAM;
typedef _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY
    PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
typedef GUID FMTID;
typedef float FLOAT;
typedef _SYSTEM_ALARM_CALLBACK_OBJECT_ACE* PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;
typedef void* HANDLE;
typedef HANDLE* LPHANDLE;
typedef FLOAT* PFLOAT;
typedef _LDR_SOFTWARE_ENCLAVE LDR_SOFTWARE_ENCLAVE;
typedef GUID* LPGUID;
typedef GUID CLSID;
typedef _MEMORY_BASIC_INFORMATION32* PMEMORY_BASIC_INFORMATION32;
typedef BOOL* PBOOL;
typedef _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY* PPROCESS_MITIGATION_USER_SHADOW_STACK_POLICY;
typedef BOOL* LPBOOL;
typedef _LUID LUID;
typedef _SE_TOKEN_USER PSE_TOKEN_USER;
typedef LONG_PTR LRESULT;
typedef HINSTANCE__* HINSTANCE;
typedef HINSTANCE HMODULE;
typedef _ACL_REVISION_INFORMATION ACL_REVISION_INFORMATION;
typedef LONG_PTR RTL_REFERENCE_COUNT;
typedef BYTE* PBYTE;
typedef BYTE* LPBYTE;
typedef _USER_ACTIVITY_PRESENCE* PUSER_ACTIVITY_PRESENCE;
typedef _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY* PPROCESS_MITIGATION_REDIRECTION_TRUST_POLICY;
typedef _ACL_SIZE_INFORMATION ACL_SIZE_INFORMATION;
typedef _MEM_ADDRESS_REQUIREMENTS* PMEM_ADDRESS_REQUIREMENTS;
typedef int* PINT;
typedef _CFG_CALL_TARGET_INFO CFG_CALL_TARGET_INFO;
typedef int* LPINT;
typedef LPMONITORINFOEXW LPMONITORINFOEX;
typedef _STORAGE_DEVICE_ID_DESCRIPTOR* PSTORAGE_DEVICE_ID_DESCRIPTOR;
typedef EXCEPTION_DISPOSITION ( *PEXCEPTION_ROUTINE )( _EXCEPTION_RECORD*, PVOID, _CONTEXT*, PVOID );
typedef _EVENT_TRACE_PROFILE_ADD_INFORMATION_V3
    EVENT_TRACE_PROFILE_ADD_INFORMATION_V3;
typedef WORD* PWORD;
typedef HACCEL__* HACCEL;
typedef WORD* LPWORD;
typedef _POWER_MONITOR_INVOCATION POWER_MONITOR_INVOCATION;
typedef _STORAGE_MEDIA_TYPE* PSTORAGE_MEDIA_TYPE;
typedef _MOUSE_EVENT_RECORD MOUSE_EVENT_RECORD;
typedef long* LPLONG;
typedef _PACKEDEVENTINFO PACKEDEVENTINFO;
typedef EXCEPTION_DISPOSITION EXCEPTION_ROUTINE( _EXCEPTION_RECORD*, PVOID, _CONTEXT*, PVOID );
typedef unsigned long long ULONG_PTR;
typedef _JOBOBJECT_RATE_CONTROL_TOLERANCE* PJOBOBJECT_RATE_CONTROL_TOLERANCE;
typedef DWORD* PDWORD;
typedef DWORD* LPDWORD;
typedef _SECURITY_IMPERSONATION_LEVEL* PSECURITY_IMPERSONATION_LEVEL;
typedef ULONG_PTR KSPIN_LOCK;
typedef _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1
    CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
typedef _EVENT_TRACE_PROFILE_COUNTER_INFORMATION* PEVENT_TRACE_PROFILE_COUNTER_INFORMATION;
typedef void* LPVOID;
typedef _DEBUG_EVENT DEBUG_EVENT;
typedef void* LPCVOID;
typedef _TOKEN_TYPE TOKEN_TYPE;
typedef int INT;
typedef tagRAWMOUSE* PRAWMOUSE;
typedef _MENU_EVENT_RECORD MENU_EVENT_RECORD;
typedef unsigned int UINT;
typedef _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;
typedef _XSAVE_FORMAT XSAVE_FORMAT;
typedef _ENUM_SERVICE_STATUSW ENUM_SERVICE_STATUSW;
typedef ENUM_SERVICE_STATUSW ENUM_SERVICE_STATUS;
typedef unsigned int* PUINT;
typedef _IO_COUNTERS IO_COUNTERS;
typedef _SECURITY_OBJECT_AI_PARAMS SECURITY_OBJECT_AI_PARAMS;
typedef bool __crt_bool;
typedef _CLAIM_SECURITY_ATTRIBUTES_INFORMATION
    CLAIM_SECURITY_ATTRIBUTES_INFORMATION;
typedef PVOID ENCLAVE_TARGET_FUNCTION( PVOID );
typedef HRGN__* HRGN;
typedef int errno_t;
typedef unsigned short wint_t;
typedef POWER_USER_PRESENCE_TYPE POWER_USER_PRESENCE_TYPE;
typedef KSPIN_LOCK* PKSPIN_LOCK;
typedef unsigned short wctype_t;
typedef long __time32_t;
typedef _MESSAGE_RESOURCE_BLOCK MESSAGE_RESOURCE_BLOCK;
typedef long long __time64_t;
typedef __crt_locale_data_public __crt_locale_data_public;
typedef LPVOID SC_LOCK;
typedef _POWER_USER_PRESENCE* PPOWER_USER_PRESENCE;
typedef _M128A M128A;
typedef _BY_HANDLE_FILE_INFORMATION* PBY_HANDLE_FILE_INFORMATION;
typedef _JOBOBJECT_BASIC_UI_RESTRICTIONS JOBOBJECT_BASIC_UI_RESTRICTIONS;
typedef _ACL ACL;
typedef ACL* PACL;
typedef _AUDIT_EVENT_TYPE* PAUDIT_EVENT_TYPE;
typedef _HARDWARE_COUNTER_TYPE* PHARDWARE_COUNTER_TYPE;
typedef _MANDATORY_LEVEL MANDATORY_LEVEL;
typedef unsigned long long DWORD64;
typedef _MANDATORY_LEVEL* PMANDATORY_LEVEL;
typedef _TP_WAIT* PTP_WAIT;
typedef DWORD TP_WAIT_RESULT;
typedef __crt_locale_pointers __crt_locale_pointers;
typedef _ACCESS_DENIED_CALLBACK_OBJECT_ACE ACCESS_DENIED_CALLBACK_OBJECT_ACE;
typedef _XSAVE_AREA_HEADER* PXSAVE_AREA_HEADER;
typedef __crt_locale_pointers* _locale_t;
typedef _PROCESS_MITIGATION_CHILD_PROCESS_POLICY
    PROCESS_MITIGATION_CHILD_PROCESS_POLICY;
typedef _MEMORY_PRIORITY_INFORMATION MEMORY_PRIORITY_INFORMATION;
typedef _Mbstatet _Mbstatet;
typedef _TOKEN_ELEVATION TOKEN_ELEVATION;
typedef _Mbstatet mbstate_t;
typedef _TAPE_SET_POSITION TAPE_SET_POSITION;
typedef _XSAVE_AREA_HEADER XSAVE_AREA_HEADER;
typedef _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY
    PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY;
typedef __time64_t time_t;
typedef void* HPCON;
typedef size_t rsize_t;
typedef unsigned long long POINTER_64_INT;
typedef _QUERY_SERVICE_LOCK_STATUSW* LPQUERY_SERVICE_LOCK_STATUSW;
typedef LPQUERY_SERVICE_LOCK_STATUSW LPQUERY_SERVICE_LOCK_STATUS;
typedef _SE_SECURITY_DESCRIPTOR SE_SECURITY_DESCRIPTOR;
typedef signed char INT8;
typedef _FILETIME FILETIME;
typedef signed char* PINT8;
typedef _BOOT_OPTIONS BOOT_OPTIONS;
typedef short INT16;
typedef _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION* PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
typedef _SE_SECURITY_DESCRIPTOR* PSE_SECURITY_DESCRIPTOR;
typedef short* PINT16;
typedef _JOBOBJECT_ASSOCIATE_COMPLETION_PORT* PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;
typedef int INT32;
typedef ENCLAVE_TARGET_FUNCTION* PENCLAVE_TARGET_FUNCTION;
typedef int* PINT32;
typedef _SE_ACCESS_REQUEST SE_ACCESS_REQUEST;
typedef long long INT64;
typedef _RTL_BARRIER* PRTL_BARRIER;
typedef LPWSTR LPTSTR;
typedef long long* PINT64;
typedef _EVENTLOGRECORD EVENTLOGRECORD;
typedef unsigned char UINT8;
typedef _JOBOBJECT_RATE_CONTROL_TOLERANCE JOBOBJECT_RATE_CONTROL_TOLERANCE;
typedef DWORD ACCESS_MASK;
typedef ACCESS_MASK* PACCESS_MASK;
typedef _EFI_DRIVER_ENTRY EFI_DRIVER_ENTRY;
typedef _OBJECTID OBJECTID;
typedef unsigned char* PUINT8;
typedef unsigned short UINT16;
typedef _STORAGE_CRYPTO_KEY_SIZE STORAGE_CRYPTO_KEY_SIZE;
typedef WCHAR* PUNZWCH;
typedef PUNZWCH PUNZTCH;
typedef pvalueW* PPVALUEW;
typedef unsigned short* PUINT16;
typedef unsigned int UINT32;
typedef CHAR* PSTR;
typedef PSTR* PZPSTR;
typedef unsigned int* PUINT32;
typedef _SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES;
typedef unsigned long long UINT64;
typedef short SHORT;
typedef unsigned long long* PUINT64;
typedef _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT* PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
typedef const WCHAR* PCNZWCH;
typedef PCNZWCH PCNZTCH;
typedef int LONG32;
typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef int* PLONG32;
typedef _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT* PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
typedef unsigned int ULONG32;
typedef unsigned int* PULONG32;
typedef const CHAR* PCSTR;
typedef PCSTR* PZPCSTR;
typedef DWORD SECURITY_INFORMATION;
typedef unsigned int DWORD32;
typedef unsigned int* PDWORD32;
typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE;
typedef _TRANSACTION_ENLISTMENTS_INFORMATION
    TRANSACTION_ENLISTMENTS_INFORMATION;
typedef long long INT_PTR;
typedef long long* PINT_PTR;
typedef _STORAGE_MEDIA_TYPE STORAGE_MEDIA_TYPE;
typedef _WNF_DELIVERY_DESCRIPTOR WNF_DELIVERY_DESCRIPTOR;
typedef unsigned long long UINT_PTR;
typedef unsigned long long* PUINT_PTR;
typedef DWORD ULONG;
typedef void ( *PTIMER_APC_ROUTINE )( PVOID, ULONG, LONG );
typedef long long* PLONG_PTR;
typedef WCHAR TCHAR;
typedef unsigned long long* PULONG_PTR;
typedef _REMOTE_NAME_INFOW* LPREMOTE_NAME_INFOW;
typedef LPREMOTE_NAME_INFOW LPREMOTE_NAME_INFO;
typedef void** PHANDLE64;
typedef _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
    TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
typedef const CHAR* LPCSTR;
typedef long long SHANDLE_PTR;
typedef _ACCESS_ALLOWED_OBJECT_ACE* PACCESS_ALLOWED_OBJECT_ACE;
typedef unsigned long long HANDLE_PTR;
typedef CHAR* PNZCH;
typedef unsigned int UHALF_PTR;
typedef _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY
    PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;
typedef unsigned int* PUHALF_PTR;
typedef const WCHAR* LPCWCH;
typedef LPCWCH LPCTCH;
typedef _TP_POOL_STACK_INFORMATION* PTP_POOL_STACK_INFORMATION;
typedef int HALF_PTR;
typedef int* PHALF_PTR;
typedef WCHAR TBYTE;
typedef _TOKEN_APPCONTAINER_INFORMATION TOKEN_APPCONTAINER_INFORMATION;
typedef ULONG_PTR SIZE_T;
typedef CHAR* PZZSTR;
typedef _ACE_HEADER ACE_HEADER;
typedef ULONG_PTR* PSIZE_T;
typedef _PROCESS_MITIGATION_ASLR_POLICY PROCESS_MITIGATION_ASLR_POLICY;
typedef HSTR__* HSTR;
typedef LONG_PTR SSIZE_T;
typedef WCHAR* LPUWSTR;
typedef _SECURITY_IMPERSONATION_LEVEL SECURITY_IMPERSONATION_LEVEL;
typedef _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM
    SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
typedef _POWER_SESSION_TIMEOUTS POWER_SESSION_TIMEOUTS;
typedef _JOBOBJECT_SECURITY_LIMIT_INFORMATION* PJOBOBJECT_SECURITY_LIMIT_INFORMATION;
typedef LONG_PTR* PSSIZE_T;
typedef _ACCESS_REASON_TYPE ACCESS_REASON_TYPE;
typedef ULONG_PTR DWORD_PTR;
typedef _JOBOBJECT_BASIC_UI_RESTRICTIONS* PJOBOBJECT_BASIC_UI_RESTRICTIONS;
typedef _BY_HANDLE_FILE_INFORMATION BY_HANDLE_FILE_INFORMATION;
typedef ULONG_PTR* PDWORD_PTR;
typedef _MEMORY_RESOURCE_NOTIFICATION_TYPE MEMORY_RESOURCE_NOTIFICATION_TYPE;
typedef long long LONG64;
typedef _ACCESS_ALLOWED_ACE ACCESS_ALLOWED_ACE;
typedef ACCESS_ALLOWED_ACE* PACCESS_ALLOWED_ACE;
typedef long long* PLONG64;
typedef const WCHAR* LPCWSTR;
typedef LPCWSTR PCTSTR;
typedef DWORD ACCESS_REASON;
typedef unsigned long long ULONG64;
typedef unsigned long long* PULONG64;
typedef WCHAR* PZZWSTR;
typedef PZZWSTR PZZTSTR;
typedef _JOBOBJECT_ASSOCIATE_COMPLETION_PORT
    JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
typedef _ACCESS_DENIED_ACE ACCESS_DENIED_ACE;
typedef unsigned long long* PDWORD64;
typedef LPUWSTR LPUTSTR;
typedef _ACCESS_REASONS* PACCESS_REASONS;
typedef ULONG_PTR KAFFINITY;
typedef KAFFINITY* PKAFFINITY;
typedef LPWSTR LP;
typedef WCHAR* PWSTR;
typedef PWSTR* PZPWSTR;
typedef PZPWSTR PZPTSTR;
typedef void ( *WAITORTIMERCALLBACKFUNC )( PVOID, BOOLEAN );
typedef _POWER_USER_PRESENCE POWER_USER_PRESENCE;
typedef const WCHAR* PCZZWSTR;
typedef PCZZWSTR PCZZTSTR;
typedef PVOID PSECURITY_ATTRIBUTES_OPAQUE;
typedef int INT;
typedef _SERVICE_DESCRIPTIONW SERVICE_DESCRIPTIONW;
typedef _CM_SERVICE_NODE_TYPE SERVICE_NODE_TYPE;
typedef const WCHAR* LPCUWSTR;
typedef LPCUWSTR PCUTSTR;
typedef _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION* PPROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION;
typedef _SE_SID* PSE_SID;
typedef const WCHAR* PCUZZWSTR;
typedef PCUZZWSTR PCUZZTSTR;
typedef WCHAR* PWCHAR;
typedef _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION
    PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION;
typedef WCHAR* LPWCH;
typedef const WCHAR* PCUNZWCH;
typedef PCUNZWCH PCUNZTCH;
typedef _TRANSACTION_BIND_INFORMATION* PTRANSACTION_BIND_INFORMATION;
typedef WCHAR* PWCH;
typedef WCHAR* PNZWCH;
typedef PNZWCH PNZTCH;
typedef _CLAIM_SECURITY_ATTRIBUTE_V1* PCLAIM_SECURITY_ATTRIBUTE_V1;
typedef _numberfmtW NUMBERFMTW;
typedef WCHAR* PUZZWSTR;
typedef PUZZWSTR PUZZTSTR;
typedef const WCHAR* PCWCH;
typedef _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE* PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE;
typedef JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE
    JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE;
typedef WCHAR* NWPSTR;
typedef _DISCDLGSTRUCTA* LPDISCDLGSTRUCTA;
typedef _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER
    IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;
typedef _REPARSE_GUID_DATA_BUFFER REPARSE_GUID_DATA_BUFFER;
typedef _COMPONENT_FILTER COMPONENT_FILTER;
typedef _SERVICE_NOTIFY_2A* PSERVICE_NOTIFY_2A;
typedef _SERVICE_FAILURE_ACTIONSA* LPSERVICE_FAILURE_ACTIONSA;
typedef _SYSTEM_SCOPED_POLICY_ID_ACE* PSYSTEM_SCOPED_POLICY_ID_ACE;
typedef _ULARGE_INTEGER ULARGE_INTEGER;
typedef _NT_TIB32* PNT_TIB32;
typedef _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY* PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
typedef const PWSTR* PCZPWSTR;
typedef LONG* PLONG;
typedef IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER* PIMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;
typedef _SCRUB_DATA_INPUT SCRUB_DATA_INPUT;
typedef HPALETTE__* HPALETTE;
typedef WCHAR* PUWSTR;
typedef _SYSTEM_PROCESS_TRUST_LABEL_ACE SYSTEM_PROCESS_TRUST_LABEL_ACE;
typedef DWORD* PTP_VERSION;
typedef const WCHAR* PCWSTR;
typedef JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3
    JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3;
typedef _WORKER_FACTORY_DEFERRED_WORK* PWORKER_FACTORY_DEFERRED_WORK;
typedef PCWSTR* PZPCWSTR;
typedef _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION
    IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
typedef _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY
    PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY;
typedef tagHELPWININFOA* LPHELPWININFOA;
typedef _MONITOR_DISPLAY_STATE MONITOR_DISPLAY_STATE;
typedef _SE_IMAGE_SIGNATURE_TYPE* PSE_IMAGE_SIGNATURE_TYPE;
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY* PRUNTIME_FUNCTION;
typedef PRUNTIME_FUNCTION GET_RUNTIME_FUNCTION_CALLBACK( DWORD64, PVOID );
typedef DWORD FLONG;
typedef const PCWSTR* PCZPCWSTR;
typedef _COMPONENT_FILTER* PCOMPONENT_FILTER;
typedef _MACHINE_ATTRIBUTES MACHINE_ATTRIBUTES;
typedef _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION
    IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
typedef IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION* PIMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
typedef _JOBOBJECT_IO_ATTRIBUTION_STATS* PJOBOBJECT_IO_ATTRIBUTION_STATS;
typedef ACL_REVISION_INFORMATION* PACL_REVISION_INFORMATION;
typedef _JOBOBJECTINFOCLASS JOBOBJECTINFOCLASS;
typedef const WCHAR* PCUWSTR;
typedef JOB_OBJECT_IO_RATE_CONTROL_FLAGS JOB_OBJECT_IO_RATE_CONTROL_FLAGS;
typedef BYTE FCHAR;
typedef DWORD EXECUTION_STATE;
typedef DWORD OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK( HANDLE, PVOID, PDWORD, PRUNTIME_FUNCTION* );
typedef OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK* POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK;
typedef HUMPD__* HUMPD;
typedef BYTE SE_SIGNING_LEVEL;
typedef char CCHAR;
typedef _SCOPE_TABLE_AMD64 SCOPE_TABLE_AMD64;
typedef SCOPE_TABLE_AMD64* PSCOPE_TABLE;
typedef _SYSTEM_AUDIT_OBJECT_ACE SYSTEM_AUDIT_OBJECT_ACE;
typedef LPWCH PTCH;
typedef const WCHAR* LPCWCHAR;
typedef const WCHAR* PCWCHAR;
typedef _FLOAT128 FLOAT128;
typedef _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE* PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
typedef const WCHAR* LPCUWCHAR;
typedef _SERVICE_REQUIRED_PRIVILEGES_INFOW SERVICE_REQUIRED_PRIVILEGES_INFOW;
typedef const WCHAR* PCUWCHAR;
typedef unsigned long UCSCHAR;
typedef UCSCHAR* PUCSCHAR;
typedef GUID* PUOW;
typedef _PROCESS_MITIGATION_IMAGE_LOAD_POLICY* PPROCESS_MITIGATION_IMAGE_LOAD_POLICY;
typedef _CLAIM_SECURITY_ATTRIBUTE_V1 CLAIM_SECURITY_ATTRIBUTE_V1;
typedef const UCSCHAR* PCUCSCHAR;
typedef _ACCESS_ALLOWED_CALLBACK_ACE* PACCESS_ALLOWED_CALLBACK_ACE;
typedef UCSCHAR* PUCSSTR;
typedef long long LONGLONG;
typedef DWORD TP_VERSION;
typedef _STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR* PSTORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR;
typedef UCSCHAR* PUUCSSTR;
typedef _PROCESS_MITIGATION_IMAGE_LOAD_POLICY
    PROCESS_MITIGATION_IMAGE_LOAD_POLICY;
typedef const UCSCHAR* PCUCSSTR;
typedef LONGLONG* PLONGLONG;
typedef _PROCESS_MITIGATION_SEHOP_POLICY* PPROCESS_MITIGATION_SEHOP_POLICY;
typedef _LARGE_INTEGER LARGE_INTEGER;
typedef _NT_TIB32 NT_TIB32;
typedef const UCSCHAR* PCUUCSSTR;
typedef _SYSTEM_AUDIT_ACE SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE* PSYSTEM_AUDIT_ACE;
typedef UCSCHAR* PUUCSCHAR;
typedef LONGLONG USN;
typedef const UCSCHAR* PCUUCSCHAR;
typedef _TAPE_DRIVE_PROBLEM_TYPE TAPE_DRIVE_PROBLEM_TYPE;
typedef _PROCESS_MITIGATION_SEHOP_POLICY PROCESS_MITIGATION_SEHOP_POLICY;
typedef _SYSTEM_ALARM_ACE SYSTEM_ALARM_ACE;
typedef CHAR* PCHAR;
typedef _TRANSACTIONMANAGER_LOG_INFORMATION TRANSACTIONMANAGER_LOG_INFORMATION;
typedef CHAR* LPCH;
typedef CHAR* PCH;
typedef _FILE_SEGMENT_ELEMENT FILE_SEGMENT_ELEMENT;
typedef _NT_TIB64* PNT_TIB64;
typedef _KTMOBJECT_TYPE KTMOBJECT_TYPE;
typedef _NT_TIB NT_TIB;
typedef const CHAR* LPCCH;
typedef const CHAR* PCCH;
typedef _NETRESOURCEA* LPNETRESOURCEA;
typedef CHAR* NPSTR;
typedef _WOW64_CONTEXT WOW64_CONTEXT;
typedef _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION
    SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
typedef _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS
    READ_DIRECTORY_NOTIFY_INFORMATION_CLASS;
typedef const PSTR* PCZPSTR;
typedef _WOW64_LDT_ENTRY WOW64_LDT_ENTRY;
typedef _SYSTEM_MEMORY_LIST_INFORMATION* PSYSTEM_MEMORY_LIST_INFORMATION;
typedef const PCSTR* PCZPCSTR;
typedef const CHAR* PCZZSTR;
typedef const CHAR* PCNZCH;
typedef _CACHE_RELATIONSHIP* PCACHE_RELATIONSHIP;
typedef WCHAR* PTCHAR;
typedef WCHAR* PTBYTE;
typedef LPWCH LPTCH;
typedef _PROCESSOR_GROUP_INFO PROCESSOR_GROUP_INFO;
typedef LPCWCH PCTCH;
typedef LPWSTR PTSTR;
typedef tagCANDIDATELIST* LPCANDIDATELIST;
typedef LPCWSTR LPCTSTR;
typedef _FIRMWARE_TYPE FIRMWARE_TYPE;
typedef _SCOPE_TABLE_ARM* PSCOPE_TABLE_ARM;
typedef LPUWSTR PUTSTR;
typedef LPCUWSTR LPCUTSTR;
typedef _SYSTEM_INFO* LPSYSTEM_INFO;
typedef _PROCESSOR_CACHE_TYPE PROCESSOR_CACHE_TYPE;
typedef _SCOPE_TABLE_ARM64* PSCOPE_TABLE_ARM64;
typedef _POWER_SESSION_CONNECT* PPOWER_SESSION_CONNECT;
typedef _POWER_SESSION_RIT_STATE POWER_SESSION_RIT_STATE;
typedef _WIN32_FIND_DATAW* PWIN32_FIND_DATAW;
typedef _HEAP_OPTIMIZE_RESOURCES_INFORMATION
    HEAP_OPTIMIZE_RESOURCES_INFORMATION;
typedef _WIN32_MEMORY_RANGE_ENTRY* PWIN32_MEMORY_RANGE_ENTRY;
typedef _SYSTEM_CPU_SET_INFORMATION* PSYSTEM_CPU_SET_INFORMATION;
typedef _WOW64_FLOATING_SAVE_AREA WOW64_FLOATING_SAVE_AREA;
typedef WOW64_FLOATING_SAVE_AREA* PWOW64_FLOATING_SAVE_AREA;
typedef SHORT* PSHORT;
typedef tagSTYLEBUFA STYLEBUFA;
typedef _LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef _PROCESSOR_NUMBER PROCESSOR_NUMBER;
typedef _PROCESSOR_NUMBER* PPROCESSOR_NUMBER;
typedef _GROUP_AFFINITY GROUP_AFFINITY;
typedef _GROUP_AFFINITY* PGROUP_AFFINITY;
typedef _COVERAGE_REQUEST_CODES COVERAGE_REQUEST_CODES;
typedef _TOKEN_PRIMARY_GROUP TOKEN_PRIMARY_GROUP;
typedef HANDLE* PHANDLE;
typedef WORD FSHORT;
typedef _WOW64_DESCRIPTOR_TABLE_ENTRY* PWOW64_DESCRIPTOR_TABLE_ENTRY;
typedef long HRESULT;
typedef _RTL_CRITICAL_SECTION_DEBUG RTL_CRITICAL_SECTION_DEBUG;
typedef DWORD LCID;
typedef _KCRM_MARSHAL_HEADER* PKCRM_MARSHAL_HEADER;
typedef _EXCEPTION_RECORD EXCEPTION_RECORD;
typedef PDWORD PLCID;
typedef WORD LANGID;
typedef _SUPPORTED_OS_INFO SUPPORTED_OS_INFO;
typedef COMPARTMENT_ID COMPARTMENT_ID;
typedef COMPARTMENT_ID* PCOMPARTMENT_ID;
typedef tagIMEMENUITEMINFOW* NPIMEMENUITEMINFOW;
typedef _PROCESSOR_RELATIONSHIP PROCESSOR_RELATIONSHIP;
typedef FLOAT128* PFLOAT128;
typedef _SYSTEMTIME* LPSYSTEMTIME;
typedef _KNONVOLATILE_CONTEXT_POINTERS_ARM64
    KNONVOLATILE_CONTEXT_POINTERS_ARM64;
typedef ULONGLONG* PULONGLONG;
typedef MEM_EXTENDED_PARAMETER_TYPE MEM_EXTENDED_PARAMETER_TYPE;
typedef DWORD ( *PTHREAD_START_ROUTINE )( LPVOID );
typedef LARGE_INTEGER* PLARGE_INTEGER;
typedef _GENERIC_MAPPING GENERIC_MAPPING;
typedef XSAVE_FORMAT XMM_SAVE_AREA32;
typedef ULARGE_INTEGER* PULARGE_INTEGER;
typedef LONG_PTR* PRTL_REFERENCE_COUNT;
typedef _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION
    JOBOBJECT_CPU_RATE_CONTROL_INFORMATION;
typedef LONG* PRTL_REFERENCE_COUNT32;
typedef JOB_OBJECT_NET_RATE_CONTROL_FLAGS JOB_OBJECT_NET_RATE_CONTROL_FLAGS;
typedef _SERVICE_NOTIFY_2A SERVICE_NOTIFY_2A;
typedef _TOKEN_PRIVILEGES TOKEN_PRIVILEGES;
typedef tagSIZE SIZE;
typedef _LIST_ENTRY LIST_ENTRY;
typedef _LIST_ENTRY* PLIST_ENTRY;
typedef _SYSTEM_LOGICAL_PROCESSOR_INFORMATION
    SYSTEM_LOGICAL_PROCESSOR_INFORMATION;
typedef _SINGLE_LIST_ENTRY SINGLE_LIST_ENTRY;
typedef _SINGLE_LIST_ENTRY* PSINGLE_LIST_ENTRY;
typedef _TOKEN_DEVICE_CLAIMS TOKEN_DEVICE_CLAIMS;
typedef _EXCEPTION_RECORD32* PEXCEPTION_RECORD32;
typedef _JOBOBJECT_IO_ATTRIBUTION_STATS JOBOBJECT_IO_ATTRIBUTION_STATS;
typedef _TRANSACTION_OUTCOME TRANSACTION_OUTCOME;
typedef _EXCEPTION_REGISTRATION_RECORD EXCEPTION_REGISTRATION_RECORD;
typedef _EXCEPTION_RECORD64 EXCEPTION_RECORD64;
typedef LIST_ENTRY32* PLIST_ENTRY32;
typedef _PROCESS_HEAP_ENTRY* LPPROCESS_HEAP_ENTRY;
typedef _JOBOBJECT_IO_ATTRIBUTION_INFORMATION* PJOBOBJECT_IO_ATTRIBUTION_INFORMATION;
typedef LIST_ENTRY64* PLIST_ENTRY64;
typedef _SERVICE_CONTROL_STATUS_REASON_PARAMSW* PSERVICE_CONTROL_STATUS_REASON_PARAMSW;
typedef JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2
    JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2;
typedef const GUID* LPCGUID;
typedef IID* LPIID;
typedef _SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS
    SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS;
typedef CLSID* LPCLSID;
typedef PENCLAVE_TARGET_FUNCTION LPENCLAVE_TARGET_FUNCTION;
typedef FMTID* LPFMTID;
typedef tagPOINT* PPOINT;
typedef _EXIT_PROCESS_DEBUG_INFO EXIT_PROCESS_DEBUG_INFO;
typedef tagRAWMOUSE* LPRAWMOUSE;
typedef _FILE_ID_128* PFILE_ID_128;
typedef _LDT_ENTRY* PLDT_ENTRY;
typedef _WIN32_FIND_DATAW* LPWIN32_FIND_DATAW;
typedef _M128A* PM128A;
typedef _MESSAGE_RESOURCE_DATA* PMESSAGE_RESOURCE_DATA;
typedef _WIN32_FILE_ATTRIBUTE_DATA WIN32_FILE_ATTRIBUTE_DATA;
typedef _ARM64_NT_NEON128 ARM64_NT_NEON128;
typedef tagCOMPOSITIONFORM* NPCOMPOSITIONFORM;
typedef _XSAVE_AREA XSAVE_AREA;
typedef _XSAVE_AREA* PXSAVE_AREA;
typedef tagRECT RECT;
typedef _XSTATE_CONTEXT XSTATE_CONTEXT;
typedef _XSTATE_CONTEXT* PXSTATE_CONTEXT;
typedef _SERVERSILO_STATE SERVERSILO_STATE;
typedef _SYSTEM_GDI_DRIVER_INFORMATION* PSYSTEM_GDI_DRIVER_INFORMATION;
typedef _SM_STORE_BASIC_PARAMS SM_STORE_BASIC_PARAMS;
typedef _KERNEL_CET_CONTEXT KERNEL_CET_CONTEXT;
typedef _KERNEL_CET_CONTEXT* PKERNEL_CET_CONTEXT;
typedef char __C_ASSERT__[1];
typedef _DEVICE_POWER_STATE DEVICE_POWER_STATE;
typedef INT_PTR ( *NEARPROC )();
typedef _PROCESS_POWER_THROTTLING_STATE* PPROCESS_POWER_THROTTLING_STATE;
typedef _ST_IO_STATS_PERIOD ST_IO_STATS_PERIOD;
typedef _SCOPE_TABLE_AMD64* PSCOPE_TABLE_AMD64;
typedef POWER_INFORMATION_LEVEL POWER_INFORMATION_LEVEL;
typedef _EVENT_TRACE_TAG_FILTER_INFORMATION EVENT_TRACE_TAG_FILTER_INFORMATION;
typedef EVENT_TRACE_TAG_FILTER_INFORMATION* PEVENT_TRACE_POOLTAG_FILTER_INFORMATION;
typedef XSAVE_FORMAT* PXMM_SAVE_AREA32;
typedef _REARRANGE_FILE_DATA32* PREARRANGE_FILE_DATA32;
typedef _CONTEXT CONTEXT;
typedef _REARRANGE_FILE_DATA* PREARRANGE_FILE_DATA;
typedef _APC_CALLBACK_DATA* PAPC_CALLBACK_DATA;
typedef _CONTEXT* PCONTEXT;
typedef _STORAGE_IDENTIFIER_TYPE STORAGE_IDENTIFIER_TYPE;
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY RUNTIME_FUNCTION;
typedef _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY
    PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY;
typedef _NETWORK_APP_INSTANCE_EA NETWORK_APP_INSTANCE_EA;
typedef SCOPE_TABLE_AMD64 SCOPE_TABLE;
typedef _RTL_RUN_ONCE* PRTL_RUN_ONCE;
typedef PRTL_RUN_ONCE LPINIT_ONCE;
typedef _KCRM_MARSHAL_HEADER* PRKCRM_MARSHAL_HEADER;
typedef SYSTEM_POWER_CAPABILITIES SYSTEM_POWER_CAPABILITIES;
typedef _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY
    PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
typedef _HIBERFILE_BUCKET HIBERFILE_BUCKET;
typedef DWORD* PSECURITY_INFORMATION;
typedef GET_RUNTIME_FUNCTION_CALLBACK* PGET_RUNTIME_FUNCTION_CALLBACK;
typedef _HIBERFILE_BUCKET_SIZE HIBERFILE_BUCKET_SIZE;
typedef BATTERY_REPORTING_SCALE BATTERY_REPORTING_SCALE;
typedef PVOID HPOWERNOTIFY;
typedef _STORAGE_IDENTIFIER_CODE_SET STORAGE_IDENTIFIER_CODE_SET;
typedef _DISPATCHER_CONTEXT DISPATCHER_CONTEXT;
typedef _JOB_SET_ARRAY JOB_SET_ARRAY;
typedef _DISPATCHER_CONTEXT* PDISPATCHER_CONTEXT;
typedef _TP_IO* PTP_IO;
typedef _PROCESS_MACHINE_INFORMATION PROCESS_MACHINE_INFORMATION;
typedef _IMAGE_DOS_HEADER IMAGE_DOS_HEADER;
typedef LONG ( *PEXCEPTION_FILTER )( _EXCEPTION_POINTERS*, PVOID );
typedef LATENCY_TIME LATENCY_TIME;
typedef void ( *PTERMINATION_HANDLER )( BOOLEAN, PVOID );
typedef tagENUMUILANG ENUMUILANG;
typedef _RESUME_PERFORMANCE RESUME_PERFORMANCE;
typedef _SMKM_FILE_INFO* PSMKM_FILE_INFO;
typedef _KNONVOLATILE_CONTEXT_POINTERS KNONVOLATILE_CONTEXT_POINTERS;
typedef _KNONVOLATILE_CONTEXT_POINTERS* PKNONVOLATILE_CONTEXT_POINTERS;
typedef _RESUME_PERFORMANCE* PRESUME_PERFORMANCE;
typedef _KPROFILE_SOURCE KPROFILE_SOURCE;
typedef _SCOPE_TABLE_ARM SCOPE_TABLE_ARM;
typedef _JOBOBJECT_BASIC_LIMIT_INFORMATION JOBOBJECT_BASIC_LIMIT_INFORMATION;
typedef _SCOPE_TABLE_ARM64 SCOPE_TABLE_ARM64;
typedef _JOBOBJECT_BASIC_PROCESS_ID_LIST JOBOBJECT_BASIC_PROCESS_ID_LIST;
typedef _ENUM_SERVICE_STATUS_PROCESSW ENUM_SERVICE_STATUS_PROCESSW;
typedef _MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE* PMEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE;
typedef _ARM64_NT_NEON128* PARM64_NT_NEON128;
typedef _NETWORK_APP_INSTANCE_EA* PNETWORK_APP_INSTANCE_EA;
typedef _TP_TIMER* PTP_TIMER;
typedef void ( *PTP_TIMER_CALLBACK )( PTP_CALLBACK_INSTANCE, PVOID, PTP_TIMER );
typedef _THREAD_POWER_THROTTLING_STATE THREAD_POWER_THROTTLING_STATE;
typedef _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY* PPROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY;
typedef POWER_ACTION POWER_ACTION;
typedef WIN32_MEMORY_PARTITION_INFORMATION_CLASS
    WIN32_MEMORY_PARTITION_INFORMATION_CLASS;
typedef _ARM64_NT_CONTEXT ARM64_NT_CONTEXT;
typedef _ARM64_NT_CONTEXT* PARM64_NT_CONTEXT;
typedef _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES
    POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES;
typedef _STORAGE_CRYPTO_CAPABILITY STORAGE_CRYPTO_CAPABILITY;
typedef _JOBOBJECT_JOBSET_INFORMATION JOBOBJECT_JOBSET_INFORMATION;
typedef _ARM64EC_NT_CONTEXT ARM64EC_NT_CONTEXT;
typedef _ARM64EC_NT_CONTEXT* PARM64EC_NT_CONTEXT;
typedef _QUERY_SERVICE_CONFIGW QUERY_SERVICE_CONFIGW;
typedef _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY ARM64_RUNTIME_FUNCTION;
typedef _QUOTA_LIMITS QUOTA_LIMITS;
typedef _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY* PARM64_RUNTIME_FUNCTION;
typedef _CLASS_MEDIA_CHANGE_CONTEXT CLASS_MEDIA_CHANGE_CONTEXT;
typedef _COVERAGE_MODULE_INFO* PCOVERAGE_MODULE_INFO;
typedef _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION
    TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
typedef _ENCLAVE_LOAD_DATA_VBS_BASIC* PENCLAVE_LOAD_DATA_VBS_BASIC;
typedef _DISPATCHER_CONTEXT_NONVOLREG_ARM64 DISPATCHER_CONTEXT_NONVOLREG_ARM64;
typedef _RATE_QUOTA_LIMIT* PRATE_QUOTA_LIMIT;
typedef char __C_ASSERT__[1];
typedef _NETINFOSTRUCT* LPNETINFOSTRUCT;
typedef _DISPATCHER_CONTEXT_ARM64 DISPATCHER_CONTEXT_ARM64;
typedef _DISPATCHER_CONTEXT_ARM64* PDISPATCHER_CONTEXT_ARM64;
typedef _TAPE_GET_STATISTICS TAPE_GET_STATISTICS;
typedef _SCRUB_PARITY_EXTENT SCRUB_PARITY_EXTENT;
typedef _KNONVOLATILE_CONTEXT_POINTERS_ARM64* PKNONVOLATILE_CONTEXT_POINTERS_ARM64;
typedef PRTL_RUN_ONCE PINIT_ONCE;
typedef BOOL ( *PINIT_ONCE_FN )( PINIT_ONCE, PVOID, PVOID* );
typedef void BAD_MEMORY_CALLBACK_ROUTINE();
typedef _LDT_ENTRY LDT_ENTRY;
typedef _FILE_ID_128 FILE_ID_128;
typedef _JOBOBJECT_END_OF_JOB_TIME_INFORMATION
    JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
typedef _SERVICE_DESCRIPTIONW* LPSERVICE_DESCRIPTIONW;
typedef _POWER_SESSION_RIT_STATE* PPOWER_SESSION_RIT_STATE;
typedef _FILE_NOTIFY_INFORMATION* PFILE_NOTIFY_INFORMATION;
typedef unsigned char UCHAR;
typedef WOW64_CONTEXT* PWOW64_CONTEXT;
typedef _ENCLAVE_INIT_INFO_SGX* PENCLAVE_INIT_INFO_SGX;
typedef _WOW64_LDT_ENTRY* PWOW64_LDT_ENTRY;
typedef _WOW64_DESCRIPTOR_TABLE_ENTRY WOW64_DESCRIPTOR_TABLE_ENTRY;
typedef BOOL ( *CALINFO_ENUMPROCEXW )( LPWSTR, CALID );
typedef EXCEPTION_RECORD* PEXCEPTION_RECORD;
typedef PPM_WMI_IDLE_STATE PPM_WMI_IDLE_STATE;
typedef _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY* PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
typedef RTL_SRWLOCK* PSRWLOCK;
typedef _HEAP_SUMMARY* PHEAP_SUMMARY;
typedef PPM_WMI_LEGACY_PERFSTATE PPM_WMI_LEGACY_PERFSTATE;
typedef _EXCEPTION_RECORD32 EXCEPTION_RECORD32;
typedef _TOKEN_DEFAULT_DACL* PTOKEN_DEFAULT_DACL;
typedef tagWNDCLASSEXW* PWNDCLASSEXW;
typedef tagWNDCLASSEXA* LPWNDCLASSEXA;
typedef _EXCEPTION_RECORD64* PEXCEPTION_RECORD64;
typedef PPM_WMI_IDLE_STATES_EX PPM_WMI_IDLE_STATES_EX;
typedef tagWNDCLASSA* PWNDCLASSA;
typedef _EXCEPTION_POINTERS EXCEPTION_POINTERS;
typedef _EXCEPTION_POINTERS* PEXCEPTION_POINTERS;
typedef _APP_MEMORY_INFORMATION APP_MEMORY_INFORMATION;
typedef PVOID PSECURITY_DESCRIPTOR;
typedef PVOID PSID;
typedef PVOID PCLAIMS_BLOB;
typedef DWORD* PEXECUTION_STATE;
typedef _STORAGE_DEVICE_DESCRIPTOR* PSTORAGE_DEVICE_DESCRIPTOR;
typedef GENERIC_MAPPING* PGENERIC_MAPPING;
typedef _STARTUPINFOA STARTUPINFOA;
typedef _LUID_AND_ATTRIBUTES* PLUID_AND_ATTRIBUTES;
typedef _SHARED_VIRTUAL_DISK_SUPPORT* PSHARED_VIRTUAL_DISK_SUPPORT;
typedef _FILE_NOTIFY_FULL_INFORMATION FILE_NOTIFY_FULL_INFORMATION;
typedef LUID_AND_ATTRIBUTES_ARRAY* PLUID_AND_ATTRIBUTES_ARRAY;
typedef _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR* PSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR;
typedef _SID_IDENTIFIER_AUTHORITY SID_IDENTIFIER_AUTHORITY;
typedef _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY
    PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
typedef _WIN32_FIND_STREAM_DATA WIN32_FIND_STREAM_DATA;
typedef _SID_IDENTIFIER_AUTHORITY* PSID_IDENTIFIER_AUTHORITY;
typedef _SID SID;
typedef _SID* PISID;
typedef BOOLEAN* PSECURITY_CONTEXT_TRACKING_MODE;
typedef _SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION
    SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION;
typedef _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT
    TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
typedef _SE_SID SE_SID;
typedef _GET_FILEEX_INFO_LEVELS GET_FILEEX_INFO_LEVELS;
typedef _SID_NAME_USE SID_NAME_USE;
typedef _SID_NAME_USE* PSID_NAME_USE;
typedef tagCANDIDATEFORM CANDIDATEFORM;
typedef _SID_AND_ATTRIBUTES* PSID_AND_ATTRIBUTES;
typedef SID_AND_ATTRIBUTES_ARRAY* PSID_AND_ATTRIBUTES_ARRAY;
typedef tagREGISTERWORDA* LPREGISTERWORDA;
typedef ULONG_PTR SID_HASH_ENTRY;
typedef ULONG_PTR* PSID_HASH_ENTRY;
typedef _GROUP_RELATIONSHIP* PGROUP_RELATIONSHIP;
typedef _SID_AND_ATTRIBUTES_HASH SID_AND_ATTRIBUTES_HASH;
typedef _TOKEN_MANDATORY_POLICY* PTOKEN_MANDATORY_POLICY;
typedef _SID_AND_ATTRIBUTES_HASH* PSID_AND_ATTRIBUTES_HASH;
typedef _IMAGE_IMPORT_DESCRIPTOR IMAGE_IMPORT_DESCRIPTOR;
typedef _LOGICAL_PROCESSOR_RELATIONSHIP LOGICAL_PROCESSOR_RELATIONSHIP;
typedef _JOBOBJECT_BASIC_LIMIT_INFORMATION* PJOBOBJECT_BASIC_LIMIT_INFORMATION;
typedef WELL_KNOWN_SID_TYPE WELL_KNOWN_SID_TYPE;
typedef _IMAGE_TLS_DIRECTORY64 IMAGE_TLS_DIRECTORY64;
typedef IMAGE_TLS_DIRECTORY64* PIMAGE_TLS_DIRECTORY64;
typedef tagMSGBOXPARAMSW* LPMSGBOXPARAMSW;
typedef tagMSGBOXPARAMSW* PMSGBOXPARAMSW;
typedef PMSGBOXPARAMSW PMSGBOXPARAMS;
typedef tagREGISTERWORDW* LPREGISTERWORDW;
typedef LPWIN32_FIND_DATAW LPWIN32_FIND_DATA;
typedef ACE_HEADER* PACE_HEADER;
typedef _IMAGE_DELAYLOAD_DESCRIPTOR IMAGE_DELAYLOAD_DESCRIPTOR;
typedef _IMAGE_BOUND_FORWARDER_REF IMAGE_BOUND_FORWARDER_REF;
typedef PWIN32_FIND_DATAW PWIN32_FIND_DATA;
typedef tagSTYLEBUFW STYLEBUFW;
typedef _SYSTEM_POOL_ZEROING_INFORMATION* PSYSTEM_POOL_ZEROING_INFORMATION;
typedef MENUITEMTEMPLATEHEADER* PMENUITEMTEMPLATEHEADER;
typedef ACCESS_DENIED_ACE* PACCESS_DENIED_ACE;
typedef pvalueA PVALUEA;
typedef _UMS_CREATE_THREAD_ATTRIBUTES UMS_CREATE_THREAD_ATTRIBUTES;
typedef SYSTEM_ALARM_ACE* PSYSTEM_ALARM_ACE;
typedef _SYSTEM_RESOURCE_ATTRIBUTE_ACE SYSTEM_RESOURCE_ATTRIBUTE_ACE;
typedef _ENCLAVE_CREATE_INFO_SGX ENCLAVE_CREATE_INFO_SGX;
typedef _TOKEN_OWNER* PTOKEN_OWNER;
typedef _SYSTEM_SCOPED_POLICY_ID_ACE SYSTEM_SCOPED_POLICY_ID_ACE;
typedef BYTE* PSE_SIGNING_LEVEL;
typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT* PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;
typedef _SYSTEM_MANDATORY_LABEL_ACE* PSYSTEM_MANDATORY_LABEL_ACE;
typedef NPIMEMENUITEMINFOW NPIMEMENUITEMINFO;
typedef _TOKEN_DEFAULT_DACL TOKEN_DEFAULT_DACL;
typedef _SECURITY_CAPABILITIES SECURITY_CAPABILITIES;
typedef _MEMORY_BASIC_INFORMATION MEMORY_BASIC_INFORMATION;
typedef _SYSTEM_PROCESS_TRUST_LABEL_ACE* PSYSTEM_PROCESS_TRUST_LABEL_ACE;
typedef _SYSTEM_ACCESS_FILTER_ACE SYSTEM_ACCESS_FILTER_ACE;
typedef _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE* PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;
typedef _SYSTEM_ACCESS_FILTER_ACE* PSYSTEM_ACCESS_FILTER_ACE;
typedef _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
    SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
typedef _TAPE_WMI_OPERATIONS TAPE_WMI_OPERATIONS;
typedef _ACCESS_ALLOWED_OBJECT_ACE ACCESS_ALLOWED_OBJECT_ACE;
typedef _ACCESS_DENIED_OBJECT_ACE ACCESS_DENIED_OBJECT_ACE;
typedef _ACCESS_DENIED_OBJECT_ACE* PACCESS_DENIED_OBJECT_ACE;
typedef _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX* PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
typedef _SYSTEM_AUDIT_OBJECT_ACE* PSYSTEM_AUDIT_OBJECT_ACE;
typedef _SYSTEM_ALARM_OBJECT_ACE SYSTEM_ALARM_OBJECT_ACE;
typedef LPVOID ( *PENCLAVE_ROUTINE )( LPVOID );
typedef _SYSTEM_ALARM_OBJECT_ACE* PSYSTEM_ALARM_OBJECT_ACE;
typedef _STORAGE_DEVICE_NUMBER STORAGE_DEVICE_NUMBER;
typedef _ACCESS_ALLOWED_CALLBACK_ACE ACCESS_ALLOWED_CALLBACK_ACE;
typedef MEM_EXTENDED_PARAMETER MEM_EXTENDED_PARAMETER;
typedef _CONNECTDLGSTRUCTW CONNECTDLGSTRUCTW;
typedef CONNECTDLGSTRUCTW CONNECTDLGSTRUCT;
typedef _ACCESS_DENIED_CALLBACK_ACE* PACCESS_DENIED_CALLBACK_ACE;
typedef _SE_TOKEN_USER SE_TOKEN_USER;
typedef _SYSTEM_EXCEPTION_INFORMATION SYSTEM_EXCEPTION_INFORMATION;
typedef _SYSTEM_AUDIT_CALLBACK_ACE SYSTEM_AUDIT_CALLBACK_ACE;
typedef _SYSTEM_AUDIT_CALLBACK_ACE* PSYSTEM_AUDIT_CALLBACK_ACE;
typedef _SYSTEM_ALARM_CALLBACK_ACE SYSTEM_ALARM_CALLBACK_ACE;
typedef BOOL ( *TIMEFMT_ENUMPROCW )( LPWSTR );
typedef _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE ACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
typedef _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE* PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
typedef _TOKEN_AUDIT_POLICY* PTOKEN_AUDIT_POLICY;
typedef _SERVICE_NOTIFY_1 SERVICE_NOTIFY_1;
typedef _ACCESS_DENIED_CALLBACK_OBJECT_ACE* PACCESS_DENIED_CALLBACK_OBJECT_ACE;
typedef _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE SYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
typedef SIZE* PSIZEL;
typedef _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE* PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
typedef _SYSTEM_ALARM_CALLBACK_OBJECT_ACE SYSTEM_ALARM_CALLBACK_OBJECT_ACE;
typedef _TOKEN_USER_CLAIMS* PTOKEN_USER_CLAIMS;
typedef _ACL_INFORMATION_CLASS ACL_INFORMATION_CLASS;
typedef _SERVICE_NOTIFY_2W SERVICE_NOTIFY_2W;
typedef _JOB_SET_ARRAY* PJOB_SET_ARRAY;
typedef EXCEPTION_REGISTRATION_RECORD* PEXCEPTION_REGISTRATION_RECORD;
typedef ACL_SIZE_INFORMATION* PACL_SIZE_INFORMATION;
typedef WORD* PSECURITY_DESCRIPTOR_CONTROL;
typedef _JOBOBJECT_LIMIT_VIOLATION_INFORMATION
    JOBOBJECT_LIMIT_VIOLATION_INFORMATION;
typedef _TOKEN_ELEVATION_TYPE* PTOKEN_ELEVATION_TYPE;
typedef _EVENT_TRACE_PROFILE_REMOVE_INFORMATION
    EVENT_TRACE_PROFILE_REMOVE_INFORMATION;
typedef _SECURITY_DESCRIPTOR_RELATIVE SECURITY_DESCRIPTOR_RELATIVE;
typedef _SERVICE_CONTROL_STATUS_REASON_PARAMSA* PSERVICE_CONTROL_STATUS_REASON_PARAMSA;
typedef _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION
    ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
typedef _SECURITY_DESCRIPTOR_RELATIVE* PISECURITY_DESCRIPTOR_RELATIVE;
typedef JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2
    JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2;
typedef _TOKEN_USER TOKEN_USER;
typedef _SECURITY_DESCRIPTOR SECURITY_DESCRIPTOR;
typedef _SECURITY_DESCRIPTOR* PISECURITY_DESCRIPTOR;
typedef _SECURITY_OBJECT_AI_PARAMS* PSECURITY_OBJECT_AI_PARAMS;
typedef _OBJECT_TYPE_LIST OBJECT_TYPE_LIST;
typedef _OBJECT_TYPE_LIST* POBJECT_TYPE_LIST;
typedef _FIRMWARE_TYPE* PFIRMWARE_TYPE;
typedef _CACHE_DESCRIPTOR CACHE_DESCRIPTOR;
typedef _AUDIT_EVENT_TYPE AUDIT_EVENT_TYPE;
typedef _TOKEN_ACCESS_INFORMATION TOKEN_ACCESS_INFORMATION;
typedef tagPOINT* NPPOINT;
typedef _TRANSACTIONMANAGER_INFORMATION_CLASS
    TRANSACTIONMANAGER_INFORMATION_CLASS;
typedef _RECTL RECTL;
typedef const RECTL* LPCRECTL;
typedef HTOUCHINPUT__* HTOUCHINPUT;
typedef _FOCUS_EVENT_RECORD FOCUS_EVENT_RECORD;
typedef _PRIVILEGE_SET PRIVILEGE_SET;
typedef _PRIVILEGE_SET* PPRIVILEGE_SET;
typedef _IMAGE_SYMBOL IMAGE_SYMBOL;
typedef IMAGE_SYMBOL* PIMAGE_SYMBOL;
typedef GUID UOW;
typedef tagPOINTER_BUTTON_CHANGE_TYPE POINTER_BUTTON_CHANGE_TYPE;
typedef _ACCESS_REASONS ACCESS_REASONS;
typedef _WIN32_FIND_DATAW WIN32_FIND_DATAW;
typedef _ENLISTMENT_INFORMATION_CLASS ENLISTMENT_INFORMATION_CLASS;
typedef _PROCESS_MITIGATION_DEP_POLICY PROCESS_MITIGATION_DEP_POLICY;
typedef _SE_ACCESS_REQUEST* PSE_ACCESS_REQUEST;
typedef APP_LOCAL_DEVICE_ID APP_LOCAL_DEVICE_ID;
typedef _CONSOLE_READCONSOLE_CONTROL* PCONSOLE_READCONSOLE_CONTROL;
typedef _NUMA_NODE_RELATIONSHIP* PNUMA_NODE_RELATIONSHIP;
typedef _SE_ACCESS_REPLY SE_ACCESS_REPLY;
typedef _TOKEN_LINKED_TOKEN* PTOKEN_LINKED_TOKEN;
typedef _SE_ACCESS_REPLY* PSE_ACCESS_REPLY;
typedef _SILOOBJECT_BASIC_INFORMATION* PSILOOBJECT_BASIC_INFORMATION;
typedef _TOKEN_MANDATORY_LABEL TOKEN_MANDATORY_LABEL;
typedef const RECT* LPCRECT;
typedef tagRECT* PRECT;
typedef TOKEN_TYPE* PTOKEN_TYPE;
typedef _TOKEN_ELEVATION_TYPE TOKEN_ELEVATION_TYPE;
typedef _IMAGE_THUNK_DATA64 IMAGE_THUNK_DATA64;
typedef IMAGE_THUNK_DATA64 IMAGE_THUNK_DATA;
typedef _POWER_REQUEST_TYPE* PPOWER_REQUEST_TYPE;
typedef _RTL_CRITICAL_SECTION_DEBUG* PRTL_RESOURCE_DEBUG;
typedef _IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY32;
typedef _TOKEN_INFORMATION_CLASS* PTOKEN_INFORMATION_CLASS;
typedef _SYSTEM_POWER_STATE SYSTEM_POWER_STATE;
typedef _TOKEN_USER* PTOKEN_USER;
typedef CM_Power_Data_s* PCM_POWER_DATA;
typedef _TOKEN_GROUPS TOKEN_GROUPS;
typedef _TOKEN_GROUPS* PTOKEN_GROUPS;
typedef tagMENUGETOBJECTINFO* PMENUGETOBJECTINFO;
typedef _SHUFFLE_FILE_DATA* PSHUFFLE_FILE_DATA;
typedef tagGESTUREINFO GESTUREINFO;
typedef _TOKEN_OWNER TOKEN_OWNER;
typedef _RTL_CRITICAL_SECTION RTL_CRITICAL_SECTION;
typedef _TOKEN_PRIMARY_GROUP* PTOKEN_PRIMARY_GROUP;
typedef _FPO_DATA* PFPO_DATA;
typedef tagIMEMENUITEMINFOW* PIMEMENUITEMINFOW;
typedef tagMENUITEMINFOW* LPMENUITEMINFOW;
typedef _TOKEN_USER_CLAIMS TOKEN_USER_CLAIMS;
typedef _DEVICE_POWER_STATE* PDEVICE_POWER_STATE;
typedef _IMAGE_POLICY_METADATA IMAGE_POLICY_METADATA;
typedef const IMAGE_POLICY_METADATA* PCIMAGE_POLICY_METADATA;
typedef _TOKEN_DEVICE_CLAIMS* PTOKEN_DEVICE_CLAIMS;
typedef _IMAGE_FUNCTION_ENTRY64* PIMAGE_FUNCTION_ENTRY64;
typedef _USER_ACTIVITY_PRESENCE USER_ACTIVITY_PRESENCE;
typedef _TOKEN_LINKED_TOKEN TOKEN_LINKED_TOKEN;
typedef POWER_MONITOR_REQUEST_REASON POWER_MONITOR_REQUEST_REASON;
typedef _POWER_MONITOR_INVOCATION* PPOWER_MONITOR_INVOCATION;
typedef _ASSEMBLY_FILE_DETAILED_INFORMATION ASSEMBLY_FILE_DETAILED_INFORMATION;
typedef _TOKEN_ELEVATION* PTOKEN_ELEVATION;
typedef IInternetZoneManager IInternetZoneManager;
typedef _TOKEN_MANDATORY_LABEL* PTOKEN_MANDATORY_LABEL;
typedef SYSTEM_POWER_CONDITION SYSTEM_POWER_CONDITION;
typedef _TOKEN_MANDATORY_POLICY TOKEN_MANDATORY_POLICY;
typedef tagHELPINFO* LPHELPINFO;
typedef void ( *MSGBOXCALLBACK )( LPHELPINFO );
typedef POWER_USER_PRESENCE_TYPE* PPOWER_USER_PRESENCE_TYPE;
typedef ANON_OBJECT_HEADER_V2 ANON_OBJECT_HEADER_V2;
typedef _TOKEN_ACCESS_INFORMATION* PTOKEN_ACCESS_INFORMATION;
typedef _TOKEN_AUDIT_POLICY TOKEN_AUDIT_POLICY;
typedef _TOKEN_SOURCE TOKEN_SOURCE;
typedef _TOKEN_SOURCE* PTOKEN_SOURCE;
typedef _ICONINFO ICONINFO;
typedef _IMAGE_RESOURCE_DIRECTORY_ENTRY* PIMAGE_RESOURCE_DIRECTORY_ENTRY;
typedef _TOKEN_CONTROL TOKEN_CONTROL;
typedef _TOKEN_ORIGIN TOKEN_ORIGIN;
typedef _IMAGE_RESOURCE_DIRECTORY_ENTRY IMAGE_RESOURCE_DIRECTORY_ENTRY;
typedef _TOKEN_ORIGIN* PTOKEN_ORIGIN;
typedef _POWER_IDLE_RESILIENCY* PPOWER_IDLE_RESILIENCY;
typedef _ICONINFOEXW ICONINFOEXW;
typedef ICONINFOEXW ICONINFOEX;
typedef _TOKEN_APPCONTAINER_INFORMATION* PTOKEN_APPCONTAINER_INFORMATION;
typedef _TOKEN_SID_INFORMATION TOKEN_SID_INFORMATION;
typedef _TOKEN_SID_INFORMATION* PTOKEN_SID_INFORMATION;
typedef _IMAGE_ROM_HEADERS* PIMAGE_ROM_HEADERS;
typedef _TOKEN_BNO_ISOLATION_INFORMATION TOKEN_BNO_ISOLATION_INFORMATION;
typedef _ENCLAVE_INIT_INFO_VBS ENCLAVE_INIT_INFO_VBS;
typedef _IMAGE_NT_HEADERS* PIMAGE_NT_HEADERS32;
typedef _TOKEN_BNO_ISOLATION_INFORMATION* PTOKEN_BNO_ISOLATION_INFORMATION;
typedef _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE
    CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;
typedef _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
    CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
typedef _RTL_UMS_THREAD_INFO_CLASS* PRTL_UMS_THREAD_INFO_CLASS;
typedef _SCRUB_PARITY_EXTENT_DATA* PSCRUB_PARITY_EXTENT_DATA;
typedef _SCRUB_DATA_OUTPUT SCRUB_DATA_OUTPUT;
typedef _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION* PMEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION;
typedef _POWER_SESSION_TIMEOUTS* PPOWER_SESSION_TIMEOUTS;
typedef _IMAGE_DELAYLOAD_DESCRIPTOR* PIMAGE_DELAYLOAD_DESCRIPTOR;
typedef _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1* PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
typedef _POWER_SESSION_WINLOGON POWER_SESSION_WINLOGON;
typedef _CLAIM_SECURITY_ATTRIBUTES_INFORMATION* PCLAIM_SECURITY_ATTRIBUTES_INFORMATION;
typedef tagXMLEMEM_TYPE XMLELEM_TYPE;
typedef _UNWIND_HISTORY_TABLE_ENTRY* PUNWIND_HISTORY_TABLE_ENTRY;
typedef _SECURITY_QUALITY_OF_SERVICE SECURITY_QUALITY_OF_SERVICE;
typedef _SECURITY_QUALITY_OF_SERVICE* PSECURITY_QUALITY_OF_SERVICE;
typedef _IMAGE_FILE_HEADER IMAGE_FILE_HEADER;
typedef _SE_IMPERSONATION_STATE SE_IMPERSONATION_STATE;
typedef _ENCLAVE_CREATE_INFO_VBS_BASIC ENCLAVE_CREATE_INFO_VBS_BASIC;
typedef _IMAGE_OPTIONAL_HEADER64* PIMAGE_OPTIONAL_HEADER64;
typedef _CPTABLEINFO CPTABLEINFO;
typedef _SE_IMPERSONATION_STATE* PSE_IMPERSONATION_STATE;
typedef tagPOINTER_PEN_INFO POINTER_PEN_INFO;
typedef _REPARSE_GUID_DATA_BUFFER* PREPARSE_GUID_DATA_BUFFER;
typedef IAuthenticateEx IAuthenticateEx;
typedef _SE_IMAGE_SIGNATURE_TYPE SE_IMAGE_SIGNATURE_TYPE;
typedef _OSVERSIONINFOEXW OSVERSIONINFOEXW;
typedef _SECURITY_CAPABILITIES* PSECURITY_CAPABILITIES;
typedef _IMAGE_DYNAMIC_RELOCATION64_V2* PIMAGE_DYNAMIC_RELOCATION64_V2;
typedef PIMAGE_DYNAMIC_RELOCATION64_V2 PIMAGE_DYNAMIC_RELOCATION_V2;
typedef _SCRUB_DATA_INPUT* PSCRUB_DATA_INPUT;
typedef _SECURITY_CAPABILITIES* LPSECURITY_CAPABILITIES;
typedef SERVICE_NOTIFY_2A SERVICE_NOTIFYA;
typedef _MONITOR_DISPLAY_STATE* PMONITOR_DISPLAY_STATE;
typedef _IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA32;
typedef NT_TIB* PNT_TIB;
typedef _SharedVirtualDiskHandleState SharedVirtualDiskHandleState;
typedef _NV_MEMORY_RANGE NV_MEMORY_RANGE;
typedef _IMAGE_RELOCATION IMAGE_RELOCATION;
typedef _NT_TIB64 NT_TIB64;
typedef IBindStatusCallbackEx IBindStatusCallbackEx;
typedef _UMS_CREATE_THREAD_ATTRIBUTES* PUMS_CREATE_THREAD_ATTRIBUTES;
typedef _OSVERSIONINFOW RTL_OSVERSIONINFOW;
typedef _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET
    PROCESS_DYNAMIC_EH_CONTINUATION_TARGET;
typedef _FILE_SEGMENT_ELEMENT* PFILE_SEGMENT_ELEMENT;
typedef _LDR_DDAG_NODE* PLDR_DDAG_NODE;
typedef _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET* PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET;
typedef _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION
    PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION;
typedef _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION* PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
typedef _IMAGE_ENCLAVE_CONFIG64* PIMAGE_ENCLAVE_CONFIG64;
typedef _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE
    PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE;
typedef tagOLEVERB OLEVERB;
typedef _XSTATE_FEATURE* PXSTATE_FEATURE;
typedef _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION* PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION;
typedef _CACHE_RELATIONSHIP CACHE_RELATIONSHIP;
typedef _QUOTA_LIMITS* PQUOTA_LIMITS;
typedef _RATE_QUOTA_LIMIT RATE_QUOTA_LIMIT;
typedef _PROCESSOR_GROUP_INFO* PPROCESSOR_GROUP_INFO;
typedef tagCREATESTRUCTW* LPCREATESTRUCTW;
typedef _QUOTA_LIMITS_EX QUOTA_LIMITS_EX;
typedef tagHIGHCONTRASTW* LPHIGHCONTRASTW;
typedef _QUOTA_LIMITS_EX* PQUOTA_LIMITS_EX;
typedef IO_COUNTERS* PIO_COUNTERS;
typedef _PROCESS_LEAP_SECOND_INFO PROCESS_LEAP_SECOND_INFO;
typedef _IMAGE_BDD_DYNAMIC_RELOCATION IMAGE_BDD_DYNAMIC_RELOCATION;
typedef PPM_IDLE_STATE_BUCKET_EX PPM_IDLE_STATE_BUCKET_EX;
typedef LONG ( *PVECTORED_EXCEPTION_HANDLER )( _EXCEPTION_POINTERS* );
typedef _HARDWARE_COUNTER_TYPE HARDWARE_COUNTER_TYPE;
typedef _PROCESS_MITIGATION_POLICY PROCESS_MITIGATION_POLICY;
typedef tagNMHDR NMHDR;
typedef _PROCESS_MITIGATION_POLICY* PPROCESS_MITIGATION_POLICY;
typedef _CPU_SET_INFORMATION_TYPE CPU_SET_INFORMATION_TYPE;
typedef void ( *APC_CALLBACK_FUNCTION )( DWORD, PVOID, PVOID );
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY _IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_AMD64_RUNTIME_FUNCTION_ENTRY;
typedef _PROCESS_MITIGATION_ASLR_POLICY* PPROCESS_MITIGATION_ASLR_POLICY;
typedef _PROCESSOR_POWER_POLICY_INFO PROCESSOR_POWER_POLICY_INFO;
typedef _SYSTEM_CPU_SET_INFORMATION SYSTEM_CPU_SET_INFORMATION;
typedef _STORAGE_RPMB_FRAME_TYPE STORAGE_RPMB_FRAME_TYPE;
typedef _PROCESS_MITIGATION_DEP_POLICY* PPROCESS_MITIGATION_DEP_POLICY;
typedef _MEM_DEDICATED_ATTRIBUTE_TYPE* PMEM_DEDICATED_ATTRIBUTE_TYPE;
typedef _IMAGE_ROM_OPTIONAL_HEADER* PIMAGE_ROM_OPTIONAL_HEADER;
typedef IMPORT_OBJECT_TYPE IMPORT_OBJECT_TYPE;
typedef _IMAGE_ROM_OPTIONAL_HEADER IMAGE_ROM_OPTIONAL_HEADER;
typedef _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY* PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
typedef _CLIENT_ID32 CLIENT_ID32;
typedef tagCOMPAREITEMSTRUCT* LPCOMPAREITEMSTRUCT;
typedef _XSTATE_CONFIGURATION XSTATE_CONFIGURATION;
typedef _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY
    PROCESS_MITIGATION_DYNAMIC_CODE_POLICY;
typedef _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY* PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY;
typedef _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY
    PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
typedef _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY* PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
typedef _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY* PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;
typedef FLASHWINFO FLASHWINFO;
typedef _PROCESS_MITIGATION_FONT_DISABLE_POLICY
    PROCESS_MITIGATION_FONT_DISABLE_POLICY;
typedef MEM_EXTENDED_PARAMETER_TYPE* PMEM_EXTENDED_PARAMETER_TYPE;
typedef _PROCESS_MITIGATION_FONT_DISABLE_POLICY* PPROCESS_MITIGATION_FONT_DISABLE_POLICY;
typedef tagCURSORINFO* LPCURSORINFO;
typedef _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY
    PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY;
typedef tagMOUSEHOOKSTRUCTEX* PMOUSEHOOKSTRUCTEX;
typedef _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION* PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION;
typedef tagDISCARDCACHE DISCARDCACHE;
typedef _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY* PPROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY;
typedef char __C_ASSERT__[1];
typedef _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY* PPROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY;
typedef JOBOBJECT_NET_RATE_CONTROL_INFORMATION
    JOBOBJECT_NET_RATE_CONTROL_INFORMATION;
typedef _PROCESS_MITIGATION_CHILD_PROCESS_POLICY* PPROCESS_MITIGATION_CHILD_PROCESS_POLICY;
typedef _IMAGE_LOAD_CONFIG_DIRECTORY64* PIMAGE_LOAD_CONFIG_DIRECTORY64;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY64 PIMAGE_LOAD_CONFIG_DIRECTORY;
typedef _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY
    PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY;
typedef _SYSTEM_LOGICAL_PROCESSOR_INFORMATION* PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;
typedef PPM_IDLE_STATE_ACCOUNTING_EX PPM_IDLE_STATE_ACCOUNTING_EX;
typedef _JOBOBJECT_IO_ATTRIBUTION_INFORMATION
    JOBOBJECT_IO_ATTRIBUTION_INFORMATION;
typedef _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY* PPROCESS_MITIGATION_USER_POINTER_AUTH_POLICY;
typedef _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY
    PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY;
typedef IOleAdviseHolder IOleAdviseHolder;
typedef _PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY
    PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY;
typedef tagWNDCLASSEXW* LPWNDCLASSEXW;
typedef LPWNDCLASSEXW LPWNDCLASSEX;
typedef _PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY* PPROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY;
typedef _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION* PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
typedef SET_POWER_SETTING_VALUE* PSET_POWER_SETTING_VALUE;
typedef SET_POWER_SETTING_VALUE SET_POWER_SETTING_VALUE;
typedef tagRAWINPUTHEADER RAWINPUTHEADER;
typedef tagWNDCLASSW* LPWNDCLASSW;
typedef LPWNDCLASSW LPWNDCLASS;
typedef _JOBOBJECT_EXTENDED_LIMIT_INFORMATION
    JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
typedef IOleItemContainer IOleItemContainer;
typedef _JOBOBJECT_EXTENDED_LIMIT_INFORMATION* PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;
typedef _UNLOAD_DLL_DEBUG_INFO UNLOAD_DLL_DEBUG_INFO;
typedef _JOBOBJECT_BASIC_PROCESS_ID_LIST* PJOBOBJECT_BASIC_PROCESS_ID_LIST;
typedef _LOAD_DLL_DEBUG_INFO LOAD_DLL_DEBUG_INFO;
typedef PPM_IDLE_ACCOUNTING PPM_IDLE_ACCOUNTING;
typedef tagMINIMIZEDMETRICS* LPMINIMIZEDMETRICS;
typedef _JOBOBJECT_SECURITY_LIMIT_INFORMATION
    JOBOBJECT_SECURITY_LIMIT_INFORMATION;
typedef tagMINMAXINFO MINMAXINFO;
typedef _WIN32_FILE_ATTRIBUTE_DATA* LPWIN32_FILE_ATTRIBUTE_DATA;
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY* _PIMAGE_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_AMD64_RUNTIME_FUNCTION_ENTRY;
typedef _JOBOBJECT_END_OF_JOB_TIME_INFORMATION* PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;
typedef _SYSTEM_POOL_ZEROING_INFORMATION SYSTEM_POOL_ZEROING_INFORMATION;
typedef PROCESSOR_IDLESTATE_POLICY PROCESSOR_IDLESTATE_POLICY;
typedef _PROCESSOR_RELATIONSHIP* PPROCESSOR_RELATIONSHIP;
typedef _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION
    JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
typedef _JOBOBJECT_JOBSET_INFORMATION* PJOBOBJECT_JOBSET_INFORMATION;
typedef tagNCCALCSIZE_PARAMS NCCALCSIZE_PARAMS;
typedef _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL* PJOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;
typedef _SERVERSILO_STATE* PSERVERSILO_STATE;
typedef _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION
    JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;
typedef _SERVERSILO_BASIC_INFORMATION SERVERSILO_BASIC_INFORMATION;
typedef PPM_WMI_PERF_STATES* PPPM_WMI_PERF_STATES;
typedef _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION* PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;
typedef _PS_SYSTEM_DLL_INIT_BLOCK PS_SYSTEM_DLL_INIT_BLOCK;
typedef _RTL_CRITICAL_SECTION* PRTL_CRITICAL_SECTION;
typedef _JOBOBJECT_LIMIT_VIOLATION_INFORMATION* PJOBOBJECT_LIMIT_VIOLATION_INFORMATION;
typedef tagCHANGEFILTERSTRUCT* PCHANGEFILTERSTRUCT;
typedef _IMAGE_POLICY_ENTRY_TYPE IMAGE_POLICY_ENTRY_TYPE;
typedef _IMAGE_BASE_RELOCATION IMAGE_BASE_RELOCATION;
typedef _IMAGE_POLICY_ID IMAGE_POLICY_ID;
typedef tagGESTURENOTIFYSTRUCT* PGESTURENOTIFYSTRUCT;
typedef tagMENUINFO MENUINFO;
typedef JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE
    JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V1;
typedef _OSVERSIONINFOEXW RTL_OSVERSIONINFOEXW;
typedef JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2
    JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2;
typedef value_entW* PVALENTW;
typedef JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS;
typedef tagINPUT_MESSAGE_ORIGIN_ID INPUT_MESSAGE_ORIGIN_ID;
typedef _IMAGE_DOS_HEADER* PIMAGE_DOS_HEADER;
typedef _KCRM_PROTOCOL_BLOB* PRKCRM_PROTOCOL_BLOB;
typedef _RTL_SYSTEM_GLOBAL_DATA_ID* PRTL_SYSTEM_GLOBAL_DATA_ID;
typedef _SILOOBJECT_BASIC_INFORMATION SILOOBJECT_BASIC_INFORMATION;
typedef IWrappedProtocol IWrappedProtocol;
typedef _SERVERSILO_BASIC_INFORMATION* PSERVERSILO_BASIC_INFORMATION;
typedef _CACHE_DESCRIPTOR* PCACHE_DESCRIPTOR;
typedef _IMAGE_POLICY_ENTRY IMAGE_POLICY_ENTRY;
typedef const IMAGE_POLICY_ENTRY* PCIMAGE_POLICY_ENTRY;
typedef _currencyfmtW CURRENCYFMTW;
typedef _NUMA_NODE_RELATIONSHIP NUMA_NODE_RELATIONSHIP;
typedef _ICONINFOEXA* PICONINFOEXA;
typedef _KSYSTEM_TIME* PKSYSTEM_TIME;
typedef _SLIST_ENTRY SLIST_ENTRY;
typedef _GROUP_RELATIONSHIP GROUP_RELATIONSHIP;
typedef tagALTTABINFO* LPALTTABINFO;
typedef _OSVERSIONINFOEXW* LPOSVERSIONINFOEXW;
typedef LPOSVERSIONINFOEXW LPOSVERSIONINFOEX;
typedef _CPU_SET_INFORMATION_TYPE* PCPU_SET_INFORMATION_TYPE;
typedef _CLIENT_ID32* PCLIENT_ID32;
typedef _UNWIND_HISTORY_TABLE_ENTRY UNWIND_HISTORY_TABLE_ENTRY;
typedef IMAGE_COR20_HEADER* PIMAGE_COR20_HEADER;
typedef IBindProtocol IBindProtocol;
typedef IBindProtocol* LPBINDPROTOCOL;
typedef tagUSEROBJECTFLAGS* PUSEROBJECTFLAGS;
typedef _XSTATE_CONFIGURATION* PXSTATE_CONFIGURATION;
typedef _MEMORY_BASIC_INFORMATION* PMEMORY_BASIC_INFORMATION;
typedef _MEMORY_BASIC_INFORMATION32 MEMORY_BASIC_INFORMATION32;
typedef _MEMORY_BASIC_INFORMATION64 MEMORY_BASIC_INFORMATION64;
typedef _FILEMUIINFO FILEMUIINFO;
typedef _MEMORY_BASIC_INFORMATION64* PMEMORY_BASIC_INFORMATION64;
typedef tagRID_DEVICE_INFO RID_DEVICE_INFO;
typedef _ACTIVATION_CONTEXT_DETAILED_INFORMATION* PACTIVATION_CONTEXT_DETAILED_INFORMATION;
typedef PPM_WMI_PERF_STATE PPM_WMI_PERF_STATE;
typedef _MEM_ADDRESS_REQUIREMENTS MEM_ADDRESS_REQUIREMENTS;
typedef MEM_EXTENDED_PARAMETER* PMEM_EXTENDED_PARAMETER;
typedef _MEM_DEDICATED_ATTRIBUTE_TYPE MEM_DEDICATED_ATTRIBUTE_TYPE;
typedef tagLASTINPUTINFO LASTINPUTINFO;
typedef _LDRP_CSLIST LDRP_CSLIST;
typedef MEM_SECTION_EXTENDED_PARAMETER_TYPE MEM_SECTION_EXTENDED_PARAMETER_TYPE;
typedef MEM_SECTION_EXTENDED_PARAMETER_TYPE* PMEM_SECTION_EXTENDED_PARAMETER_TYPE;
typedef tagPOINTER_DEVICE_CURSOR_TYPE POINTER_DEVICE_CURSOR_TYPE;
typedef IMAGE_AUX_SYMBOL_TOKEN_DEF IMAGE_AUX_SYMBOL_TOKEN_DEF;
typedef IMAGE_AUX_SYMBOL_TOKEN_DEF* PIMAGE_AUX_SYMBOL_TOKEN_DEF;
typedef _OSVERSIONINFOW* PRTL_OSVERSIONINFOW;
typedef _ENCLAVE_CREATE_INFO_SGX* PENCLAVE_CREATE_INFO_SGX;
typedef _ENCLAVE_INIT_INFO_SGX ENCLAVE_INIT_INFO_SGX;
typedef _ENCLAVE_CREATE_INFO_VBS ENCLAVE_CREATE_INFO_VBS;
typedef _ENCLAVE_CREATE_INFO_VBS* PENCLAVE_CREATE_INFO_VBS;
typedef IXMLDOMNotation IXMLDOMNotation;
typedef _ENCLAVE_CREATE_INFO_VBS_BASIC* PENCLAVE_CREATE_INFO_VBS_BASIC;
typedef tagSERIALKEYSW* LPSERIALKEYSW;
typedef _ENCLAVE_LOAD_DATA_VBS_BASIC ENCLAVE_LOAD_DATA_VBS_BASIC;
typedef POWER_ACTION_POLICY* PPOWER_ACTION_POLICY;
typedef _ENCLAVE_INIT_INFO_VBS_BASIC ENCLAVE_INIT_INFO_VBS_BASIC;
typedef _ENCLAVE_INIT_INFO_VBS_BASIC* PENCLAVE_INIT_INFO_VBS_BASIC;
typedef _ENCLAVE_INIT_INFO_VBS* PENCLAVE_INIT_INFO_VBS;
typedef _IMAGE_BOUND_IMPORT_DESCRIPTOR IMAGE_BOUND_IMPORT_DESCRIPTOR;
typedef _MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE
    MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE;
typedef _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION
    MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION;
typedef ENUM_SERVICE_STATUS_PROCESSW ENUM_SERVICE_STATUS_PROCESS;
typedef tagSTICKYKEYS* LPSTICKYKEYS;
typedef HRSRC__* HRSRC;
typedef _FILE_NOTIFY_INFORMATION FILE_NOTIFY_INFORMATION;
typedef tagSOUNDSENTRYW SOUNDSENTRYW;
typedef tagMEASUREITEMSTRUCT MEASUREITEMSTRUCT;
typedef _NT_PRODUCT_TYPE* PNT_PRODUCT_TYPE;
typedef _FILE_NOTIFY_EXTENDED_INFORMATION FILE_NOTIFY_EXTENDED_INFORMATION;
typedef _FILE_NOTIFY_EXTENDED_INFORMATION* PFILE_NOTIFY_EXTENDED_INFORMATION;
typedef _IMAGE_OPTIONAL_HEADER IMAGE_OPTIONAL_HEADER32;
typedef _FILE_NOTIFY_FULL_INFORMATION* PFILE_NOTIFY_FULL_INFORMATION;
typedef _STRING32 STRING32;
typedef STRING32* PUNICODE_STRING32;
typedef _SCRUB_PARITY_EXTENT* PSCRUB_PARITY_EXTENT;
typedef _SCRUB_PARITY_EXTENT_DATA SCRUB_PARITY_EXTENT_DATA;
typedef _SCRUB_DATA_OUTPUT* PSCRUB_DATA_OUTPUT;
typedef _ImageArchitectureEntry IMAGE_ARCHITECTURE_ENTRY;
typedef _SharedVirtualDiskSupportType SharedVirtualDiskSupportType;
typedef _SHARED_VIRTUAL_DISK_SUPPORT SHARED_VIRTUAL_DISK_SUPPORT;
typedef tagWINDOWINFO* LPWINDOWINFO;
typedef _REARRANGE_FILE_DATA REARRANGE_FILE_DATA;
typedef DLGTEMPLATE DLGTEMPLATE;
typedef DLGTEMPLATE* LPDLGTEMPLATEW;
typedef LPDLGTEMPLATEW LPDLGTEMPLATE;
typedef tagMDICREATESTRUCTW* LPMDICREATESTRUCTW;
typedef _REARRANGE_FILE_DATA32 REARRANGE_FILE_DATA32;
typedef _IMAGE_DYNAMIC_RELOCATION64_V2 IMAGE_DYNAMIC_RELOCATION64_V2;
typedef tagUSEROBJECTFLAGS USEROBJECTFLAGS;
typedef tagMULTIKEYHELPA MULTIKEYHELPA;
typedef PPM_IDLE_ACCOUNTING_EX* PPPM_IDLE_ACCOUNTING_EX;
typedef _SYSTEM_POWER_STATE* PSYSTEM_POWER_STATE;
typedef POWER_ACTION* PPOWER_ACTION;
typedef IGetBindHandle IGetBindHandle;
typedef tagHELPWININFOW* PHELPWININFOW;
typedef NOTIFY_USER_POWER_SETTING* PNOTIFY_USER_POWER_SETTING;
typedef IParseDisplayName IParseDisplayName;
typedef tagMOUSEINPUT MOUSEINPUT;
typedef tagNONCLIENTMETRICSW NONCLIENTMETRICSW;
typedef _OLESTREAM OLESTREAM;
typedef IMAGE_BDD_DYNAMIC_RELOCATION* PIMAGE_BDD_DYNAMIC_RELOCATION;
typedef _POWER_SESSION_CONNECT POWER_SESSION_CONNECT;
typedef _RESOURCEMANAGER_COMPLETION_INFORMATION* PRESOURCEMANAGER_COMPLETION_INFORMATION;
typedef _IMAGE_BDD_INFO IMAGE_BDD_INFO;
typedef IMAGE_BDD_INFO* PIMAGE_BDD_INFO;
typedef SERVICE_TRIGGER_CUSTOM_STATE_ID SERVICE_TRIGGER_CUSTOM_STATE_ID;
typedef _ENLISTMENT_CRM_INFORMATION ENLISTMENT_CRM_INFORMATION;
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef _POWER_SESSION_WINLOGON* PPOWER_SESSION_WINLOGON;
typedef _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES* PPOWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES;
typedef tagICONMETRICSW* LPICONMETRICSW;
typedef _POWER_IDLE_RESILIENCY POWER_IDLE_RESILIENCY;
typedef _POWER_MONITOR_REQUEST_TYPE POWER_MONITOR_REQUEST_TYPE;
typedef tagTRACKMOUSEEVENT TRACKMOUSEEVENT;
typedef _OLESTREAM* LPOLESTREAM;
typedef PPM_WMI_PERF_STATES_EX* PPPM_WMI_PERF_STATES_EX;
typedef _PROCESS_MEMORY_EXHAUSTION_TYPE PROCESS_MEMORY_EXHAUSTION_TYPE;
typedef INT_PTR ( *PROC )();
typedef _RTL_CRITICAL_SECTION_DEBUG* PRTL_CRITICAL_SECTION_DEBUG;
typedef NOTIFY_USER_POWER_SETTING NOTIFY_USER_POWER_SETTING;
typedef HANDLE LOCALHANDLE;
typedef _APPLICATIONLAUNCH_SETTING_VALUE APPLICATIONLAUNCH_SETTING_VALUE;
typedef HKEY* PHKEY;
typedef _APPLICATIONLAUNCH_SETTING_VALUE* PAPPLICATIONLAUNCH_SETTING_VALUE;
typedef _POWER_PLATFORM_ROLE POWER_PLATFORM_ROLE;
typedef CORRELATION_VECTOR CORRELATION_VECTOR;
typedef CORRELATION_VECTOR* PCORRELATION_VECTOR;
typedef _POWER_PLATFORM_ROLE* PPOWER_PLATFORM_ROLE;
typedef _STARTUPINFOW* LPSTARTUPINFOW;
typedef _TP_WORK TP_WORK;
typedef _POWER_PLATFORM_INFORMATION POWER_PLATFORM_INFORMATION;
typedef _TP_CALLBACK_ENVIRON_V3 TP_CALLBACK_ENVIRON_V3;
typedef _POWER_PLATFORM_INFORMATION* PPOWER_PLATFORM_INFORMATION;
typedef POWER_SETTING_ALTITUDE POWER_SETTING_ALTITUDE;
typedef tagABORTPATH EMRWIDENPATH;
typedef POWER_SETTING_ALTITUDE* PPOWER_SETTING_ALTITUDE;
typedef HWND__* HWND;
typedef BATTERY_REPORTING_SCALE* PBATTERY_REPORTING_SCALE;
typedef PPM_WMI_LEGACY_PERFSTATE* PPPM_WMI_LEGACY_PERFSTATE;
typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef _OSVERSIONINFOEXA* LPOSVERSIONINFOEXA;
typedef _FILE_INFO_BY_HANDLE_CLASS* PFILE_INFO_BY_HANDLE_CLASS;
typedef PPM_WMI_IDLE_STATE* PPPM_WMI_IDLE_STATE;
typedef _RTL_RUN_ONCE RTL_RUN_ONCE;
typedef RTL_RUN_ONCE INIT_ONCE;
typedef _OSVERSIONINFOEXW* PRTL_OSVERSIONINFOEXW;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef PPM_WMI_IDLE_STATES PPM_WMI_IDLE_STATES;
typedef tagNEWTEXTMETRICEXW NEWTEXTMETRICEXW;
typedef tagEMRSELECTCLIPPATH* PEMRSETBKMODE;
typedef PPM_WMI_IDLE_STATES* PPPM_WMI_IDLE_STATES;
typedef _PROCESS_HEAP_ENTRY* PPROCESS_HEAP_ENTRY;
typedef PPM_WMI_IDLE_STATES_EX* PPPM_WMI_IDLE_STATES_EX;
typedef void ( *PTP_WAIT_CALLBACK )( PTP_CALLBACK_INSTANCE, PVOID, PTP_WAIT, TP_WAIT_RESULT );
typedef PPM_WMI_PERF_STATE* PPPM_WMI_PERF_STATE;
typedef HANDLE HLOCAL;
typedef UINT_PTR WPARAM;
typedef tagPELARRAY* PPELARRAY;
typedef BOOL ( *NAMEENUMPROCW )( LPWSTR, LPARAM );
typedef PPM_WMI_PERF_STATES PPM_WMI_PERF_STATES;
typedef PPM_WMI_PERF_STATES_EX PPM_WMI_PERF_STATES_EX;
typedef PPM_IDLE_STATE_ACCOUNTING PPM_IDLE_STATE_ACCOUNTING;
typedef _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION* PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
typedef PPM_IDLE_STATE_ACCOUNTING* PPPM_IDLE_STATE_ACCOUNTING;
typedef void* HGDIOBJ;
typedef IEnumOLEVERB IEnumOLEVERB;
typedef tagEMRSETMAPPERFLAGS EMRSETMAPPERFLAGS;
typedef _RTL_SRWLOCK* PRTL_SRWLOCK;
typedef _TRANSACTION_INFORMATION_CLASS TRANSACTION_INFORMATION_CLASS;
typedef _RTL_BARRIER RTL_BARRIER;
typedef PPM_IDLE_ACCOUNTING* PPPM_IDLE_ACCOUNTING;
typedef void ( *PAPCFUNC )( ULONG_PTR );
typedef PPM_IDLE_STATE_BUCKET_EX* PPPM_IDLE_STATE_BUCKET_EX;
typedef _DEBUG_EVENT* LPDEBUG_EVENT;
typedef _RESOURCEMANAGER_INFORMATION_CLASS RESOURCEMANAGER_INFORMATION_CLASS;
typedef PPM_IDLE_STATE_ACCOUNTING_EX* PPPM_IDLE_STATE_ACCOUNTING_EX;
typedef PPM_IDLE_ACCOUNTING_EX PPM_IDLE_ACCOUNTING_EX;
typedef PPM_PERFSTATE_EVENT PPM_PERFSTATE_EVENT;
typedef PPM_PERFSTATE_EVENT* PPPM_PERFSTATE_EVENT;
typedef PPM_PERFSTATE_DOMAIN_EVENT PPM_PERFSTATE_DOMAIN_EVENT;
typedef PPM_PERFSTATE_DOMAIN_EVENT* PPPM_PERFSTATE_DOMAIN_EVENT;
typedef OFFER_PRIORITY OFFER_PRIORITY;
typedef PPM_IDLESTATE_EVENT PPM_IDLESTATE_EVENT;
typedef HTASK__* HTASK;
typedef PPM_IDLESTATE_EVENT* PPPM_IDLESTATE_EVENT;
typedef _ACTIVATION_CONTEXT_QUERY_INDEX ACTIVATION_CONTEXT_QUERY_INDEX;
typedef PPM_THERMALCHANGE_EVENT PPM_THERMALCHANGE_EVENT;
typedef tagEMRLINETO EMRLINETO;
typedef WIN32_MEMORY_REGION_INFORMATION WIN32_MEMORY_REGION_INFORMATION;
typedef PPM_THERMALCHANGE_EVENT* PPPM_THERMALCHANGE_EVENT;
typedef _FILETIME* PFILETIME;
typedef HKL__* HKL;
typedef PPM_THERMAL_POLICY_EVENT PPM_THERMAL_POLICY_EVENT;
typedef PPM_THERMAL_POLICY_EVENT* PPPM_THERMAL_POLICY_EVENT;
typedef POWER_ACTION_POLICY POWER_ACTION_POLICY;
typedef _TRANSACTION_ENLISTMENTS_INFORMATION* PTRANSACTION_ENLISTMENTS_INFORMATION;
typedef _RESOURCEMANAGER_BASIC_INFORMATION* PRESOURCEMANAGER_BASIC_INFORMATION;
typedef _RIP_INFO* LPRIP_INFO;
typedef SYSTEM_POWER_LEVEL SYSTEM_POWER_LEVEL;
typedef SYSTEM_POWER_LEVEL* PSYSTEM_POWER_LEVEL;
typedef tagEMREXTESCAPE EMREXTESCAPE;
typedef _RESOURCEMANAGER_BASIC_INFORMATION RESOURCEMANAGER_BASIC_INFORMATION;
typedef _TP_POOL_STACK_INFORMATION TP_POOL_STACK_INFORMATION;
typedef _RTL_CONDITION_VARIABLE RTL_CONDITION_VARIABLE;
typedef _SYSTEM_POWER_POLICY SYSTEM_POWER_POLICY;
typedef _RTL_UMS_THREAD_INFO_CLASS RTL_UMS_THREAD_INFO_CLASS;
typedef _SYSTEM_POWER_POLICY* PSYSTEM_POWER_POLICY;
typedef tagNEWTEXTMETRICEXA NEWTEXTMETRICEXA;
typedef PROCESSOR_IDLESTATE_INFO PROCESSOR_IDLESTATE_INFO;
typedef RTL_BARRIER SYNCHRONIZATION_BARRIER;
typedef PROCESSOR_IDLESTATE_INFO* PPROCESSOR_IDLESTATE_INFO;
typedef _RTL_UMS_SCHEDULER_REASON RTL_UMS_SCHEDULER_REASON;
typedef _MESSAGE_RESOURCE_BLOCK* PMESSAGE_RESOURCE_BLOCK;
typedef _ENLISTMENT_CRM_INFORMATION* PENLISTMENT_CRM_INFORMATION;
typedef PROCESSOR_IDLESTATE_POLICY* PPROCESSOR_IDLESTATE_POLICY;
typedef _TRANSACTION_LIST_ENTRY* PTRANSACTION_LIST_ENTRY;
typedef _PROCESSOR_POWER_POLICY_INFO* PPROCESSOR_POWER_POLICY_INFO;
typedef HLSURF__* HLSURF;
typedef _PROCESSOR_POWER_POLICY PROCESSOR_POWER_POLICY;
typedef _TRANSACTION_LIST_ENTRY TRANSACTION_LIST_ENTRY;
typedef _PROCESSOR_POWER_POLICY* PPROCESSOR_POWER_POLICY;
typedef _TRANSACTION_BIND_INFORMATION TRANSACTION_BIND_INFORMATION;
typedef IEnumSTATPROPSETSTG IEnumSTATPROPSETSTG;
typedef _GRADIENT_TRIANGLE* LPGRADIENT_TRIANGLE;
typedef PROCESSOR_PERFSTATE_POLICY PROCESSOR_PERFSTATE_POLICY;
typedef PROCESSOR_PERFSTATE_POLICY* PPROCESSOR_PERFSTATE_POLICY;
typedef _LOAD_DLL_DEBUG_INFO* LPLOAD_DLL_DEBUG_INFO;
typedef _UNWIND_HISTORY_TABLE* PUNWIND_HISTORY_TABLE;
typedef _ADMINISTRATOR_POWER_POLICY ADMINISTRATOR_POWER_POLICY;
typedef _ADMINISTRATOR_POWER_POLICY* PADMINISTRATOR_POWER_POLICY;
typedef _OSVERSIONINFOEXA OSVERSIONINFOEXA;
typedef tagEMRSCALEVIEWPORTEXTEX EMRSCALEVIEWPORTEXTEX;
typedef _HIBERFILE_BUCKET_SIZE* PHIBERFILE_BUCKET_SIZE;
typedef tagENHMETARECORD ENHMETARECORD;
typedef HMENU__* HMENU;
typedef _HIBERFILE_BUCKET* PHIBERFILE_BUCKET;
typedef _OSVERSIONINFOEXW* POSVERSIONINFOEXW;
typedef _TP_POOL TP_POOL;
typedef SYSTEM_POWER_CAPABILITIES* PSYSTEM_POWER_CAPABILITIES;
typedef HPEN__* HPEN;
typedef tagLOGCOLORSPACEW* LPLOGCOLORSPACEW;
typedef SYSTEM_BATTERY_STATE SYSTEM_BATTERY_STATE;
typedef tagLOGCOLORSPACEW LOGCOLORSPACEW;
typedef SYSTEM_BATTERY_STATE* PSYSTEM_BATTERY_STATE;
typedef tagDIBSECTION* PDIBSECTION;
typedef HMONITOR__* HMONITOR;
typedef _TP_IO TP_IO;
typedef _RTL_SYSTEM_GLOBAL_DATA_ID RTL_SYSTEM_GLOBAL_DATA_ID;
typedef HANDLE HGLOBAL;
typedef _IMAGE_OS2_HEADER IMAGE_OS2_HEADER;
typedef DWORD* LPCOLORREF;
typedef HANDLE* SPHANDLE;
typedef void ( *PRTL_UMS_SCHEDULER_ENTRY_POINT )( RTL_UMS_SCHEDULER_REASON,
    ULONG_PTR,
    PVOID );
typedef _IMAGE_OS2_HEADER* PIMAGE_OS2_HEADER;
typedef _PROCESS_INFORMATION* PPROCESS_INFORMATION;
typedef _DOCINFOW* LPDOCINFOW;
typedef _IMAGE_VXD_HEADER IMAGE_VXD_HEADER;
typedef _TP_CLEANUP_GROUP* PTP_CLEANUP_GROUP;
typedef _IMAGE_VXD_HEADER* PIMAGE_VXD_HEADER;
typedef _NV_MEMORY_RANGE* PNV_MEMORY_RANGE;
typedef _TP_CALLBACK_PRIORITY TP_CALLBACK_PRIORITY;
typedef _IMAGE_FILE_HEADER* PIMAGE_FILE_HEADER;
typedef HDC__* HDC;
typedef _IMAGE_DATA_DIRECTORY IMAGE_DATA_DIRECTORY;
typedef _IMAGE_DATA_DIRECTORY* PIMAGE_DATA_DIRECTORY;
typedef _OSVERSIONINFOW* POSVERSIONINFOW;
typedef _OSVERSIONINFOW OSVERSIONINFOW;
typedef _IMAGE_OPTIONAL_HEADER* PIMAGE_OPTIONAL_HEADER32;
typedef _KTMOBJECT_CURSOR KTMOBJECT_CURSOR;
typedef LONG ( *PTOP_LEVEL_EXCEPTION_FILTER )( _EXCEPTION_POINTERS* );
typedef _OSVERSIONINFOW* LPOSVERSIONINFOW;
typedef _IMAGE_OPTIONAL_HEADER64 IMAGE_OPTIONAL_HEADER64;
typedef IMAGE_OPTIONAL_HEADER64 IMAGE_OPTIONAL_HEADER;
typedef _IMAGE_ENCLAVE_CONFIG64 IMAGE_ENCLAVE_CONFIG64;
typedef ULONG SAVEPOINT_ID;
typedef PIMAGE_OPTIONAL_HEADER64 PIMAGE_OPTIONAL_HEADER;
typedef IEnumSTATDATA IEnumSTATDATA;
typedef IEnumSTATDATA* LPENUMSTATDATA;
typedef _IMAGE_NT_HEADERS64 IMAGE_NT_HEADERS64;
typedef _IMAGE_NT_HEADERS64* PIMAGE_NT_HEADERS64;
typedef _IMAGE_ENCLAVE_IMPORT* PIMAGE_ENCLAVE_IMPORT;
typedef _IMAGE_NT_HEADERS IMAGE_NT_HEADERS32;
typedef tagTTPOLYCURVE TTPOLYCURVE;
typedef _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY IMAGE_ARM_RUNTIME_FUNCTION_ENTRY;
typedef _SECURITY_ATTRIBUTES* PSECURITY_ATTRIBUTES;
typedef _TAPE_GET_MEDIA_PARAMETERS TAPE_GET_MEDIA_PARAMETERS;
typedef _IMAGE_ROM_HEADERS IMAGE_ROM_HEADERS;
typedef ARM64_FNPDATA_CR ARM64_FNPDATA_CR;
typedef IMAGE_NT_HEADERS64 IMAGE_NT_HEADERS;
typedef tagGCP_RESULTSW* LPGCP_RESULTSW;
typedef PIMAGE_NT_HEADERS64 PIMAGE_NT_HEADERS;
typedef _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;
typedef _TAPE_GET_MEDIA_PARAMETERS* PTAPE_GET_MEDIA_PARAMETERS;
typedef ANON_OBJECT_HEADER ANON_OBJECT_HEADER;
typedef tagEMRINVERTRGN EMRINVERTRGN;
typedef ANON_OBJECT_HEADER_BIGOBJ ANON_OBJECT_HEADER_BIGOBJ;
typedef DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY;
typedef _IMAGE_SECTION_HEADER IMAGE_SECTION_HEADER;
typedef _IMAGE_SECTION_HEADER* PIMAGE_SECTION_HEADER;
typedef _IMAGE_LOAD_CONFIG_DIRECTORY32 IMAGE_LOAD_CONFIG_DIRECTORY32;
typedef tagPIXELFORMATDESCRIPTOR* PPIXELFORMATDESCRIPTOR;
typedef _MEMORYSTATUSEX* LPMEMORYSTATUSEX;
typedef tagLOGFONTA LOGFONTA;
typedef tagTEXTMETRICA TEXTMETRICA;
typedef int ( *OLDFONTENUMPROCA )( const LOGFONTA*, const TEXTMETRICA*, DWORD, LPARAM );
typedef OLDFONTENUMPROCA FONTENUMPROCA;
typedef void ( *PBAD_MEMORY_CALLBACK_ROUTINE )();
typedef _IMAGE_ENCLAVE_CONFIG32 IMAGE_ENCLAVE_CONFIG32;
typedef _IMAGE_SYMBOL_EX IMAGE_SYMBOL_EX;
typedef _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT
    TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
typedef DISPLAYCONFIG_PATH_TARGET_INFO DISPLAYCONFIG_PATH_TARGET_INFO;
typedef IInitializeSpy IInitializeSpy;
typedef IMAGE_SYMBOL_EX* PIMAGE_SYMBOL_EX;
typedef _TRANSACTIONMANAGER_RECOVERY_INFORMATION
    TRANSACTIONMANAGER_RECOVERY_INFORMATION;
typedef _CREATE_PROCESS_DEBUG_INFO CREATE_PROCESS_DEBUG_INFO;
typedef ReplacesCorHdrNumericDefines ReplacesCorHdrNumericDefines;
typedef _TRANSACTIONMANAGER_RECOVERY_INFORMATION* PTRANSACTIONMANAGER_RECOVERY_INFORMATION;
typedef IPropertySetStorage IPropertySetStorage;
typedef IPropertySetStorage* LPPROPERTYSETSTORAGE;
typedef _devicemodeW* LPDEVMODEW;
typedef LPDEVMODEW LPDEVMODE;
typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef _IMAGE_COFF_SYMBOLS_HEADER IMAGE_COFF_SYMBOLS_HEADER;
typedef tagGLYPHSET* LPGLYPHSET;
typedef _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER
    IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;
typedef _KCRM_MARSHAL_HEADER KCRM_MARSHAL_HEADER;
typedef _IMAGE_AUX_SYMBOL IMAGE_AUX_SYMBOL;
typedef tagEMRSTRETCHDIBITS EMRSTRETCHDIBITS;
typedef IMAGE_AUX_SYMBOL* PIMAGE_AUX_SYMBOL;
typedef _TAPE_CREATE_PARTITION TAPE_CREATE_PARTITION;
typedef GUID* PCRM_PROTOCOL_ID;
typedef _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY* PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
typedef _IMAGE_AUX_SYMBOL_EX IMAGE_AUX_SYMBOL_EX;
typedef IMAGE_AUX_SYMBOL_EX* PIMAGE_AUX_SYMBOL_EX;
typedef _IMAGE_SEPARATE_DEBUG_HEADER* PIMAGE_SEPARATE_DEBUG_HEADER;
typedef _REASON_CONTEXT* PREASON_CONTEXT;
typedef IMAGE_AUX_SYMBOL_TYPE IMAGE_AUX_SYMBOL_TYPE;
typedef _ImageArchitectureHeader IMAGE_ARCHITECTURE_HEADER;
typedef IMAGE_RELOCATION* PIMAGE_RELOCATION;
typedef _TRANSACTIONMANAGER_LOG_INFORMATION* PTRANSACTIONMANAGER_LOG_INFORMATION;
typedef _IMAGE_LINENUMBER IMAGE_LINENUMBER;
typedef _COMPATIBILITY_CONTEXT_ELEMENT* PCOMPATIBILITY_CONTEXT_ELEMENT;
typedef IMAGE_LINENUMBER* PIMAGE_LINENUMBER;
typedef _IMAGE_DYNAMIC_RELOCATION32_V2* PIMAGE_DYNAMIC_RELOCATION32_V2;
typedef _COMPATIBILITY_CONTEXT_ELEMENT COMPATIBILITY_CONTEXT_ELEMENT;
typedef IMAGE_BASE_RELOCATION* PIMAGE_BASE_RELOCATION;
typedef _IMAGE_DYNAMIC_RELOCATION64* PIMAGE_DYNAMIC_RELOCATION64;
typedef _IMAGE_ARCHIVE_MEMBER_HEADER IMAGE_ARCHIVE_MEMBER_HEADER;
typedef _IMAGE_ARCHIVE_MEMBER_HEADER* PIMAGE_ARCHIVE_MEMBER_HEADER;
typedef _IMAGE_LOAD_CONFIG_DIRECTORY64 IMAGE_LOAD_CONFIG_DIRECTORY64;
typedef _TAPE_ERASE* PTAPE_ERASE;
typedef _IMAGE_EXPORT_DIRECTORY IMAGE_EXPORT_DIRECTORY;
typedef tagSIZE* PSIZE;
typedef _IMAGE_EXPORT_DIRECTORY* PIMAGE_EXPORT_DIRECTORY;
typedef IMAGE_LOAD_CONFIG_DIRECTORY64 IMAGE_LOAD_CONFIG_DIRECTORY;
typedef _TAPE_ERASE TAPE_ERASE;
typedef _IMAGE_IMPORT_BY_NAME IMAGE_IMPORT_BY_NAME;
typedef _TAPE_WRITE_MARKS TAPE_WRITE_MARKS;
typedef _IMAGE_IMPORT_BY_NAME* PIMAGE_IMPORT_BY_NAME;
typedef _IMAGE_DEBUG_MISC* PIMAGE_DEBUG_MISC;
typedef IMAGE_THUNK_DATA64* PIMAGE_THUNK_DATA64;
typedef _RGNDATA* LPRGNDATA;
typedef _KCRM_PROTOCOL_BLOB KCRM_PROTOCOL_BLOB;
typedef _HARDWARE_COUNTER_DATA* PHARDWARE_COUNTER_DATA;
typedef IMAGE_THUNK_DATA32* PIMAGE_THUNK_DATA32;
typedef HICON__* HICON;
typedef HICON HCURSOR;
typedef _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION
    IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION;
typedef void ( *PIMAGE_TLS_CALLBACK )( PVOID, DWORD, PVOID );
typedef tagEMRELLIPSE* PEMRELLIPSE;
typedef _KCRM_PROTOCOL_BLOB* PKCRM_PROTOCOL_BLOB;
typedef _HARDWARE_COUNTER_DATA HARDWARE_COUNTER_DATA;
typedef _IMAGE_LOAD_CONFIG_CODE_INTEGRITY* PIMAGE_LOAD_CONFIG_CODE_INTEGRITY;
typedef WCHAR OLECHAR;
typedef OLECHAR* BSTR;
typedef _ABCFLOAT ABCFLOAT;
typedef _IMAGE_DYNAMIC_RELOCATION32 IMAGE_DYNAMIC_RELOCATION32;
typedef IMAGE_TLS_DIRECTORY32* PIMAGE_TLS_DIRECTORY32;
typedef PIMAGE_THUNK_DATA64 PIMAGE_THUNK_DATA;
typedef IMAGE_TLS_DIRECTORY64 IMAGE_TLS_DIRECTORY;
typedef _RIP_INFO RIP_INFO;
typedef PIMAGE_TLS_DIRECTORY64 PIMAGE_TLS_DIRECTORY;
typedef tagEMREXTESCAPE* PEMREXTESCAPE;
typedef _OUTLINETEXTMETRICW* POUTLINETEXTMETRICW;
typedef IRunningObjectTable IRunningObjectTable;
typedef IRunningObjectTable* LPRUNNINGOBJECTTABLE;
typedef _OUTPUT_DEBUG_STRING_INFO OUTPUT_DEBUG_STRING_INFO;
typedef _PACKEDEVENTINFO* PPACKEDEVENTINFO;
typedef _CM_SERVICE_LOAD_TYPE SERVICE_LOAD_TYPE;
typedef IMAGE_IMPORT_DESCRIPTOR* PIMAGE_IMPORT_DESCRIPTOR;
typedef tagLOGFONTW* LPLOGFONTW;
typedef LPLOGFONTW LPLOGFONT;
typedef _IMAGE_BOUND_IMPORT_DESCRIPTOR* PIMAGE_BOUND_IMPORT_DESCRIPTOR;
typedef tagEMRPOLYLINE EMRPOLYGON;
typedef _IMAGE_BOUND_FORWARDER_REF* PIMAGE_BOUND_FORWARDER_REF;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef tagPOLYTEXTA* PPOLYTEXTA;
typedef _CREATEFILE2_EXTENDED_PARAMETERS CREATEFILE2_EXTENDED_PARAMETERS;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;
typedef _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT
    TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
typedef tagENUMLOGFONTEXA ENUMLOGFONTEXA;
typedef const IMAGE_DELAYLOAD_DESCRIPTOR* PCIMAGE_DELAYLOAD_DESCRIPTOR;
typedef _IMAGE_HOT_PATCH_BASE* PIMAGE_HOT_PATCH_BASE;
typedef _IMAGE_RESOURCE_DIRECTORY IMAGE_RESOURCE_DIRECTORY;
typedef _FIXED FIXED;
typedef _IMAGE_RESOURCE_DIRECTORY* PIMAGE_RESOURCE_DIRECTORY;
typedef _IMAGE_CE_RUNTIME_FUNCTION_ENTRY IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
typedef _IMAGE_RESOURCE_DIRECTORY_STRING IMAGE_RESOURCE_DIRECTORY_STRING;
typedef tagRECT* NPRECT;
typedef _IMAGE_RESOURCE_DIRECTORY_STRING* PIMAGE_RESOURCE_DIRECTORY_STRING;
typedef _IMAGE_FUNCTION_OVERRIDE_HEADER IMAGE_FUNCTION_OVERRIDE_HEADER;
typedef _IMAGE_RESOURCE_DIR_STRING_U IMAGE_RESOURCE_DIR_STRING_U;
typedef _IMAGE_RESOURCE_DIR_STRING_U* PIMAGE_RESOURCE_DIR_STRING_U;
typedef _IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION
    IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION;
typedef _IMAGE_RESOURCE_DATA_ENTRY IMAGE_RESOURCE_DATA_ENTRY;
typedef _IMAGE_RESOURCE_DATA_ENTRY* PIMAGE_RESOURCE_DATA_ENTRY;
typedef ITypeInfo2 ITypeInfo2;
typedef ITypeInfo2* LPTYPEINFO2;
typedef _IMAGE_LOAD_CONFIG_CODE_INTEGRITY IMAGE_LOAD_CONFIG_CODE_INTEGRITY;
typedef IBindCallbackRedirect IBindCallbackRedirect;
typedef _IMAGE_DYNAMIC_RELOCATION_TABLE IMAGE_DYNAMIC_RELOCATION_TABLE;
typedef _IMAGE_DYNAMIC_RELOCATION_TABLE* PIMAGE_DYNAMIC_RELOCATION_TABLE;
typedef _IMAGE_DYNAMIC_RELOCATION32* PIMAGE_DYNAMIC_RELOCATION32;
typedef _PROCESS_POWER_THROTTLING_STATE PROCESS_POWER_THROTTLING_STATE;
typedef _IMAGE_DYNAMIC_RELOCATION64 IMAGE_DYNAMIC_RELOCATION64;
typedef BOOL ( *WNDENUMPROC )( HWND, LPARAM );
typedef TP_CALLBACK_ENVIRON_V3 TP_CALLBACK_ENVIRON;
typedef _IMAGE_DYNAMIC_RELOCATION32_V2 IMAGE_DYNAMIC_RELOCATION32_V2;
typedef _STARTUPINFOW STARTUPINFOW;
typedef STARTUPINFOW STARTUPINFO;
typedef BOOL ( *PROPENUMPROCEXW )( HWND, LPWSTR, HANDLE, ULONG_PTR );
typedef _PROC_THREAD_ATTRIBUTE_LIST* PPROC_THREAD_ATTRIBUTE_LIST;
typedef IMAGE_DYNAMIC_RELOCATION64 IMAGE_DYNAMIC_RELOCATION;
typedef _APC_CALLBACK_DATA APC_CALLBACK_DATA;
typedef PIMAGE_DYNAMIC_RELOCATION64 PIMAGE_DYNAMIC_RELOCATION;
typedef tagABORTPATH* PEMRBEGINPATH;
typedef IMAGE_DYNAMIC_RELOCATION64_V2 IMAGE_DYNAMIC_RELOCATION_V2;
typedef _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT
    TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
typedef COPYFILE2_MESSAGE COPYFILE2_MESSAGE;
typedef _COPYFILE2_MESSAGE_ACTION COPYFILE2_MESSAGE_ACTION;
typedef IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER* PIMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;
typedef int ( *EDITWORDBREAKPROCW )( LPWSTR, int, int, int );
typedef _KCRM_TRANSACTION_BLOB KCRM_TRANSACTION_BLOB;
typedef IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION* PIMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
typedef tagEMRSELECTCLIPPATH EMRSETICMMODE;
typedef IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION* PIMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION;
typedef WIN32_MEMORY_PARTITION_INFORMATION WIN32_MEMORY_PARTITION_INFORMATION;
typedef IMAGE_FUNCTION_OVERRIDE_HEADER* PIMAGE_FUNCTION_OVERRIDE_HEADER;
typedef tagENUMUILANG* PENUMUILANG;
typedef IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION* PIMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION;
typedef tagFUNCKIND FUNCKIND;
typedef SHELLHOOKINFO SHELLHOOKINFO;
typedef _SYSTEM_INFO SYSTEM_INFO;
typedef _IMAGE_LOAD_CONFIG_DIRECTORY32* PIMAGE_LOAD_CONFIG_DIRECTORY32;
typedef PCONTEXT LPCONTEXT;
typedef _IMAGE_HOT_PATCH_INFO IMAGE_HOT_PATCH_INFO;
typedef _TP_WAIT TP_WAIT;
typedef _IMAGE_HOT_PATCH_INFO* PIMAGE_HOT_PATCH_INFO;
typedef _IMAGE_HOT_PATCH_BASE IMAGE_HOT_PATCH_BASE;
typedef tagEVENTMSG* LPEVENTMSG;
typedef _IMAGE_HOT_PATCH_HASHES IMAGE_HOT_PATCH_HASHES;
typedef _IMAGE_HOT_PATCH_HASHES* PIMAGE_HOT_PATCH_HASHES;
typedef int HFILE;
typedef _IMAGE_CE_RUNTIME_FUNCTION_ENTRY* PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;
typedef _OUTPUT_DEBUG_STRING_INFO* LPOUTPUT_DEBUG_STRING_INFO;
typedef _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY* PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY;
typedef tagEMRCREATECOLORSPACE EMRCREATECOLORSPACE;
typedef ARM64_FNPDATA_FLAGS ARM64_FNPDATA_FLAGS;
typedef _EXCEPTION_DEBUG_INFO EXCEPTION_DEBUG_INFO;
typedef _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY* PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;
typedef tagENUMTEXTMETRICA* PENUMTEXTMETRICA;
typedef RTL_CONDITION_VARIABLE* PCONDITION_VARIABLE;
typedef IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA
    IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA;
typedef _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY
    IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
typedef tagEMRSETCOLORSPACE EMRDELETECOLORSPACE;
typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE;
typedef _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY* PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
typedef PRTL_BARRIER LPSYNCHRONIZATION_BARRIER;
typedef _TP_CLEANUP_GROUP TP_CLEANUP_GROUP;
typedef _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
typedef tagEMRSETICMPROFILE EMRSETICMPROFILEW;
typedef _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef _GRADIENT_RECT* PGRADIENT_RECT;
typedef _WIN32_MEMORY_RANGE_ENTRY WIN32_MEMORY_RANGE_ENTRY;
typedef _IMAGE_ENCLAVE_CONFIG32* PIMAGE_ENCLAVE_CONFIG32;
typedef _SECURITY_ATTRIBUTES* LPSECURITY_ATTRIBUTES;
typedef _EXIT_PROCESS_DEBUG_INFO* LPEXIT_PROCESS_DEBUG_INFO;
typedef _TRANSACTION_PROPERTIES_INFORMATION* PTRANSACTION_PROPERTIES_INFORMATION;
typedef IEnumSTATPROPSTG IEnumSTATPROPSTG;
typedef IMAGE_ENCLAVE_CONFIG64 IMAGE_ENCLAVE_CONFIG;
typedef PIMAGE_ENCLAVE_CONFIG64 PIMAGE_ENCLAVE_CONFIG;
typedef _TRANSACTION_ENLISTMENT_PAIR TRANSACTION_ENLISTMENT_PAIR;
typedef _IMAGE_ENCLAVE_IMPORT IMAGE_ENCLAVE_IMPORT;
typedef IDispatch IDispatch;
typedef _IMAGE_DEBUG_DIRECTORY IMAGE_DEBUG_DIRECTORY;
typedef IWinInetInfo IWinInetInfo;
typedef PHEAP_SUMMARY LPHEAP_SUMMARY;
typedef const _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION* PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
typedef _FPO_DATA FPO_DATA;
typedef _REDIRECTION_DESCRIPTOR REDIRECTION_DESCRIPTOR;
typedef const REDIRECTION_DESCRIPTOR* PCREDIRECTION_DESCRIPTOR;
typedef _IMAGE_DEBUG_MISC IMAGE_DEBUG_MISC;
typedef tagCOLORADJUSTMENT* PCOLORADJUSTMENT;
typedef _MAXVERSIONTESTED_INFO MAXVERSIONTESTED_INFO;
typedef _IMAGE_FUNCTION_ENTRY IMAGE_FUNCTION_ENTRY;
typedef _IMAGE_FUNCTION_ENTRY* PIMAGE_FUNCTION_ENTRY;
typedef _GLYPHMETRICSFLOAT GLYPHMETRICSFLOAT;
typedef _APP_MEMORY_INFORMATION* PAPP_MEMORY_INFORMATION;
typedef _IMAGE_FUNCTION_ENTRY64 IMAGE_FUNCTION_ENTRY64;
typedef _IMAGE_SEPARATE_DEBUG_HEADER IMAGE_SEPARATE_DEBUG_HEADER;
typedef _TP_POOL* PTP_POOL;
typedef _NON_PAGED_DEBUG_INFO NON_PAGED_DEBUG_INFO;
typedef PVOID LPMENUTEMPLATEW;
typedef _NON_PAGED_DEBUG_INFO* PNON_PAGED_DEBUG_INFO;
typedef _PROCESS_INFORMATION* LPPROCESS_INFORMATION;
typedef _ImageArchitectureHeader* PIMAGE_ARCHITECTURE_HEADER;
typedef tagEMR EMR;
typedef _ImageArchitectureEntry* PIMAGE_ARCHITECTURE_ENTRY;
typedef _TRANSACTION_LIST_INFORMATION TRANSACTION_LIST_INFORMATION;
typedef IMPORT_OBJECT_HEADER IMPORT_OBJECT_HEADER;
typedef INT_PTR ( *DLGPROC )( HWND, UINT, WPARAM, LPARAM );
typedef _STREAM_INFO_LEVELS STREAM_INFO_LEVELS;
typedef IMPORT_OBJECT_NAME_TYPE IMPORT_OBJECT_NAME_TYPE;
typedef tagCAPROPVARIANT CAPROPVARIANT;
typedef IMAGE_COR20_HEADER IMAGE_COR20_HEADER;
typedef ULONG* PSAVEPOINT_ID;
typedef _UNWIND_HISTORY_TABLE UNWIND_HISTORY_TABLE;
typedef tagSTGMEDIUM uSTGMEDIUM;
typedef uSTGMEDIUM STGMEDIUM;
typedef STGMEDIUM* LPSTGMEDIUM;
typedef tagEMRPOLYPOLYLINE EMRPOLYPOLYGON;
typedef _TAPE_SET_DRIVE_PARAMETERS TAPE_SET_DRIVE_PARAMETERS;
typedef _SLIST_ENTRY* PSLIST_ENTRY;
typedef _SLIST_HEADER SLIST_HEADER;
typedef tagEMRFILLRGN EMRFILLRGN;
typedef _SLIST_HEADER* PSLIST_HEADER;
typedef tagGCP_RESULTSA GCP_RESULTSA;
typedef _MESSAGE_RESOURCE_ENTRY MESSAGE_RESOURCE_ENTRY;
typedef _MESSAGE_RESOURCE_ENTRY* PMESSAGE_RESOURCE_ENTRY;
typedef tagPOINT* LPPOINT;
typedef tagEMRTEXT EMRTEXT;
typedef _MESSAGE_RESOURCE_DATA MESSAGE_RESOURCE_DATA;
typedef _OSVERSIONINFOA OSVERSIONINFOA;
typedef WIN32_FIND_DATAW WIN32_FIND_DATA;
typedef _OSVERSIONINFOA* POSVERSIONINFOA;
typedef _OSVERSIONINFOA* LPOSVERSIONINFOA;
typedef tagLOGFONTW LOGFONTW;
typedef tagTEXTMETRICW TEXTMETRICW;
typedef ULONG PROPID;
typedef _TRANSACTIONMANAGER_LOGPATH_INFORMATION
    TRANSACTIONMANAGER_LOGPATH_INFORMATION;
typedef _CREATE_THREAD_DEBUG_INFO* LPCREATE_THREAD_DEBUG_INFO;
typedef _EXCEPTION_DEBUG_INFO* LPEXCEPTION_DEBUG_INFO;
typedef tagCLIPDATA CLIPDATA;
typedef OSVERSIONINFOW OSVERSIONINFO;
typedef _EXIT_THREAD_DEBUG_INFO EXIT_THREAD_DEBUG_INFO;
typedef POSVERSIONINFOW POSVERSIONINFO;
typedef LPOSVERSIONINFOW LPOSVERSIONINFO;
typedef _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT* PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
typedef _OSVERSIONINFOEXA* POSVERSIONINFOEXA;
typedef tagEMREXTCREATEFONTINDIRECTW* PEMREXTCREATEFONTINDIRECTW;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;
typedef OSVERSIONINFOEXW OSVERSIONINFOEX;
typedef POSVERSIONINFOEXW POSVERSIONINFOEX;
typedef _WIN32_FIND_DATAA* LPWIN32_FIND_DATAA;
typedef _RTL_UMS_SCHEDULER_REASON* PRTL_UMS_SCHEDULER_REASON;
typedef void RTL_UMS_SCHEDULER_ENTRY_POINT( RTL_UMS_SCHEDULER_REASON, ULONG_PTR, PVOID );
typedef tagEXTLOGPEN32 EXTLOGPEN32;
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;
typedef _OS_DEPLOYEMENT_STATE_VALUES OS_DEPLOYEMENT_STATE_VALUES;
typedef tagEMRCREATEDIBPATTERNBRUSHPT EMRCREATEDIBPATTERNBRUSHPT;
typedef _TRANSACTIONMANAGER_BASIC_INFORMATION* PTRANSACTIONMANAGER_BASIC_INFORMATION;
typedef tagAXISINFOW* LPAXISINFOW;
typedef _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
typedef _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG* PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
typedef SIZE SIZEL;
typedef tagEMRSETVIEWPORTEXTEX EMRSETVIEWPORTEXTEX;
typedef tagSIZE* LPSIZE;
typedef tagPOINTS* PPOINTS;
typedef _TAPE_PREPARE* PTAPE_PREPARE;
typedef tagPOINTS POINTS;
typedef tagEMRMODIFYWORLDTRANSFORM* PEMRMODIFYWORLDTRANSFORM;
typedef _KCRM_TRANSACTION_BLOB* PKCRM_TRANSACTION_BLOB;
typedef DWORD COLORREF;
typedef ACTCTX_REQUESTED_RUN_LEVEL ACTCTX_REQUESTED_RUN_LEVEL;
typedef tagCALLCONV CALLCONV;
typedef _RTL_CRITICAL_SECTION_DEBUG RTL_RESOURCE_DEBUG;
typedef tagEMREXTFLOODFILL* PEMREXTFLOODFILL;
typedef tagEMRARC EMRPIE;
typedef ITypeInfo ITypeInfo;
typedef _RTL_CONDITION_VARIABLE* PRTL_CONDITION_VARIABLE;
typedef _POINTL* PPOINTL;
typedef tagACTCTXW ACTCTXW;
typedef _HEAP_INFORMATION_CLASS HEAP_INFORMATION_CLASS;
typedef tagPOLYTEXTW POLYTEXTW;
typedef _POINTL POINTL;
typedef _TRANSACTION_NOTIFICATION TRANSACTION_NOTIFICATION;
typedef _HEAP_OPTIMIZE_RESOURCES_INFORMATION* PHEAP_OPTIMIZE_RESOURCES_INFORMATION;
typedef tagEMRPOLYLINE EMRPOLYLINE;
typedef tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
    ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef void ( *WORKERCALLBACKFUNC )( PVOID );
typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK;
typedef void ( *PFLS_CALLBACK_FUNCTION )( PVOID );
typedef DPI_AWARENESS_CONTEXT__* DPI_AWARENESS_CONTEXT;
typedef _TAPE_GET_POSITION TAPE_GET_POSITION;
typedef BOOLEAN ( *PSECURE_MEMORY_CACHE_CALLBACK )( PVOID, SIZE_T );
typedef tagEMRPOLYLINE16 EMRPOLYBEZIERTO16;
typedef _ACTIVATION_CONTEXT_INFO_CLASS ACTIVATION_CONTEXT_INFO_CLASS;
typedef _ACTIVATION_CONTEXT_QUERY_INDEX* PACTIVATION_CONTEXT_QUERY_INDEX;
typedef const _ACTIVATION_CONTEXT_QUERY_INDEX* PCACTIVATION_CONTEXT_QUERY_INDEX;
typedef DPI_HOSTING_BEHAVIOR DPI_HOSTING_BEHAVIOR;
typedef _PERFORMANCE_DATA PERFORMANCE_DATA;
typedef _ASSEMBLY_FILE_DETAILED_INFORMATION* PASSEMBLY_FILE_DETAILED_INFORMATION;
typedef tagRECT* LPRECT;
typedef const ASSEMBLY_FILE_DETAILED_INFORMATION* PCASSEMBLY_FILE_DETAILED_INFORMATION;
typedef _RECTL* LPRECTL;
typedef _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
    ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
typedef IPersistStream IPersistStream;
typedef AsyncIMultiQI AsyncIMultiQI;
typedef const _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION* PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
typedef _PROCESS_MEMORY_EXHAUSTION_TYPE* PPROCESS_MEMORY_EXHAUSTION_TYPE;
typedef _PROCESS_MEMORY_EXHAUSTION_INFO PROCESS_MEMORY_EXHAUSTION_INFO;
typedef _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION* PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
typedef const _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION* PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
typedef _FILE_STREAM_INFO* PFILE_STREAM_INFO;
typedef const _COMPATIBILITY_CONTEXT_ELEMENT* PCCOMPATIBILITY_CONTEXT_ELEMENT;
typedef _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION
    ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
typedef _HEAP_SUMMARY HEAP_SUMMARY;
typedef tagNEWTEXTMETRICW* LPNEWTEXTMETRICW;
typedef _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION* PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
typedef _SUPPORTED_OS_INFO* PSUPPORTED_OS_INFO;
typedef _MAXVERSIONTESTED_INFO* PMAXVERSIONTESTED_INFO;
typedef _FILE_STORAGE_INFO FILE_STORAGE_INFO;
typedef tagEMRCREATEPALETTE EMRCREATEPALETTE;
typedef _PERFORMANCE_DATA* PPERFORMANCE_DATA;
typedef JOBOBJECT_IO_RATE_CONTROL_INFORMATION
    JOBOBJECT_IO_RATE_CONTROL_INFORMATION;
typedef _EVENTLOGRECORD* PEVENTLOGRECORD;
typedef _EVENTSFORLOGFILE EVENTSFORLOGFILE;
typedef _FLAGGED_WORD_BLOB FLAGGED_WORD_BLOB;
typedef FLAGGED_WORD_BLOB* wireBSTR;
typedef _EVENTSFORLOGFILE* PEVENTSFORLOGFILE;
typedef _PROC_THREAD_ATTRIBUTE_LIST* LPPROC_THREAD_ATTRIBUTE_LIST;
typedef _CM_ERROR_CONTROL_TYPE SERVICE_ERROR_TYPE;
typedef _MEMORY_PRIORITY_INFORMATION* PMEMORY_PRIORITY_INFORMATION;
typedef _TAPE_PREPARE TAPE_PREPARE;
typedef _TAPE_WRITE_MARKS* PTAPE_WRITE_MARKS;
typedef _DRAWPATRECT DRAWPATRECT;
typedef _TAPE_GET_POSITION* PTAPE_GET_POSITION;
typedef _TAPE_SET_POSITION* PTAPE_SET_POSITION;
typedef _TAPE_GET_DRIVE_PARAMETERS TAPE_GET_DRIVE_PARAMETERS;
typedef _TAPE_GET_DRIVE_PARAMETERS* PTAPE_GET_DRIVE_PARAMETERS;
typedef _TAPE_SET_DRIVE_PARAMETERS* PTAPE_SET_DRIVE_PARAMETERS;
typedef _div_t div_t;
typedef _TAPE_SET_MEDIA_PARAMETERS TAPE_SET_MEDIA_PARAMETERS;
typedef _TAPE_SET_MEDIA_PARAMETERS* PTAPE_SET_MEDIA_PARAMETERS;
typedef _TAPE_CREATE_PARTITION* PTAPE_CREATE_PARTITION;
typedef void ( *PTIMERAPCROUTINE )( LPVOID, DWORD, DWORD );
typedef _TAPE_WMI_OPERATIONS* PTAPE_WMI_OPERATIONS;
typedef PRTL_BARRIER PSYNCHRONIZATION_BARRIER;
typedef GUID CRM_PROTOCOL_ID;
typedef ULONG NOTIFICATION_MASK;
typedef _TRANSACTION_NOTIFICATION* PTRANSACTION_NOTIFICATION;
typedef _EXIT_THREAD_DEBUG_INFO* LPEXIT_THREAD_DEBUG_INFO;
typedef _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT* PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
typedef int ( *_onexit_t )();
typedef _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT* PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
typedef IMoniker IMoniker;
typedef tagICEXYZTRIPLE CIEXYZTRIPLE;
typedef CIEXYZTRIPLE* LPCIEXYZTRIPLE;
typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
    TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;
typedef tagEXTLOGFONTW* LPEXTLOGFONTW;
typedef _KCRM_TRANSACTION_BLOB* PRKCRM_TRANSACTION_BLOB;
typedef tagEMRSETWORLDTRANSFORM* PEMRSETWORLDTRANSFORM;
typedef DWORD ( *APPLICATION_RECOVERY_CALLBACK )( PVOID );
typedef _PROCESS_INFORMATION PROCESS_INFORMATION;
typedef _TRANSACTION_STATE TRANSACTION_STATE;
typedef _TRANSACTION_BASIC_INFORMATION TRANSACTION_BASIC_INFORMATION;
typedef _TRANSACTION_BASIC_INFORMATION* PTRANSACTION_BASIC_INFORMATION;
typedef _TRANSACTIONMANAGER_BASIC_INFORMATION
    TRANSACTIONMANAGER_BASIC_INFORMATION;
typedef _devicemodeW DEVMODEW;
typedef _CREATEFILE2_EXTENDED_PARAMETERS* LPCREATEFILE2_EXTENDED_PARAMETERS;
typedef _TRANSACTIONMANAGER_LOGPATH_INFORMATION* PTRANSACTIONMANAGER_LOGPATH_INFORMATION;
typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;
typedef _TRANSACTIONMANAGER_OLDEST_INFORMATION
    TRANSACTIONMANAGER_OLDEST_INFORMATION;
typedef _TRANSACTIONMANAGER_OLDEST_INFORMATION* PTRANSACTIONMANAGER_OLDEST_INFORMATION;
typedef _MIDL_STUB_MESSAGE* PMIDL_STUB_MESSAGE;
typedef void ( *STUB_THUNK )( PMIDL_STUB_MESSAGE );
typedef _FINDEX_INFO_LEVELS FINDEX_INFO_LEVELS;
typedef _TRANSACTION_PROPERTIES_INFORMATION TRANSACTION_PROPERTIES_INFORMATION;
typedef _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS* PREAD_DIRECTORY_NOTIFY_INFORMATION_CLASS;
typedef _NDR_CS_ROUTINES NDR_CS_ROUTINES;
typedef _TRANSACTION_ENLISTMENT_PAIR* PTRANSACTION_ENLISTMENT_PAIR;
typedef tagDCOM_CALL_STATE DCOM_CALL_STATE;
typedef _SECURITY_ATTRIBUTES SECURITY_ATTRIBUTES;
typedef _OVERLAPPED OVERLAPPED;
typedef _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION* PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
typedef DWORD ( *PFE_IMPORT_FUNC )( PBYTE, PVOID, PULONG );
typedef _RESOURCEMANAGER_COMPLETION_INFORMATION
    RESOURCEMANAGER_COMPLETION_INFORMATION;
typedef _ENLISTMENT_BASIC_INFORMATION ENLISTMENT_BASIC_INFORMATION;
typedef tagWTSSESSION_NOTIFICATION* PWTSSESSION_NOTIFICATION;
typedef _ENLISTMENT_BASIC_INFORMATION* PENLISTMENT_BASIC_INFORMATION;
typedef _TRANSACTION_LIST_INFORMATION* PTRANSACTION_LIST_INFORMATION;
typedef _KTMOBJECT_TYPE* PKTMOBJECT_TYPE;
typedef _CREATE_PROCESS_DEBUG_INFO* LPCREATE_PROCESS_DEBUG_INFO;
typedef _KTMOBJECT_CURSOR* PKTMOBJECT_CURSOR;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef _TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE;
typedef _OVERLAPPED_ENTRY* LPOVERLAPPED_ENTRY;
typedef _WIN32_FIND_DATAA WIN32_FIND_DATAA;
typedef void ( *PTP_CLEANUP_GROUP_CANCEL_CALLBACK )( PVOID, PVOID );
typedef COPYFILE2_EXTENDED_PARAMETERS_V2 COPYFILE2_EXTENDED_PARAMETERS_V2;
typedef _REASON_CONTEXT REASON_CONTEXT;
typedef PENCLAVE_ROUTINE LPENCLAVE_ROUTINE;
typedef tagLOGBRUSH LOGBRUSH;
typedef LOGBRUSH PATTERN;
typedef HGLRC__* HGLRC;
typedef HDESK__* HDESK;
typedef TP_CALLBACK_ENVIRON_V3* PTP_CALLBACK_ENVIRON;
typedef HENHMETAFILE__* HENHMETAFILE;
typedef HFONT__* HFONT;
typedef _TP_TIMER TP_TIMER;
typedef SIZE* LPSIZEL;
typedef HWINEVENTHOOK__* HWINEVENTHOOK;
typedef _PROCESS_HEAP_ENTRY PROCESS_HEAP_ENTRY;
typedef HBITMAP__* HBITMAP;
typedef HANDLE GLOBALHANDLE;
typedef HBRUSH__* HBRUSH;
typedef INT_PTR ( *FARPROC )();
typedef LPVOID ( *PFIBER_CALLOUT_ROUTINE )( LPVOID );
typedef HCOLORSPACE__* HCOLORSPACE;
typedef WORD ATOM;
typedef IAddrTrackingControl IAddrTrackingControl;
typedef HMETAFILE__* HMETAFILE;
typedef tagPOINT POINT;
typedef unsigned long error_status_t;
typedef tagBITMAPFILEHEADER* LPBITMAPFILEHEADER;
typedef tagEMRSETICMPROFILE EMRSETICMPROFILE;
typedef HSPRITE__* HSPRITE;
typedef _MEMORYSTATUS* LPMEMORYSTATUS;
typedef void* PUMS_COMPLETION_LIST;
typedef HWINSTA__* HWINSTA;
typedef DPI_AWARENESS DPI_AWARENESS;
typedef _FILETIME* LPFILETIME;
typedef HHOOK__* HHOOK;
typedef _RECTL* PRECTL;
typedef IMarshal2 IMarshal2;
typedef _devicemodeW* NPDEVMODEW;
typedef _DISPLAY_DEVICEW* PDISPLAY_DEVICEW;
typedef _FILE_ATTRIBUTE_TAG_INFO* PFILE_ATTRIBUTE_TAG_INFO;
typedef tagGLYPHSET GLYPHSET;
typedef tagDESIGNVECTOR DESIGNVECTOR;
typedef tagCY CY;
typedef CY* LPCY;
typedef tagPOINTS* LPPOINTS;
typedef DISPLAYCONFIG_TARGET_DEVICE_NAME DISPLAYCONFIG_TARGET_DEVICE_NAME;
typedef _OVERLAPPED_ENTRY OVERLAPPED_ENTRY;
typedef _SYSTEMTIME SYSTEMTIME;
typedef _SYSTEMTIME* PSYSTEMTIME;
typedef _WIN32_FIND_DATAA* PWIN32_FIND_DATAA;
typedef IEnumMoniker IEnumMoniker;
typedef _FINDEX_SEARCH_OPS FINDEX_SEARCH_OPS;
typedef tagENUMLOGFONTW ENUMLOGFONTW;
typedef ENUMLOGFONTW ENUMLOGFONT;
typedef _FILE_INFO_BY_HANDLE_CLASS FILE_INFO_BY_HANDLE_CLASS;
typedef _REDIRECTION_FUNCTION_DESCRIPTOR REDIRECTION_FUNCTION_DESCRIPTOR;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;
typedef _RGNDATA RGNDATA;
typedef _FILE_BASIC_INFO* PFILE_BASIC_INFO;
typedef _CREATE_THREAD_DEBUG_INFO CREATE_THREAD_DEBUG_INFO;
typedef ISurrogate ISurrogate;
typedef _MIDL_STUBLESS_PROXY_INFO MIDL_STUBLESS_PROXY_INFO;
typedef _UNLOAD_DLL_DEBUG_INFO* LPUNLOAD_DLL_DEBUG_INFO;
typedef tagMETARECORD* PMETARECORD;
typedef _DEP_SYSTEM_POLICY_TYPE DEP_SYSTEM_POLICY_TYPE;
typedef DISK_SPACE_INFORMATION DISK_SPACE_INFORMATION;
typedef tagEMRSELECTOBJECT EMRDELETEOBJECT;
typedef _BY_HANDLE_FILE_INFORMATION* LPBY_HANDLE_FILE_INFORMATION;
typedef tagTEXTMETRICW* LPTEXTMETRICW;
typedef LPTEXTMETRICW LPTEXTMETRIC;
typedef HRESULT ( *LPFNCANUNLOADNOW )();
typedef _CREATEFILE2_EXTENDED_PARAMETERS* PCREATEFILE2_EXTENDED_PARAMETERS;
typedef _WIN32_FIND_STREAM_DATA* PWIN32_FIND_STREAM_DATA;
typedef tagLOGBRUSH* LPLOGBRUSH;
typedef _STARTUPINFOA* LPSTARTUPINFOA;
typedef LPSTARTUPINFOW LPSTARTUPINFO;
typedef LONG LCSGAMUTMATCH;
typedef _THREAD_INFORMATION_CLASS THREAD_INFORMATION_CLASS;
typedef tagCIEXYZ CIEXYZ;
typedef _PROCESS_INFORMATION_CLASS PROCESS_INFORMATION_CLASS;
typedef IAsyncManager IAsyncManager;
typedef tagBITMAPINFOHEADER BITMAPINFOHEADER;
typedef void ( *GENERIC_UNBIND_ROUTINE )( void*, unsigned char* );
typedef PROCESS_PROTECTION_LEVEL_INFORMATION
    PROCESS_PROTECTION_LEVEL_INFORMATION;
typedef _PROCESS_LEAP_SECOND_INFO* PPROCESS_LEAP_SECOND_INFO;
typedef tagBITMAPINFO* LPBITMAPINFO;
typedef IMarshal IMarshal;
typedef IMarshal* LPMARSHAL;
typedef tagENUMTEXTMETRICW* LPENUMTEXTMETRICW;
typedef LPENUMTEXTMETRICW LPENUMTEXTMETRIC;
typedef _MEMORYSTATUSEX MEMORYSTATUSEX;
typedef _JIT_DEBUG_INFO* LPJIT_DEBUG_INFO;
typedef _COMPUTER_NAME_FORMAT COMPUTER_NAME_FORMAT;
typedef tagBITMAPCOREINFO* PBITMAPCOREINFO;
typedef WIN32_MEMORY_INFORMATION_CLASS WIN32_MEMORY_INFORMATION_CLASS;
typedef _UMS_SCHEDULER_STARTUP_INFO* PUMS_SCHEDULER_STARTUP_INFO;
typedef void ( *PTP_WIN32_IO_CALLBACK )( PTP_CALLBACK_INSTANCE, PVOID, PVOID, ULONG, ULONG_PTR, PTP_IO );
typedef unsigned char byte;
typedef DISPLAYCONFIG_SCALING DISPLAYCONFIG_SCALING;
typedef BOOL ( *ENUMRESLANGPROCA )( HMODULE, LPCSTR, LPCSTR, WORD, LONG_PTR );
typedef NAMEENUMPROCW WINSTAENUMPROCW;
typedef WINSTAENUMPROCW WINSTAENUMPROC;
typedef BOOL ( *ENUMRESLANGPROCW )( HMODULE, LPCWSTR, LPCWSTR, WORD, LONG_PTR );
typedef tagEMRSELECTCLIPPATH* PEMRSETTEXTALIGN;
typedef _DEVICE_WRITE_AGGREGATION_DESCRIPTOR
    DEVICE_WRITE_AGGREGATION_DESCRIPTOR;
typedef BOOL ( *ENUMRESNAMEPROCA )( HMODULE, LPCSTR, LPSTR, LONG_PTR );
typedef tagCBT_CREATEWNDA CBT_CREATEWNDA;
typedef BOOL ( *ENUMRESNAMEPROCW )( HMODULE, LPCWSTR, LPWSTR, LONG_PTR );
typedef tagEMRRESTOREDC EMRRESTOREDC;
typedef void ( *NDR_NOTIFY_ROUTINE )();
typedef BOOL ( *ENUMRESTYPEPROCA )( HMODULE, LPSTR, LONG_PTR );
typedef DEVMODEW DEVMODE;
typedef BOOL ( *ENUMRESTYPEPROCW )( HMODULE, LPWSTR, LONG_PTR );
typedef NPDEVMODEW NPDEVMODE;
typedef BOOL ( *PGET_MODULE_HANDLE_EXA )( DWORD, LPCSTR, HMODULE* );
typedef tagEMR* PEMR;
typedef _STORAGE_PORT_CODE_SET STORAGE_PORT_CODE_SET;
typedef BOOL ( *PGET_MODULE_HANDLE_EXW )( DWORD, LPCWSTR, HMODULE* );
typedef tagABORTPATH EMRENDPATH;
typedef _DISPLAY_DEVICEA* LPDISPLAY_DEVICEA;
typedef _REDIRECTION_FUNCTION_DESCRIPTOR* PREDIRECTION_FUNCTION_DESCRIPTOR;
typedef const REDIRECTION_FUNCTION_DESCRIPTOR* PCREDIRECTION_FUNCTION_DESCRIPTOR;
typedef tagAUDIODESCRIPTION* LPAUDIODESCRIPTION;
typedef tagDIBSECTION DIBSECTION;
typedef tagEXTLOGFONTA EXTLOGFONTA;
typedef tagEMRMASKBLT* PEMRMASKBLT;
typedef _REDIRECTION_DESCRIPTOR* PREDIRECTION_DESCRIPTOR;
typedef tagIMEMENUITEMINFOW IMEMENUITEMINFOW;
typedef tagEXTLOGFONTA* LPEXTLOGFONTA;
typedef PVOID DLL_DIRECTORY_COOKIE;
typedef PVOID* PDLL_DIRECTORY_COOKIE;
typedef tagDIBSECTION* LPDIBSECTION;
typedef FILE_WRITE_FLAGS FILE_WRITE_FLAGS;
typedef tagIMECHARPOSITION* PIMECHARPOSITION;
typedef PROPENUMPROCEXW PROPENUMPROCEX;
typedef tagMONITORINFOEXW MONITORINFOEXW;
typedef FILE_FLUSH_MODE FILE_FLUSH_MODE;
typedef tagEMRSELECTCLIPPATH* PEMRSETLAYOUT;
typedef tagLOGPALETTE LOGPALETTE;
typedef DISPLAYCONFIG_2DREGION DISPLAYCONFIG_2DREGION;
typedef tagEMRSTRETCHDIBITS* PEMRSTRETCHDIBITS;
typedef tagEMRSELECTCLIPPATH* PEMRSELECTCLIPPATH;
typedef void ( *PFIBER_START_ROUTINE )( LPVOID );
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;
typedef LPVOID LPLDT_ENTRY;
typedef tagEMRSELECTCLIPPATH* PEMRSETICMMODE;
typedef tagEMRCREATEPEN EMRCREATEPEN;
typedef _COMMPROP COMMPROP;
typedef tagEMRSELECTCLIPPATH* PEMRSETPOLYFILLMODE;
typedef long RPC_STATUS;
typedef _COMMPROP* LPCOMMPROP;
typedef void ( *LPSERVICE_MAIN_FUNCTIONA )( DWORD, LPSTR* );
typedef _COMSTAT COMSTAT;
typedef tagEMRLINETO* PEMRLINETO;
typedef _COMSTAT* LPCOMSTAT;
typedef _DCB DCB;
typedef DISPLAYCONFIG_TARGET_PREFERRED_MODE DISPLAYCONFIG_TARGET_PREFERRED_MODE;
typedef _MINIDUMP_CALLBACK_OUTPUT* PMINIDUMP_CALLBACK_OUTPUT;
typedef _DCB* LPDCB;
typedef tagMSLLHOOKSTRUCT MSLLHOOKSTRUCT;
typedef _COMMTIMEOUTS COMMTIMEOUTS;
typedef tagEMRLINETO* PEMRMOVETOEX;
typedef _NDR_CORRELATION_INFO* PNDR_CORRELATION_INFO;
typedef _COMMTIMEOUTS* LPCOMMTIMEOUTS;
typedef tagEMREXTESCAPE* PEMRDRAWESCAPE;
typedef _COMMCONFIG COMMCONFIG;
typedef tagCBT_CREATEWNDW CBT_CREATEWNDW;
typedef _COMMCONFIG* LPCOMMCONFIG;
typedef DISPLAYCONFIG_DESKTOP_IMAGE_INFO DISPLAYCONFIG_DESKTOP_IMAGE_INFO;
typedef _MEMORYSTATUS MEMORYSTATUS;
typedef _ENUM_SERVICE_STATUS_PROCESSA* LPENUM_SERVICE_STATUS_PROCESSA;
typedef tagLOGFONTW* NPLOGFONTW;
typedef DISPLAYCONFIG_TARGET_MODE DISPLAYCONFIG_TARGET_MODE;
typedef tagEMRSELECTOBJECT EMRSELECTOBJECT;
typedef _JIT_DEBUG_INFO JIT_DEBUG_INFO;
typedef _NETCONNECTINFOSTRUCT NETCONNECTINFOSTRUCT;
typedef DISPLAYCONFIG_MODE_INFO DISPLAYCONFIG_MODE_INFO;
typedef JIT_DEBUG_INFO JIT_DEBUG_INFO32;
typedef JIT_DEBUG_INFO* LPJIT_DEBUG_INFO32;
typedef BOOL ( *PROPENUMPROCEXA )( HWND, LPSTR, HANDLE, ULONG_PTR );
typedef JIT_DEBUG_INFO JIT_DEBUG_INFO64;
typedef tagABORTPATH EMRSETMETARGN;
typedef JIT_DEBUG_INFO* LPJIT_DEBUG_INFO64;
typedef _DISPLAY_DEVICEW DISPLAY_DEVICEW;
typedef DISPLAY_DEVICEW DISPLAY_DEVICE;
typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef tagABORTPATH EMRCLOSEFIGURE;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
typedef _SERVICE_LAUNCH_PROTECTED_INFO* PSERVICE_LAUNCH_PROTECTED_INFO;
typedef _DISPLAY_DEVICEW* LPDISPLAY_DEVICEW;
typedef LPDISPLAY_DEVICEW LPDISPLAY_DEVICE;
typedef _OFSTRUCT OFSTRUCT;
typedef tagEMRSELECTCLIPPATH EMRSELECTCLIPPATH;
typedef _OFSTRUCT* LPOFSTRUCT;
typedef _OFSTRUCT* POFSTRUCT;
typedef tagABORTPATH EMRSAVEDC;
typedef void* PUMS_CONTEXT;
typedef _RTL_UMS_THREAD_INFO_CLASS UMS_THREAD_INFO_CLASS;
typedef _QUERY_SERVICE_CONFIGW* LPQUERY_SERVICE_CONFIGW;
typedef tagEVENTMSG* NPEVENTMSG;
typedef _RTL_UMS_THREAD_INFO_CLASS* PUMS_THREAD_INFO_CLASS;
typedef DISPLAYCONFIG_DEVICE_INFO_TYPE DISPLAYCONFIG_DEVICE_INFO_TYPE;
typedef _RTL_UMS_SCHEDULER_REASON UMS_SCHEDULER_REASON;
typedef _STORAGE_CRYPTO_ALGORITHM_ID* PSTORAGE_CRYPTO_ALGORITHM_ID;
typedef PRTL_UMS_SCHEDULER_ENTRY_POINT PUMS_SCHEDULER_ENTRY_POINT;
typedef DISPLAYCONFIG_DEVICE_INFO_HEADER DISPLAYCONFIG_DEVICE_INFO_HEADER;
typedef tagCWPSTRUCT* LPCWPSTRUCT;
typedef _UMS_SCHEDULER_STARTUP_INFO UMS_SCHEDULER_STARTUP_INFO;
typedef DISPLAYCONFIG_SOURCE_DEVICE_NAME DISPLAYCONFIG_SOURCE_DEVICE_NAME;
typedef tagENUMLOGFONTEXDVW* PENUMLOGFONTEXDVW;
typedef PENUMLOGFONTEXDVW PENUMLOGFONTEXDV;
typedef _UMS_SYSTEM_THREAD_INFORMATION UMS_SYSTEM_THREAD_INFORMATION;
typedef tagLOGPALETTE* LPLOGPALETTE;
typedef _UMS_SYSTEM_THREAD_INFORMATION* PUMS_SYSTEM_THREAD_INFORMATION;
typedef _TAPE_STATISTICS* PTAPE_STATISTICS;
typedef tagENUMLOGFONTEXDVW ENUMLOGFONTEXDVW;
typedef ENUMLOGFONTEXDVW ENUMLOGFONTEXDV;
typedef REASON_CONTEXT POWER_REQUEST_CONTEXT;
typedef REASON_CONTEXT* PPOWER_REQUEST_CONTEXT;
typedef tagEMRSETCOLORSPACE* PEMRDELETECOLORSPACE;
typedef REASON_CONTEXT* LPPOWER_REQUEST_CONTEXT;
typedef _REMOTE_NAME_INFOW REMOTE_NAME_INFOW;
typedef REMOTE_NAME_INFOW REMOTE_NAME_INFO;
typedef tagLOGFONTA* LPLOGFONTA;
typedef tagEXTLOGFONTW EXTLOGFONTW;
typedef EXTLOGFONTW EXTLOGFONT;
typedef DWORD ( *PFE_EXPORT_FUNC )( PBYTE, PVOID, ULONG );
typedef _DOCINFOA DOCINFOA;
typedef tagLAYERPLANEDESCRIPTOR* LPLAYERPLANEDESCRIPTOR;
typedef tagEXTLOGFONTW* NPEXTLOGFONTW;
typedef NPEXTLOGFONTW NPEXTLOGFONT;
typedef _WIN32_STREAM_ID WIN32_STREAM_ID;
typedef _DOCINFOW DOCINFOW;
typedef _WIN32_STREAM_ID* LPWIN32_STREAM_ID;
typedef void MENUTEMPLATEA;
typedef _SERVICE_SID_INFO* LPSERVICE_SID_INFO;
typedef _STARTUPINFOEXA STARTUPINFOEXA;
typedef tagENUMLOGFONTA ENUMLOGFONTA;
typedef _STARTUPINFOEXA* LPSTARTUPINFOEXA;
typedef _QUERY_SERVICE_LOCK_STATUSW QUERY_SERVICE_LOCK_STATUSW;
typedef _STARTUPINFOEXW STARTUPINFOEXW;
typedef _STARTUPINFOEXW* LPSTARTUPINFOEXW;
typedef _DEVICE_MEDIA_INFO DEVICE_MEDIA_INFO;
typedef tagEMRSELECTOBJECT* PEMRSELECTOBJECT;
typedef _STORAGE_DEVICE_RESILIENCY_DESCRIPTOR* PSTORAGE_DEVICE_RESILIENCY_DESCRIPTOR;
typedef _TRIVERTEX* LPTRIVERTEX;
typedef STARTUPINFOEXW STARTUPINFOEX;
typedef LPSTARTUPINFOEXW LPSTARTUPINFOEX;
typedef tagCOLORMATCHTOTARGET* PEMRCOLORMATCHTOTARGET;
typedef tagEVENTMSG EVENTMSG;
typedef _PROC_THREAD_ATTRIBUTE_NUM PROC_THREAD_ATTRIBUTE_NUM;
typedef _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM* LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
typedef UINT ( *PGET_SYSTEM_WOW64_DIRECTORY_A )( LPSTR, UINT );
typedef UINT ( *PGET_SYSTEM_WOW64_DIRECTORY_W )( LPWSTR, UINT );
typedef tagEXTLOGPEN32* NPEXTLOGPEN32;
typedef DWORD ( *LPPROGRESS_ROUTINE )( LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, DWORD, DWORD, HANDLE, HANDLE, LPVOID );
typedef tagAXESLISTW* LPAXESLISTW;
typedef LPAXESLISTW LPAXESLIST;
typedef tagPALETTEENTRY PALETTEENTRY;
typedef _COPYFILE2_MESSAGE_TYPE COPYFILE2_MESSAGE_TYPE;
typedef _UNIVERSAL_NAME_INFOW* LPUNIVERSAL_NAME_INFOW;
typedef void ( *RPCLT_PDU_FILTER_FUNC )( void*, unsigned int, int );
typedef tagENUMLOGFONTEXDVA* LPENUMLOGFONTEXDVA;
typedef _COPYFILE2_COPY_PHASE COPYFILE2_COPY_PHASE;
typedef tagMULTIKEYHELPW* PMULTIKEYHELPW;
typedef PMULTIKEYHELPW PMULTIKEYHELP;
typedef tagMULTIKEYHELPW MULTIKEYHELPW;
typedef _STORAGE_PROPERTY_ID STORAGE_PROPERTY_ID;
typedef tagEMRSCALEVIEWPORTEXTEX* PEMRSCALEWINDOWEXTEX;
typedef tagEMRMODIFYWORLDTRANSFORM EMRMODIFYWORLDTRANSFORM;
typedef tagMULTIKEYHELPW* LPMULTIKEYHELPW;
typedef _SERVICE_NOTIFY_2W* PSERVICE_NOTIFY_2W;
typedef _SERVICE_FAILURE_ACTIONSW* LPSERVICE_FAILURE_ACTIONSW;
typedef tagEXTLOGFONTW* PEXTLOGFONTW;
typedef DISPLAYCONFIG_SCANLINE_ORDERING DISPLAYCONFIG_SCANLINE_ORDERING;
typedef tagHELPWININFOW* LPHELPWININFOW;
typedef tagEMRSELECTCLIPPATH EMRSETLAYOUT;
typedef tagHELPWININFOW HELPWININFOW;
typedef _STORAGE_IDENTIFIER STORAGE_IDENTIFIER;
typedef tagEMRSETPIXELV* PEMRSETPIXELV;
typedef tagEMRSELECTCLIPPATH EMRSETMAPMODE;
typedef BOOL ( *NAMEENUMPROCA )( LPSTR, LPARAM );
typedef COPYFILE2_MESSAGE_ACTION ( *PCOPYFILE2_PROGRESS_ROUTINE )(
    const COPYFILE2_MESSAGE*, PVOID );
typedef SERVICE_NOTIFY_2W SERVICE_NOTIFYW;
typedef DISPLAYCONFIG_VIDEO_SIGNAL_INFO DISPLAYCONFIG_VIDEO_SIGNAL_INFO;
typedef SC_HANDLE__* SC_HANDLE;
typedef SC_HANDLE* LPSC_HANDLE;
typedef tagEMRELLIPSE EMRELLIPSE;
typedef COPYFILE2_EXTENDED_PARAMETERS COPYFILE2_EXTENDED_PARAMETERS;
typedef tagEMRSELECTCLIPPATH EMRSETSTRETCHBLTMODE;
typedef _devicemodeA* PDEVMODEA;
typedef tagKERNINGPAIR* LPKERNINGPAIR;
typedef _EVENTLOG_FULL_INFORMATION EVENTLOG_FULL_INFORMATION;
typedef tagKERNINGPAIR KERNINGPAIR;
typedef _EVENTLOG_FULL_INFORMATION* LPEVENTLOG_FULL_INFORMATION;
typedef ULONG OPERATION_ID;
typedef _OPERATION_START_PARAMETERS OPERATION_START_PARAMETERS;
typedef _SERVICE_REQUIRED_PRIVILEGES_INFOW* LPSERVICE_REQUIRED_PRIVILEGES_INFOW;
typedef _OPERATION_START_PARAMETERS* POPERATION_START_PARAMETERS;
typedef int ( *ICMENUMPROCW )( LPWSTR, LPARAM );
typedef tagENUMLOGFONTEXA* LPENUMLOGFONTEXA;
typedef tagHANDLETABLE HANDLETABLE;
typedef tagMETARECORD METARECORD;
typedef _OPERATION_END_PARAMETERS OPERATION_END_PARAMETERS;
typedef tagEMRALPHABLEND EMRALPHABLEND;
typedef _MINIDUMP_SYSTEM_MEMORY_INFO_1 MINIDUMP_SYSTEM_MEMORY_INFO_1;
typedef MINIDUMP_SYSTEM_MEMORY_INFO_1 MINIDUMP_SYSTEM_MEMORY_INFO_N;
typedef _OPERATION_END_PARAMETERS* POPERATION_END_PARAMETERS;
typedef tagENUMLOGFONTEXW* LPENUMLOGFONTEXW;
typedef tagHW_PROFILE_INFOA HW_PROFILE_INFOA;
typedef tagHW_PROFILE_INFOA* LPHW_PROFILE_INFOA;
typedef tagPANOSE PANOSE;
typedef _MINIDUMP_HANDLE_DESCRIPTOR_2 MINIDUMP_HANDLE_DESCRIPTOR_2;
typedef MINIDUMP_HANDLE_DESCRIPTOR_2 MINIDUMP_HANDLE_DESCRIPTOR_N;
typedef tagHW_PROFILE_INFOW HW_PROFILE_INFOW;
typedef tagTEXTMETRICW* PTEXTMETRICW;
typedef tagHW_PROFILE_INFOW* LPHW_PROFILE_INFOW;
typedef val_context* PVALCONTEXT;
typedef HW_PROFILE_INFOW HW_PROFILE_INFO;
typedef int ( *OLDFONTENUMPROCW )( const LOGFONTW*, const TEXTMETRICW*, DWORD, LPARAM );
typedef OLDFONTENUMPROCW FONTENUMPROCW;
typedef LPHW_PROFILE_INFOW LPHW_PROFILE_INFO;
typedef tagNEWTEXTMETRICA NEWTEXTMETRICA;
typedef _TIME_ZONE_INFORMATION TIME_ZONE_INFORMATION;
typedef void ( *LINEDDAPROC )( int, int, LPARAM );
typedef _TIME_ZONE_INFORMATION* PTIME_ZONE_INFORMATION;
typedef tagNEWTEXTMETRICA* LPNEWTEXTMETRICA;
typedef _TIME_ZONE_INFORMATION* LPTIME_ZONE_INFORMATION;
typedef FONTENUMPROCW FONTENUMPROC;
typedef _UUID_VECTOR UUID_VECTOR;
typedef _TIME_DYNAMIC_ZONE_INFORMATION DYNAMIC_TIME_ZONE_INFORMATION;
typedef _CONSOLE_SCREEN_BUFFER_INFO* PCONSOLE_SCREEN_BUFFER_INFO;
typedef _TIME_DYNAMIC_ZONE_INFORMATION* PDYNAMIC_TIME_ZONE_INFORMATION;
typedef tagEMRPOLYPOLYLINE* PEMRPOLYPOLYLINE;
typedef tagMETARECORD* LPMETARECORD;
typedef _SYSTEM_POWER_STATUS SYSTEM_POWER_STATUS;
typedef tagPOINTFX POINTFX;
typedef tagCANDIDATEFORM* NPCANDIDATEFORM;
typedef _SYSTEM_POWER_STATUS* LPSYSTEM_POWER_STATUS;
typedef _CONSOLE_SCREEN_BUFFER_INFO CONSOLE_SCREEN_BUFFER_INFO;
typedef tagMETAFILEPICT METAFILEPICT;
typedef tagACTCTXA ACTCTXA;
typedef tagEMRPOLYPOLYLINE16 EMRPOLYPOLYGON16;
typedef tagACTCTXA* PACTCTXA;
typedef _DEVICE_POWER_DESCRIPTOR* PDEVICE_POWER_DESCRIPTOR;
typedef tagACTCTXW* PACTCTXW;
typedef _numberfmtA NUMBERFMTA;
typedef _cpinfoexW* LPCPINFOEXW;
typedef ACTCTXW ACTCTX;
typedef tagCBT_CREATEWNDW* LPCBT_CREATEWNDW;
typedef tagRGBTRIPLE RGBTRIPLE;
typedef PACTCTXW PACTCTX;
typedef POUTLINETEXTMETRICW POUTLINETEXTMETRIC;
typedef _cpinfoexA* LPCPINFOEXA;
typedef LPCPINFOEXW LPCPINFOEX;
typedef const ACTCTXA* PCACTCTXA;
typedef const ACTCTXW* PCACTCTXW;
typedef LPCBT_CREATEWNDW LPCBT_CREATEWND;
typedef PCACTCTXW PCACTCTX;
typedef tagACTCTX_SECTION_KEYED_DATA_2600 ACTCTX_SECTION_KEYED_DATA_2600;
typedef _currencyfmtA* LPCURRENCYFMTA;
typedef NUMBERFMTW NUMBERFMT;
typedef tagACTCTX_SECTION_KEYED_DATA_2600* PACTCTX_SECTION_KEYED_DATA_2600;
typedef SHELLHOOKINFO* LPSHELLHOOKINFO;
typedef tagTEXTMETRICA* PTEXTMETRICA;
typedef tagWTSSESSION_NOTIFICATION WTSSESSION_NOTIFICATION;
typedef tagPIXELFORMATDESCRIPTOR PIXELFORMATDESCRIPTOR;
typedef const ACTCTX_SECTION_KEYED_DATA_2600* PCACTCTX_SECTION_KEYED_DATA_2600;
typedef _STORAGE_RPMB_FRAME_TYPE* PSTORAGE_RPMB_FRAME_TYPE;
typedef tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA* PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef tagTEXTMETRICW* NPTEXTMETRICW;
typedef _MINIDUMP_MISC_INFO_5 MINIDUMP_MISC_INFO_5;
typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA* PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef PATTERN* NPPATTERN;
typedef _DISCDLGSTRUCTW* LPDISCDLGSTRUCTW;
typedef tagEMRCREATEMONOBRUSH* PEMRCREATEMONOBRUSH;
typedef tagACTCTX_SECTION_KEYED_DATA ACTCTX_SECTION_KEYED_DATA;
typedef tagAXESLISTA* LPAXESLISTA;
typedef tagLOGPEN LOGPEN;
typedef tagACTCTX_SECTION_KEYED_DATA* PACTCTX_SECTION_KEYED_DATA;
typedef tagAXISINFOA AXISINFOA;
typedef _DISCDLGSTRUCTW DISCDLGSTRUCTW;
typedef tagLOGPEN* LPLOGPEN;
typedef const ACTCTX_SECTION_KEYED_DATA* PCACTCTX_SECTION_KEYED_DATA;
typedef tagEMRFORMAT EMRFORMAT;
typedef tagAXESLISTW AXESLISTW;
typedef _ACTIVATION_CONTEXT_BASIC_INFORMATION
    ACTIVATION_CONTEXT_BASIC_INFORMATION;
typedef tagAXISINFOW AXISINFOW;
typedef _ACTIVATION_CONTEXT_BASIC_INFORMATION* PACTIVATION_CONTEXT_BASIC_INFORMATION;
typedef _RGNDATAHEADER RGNDATAHEADER;
typedef value_entW VALENTW;
typedef tagEMRSCALEVIEWPORTEXTEX* PEMRSCALEVIEWPORTEXTEX;
typedef const _ACTIVATION_CONTEXT_BASIC_INFORMATION* PCACTIVATION_CONTEXT_BASIC_INFORMATION;
typedef DWORD ( *LPFNDEVCAPS )( LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE );
typedef tagNEWTEXTMETRICW NEWTEXTMETRICW;
typedef BOOL ( *PQUERYACTCTXW_FUNC )( DWORD, HANDLE, PVOID, ULONG, PVOID, SIZE_T, SIZE_T* );
typedef tagIMEMENUITEMINFOA* PIMEMENUITEMINFOA;
typedef _RGNDATA* PRGNDATA;
typedef tagNEWTEXTMETRICW* NPNEWTEXTMETRICW;
typedef BOOL ( *GEO_ENUMNAMEPROC )( PWSTR, LPARAM );
typedef tagWCRANGE WCRANGE;
typedef _FILE_BASIC_INFO FILE_BASIC_INFO;
typedef LONG GEOID;
typedef tagMETAHEADER* PMETAHEADER;
typedef _FILE_STANDARD_INFO FILE_STANDARD_INFO;
typedef _CONSOLE_SELECTION_INFO* PCONSOLE_SELECTION_INFO;
typedef tagEMRINVERTRGN* PEMRPAINTRGN;
typedef _FILE_STANDARD_INFO* PFILE_STANDARD_INFO;
typedef tagGCP_RESULTSW GCP_RESULTSW;
typedef GCP_RESULTSW GCP_RESULTS;
typedef _FILE_NAME_INFO FILE_NAME_INFO;
typedef _CONSOLE_SELECTION_INFO CONSOLE_SELECTION_INFO;
typedef _FILE_NAME_INFO* PFILE_NAME_INFO;
typedef tagEMRFRAMERGN EMRFRAMERGN;
typedef _FILE_CASE_SENSITIVE_INFO FILE_CASE_SENSITIVE_INFO;
typedef _FILE_CASE_SENSITIVE_INFO* PFILE_CASE_SENSITIVE_INFO;
typedef LPGCP_RESULTSW LPGCP_RESULTS;
typedef _FILE_RENAME_INFO FILE_RENAME_INFO;
typedef _FILE_RENAME_INFO* PFILE_RENAME_INFO;
typedef tagAXISINFOA* PAXISINFOA;
typedef _FILE_ALLOCATION_INFO FILE_ALLOCATION_INFO;
typedef _FILE_ALLOCATION_INFO* PFILE_ALLOCATION_INFO;
typedef tagLOGBRUSH32* PLOGBRUSH32;
typedef _FILE_END_OF_FILE_INFO FILE_END_OF_FILE_INFO;
typedef LPAXISINFOW LPAXISINFO;
typedef _FILE_END_OF_FILE_INFO* PFILE_END_OF_FILE_INFO;
typedef long FXPT16DOT16;
typedef _FILE_STREAM_INFO FILE_STREAM_INFO;
typedef _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE
    DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE;
typedef tagEMRSETVIEWPORTORGEX* PEMRSETVIEWPORTORGEX;
typedef _TRACE_PERIODIC_CAPTURE_STATE_INFO* PTRACE_PERIODIC_CAPTURE_STATE_INFO;
typedef _FILE_COMPRESSION_INFO FILE_COMPRESSION_INFO;
typedef _FILE_COMPRESSION_INFO* PFILE_COMPRESSION_INFO;
typedef _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION
    DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION;
typedef _FILE_ATTRIBUTE_TAG_INFO FILE_ATTRIBUTE_TAG_INFO;
typedef DWORD LGRPID;
typedef _FILE_DISPOSITION_INFO FILE_DISPOSITION_INFO;
typedef tagPOLYTEXTW* PPOLYTEXTW;
typedef tagEMRPOLYLINE EMRPOLYLINETO;
typedef _FILE_DISPOSITION_INFO* PFILE_DISPOSITION_INFO;
typedef tagFONTSIGNATURE* PFONTSIGNATURE;
typedef _FILE_DISPOSITION_INFO_EX FILE_DISPOSITION_INFO_EX;
typedef _MODEMDEVCAPS* LPMODEMDEVCAPS;
typedef _FILE_DISPOSITION_INFO_EX* PFILE_DISPOSITION_INFO_EX;
typedef tagEMRPOLYLINE16* PEMRPOLYLINE16;
typedef tagCHARSETINFO* NPCHARSETINFO;
typedef _FILE_ID_BOTH_DIR_INFO FILE_ID_BOTH_DIR_INFO;
typedef _FILE_ID_BOTH_DIR_INFO* PFILE_ID_BOTH_DIR_INFO;
typedef LPLOGCOLORSPACEW LPLOGCOLORSPACE;
typedef _ABC* NPABC;
typedef _FILE_FULL_DIR_INFO FILE_FULL_DIR_INFO;
typedef _NETRESOURCEW* LPNETRESOURCEW;
typedef tagEMRSETPIXELV EMRSETPIXELV;
typedef _FILE_FULL_DIR_INFO* PFILE_FULL_DIR_INFO;
typedef NEWTEXTMETRICEXW NEWTEXTMETRICEX;
typedef _PRIORITY_HINT PRIORITY_HINT;
typedef tagIMEMENUITEMINFOW* LPIMEMENUITEMINFOW;
typedef _NETRESOURCEW NETRESOURCEW;
typedef _ABCFLOAT* LPABCFLOAT;
typedef _FILE_IO_PRIORITY_HINT_INFO FILE_IO_PRIORITY_HINT_INFO;
typedef BOOL ( *TIMEFMT_ENUMPROCEX )( LPWSTR, LPARAM );
typedef tagBITMAPINFOHEADER* PBITMAPINFOHEADER;
typedef _FILE_IO_PRIORITY_HINT_INFO* PFILE_IO_PRIORITY_HINT_INFO;
typedef _ABCFLOAT* PABCFLOAT;
typedef _FILE_ALIGNMENT_INFO FILE_ALIGNMENT_INFO;
typedef tagBITMAP* LPBITMAP;
typedef _FILE_ALIGNMENT_INFO* PFILE_ALIGNMENT_INFO;
typedef tagEMRFILLPATH* PEMRFILLPATH;
typedef _TRACE_PROFILE_INTERVAL* PTRACE_PROFILE_INTERVAL;
typedef _SERVICE_TABLE_ENTRYW SERVICE_TABLE_ENTRYW;
typedef _FILE_STORAGE_INFO* PFILE_STORAGE_INFO;
typedef _FILE_ID_INFO FILE_ID_INFO;
typedef BOOL ( *CODEPAGE_ENUMPROCA )( LPSTR );
typedef tagRGBQUAD RGBQUAD;
typedef _FILE_ID_INFO* PFILE_ID_INFO;
typedef tagEMRNAMEDESCAPE EMRNAMEDESCAPE;
typedef _FILE_ID_EXTD_DIR_INFO FILE_ID_EXTD_DIR_INFO;
typedef tagBITMAPINFO* PBITMAPINFO;
typedef _FILE_ID_EXTD_DIR_INFO* PFILE_ID_EXTD_DIR_INFO;
typedef tagRAWINPUTHEADER* LPRAWINPUTHEADER;
typedef _OUTLINETEXTMETRICW* LPOUTLINETEXTMETRICW;
typedef tagEMRSETICMPROFILE EMRSETICMPROFILEA;
typedef tagBITMAPCOREINFO* LPBITMAPCOREINFO;
typedef tagBITMAPFILEHEADER BITMAPFILEHEADER;
typedef tagRAWINPUTHEADER* PRAWINPUTHEADER;
typedef _MOUSE_EVENT_RECORD* PMOUSE_EVENT_RECORD;
typedef tagEMRSETICMPROFILE* PEMRSETICMPROFILE;
typedef tagPOLYTEXTA* LPPOLYTEXTA;
typedef tagEMRCREATECOLORSPACEW* PEMRCREATECOLORSPACEW;
typedef tagRAWHID* PRAWHID;
typedef _FILE_REMOTE_PROTOCOL_INFO FILE_REMOTE_PROTOCOL_INFO;
typedef _FILE_REMOTE_PROTOCOL_INFO* PFILE_REMOTE_PROTOCOL_INFO;
typedef tagTEXTMETRICA* NPTEXTMETRICA;
typedef _FILE_ID_TYPE FILE_ID_TYPE;
typedef tagRECONVERTSTRING RECONVERTSTRING;
typedef tagPIXELFORMATDESCRIPTOR* LPPIXELFORMATDESCRIPTOR;
typedef tagCOLORCORRECTPALETTE EMRCOLORCORRECTPALETTE;
typedef _FILE_ID_TYPE* PFILE_ID_TYPE;
typedef tagRAWHID* LPRAWHID;
typedef _DEVICE_MEDIA_INFO* PDEVICE_MEDIA_INFO;
typedef FILE_ID_DESCRIPTOR FILE_ID_DESCRIPTOR;
typedef _CONSOLE_HISTORY_INFO* PCONSOLE_HISTORY_INFO;
typedef FILE_ID_DESCRIPTOR* LPFILE_ID_DESCRIPTOR;
typedef tagLOCALESIGNATURE LOCALESIGNATURE;
typedef tagEMRPOLYLINE16* PEMRPOLYLINETO16;
typedef _DRAWPATRECT* PDRAWPATRECT;
typedef _MAT2* LPMAT2;
typedef _PSINJECTDATA PSINJECTDATA;
typedef tagPOINTFX* LPPOINTFX;
typedef _PSINJECTDATA* PPSINJECTDATA;
typedef tagEMRPOLYDRAW16 EMRPOLYDRAW16;
typedef _PSFEATURE_OUTPUT PSFEATURE_OUTPUT;
typedef _CHAR_INFO CHAR_INFO;
typedef _PSFEATURE_OUTPUT* PPSFEATURE_OUTPUT;
typedef _OUTLINETEXTMETRICA* LPOUTLINETEXTMETRICA;
typedef _PSFEATURE_CUSTPAPER PSFEATURE_CUSTPAPER;
typedef _MINIDUMP_STREAM_TYPE MINIDUMP_STREAM_TYPE;
typedef _PSFEATURE_CUSTPAPER* PPSFEATURE_CUSTPAPER;
typedef tagXFORM XFORM;
typedef _OUTLINETEXTMETRICA* POUTLINETEXTMETRICA;
typedef BITMAPV5HEADER* PBITMAPV5HEADER;
typedef tagXFORM* PXFORM;
typedef _OUTLINETEXTMETRICW OUTLINETEXTMETRICW;
typedef tagXFORM* LPXFORM;
typedef tagEMRARC* PEMRARC;
typedef tagBITMAP BITMAP;
typedef tagBITMAP* PBITMAP;
typedef _OUTLINETEXTMETRICW* NPOUTLINETEXTMETRICW;
typedef tagBITMAP* NPBITMAP;
typedef _DEVICE_TRIM_DESCRIPTOR* PDEVICE_TRIM_DESCRIPTOR;
typedef tagRGBTRIPLE* PRGBTRIPLE;
typedef tagRGBTRIPLE* NPRGBTRIPLE;
typedef _SERVICE_STATUS_PROCESS* LPSERVICE_STATUS_PROCESS;
typedef tagRGBTRIPLE* LPRGBTRIPLE;
typedef _DEVICE_TRIM_DESCRIPTOR DEVICE_TRIM_DESCRIPTOR;
typedef RGBQUAD* LPRGBQUAD;
typedef _MINIDUMP_TYPE MINIDUMP_TYPE;
typedef LONG LCSCSTYPE;
typedef long* LPFXPT16DOT16;
typedef _STORAGE_MINIPORT_DESCRIPTOR* PSTORAGE_MINIPORT_DESCRIPTOR;
typedef long FXPT2DOT30;
typedef long* LPFXPT2DOT30;
typedef _SERVICE_TRIGGER* PSERVICE_TRIGGER;
typedef _STORAGE_MINIPORT_DESCRIPTOR STORAGE_MINIPORT_DESCRIPTOR;
typedef CIEXYZ* LPCIEXYZ;
typedef tagABORTPATH EMRABORTPATH;
typedef BOOL ( *PROPENUMPROCW )( HWND, LPCWSTR, HANDLE );
typedef void ( *SENDASYNCPROC )( HWND, UINT, ULONG_PTR, LRESULT );
typedef PVOID HDEVNOTIFY;
typedef HDEVNOTIFY* PHDEVNOTIFY;
typedef tagLOGCOLORSPACEA LOGCOLORSPACEA;
typedef tagEMRTRANSPARENTBLT* PEMRTRANSPARENTBLT;
typedef _SERVICE_FAILURE_ACTIONSW SERVICE_FAILURE_ACTIONSW;
typedef tagLOGCOLORSPACEA* LPLOGCOLORSPACEA;
typedef LOGCOLORSPACEW LOGCOLORSPACE;
typedef tagEMRSELECTCLIPPATH EMRSETBKMODE;
typedef tagBITMAPCOREHEADER BITMAPCOREHEADER;
typedef tagBITMAPCOREHEADER* LPBITMAPCOREHEADER;
typedef HPOWERNOTIFY* PHPOWERNOTIFY;
typedef tagBITMAPCOREHEADER* PBITMAPCOREHEADER;
typedef SERVICE_STATUS_HANDLE__* SERVICE_STATUS_HANDLE;
typedef _BLENDFUNCTION BLENDFUNCTION;
typedef tagEMRSELECTCLIPPATH EMRSETROP2;
typedef tagBITMAPINFOHEADER* LPBITMAPINFOHEADER;
typedef void* I_RPC_HANDLE;
typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
typedef RPC_BINDING_HANDLE handle_t;
typedef BITMAPV4HEADER BITMAPV4HEADER;
typedef BITMAPV4HEADER* LPBITMAPV4HEADER;
typedef BITMAPV4HEADER* PBITMAPV4HEADER;
typedef tagEMREOF* PEMREOF;
typedef tagKBDLLHOOKSTRUCT* PKBDLLHOOKSTRUCT;
typedef BITMAPV5HEADER BITMAPV5HEADER;
typedef tagCWPRETSTRUCT* LPCWPRETSTRUCT;
typedef BITMAPV5HEADER* LPBITMAPV5HEADER;
typedef _NDR_SCONTEXT* NDR_SCONTEXT;
typedef tagBITMAPINFO BITMAPINFO;
typedef RPC_STATS_VECTOR RPC_STATS_VECTOR;
typedef tagENUMTEXTMETRICW ENUMTEXTMETRICW;
typedef tagBITMAPCOREINFO BITMAPCOREINFO;
typedef tagEMRSETTEXTCOLOR* PEMRSETBKCOLOR;
typedef tagBITMAPFILEHEADER* PBITMAPFILEHEADER;
typedef tagFONTSIGNATURE FONTSIGNATURE;
typedef tagABORTPATH* PEMRCLOSEFIGURE;
typedef tagFONTSIGNATURE* LPFONTSIGNATURE;
typedef _SERVICE_TIMECHANGE_INFO* PSERVICE_TIMECHANGE_INFO;
typedef tagCHARSETINFO CHARSETINFO;
typedef tagABORTPATH* PEMRSAVEDC;
typedef tagCHARSETINFO* PCHARSETINFO;
typedef tagCHARSETINFO* LPCHARSETINFO;
typedef _STORAGE_CRYPTO_ALGORITHM_ID STORAGE_CRYPTO_ALGORITHM_ID;
typedef tagLOCALESIGNATURE* PLOCALESIGNATURE;
typedef tagEMRSETPALETTEENTRIES* PEMRSETPALETTEENTRIES;
typedef tagLOCALESIGNATURE* LPLOCALESIGNATURE;
typedef tagEVENTMSG* PEVENTMSG;
typedef _QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIGA;
typedef _STORAGE_CRYPTO_KEY_SIZE* PSTORAGE_CRYPTO_KEY_SIZE;
typedef tagHANDLETABLE* PHANDLETABLE;
typedef tagHANDLETABLE* LPHANDLETABLE;
typedef tagCWPRETSTRUCT* PCWPRETSTRUCT;
typedef tagCWPSTRUCT* NPCWPSTRUCT;
typedef tagMETAFILEPICT* LPMETAFILEPICT;
typedef tagAXESLISTA AXESLISTA;
typedef tagMETAHEADER METAHEADER;
typedef _CLASS_MEDIA_CHANGE_CONTEXT* PCLASS_MEDIA_CHANGE_CONTEXT;
typedef tagMETAHEADER* LPMETAHEADER;
typedef _WGLSWAP WGLSWAP;
typedef BOOL ( *ABORTPROC )( HDC, int );
typedef tagENHMETARECORD* PENHMETARECORD;
typedef tagENHMETARECORD* LPENHMETARECORD;
typedef void MENUTEMPLATEW;
typedef MENUTEMPLATEW MENUTEMPLATE;
typedef tagENHMETAHEADER ENHMETAHEADER;
typedef tagENHMETAHEADER* PENHMETAHEADER;
typedef _STORAGE_SET_TYPE STORAGE_SET_TYPE;
typedef tagENHMETAHEADER* LPENHMETAHEADER;
typedef WCHAR BCHAR;
typedef _TRIVERTEX* PTRIVERTEX;
typedef tagTEXTMETRICA* LPTEXTMETRICA;
typedef _SERVICE_DESCRIPTIONA* LPSERVICE_DESCRIPTIONA;
typedef tagEMRCREATECOLORSPACEW EMRCREATECOLORSPACEW;
typedef TEXTMETRICW TEXTMETRIC;
typedef PTEXTMETRICW PTEXTMETRIC;
typedef tagEMRGLSBOUNDEDRECORD* PEMRGLSBOUNDEDRECORD;
typedef NPTEXTMETRICW NPTEXTMETRIC;
typedef tagEMRGLSBOUNDEDRECORD EMRGLSBOUNDEDRECORD;
typedef tagNEWTEXTMETRICA* PNEWTEXTMETRICA;
typedef tagENUMLOGFONTEXDVA* PENUMLOGFONTEXDVA;
typedef tagNEWTEXTMETRICA* NPNEWTEXTMETRICA;
typedef STORAGE_BREAK_RESERVATION_REQUEST* PSTORAGE_BREAK_RESERVATION_REQUEST;
typedef tagEMRPIXELFORMAT* PEMRPIXELFORMAT;
typedef tagWNDCLASSEXA WNDCLASSEXA;
typedef tagNEWTEXTMETRICW* PNEWTEXTMETRICW;
typedef _POINTFLOAT* PPOINTFLOAT;
typedef int ( *ENHMFENUMPROC )( HDC, HANDLETABLE*, const ENHMETARECORD*, int, LPARAM );
typedef _RPC_NOTIFICATION_TYPES RPC_NOTIFICATION_TYPES;
typedef NEWTEXTMETRICW NEWTEXTMETRIC;
typedef SERVICE_FAILURE_ACTIONSW SERVICE_FAILURE_ACTIONS;
typedef PNEWTEXTMETRICW PNEWTEXTMETRIC;
typedef _POINTFLOAT POINTFLOAT;
typedef NPNEWTEXTMETRICW NPNEWTEXTMETRIC;
typedef LPNEWTEXTMETRICW LPNEWTEXTMETRIC;
typedef LRESULT ( *WNDPROC )( HWND, UINT, WPARAM, LPARAM );
typedef _GLYPHMETRICSFLOAT* PGLYPHMETRICSFLOAT;
typedef tagWNDCLASSEXW* NPWNDCLASSEXW;
typedef tagWNDCLASSEXW WNDCLASSEXW;
typedef WNDCLASSEXW WNDCLASSEX;
typedef _ABC* PABC;
typedef tagPELARRAY PELARRAY;
typedef EDITWORDBREAKPROCW EDITWORDBREAKPROC;
typedef NPWNDCLASSEXW NPWNDCLASSEX;
typedef tagPELARRAY* NPPELARRAY;
typedef tagEMRSELECTCLIPPATH* PEMRSETROP2;
typedef tagPELARRAY* LPPELARRAY;
typedef _ABCFLOAT* NPABCFLOAT;
typedef NAMEENUMPROCA WINSTAENUMPROCA;
typedef tagLOGBRUSH* PLOGBRUSH;
typedef tagLOGBRUSH* NPLOGBRUSH;
typedef tagLOGBRUSH32 LOGBRUSH32;
typedef tagLOGBRUSH32* NPLOGBRUSH32;
typedef tagLOGBRUSH32* LPLOGBRUSH32;
typedef _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR
    STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR;
typedef PATTERN* PPATTERN;
typedef PATTERN* LPPATTERN;
typedef _RDR_CALLOUT_STATE RDR_CALLOUT_STATE;
typedef void ( *I_RpcFreeCalloutStateFn )( RDR_CALLOUT_STATE* );
typedef tagLOGPEN* PLOGPEN;
typedef _SC_ACTION SC_ACTION;
typedef tagLOGPEN* NPLOGPEN;
typedef tagEXTLOGPEN EXTLOGPEN;
typedef _STORAGE_FAILURE_PREDICTION_CONFIG STORAGE_FAILURE_PREDICTION_CONFIG;
typedef tagEXTLOGPEN* PEXTLOGPEN;
typedef _MINIDUMP_PROCESS_VM_COUNTERS_2 MINIDUMP_PROCESS_VM_COUNTERS_2;
typedef MINIDUMP_PROCESS_VM_COUNTERS_2 MINIDUMP_PROCESS_VM_COUNTERS_N;
typedef tagEXTLOGPEN* NPEXTLOGPEN;
typedef tagEXTLOGPEN* LPEXTLOGPEN;
typedef tagEMRGRADIENTFILL* PEMRGRADIENTFILL;
typedef RPC_ENDPOINT_TEMPLATEW RPC_ENDPOINT_TEMPLATEW;
typedef tagSTYLEBUFW* PSTYLEBUFW;
typedef PSTYLEBUFW PSTYLEBUF;
typedef tagEXTLOGPEN32* PEXTLOGPEN32;
typedef tagEXTLOGPEN32* LPEXTLOGPEN32;
typedef tagEMRPOLYTEXTOUTA* PEMRPOLYTEXTOUTW;
typedef pvalueW PVALUEW;
typedef STYLEBUFW STYLEBUF;
typedef _RPC_SECURITY_QOS RPC_SECURITY_QOS;
typedef tagPALETTEENTRY* PPALETTEENTRY;
typedef tagPALETTEENTRY* LPPALETTEENTRY;
typedef tagEMRSTRETCHBLT EMRSTRETCHBLT;
typedef _MINIDUMP_HANDLE_OPERATION_LIST* PMINIDUMP_HANDLE_OPERATION_LIST;
typedef tagCANDIDATELIST* NPCANDIDATELIST;
typedef tagLOGPALETTE* PLOGPALETTE;
typedef tagLOGPALETTE* NPLOGPALETTE;
typedef tagEMRPOLYPOLYLINE16 EMRPOLYPOLYLINE16;
typedef tagLOGFONTA* PLOGFONTA;
typedef tagTTPOLYGONHEADER* LPTTPOLYGONHEADER;
typedef tagLOGFONTA* NPLOGFONTA;
typedef tagEMRPOLYPOLYLINE16* PEMRPOLYPOLYLINE16;
typedef tagLOGFONTW* PLOGFONTW;
typedef tagEMRSETARCDIRECTION* PEMRSETARCDIRECTION;
typedef LOGFONTW LOGFONT;
typedef tagEMRARC* PEMRPIE;
typedef PLOGFONTW PLOGFONT;
typedef SERVICE_DIRECTORY_TYPE SERVICE_DIRECTORY_TYPE;
typedef NPLOGFONTW NPLOGFONT;
typedef tagEMRSETTEXTCOLOR EMRSETBKCOLOR;
typedef tagENUMLOGFONTA* LPENUMLOGFONTA;
typedef tagEMREXTTEXTOUTA* PEMREXTTEXTOUTA;
typedef tagEMREXTSELECTCLIPRGN* PEMREXTSELECTCLIPRGN;
typedef LONG LSTATUS;
typedef tagENUMLOGFONTW* LPENUMLOGFONTW;
typedef tagRECONVERTSTRING* LPRECONVERTSTRING;
typedef LPENUMLOGFONTW LPENUMLOGFONT;
typedef tagEMRPOLYTEXTOUTA* PEMRPOLYTEXTOUTA;
typedef tagEMRSELECTPALETTE* PEMRSELECTPALETTE;
typedef tagEMREXTTEXTOUTA* PEMREXTTEXTOUTW;
typedef tagENUMLOGFONTEXW ENUMLOGFONTEXW;
typedef tagEMRCREATEDIBPATTERNBRUSHPT* PEMRCREATEDIBPATTERNBRUSHPT;
typedef ENUMLOGFONTEXW ENUMLOGFONTEX;
typedef LPENUMLOGFONTEXW LPENUMLOGFONTEX;
typedef tagEMRGLSRECORD EMRGLSRECORD;
typedef tagPANOSE* LPPANOSE;
typedef _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION
    DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION;
typedef tagEXTLOGFONTA* PEXTLOGFONTA;
typedef tagEXTLOGFONTA* NPEXTLOGFONTA;
typedef tagEMRSCALEVIEWPORTEXTEX EMRSCALEWINDOWEXTEX;
typedef SERVICE_NOTIFY_2W SERVICE_NOTIFY_2;
typedef tagEMRSETDIBITSTODEVICE EMRSETDIBITSTODEVICE;
typedef tagREGISTERWORDW REGISTERWORDW;
typedef PEXTLOGFONTW PEXTLOGFONT;
typedef tagEMRFILLRGN* PEMRFILLRGN;
typedef tagEMRINVERTRGN EMRPAINTRGN;
typedef LPEXTLOGFONTW LPEXTLOGFONT;
typedef _CONSOLE_FONT_INFOEX CONSOLE_FONT_INFOEX;
typedef tagREGISTERWORDW* NPREGISTERWORDW;
typedef tagEMREXTSELECTCLIPRGN EMREXTSELECTCLIPRGN;
typedef _devicemodeA DEVMODEA;
typedef _devicemodeA* NPDEVMODEA;
typedef _STORAGE_HOTPLUG_INFO* PSTORAGE_HOTPLUG_INFO;
typedef _devicemodeA* LPDEVMODEA;
typedef tagAXISINFOA* LPAXISINFOA;
typedef tagEMREXTCREATEPEN* PEMREXTCREATEPEN;
typedef tagEMRCREATEPEN* PEMRCREATEPEN;
typedef _STORAGE_HOTPLUG_INFO STORAGE_HOTPLUG_INFO;
typedef _devicemodeW* PDEVMODEW;
typedef tagEMRSETVIEWPORTORGEX EMRSETBRUSHORGEX;
typedef PDEVMODEW PDEVMODE;
typedef tagEMRSETVIEWPORTORGEX EMRSETWINDOWORGEX;
typedef _DISPLAY_DEVICEA DISPLAY_DEVICEA;
typedef tagEMRSETVIEWPORTEXTEX* PEMRSETWINDOWEXTEX;
typedef _DISPLAY_DEVICEA* PDISPLAY_DEVICEA;
typedef void ( *PFN_SC_NOTIFY_CALLBACK )( PVOID );
typedef tagEMRSETVIEWPORTEXTEX* PEMRSETVIEWPORTEXTEX;
typedef tagPOLYTEXTW* LPPOLYTEXTW;
typedef PDISPLAY_DEVICEW PDISPLAY_DEVICE;
typedef tagEMRPOLYLINE* PEMRPOLYLINETO;
typedef tagEMRPOLYLINE16 EMRPOLYGON16;
typedef LPPOLYTEXTW LPPOLYTEXT;
typedef DISPLAYCONFIG_RATIONAL DISPLAYCONFIG_RATIONAL;
typedef tagEMRPOLYLINE16 EMRPOLYBEZIER16;
typedef tagIMECHARPOSITION* NPIMECHARPOSITION;
typedef _ABC ABC;
typedef BOOL ( *DATEFMT_ENUMPROCEXEX )( LPWSTR, CALID, LPARAM );
typedef _NETRESOURCEA NETRESOURCEA;
typedef _SERVICE_CONTROL_STATUS_REASON_PARAMSA
    SERVICE_CONTROL_STATUS_REASON_PARAMSA;
typedef tagEMRFILLPATH EMRSTROKEPATH;
typedef DISPLAYCONFIG_SET_TARGET_PERSISTENCE
    DISPLAYCONFIG_SET_TARGET_PERSISTENCE;
typedef _RPC_IF_ID RPC_IF_ID;
typedef DISPLAYCONFIG_ROTATION DISPLAYCONFIG_ROTATION;
typedef DISPLAYCONFIG_MODE_INFO_TYPE DISPLAYCONFIG_MODE_INFO_TYPE;
typedef BOOL ( *UILANGUAGE_ENUMPROCA )( LPSTR, LONG_PTR );
typedef tagEMRFILLPATH EMRSTROKEANDFILLPATH;
typedef DISPLAYCONFIG_PIXELFORMAT DISPLAYCONFIG_PIXELFORMAT;
typedef tagEMREXCLUDECLIPRECT* PEMRINTERSECTCLIPRECT;
typedef _DISPLAYCONFIG_COLOR_ENCODING DISPLAYCONFIG_COLOR_ENCODING;
typedef DISPLAYCONFIG_SOURCE_MODE DISPLAYCONFIG_SOURCE_MODE;
typedef tagEMREXCLUDECLIPRECT* PEMREXCLUDECLIPRECT;
typedef tagINPUT* PINPUT;
typedef tagEMRANGLEARC* PEMRANGLEARC;
typedef NPOUTLINETEXTMETRICW NPOUTLINETEXTMETRIC;
typedef _WINDOW_BUFFER_SIZE_RECORD* PWINDOW_BUFFER_SIZE_RECORD;
typedef tagENUMTEXTMETRICW* PENUMTEXTMETRICW;
typedef tagEMRANGLEARC EMRANGLEARC;
typedef tagEMRPOLYLINE* PEMRPOLYBEZIER;
typedef tagINPUT* LPINPUT;
typedef tagPOLYTEXTA* NPPOLYTEXTA;
typedef SERVICE_REGISTRY_STATE_TYPE SERVICE_REGISTRY_STATE_TYPE;
typedef tagHARDWAREINPUT HARDWAREINPUT;
typedef USHORT COLOR16;
typedef tagEMRPOLYLINE* PEMRPOLYLINE;
typedef DWORD POINTER_INPUT_TYPE;
typedef DISPLAYCONFIG_PATH_SOURCE_INFO DISPLAYCONFIG_PATH_SOURCE_INFO;
typedef tagTOUCHINPUT TOUCHINPUT;
typedef ACCESS_MASK REGSAM;
typedef UINT32 POINTER_FLAGS;
typedef NPREGISTERWORDW NPREGISTERWORD;
typedef DISPLAYCONFIG_PATH_INFO DISPLAYCONFIG_PATH_INFO;
typedef _GRADIENT_RECT GRADIENT_RECT;
typedef DISPLAYCONFIG_TOPOLOGY_ID DISPLAYCONFIG_TOPOLOGY_ID;
typedef tagEMRPOLYDRAW EMRPOLYDRAW;
typedef _CONSOLE_FONT_INFO CONSOLE_FONT_INFO;
typedef HKL* LPHKL;
typedef DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS
    DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS;
typedef tagEMRROUNDRECT* PEMRROUNDRECT;
typedef _RPC_SECURITY_QOS_V2_W RPC_SECURITY_QOS_V2_W;
typedef tagEMRROUNDRECT EMRROUNDRECT;
typedef tagEMRARC EMRCHORD;
typedef DISPLAYCONFIG_ADAPTER_NAME DISPLAYCONFIG_ADAPTER_NAME;
typedef _SERVICE_START_REASON* PSERVICE_START_REASON;
typedef DISPLAYCONFIG_TARGET_BASE_TYPE DISPLAYCONFIG_TARGET_BASE_TYPE;
typedef tagEMRARC EMRARCTO;
typedef _REFS_SMR_VOLUME_GC_PARAMETERS REFS_SMR_VOLUME_GC_PARAMETERS;
typedef NAMEENUMPROCW DESKTOPENUMPROCW;
typedef DESKTOPENUMPROCW DESKTOPENUMPROC;
typedef DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION
    DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION;
typedef tagHELPINFO HELPINFO;
typedef tagCBT_CREATEWNDA* LPCBT_CREATEWNDA;
typedef _TRACE_LOGFILE_HEADER TRACE_LOGFILE_HEADER;
typedef _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO
    DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO;
typedef BOOL ( *GRAYSTRINGPROC )( HDC, LPARAM, int );
typedef _DISPLAYCONFIG_SDR_WHITE_LEVEL DISPLAYCONFIG_SDR_WHITE_LEVEL;
typedef BOOL ( *PROPENUMPROCA )( HWND, LPCSTR, HANDLE );
typedef tagSTYLEBUFW* LPSTYLEBUFW;
typedef LPSTYLEBUFW LPSTYLEBUF;
typedef tagRID_DEVICE_INFO_MOUSE RID_DEVICE_INFO_MOUSE;
typedef _RGNDATAHEADER* PRGNDATAHEADER;
typedef tagPOINTER_TOUCH_INFO POINTER_TOUCH_INFO;
typedef tagMONITORINFO* LPMONITORINFO;
typedef _RGNDATA* NPRGNDATA;
typedef PROPENUMPROCW PROPENUMPROC;
typedef tagMENUITEMINFOW MENUITEMINFOW;
typedef const MENUITEMINFOW* LPCMENUITEMINFOW;
typedef LPCMENUITEMINFOW LPCMENUITEMINFO;
typedef IMEMENUITEMINFOW IMEMENUITEMINFO;
typedef _ABC* LPABC;
typedef tagIMECHARPOSITION IMECHARPOSITION;
typedef tagCWPRETSTRUCT* NPCWPRETSTRUCT;
typedef _OUTLINETEXTMETRICA OUTLINETEXTMETRICA;
typedef tagSCROLLINFO SCROLLINFO;
typedef _OUTLINETEXTMETRICA* NPOUTLINETEXTMETRICA;
typedef tagKBDLLHOOKSTRUCT KBDLLHOOKSTRUCT;
typedef tagMSLLHOOKSTRUCT* LPMSLLHOOKSTRUCT;
typedef _TRACE_PROFILE_INTERVAL TRACE_PROFILE_INTERVAL;
typedef OUTLINETEXTMETRICW OUTLINETEXTMETRIC;
typedef LPOUTLINETEXTMETRICW LPOUTLINETEXTMETRIC;
typedef tagPOLYTEXTA POLYTEXTA;
typedef tagMSGBOXPARAMSW MSGBOXPARAMSW;
typedef tagKEYBDINPUT KEYBDINPUT;
typedef tagPOLYTEXTW* NPPOLYTEXTW;
typedef POLYTEXTW POLYTEXT;
typedef PPOLYTEXTW PPOLYTEXT;
typedef tagMENUITEMINFOA* LPMENUITEMINFOA;
typedef NPPOLYTEXTW NPPOLYTEXT;
typedef int ( *EDITWORDBREAKPROCA )( LPSTR, int, int, int );
typedef _MAT2 MAT2;
typedef _GLYPHMETRICS GLYPHMETRICS;
typedef _currencyfmtW* LPCURRENCYFMTW;
typedef LPCURRENCYFMTW LPCURRENCYFMT;
typedef _GLYPHMETRICS* LPGLYPHMETRICS;
typedef tagCWPSTRUCT* PCWPSTRUCT;
typedef tagEMRSETCOLORSPACE EMRSETCOLORSPACE;
typedef tagTTPOLYCURVE* LPTTPOLYCURVE;
typedef tagALTTABINFO ALTTABINFO;
typedef tagTTPOLYGONHEADER TTPOLYGONHEADER;
typedef tagEMRSETCOLORSPACE* PEMRSELECTCOLORSPACE;
typedef tagKEYBDINPUT* LPKEYBDINPUT;
typedef tagMOUSEINPUT* LPMOUSEINPUT;
typedef tagGCP_RESULTSA* LPGCP_RESULTSA;
typedef tagRAWINPUTDEVICE RAWINPUTDEVICE;
typedef const RAWINPUTDEVICE* PCRAWINPUTDEVICE;
typedef _WGLSWAP* LPWGLSWAP;
typedef _RASTERIZER_STATUS RASTERIZER_STATUS;
typedef _RASTERIZER_STATUS* LPRASTERIZER_STATUS;
typedef tagEMRSETICMPROFILE* PEMRSETICMPROFILEW;
typedef tagCOLORMATCHTOTARGET EMRCOLORMATCHTOTARGET;
typedef tagEVENTMSG* PEVENTMSGMSG;
typedef tagEMRGLSRECORD* PEMRGLSRECORD;
typedef tagMENUBARINFO* PMENUBARINFO;
typedef int ( *GOBJENUMPROC )( LPVOID, LPARAM );
typedef UINT ( *LPFNDEVMODE )( HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT );
typedef tagRID_DEVICE_INFO_KEYBOARD RID_DEVICE_INFO_KEYBOARD;
typedef LPMULTIKEYHELPW LPMULTIKEYHELP;
typedef tagUSAGE_PROPERTIES* PUSAGE_PROPERTIES;
typedef tagWCRANGE* PWCRANGE;
typedef _GLYPHMETRICSFLOAT* LPGLYPHMETRICSFLOAT;
typedef tagWCRANGE* LPWCRANGE;
typedef tagGLYPHSET* PGLYPHSET;
typedef SERVICE_NOTIFY_2W* PSERVICE_NOTIFYW;
typedef HELPWININFOW HELPWININFO;
typedef tagDESIGNVECTOR* PDESIGNVECTOR;
typedef tagMENUITEMINFOA MENUITEMINFOA;
typedef const MENUITEMINFOA* LPCMENUITEMINFOA;
typedef tagDESIGNVECTOR* LPDESIGNVECTOR;
typedef NAMEENUMPROCA DESKTOPENUMPROCA;
typedef SERVICE_NOTIFYW SERVICE_NOTIFY;
typedef MENUITEMINFOW MENUITEMINFO;
typedef tagPOINTER_DEVICE_PROPERTY POINTER_DEVICE_PROPERTY;
typedef tagAXISINFOW* PAXISINFOW;
typedef AXISINFOW AXISINFO;
typedef void ( *TIMERPROC )( HWND, UINT, UINT_PTR, DWORD );
typedef PAXISINFOW PAXISINFO;
typedef tagEMRALPHABLEND* PEMRALPHABLEND;
typedef tagAXESLISTA* PAXESLISTA;
typedef tagAXESLISTW* PAXESLISTW;
typedef UINT32 TOUCH_FLAGS;
typedef _EVENT_FILTER_DESCRIPTOR* PEVENT_FILTER_DESCRIPTOR;
typedef _FILE_LEVEL_TRIM_OUTPUT* PFILE_LEVEL_TRIM_OUTPUT;
typedef AXESLISTW AXESLIST;
typedef tagEMRPOLYTEXTOUTA EMRPOLYTEXTOUTW;
typedef PAXESLISTW PAXESLIST;
typedef tagDELETEITEMSTRUCT* LPDELETEITEMSTRUCT;
typedef tagEMRBITBLT EMRBITBLT;
typedef tagENUMLOGFONTEXDVA ENUMLOGFONTEXDVA;
typedef tagEMRPOLYPOLYLINE EMRPOLYPOLYLINE;
typedef tagENUMLOGFONTEXDVW* LPENUMLOGFONTEXDVW;
typedef tagPAINTSTRUCT* LPPAINTSTRUCT;
typedef tagEMRPOLYPOLYLINE* PEMRPOLYPOLYGON;
typedef LPENUMLOGFONTEXDVW LPENUMLOGFONTEXDV;
typedef tagPAINTSTRUCT* PPAINTSTRUCT;
typedef tagENUMTEXTMETRICA ENUMTEXTMETRICA;
typedef tagENUMTEXTMETRICA* LPENUMTEXTMETRICA;
typedef tagMINMAXINFO* LPMINMAXINFO;
typedef tagNONCLIENTMETRICSW* PNONCLIENTMETRICSW;
typedef _DEVICE_POWER_DESCRIPTOR DEVICE_POWER_DESCRIPTOR;
typedef ENUMTEXTMETRICW ENUMTEXTMETRIC;
typedef PENUMTEXTMETRICW PENUMTEXTMETRIC;
typedef _TRIVERTEX TRIVERTEX;
typedef _DEVICE_COPY_OFFLOAD_DESCRIPTOR* PDEVICE_COPY_OFFLOAD_DESCRIPTOR;
typedef _GRADIENT_TRIANGLE GRADIENT_TRIANGLE;
typedef tagMOUSEKEYS MOUSEKEYS;
typedef tagSTYLESTRUCT* LPSTYLESTRUCT;
typedef _currencyfmtA CURRENCYFMTA;
typedef _GRADIENT_TRIANGLE* PGRADIENT_TRIANGLE;
typedef tagEMREXTTEXTOUTA EMREXTTEXTOUTW;
typedef _GRADIENT_RECT* LPGRADIENT_RECT;
typedef tagEMRCREATEMONOBRUSH EMRCREATEMONOBRUSH;
typedef DLGITEMTEMPLATE DLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE* PDLGITEMTEMPLATEW;
typedef PDLGITEMTEMPLATEW PDLGITEMTEMPLATE;
typedef _BLENDFUNCTION* PBLENDFUNCTION;
typedef _CLUSTER_RANGE CLUSTER_RANGE;
typedef int ( *MFENUMPROC )( HDC, HANDLETABLE*, METARECORD*, int, LPARAM );
typedef tagEMRFORMAT* PEMRFORMAT;
typedef tagEMRPLGBLT EMRPLGBLT;
typedef tagEMRSETWORLDTRANSFORM EMRSETWORLDTRANSFORM;
typedef tagCOLORADJUSTMENT COLORADJUSTMENT;
typedef tagCOLORADJUSTMENT* LPCOLORADJUSTMENT;
typedef tagEMRINVERTRGN* PEMRINVERTRGN;
typedef tagWINDOWPLACEMENT WINDOWPLACEMENT;
typedef _VIDEOPARAMETERS VIDEOPARAMETERS;
typedef _DOCINFOA* LPDOCINFOA;
typedef tagEMRFRAMERGN* PEMRFRAMERGN;
typedef DOCINFOW DOCINFO;
typedef LPDOCINFOW LPDOCINFO;
typedef DLGTEMPLATE* LPDLGTEMPLATEA;
typedef int ( *ICMENUMPROCA )( LPSTR, LPARAM );
typedef tagEMRSETVIEWPORTORGEX EMRSETVIEWPORTORGEX;
typedef tagEMRSETVIEWPORTORGEX* PEMRSETWINDOWORGEX;
typedef tagEMRTEXT* PEMRTEXT;
typedef DWORD HELPPOLY;
typedef tagABORTPATH* PEMRABORTPATH;
typedef tagEMRSETVIEWPORTEXTEX EMRSETWINDOWEXTEX;
typedef tagABORTPATH EMRBEGINPATH;
typedef tagABORTPATH* PEMRENDPATH;
typedef tagEMRPOLYLINE EMRPOLYBEZIERTO;
typedef tagABORTPATH EMRFLATTENPATH;
typedef tagABORTPATH* PEMRFLATTENPATH;
typedef tagABORTPATH* PEMRWIDENPATH;
typedef tagABORTPATH* PEMRSETMETARGN;
typedef tagEMRPOLYLINE16 EMRPOLYLINE16;
typedef tagABORTPATH EMRREALIZEPALETTE;
typedef tagMDINEXTMENU* PMDINEXTMENU;
typedef tagABORTPATH* PEMRREALIZEPALETTE;
typedef tagEMRPOLYLINE16* PEMRPOLYBEZIER16;
typedef tagCOPYDATASTRUCT* PCOPYDATASTRUCT;
typedef tagEMRSELECTCLIPPATH* PEMRSETMAPMODE;
typedef tagEMRSELECTCLIPPATH EMRSETPOLYFILLMODE;
typedef tagEMRSELECTCLIPPATH* PEMRSETSTRETCHBLTMODE;
typedef tagEMRSELECTCLIPPATH EMRSETTEXTALIGN;
typedef tagEMRFILLPATH EMRFILLPATH;
typedef tagEMRSETMITERLIMIT EMRSETMITERLIMIT;
typedef tagEMRFILLPATH* PEMRSTROKEANDFILLPATH;
typedef tagEMRSETMITERLIMIT* PEMRSETMITERLIMIT;
typedef tagEMRRESTOREDC* PEMRRESTOREDC;
typedef tagEMREXCLUDECLIPRECT EMRINTERSECTCLIPRECT;
typedef tagDEBUGHOOKINFO* PDEBUGHOOKINFO;
typedef _WIM_PROVIDER_UPDATE_OVERLAY_INPUT* PWIM_PROVIDER_UPDATE_OVERLAY_INPUT;
typedef tagEMRSETARCDIRECTION EMRSETARCDIRECTION;
typedef tagEMRSETMAPPERFLAGS* PEMRSETMAPPERFLAGS;
typedef _STORAGE_BUS_TYPE STORAGE_BUS_TYPE;
typedef PNONCLIENTMETRICSW PNONCLIENTMETRICS;
typedef tagRAWMOUSE RAWMOUSE;
typedef tagEMRSETTEXTCOLOR EMRSETTEXTCOLOR;
typedef tagEMRSETTEXTCOLOR* PEMRSETTEXTCOLOR;
typedef tagEMRPOLYLINE EMRPOLYBEZIER;
typedef tagEMRSELECTOBJECT* PEMRDELETEOBJECT;
typedef tagEMREXTTEXTOUTA EMREXTTEXTOUTA;
typedef tagEMRSELECTPALETTE EMRSELECTPALETTE;
typedef tagEMRRESIZEPALETTE EMRRESIZEPALETTE;
typedef tagRAWKEYBOARD* LPRAWKEYBOARD;
typedef tagEMRPOLYTEXTOUTA EMRPOLYTEXTOUTA;
typedef tagEMRRESIZEPALETTE* PEMRRESIZEPALETTE;
typedef tagEMRSETPALETTEENTRIES EMRSETPALETTEENTRIES;
typedef tagEMRPOLYLINE16* PEMRPOLYBEZIERTO16;
typedef tagEMRSETCOLORADJUSTMENT EMRSETCOLORADJUSTMENT;
typedef tagEMRSETCOLORADJUSTMENT* PEMRSETCOLORADJUSTMENT;
typedef tagEMRGDICOMMENT EMRGDICOMMENT;
typedef tagWINDOWPOS* PWINDOWPOS;
typedef tagEMRPOLYDRAW16* PEMRPOLYDRAW16;
typedef tagEMRGDICOMMENT* PEMRGDICOMMENT;
typedef tagWINDOWPOS WINDOWPOS;
typedef tagEMREOF EMREOF;
typedef tagEMRELLIPSE* PEMRRECTANGLE;
typedef tagHANDEDNESS* PHANDEDNESS;
typedef tagEMRLINETO EMRMOVETOEX;
typedef tagEMRARC EMRARC;
typedef tagEMROFFSETCLIPRGN EMROFFSETCLIPRGN;
typedef tagEMRARC* PEMRARCTO;
typedef _GET_FILTER_FILE_IDENTIFIER_INPUT* PGET_FILTER_FILE_IDENTIFIER_INPUT;
typedef tagEMROFFSETCLIPRGN* PEMROFFSETCLIPRGN;
typedef _EVENT_RECORD* PEVENT_RECORD;
typedef tagEMRFILLPATH* PEMRSTROKEPATH;
typedef tagDRAWTEXTPARAMS DRAWTEXTPARAMS;
typedef DWORD GEOCLASS;
typedef tagEMREXCLUDECLIPRECT EMREXCLUDECLIPRECT;
typedef tagEMRSETVIEWPORTORGEX* PEMRSETBRUSHORGEX;
typedef tagTPMPARAMS TPMPARAMS;
typedef tagRID_DEVICE_INFO* LPRID_DEVICE_INFO;
typedef tagUSAGE_PROPERTIES USAGE_PROPERTIES;
typedef value_entA* PVALENTA;
typedef ORIENTATION_PREFERENCE ORIENTATION_PREFERENCE;
typedef VALENTW VALENT;
typedef tagEMREXTFLOODFILL EMREXTFLOODFILL;
typedef tagEMRELLIPSE EMRRECTANGLE;
typedef _NORM_FORM NORM_FORM;
typedef _ICONINFOEXW* PICONINFOEXW;
typedef ETW_BUFFER_HEADER ETW_BUFFER_HEADER;
typedef _WOF_VERSION_INFO WOF_VERSION_INFO;
typedef tagEMRARC* PEMRCHORD;
typedef tagEMRPOLYLINE* PEMRPOLYGON;
typedef tagEMRPOLYLINE* PEMRPOLYBEZIERTO;
typedef tagINPUT_MESSAGE_DEVICE_TYPE INPUT_MESSAGE_DEVICE_TYPE;
typedef tagEMRPOLYLINE16* PEMRPOLYGON16;
typedef tagEMRPOLYLINE16 EMRPOLYLINETO16;
typedef _nlsversioninfo* LPNLSVERSIONINFO;
typedef tagEMRPOLYDRAW* PEMRPOLYDRAW;
typedef _nlsversioninfo NLSVERSIONINFO;
typedef tagKEYBDINPUT* PKEYBDINPUT;
typedef tagEMRPOLYPOLYLINE16* PEMRPOLYPOLYGON16;
typedef tagRAWINPUTDEVICE* PRAWINPUTDEVICE;
typedef tagEMRBITBLT* PEMRBITBLT;
typedef DIALOG_DPI_CHANGE_BEHAVIORS DIALOG_DPI_CHANGE_BEHAVIORS;
typedef tagEMRSTRETCHBLT* PEMRSTRETCHBLT;
typedef tagMENUBARINFO* LPMENUBARINFO;
typedef tagTITLEBARINFOEX* LPTITLEBARINFOEX;
typedef tagEMRMASKBLT EMRMASKBLT;
typedef _EVENT_TRACE_PROPERTIES* PEVENT_TRACE_PROPERTIES;
typedef tagEMRPLGBLT* PEMRPLGBLT;
typedef tagWNDCLASSEXA* PWNDCLASSEXA;
typedef tagEMRSETDIBITSTODEVICE* PEMRSETDIBITSTODEVICE;
typedef tagRID_DEVICE_INFO_HID RID_DEVICE_INFO_HID;
typedef tagEMREXTCREATEFONTINDIRECTW EMREXTCREATEFONTINDIRECTW;
typedef BOOL ( *CALINFO_ENUMPROCEXEX )( LPWSTR, CALID, LPWSTR, LPARAM );
typedef tagEMRCREATEPALETTE* PEMRCREATEPALETTE;
typedef tagAR_STATE AR_STATE;
typedef tagEMREXTCREATEPEN EMREXTCREATEPEN;
typedef tagEMRCREATEBRUSHINDIRECT EMRCREATEBRUSHINDIRECT;
typedef tagEMRCREATEBRUSHINDIRECT* PEMRCREATEBRUSHINDIRECT;
typedef UINT32 TOUCH_MASK;
typedef tagDRAWITEMSTRUCT* PDRAWITEMSTRUCT;
typedef tagSOUNDSENTRYW* LPSOUNDSENTRYW;
typedef LPSOUNDSENTRYW LPSOUNDSENTRY;
typedef _SMB_SHARE_FLUSH_AND_PURGE_OUTPUT* PSMB_SHARE_FLUSH_AND_PURGE_OUTPUT;
typedef tagEMRPIXELFORMAT EMRPIXELFORMAT;
typedef _FILE_REFERENCE_RANGE FILE_REFERENCE_RANGE;
typedef tagEMRCREATECOLORSPACE* PEMRCREATECOLORSPACE;
typedef tagEMRSETCOLORSPACE* PEMRSETCOLORSPACE;
typedef tagACCEL* LPACCEL;
typedef tagEMRSETCOLORSPACE EMRSELECTCOLORSPACE;
typedef tagEMREXTESCAPE EMRDRAWESCAPE;
typedef _ENUM_SERVICE_STATUSW* LPENUM_SERVICE_STATUSW;
typedef tagMSG* NPMSG;
typedef tagEMRNAMEDESCAPE* PEMRNAMEDESCAPE;
typedef tagEMRSETICMPROFILE* PEMRSETICMPROFILEA;
typedef MENUITEMTEMPLATE MENUITEMTEMPLATE;
typedef tagACCESSTIMEOUT* LPACCESSTIMEOUT;
typedef NMHDR* LPNMHDR;
typedef _QUERY_SERVICE_LOCK_STATUSA* LPQUERY_SERVICE_LOCK_STATUSA;
typedef tagACCESSTIMEOUT ACCESSTIMEOUT;
typedef WMIDPREQUESTCODE WMIDPREQUESTCODE;
typedef tagCOLORCORRECTPALETTE* PEMRCOLORCORRECTPALETTE;
typedef tagTITLEBARINFO* LPTITLEBARINFO;
typedef tagEMRGRADIENTFILL EMRGRADIENTFILL;
typedef tagEMRTRANSPARENTBLT EMRTRANSPARENTBLT;
typedef tagLAYERPLANEDESCRIPTOR LAYERPLANEDESCRIPTOR;
typedef tagLAYERPLANEDESCRIPTOR* PLAYERPLANEDESCRIPTOR;
typedef tagCREATESTRUCTW CREATESTRUCTW;
typedef _WGLSWAP* PWGLSWAP;
typedef HANDLE HDWP;
typedef PVOID LPMENUTEMPLATEA;
typedef LPMENUTEMPLATEW LPMENUTEMPLATE;
typedef tagCURSORINFO* PCURSORINFO;
typedef tagCURSORINFO CURSORINFO;
typedef _WIM_PROVIDER_ADD_OVERLAY_INPUT* PWIM_PROVIDER_ADD_OVERLAY_INPUT;
typedef LRESULT ( *HOOKPROC )( int, WPARAM, LPARAM );
typedef tagICONMETRICSW ICONMETRICSW;
typedef tagICONMETRICSA ICONMETRICSA;
typedef BOOL ( *DRAWSTATEPROC )( HDC, LPARAM, WPARAM, int, int );
typedef _WOF_VERSION_INFO* PWOF_VERSION_INFO;
typedef tagMOUSEHOOKSTRUCT MOUSEHOOKSTRUCT;
typedef tagMDICREATESTRUCTA* LPMDICREATESTRUCTA;
typedef _VIRTUALIZATION_INSTANCE_INFO_OUTPUT* PVIRTUALIZATION_INSTANCE_INFO_OUTPUT;
typedef _NETCONNECTINFOSTRUCT* LPNETCONNECTINFOSTRUCT;
typedef CBT_CREATEWNDW CBT_CREATEWND;
typedef tagMSG* LPMSG;
typedef tagCBTACTIVATESTRUCT CBTACTIVATESTRUCT;
typedef tagNONCLIENTMETRICSW* LPNONCLIENTMETRICSW;
typedef tagCBTACTIVATESTRUCT* LPCBTACTIVATESTRUCT;
typedef tagMOUSEKEYS* LPMOUSEKEYS;
typedef tagEVENTMSG* NPEVENTMSGMSG;
typedef tagEVENTMSG* LPEVENTMSGMSG;
typedef tagCWPSTRUCT CWPSTRUCT;
typedef tagCWPRETSTRUCT CWPRETSTRUCT;
typedef _VIRTUALIZATION_INSTANCE_INFO_INPUT* PVIRTUALIZATION_INSTANCE_INFO_INPUT;
typedef tagKBDLLHOOKSTRUCT* LPKBDLLHOOKSTRUCT;
typedef tagWNDCLASSW* NPWNDCLASSW;
typedef tagMSLLHOOKSTRUCT* PMSLLHOOKSTRUCT;
typedef tagTouchPredictionParameters* PTOUCHPREDICTIONPARAMETERS;
typedef tagDEBUGHOOKINFO DEBUGHOOKINFO;
typedef TOOLTIP_DISMISS_FLAGS TOOLTIP_DISMISS_FLAGS;
typedef tagDEBUGHOOKINFO* NPDEBUGHOOKINFO;
typedef tagDEBUGHOOKINFO* LPDEBUGHOOKINFO;
typedef _SERVICE_STATUS* LPSERVICE_STATUS;
typedef tagMOUSEHOOKSTRUCT* LPMOUSEHOOKSTRUCT;
typedef _SET_DISK_ATTRIBUTES* PSET_DISK_ATTRIBUTES;
typedef tagMOUSEHOOKSTRUCT* PMOUSEHOOKSTRUCT;
typedef tagMOUSEHOOKSTRUCTEX MOUSEHOOKSTRUCTEX;
typedef _RETRIEVAL_POINTER_BASE RETRIEVAL_POINTER_BASE;
typedef tagMOUSEHOOKSTRUCTEX* LPMOUSEHOOKSTRUCTEX;
typedef tagHARDWAREHOOKSTRUCT HARDWAREHOOKSTRUCT;
typedef tagHARDWAREHOOKSTRUCT* LPHARDWAREHOOKSTRUCT;
typedef tagHARDWAREHOOKSTRUCT* PHARDWAREHOOKSTRUCT;
typedef tagMOUSEMOVEPOINT MOUSEMOVEPOINT;
typedef tagMOUSEMOVEPOINT* PMOUSEMOVEPOINT;
typedef tagMOUSEMOVEPOINT* LPMOUSEMOVEPOINT;
typedef _SERVICE_PREFERRED_NODE_INFO SERVICE_PREFERRED_NODE_INFO;
typedef tagGESTUREINFO* PGESTUREINFO;
typedef tagIMEMENUITEMINFOA* NPIMEMENUITEMINFOA;
typedef tagWNDCLASSEXA* NPWNDCLASSEXA;
typedef tagRID_DEVICE_INFO* PRID_DEVICE_INFO;
typedef tagIMEMENUITEMINFOA* LPIMEMENUITEMINFOA;
typedef LPSERVICE_FAILURE_ACTIONSW LPSERVICE_FAILURE_ACTIONS;
typedef LPIMEMENUITEMINFOW LPIMEMENUITEMINFO;
typedef PWNDCLASSEXW PWNDCLASSEX;
typedef _SERVICE_STATUS SERVICE_STATUS;
typedef HIMC__* HIMC;
typedef tagWNDCLASSA WNDCLASSA;
typedef _SC_STATUS_TYPE SC_STATUS_TYPE;
typedef REFS_VOLUME_DATA_BUFFER REFS_VOLUME_DATA_BUFFER;
typedef tagWNDCLASSA* NPWNDCLASSA;
typedef tagWNDCLASSA* LPWNDCLASSA;
typedef _nlsversioninfoex NLSVERSIONINFOEX;
typedef _STORAGE_CRYPTO_CAPABILITY* PSTORAGE_CRYPTO_CAPABILITY;
typedef tagWNDCLASSW WNDCLASSW;
typedef void SERVICE_MAIN_FUNCTIONA( DWORD, LPTSTR* );
typedef tagWNDCLASSW* PWNDCLASSW;
typedef LPQUERY_SERVICE_CONFIGW LPQUERY_SERVICE_CONFIG;
typedef _CHANGER_EXCHANGE_MEDIUM* PCHANGER_EXCHANGE_MEDIUM;
typedef WNDCLASSW WNDCLASS;
typedef PWNDCLASSW PWNDCLASS;
typedef NPWNDCLASSW NPWNDCLASS;
typedef void ( *LPSERVICE_MAIN_FUNCTIONW )( DWORD, LPWSTR* );
typedef _SD_CHANGE_MACHINE_SID_OUTPUT* PSD_CHANGE_MACHINE_SID_OUTPUT;
typedef tagMSG MSG;
typedef _DEVICE_LB_PROVISIONING_DESCRIPTOR* PDEVICE_LB_PROVISIONING_DESCRIPTOR;
typedef _SERVICE_STATUS_PROCESS SERVICE_STATUS_PROCESS;
typedef tagMSG* PMSG;
typedef _cpinfoexW CPINFOEXW;
typedef CPINFOEXW CPINFOEX;
typedef tagMINMAXINFO* PMINMAXINFO;
typedef _ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESSA;
typedef tagCOPYDATASTRUCT COPYDATASTRUCT;
typedef const GESTUREINFO* PCGESTUREINFO;
typedef _STORAGE_IDENTIFIER_CODE_SET* PSTORAGE_IDENTIFIER_CODE_SET;
typedef tagMDINEXTMENU MDINEXTMENU;
typedef _SERVICE_PREFERRED_NODE_INFO* LPSERVICE_PREFERRED_NODE_INFO;
typedef tagMDINEXTMENU* LPMDINEXTMENU;
typedef tagGESTURECONFIG GESTURECONFIG;
typedef _STORAGE_ID_NAA_FORMAT STORAGE_ID_NAA_FORMAT;
typedef POWERBROADCAST_SETTING POWERBROADCAST_SETTING;
typedef _SERVICE_LAUNCH_PROTECTED_INFO SERVICE_LAUNCH_PROTECTED_INFO;
typedef POWERBROADCAST_SETTING* PPOWERBROADCAST_SETTING;
typedef tagWINDOWPOS* LPWINDOWPOS;
typedef CURRENCYFMTW CURRENCYFMT;
typedef QUERY_SERVICE_LOCK_STATUSW QUERY_SERVICE_LOCK_STATUS;
typedef DWORD NLS_FUNCTION;
typedef tagNCCALCSIZE_PARAMS* LPNCCALCSIZE_PARAMS;
typedef QUERY_SERVICE_CONFIGW QUERY_SERVICE_CONFIG;
typedef tagCOMBOBOXINFO COMBOBOXINFO;
typedef tagTRACKMOUSEEVENT* LPTRACKMOUSEEVENT;
typedef tagACCEL ACCEL;
typedef tagALTTABINFO* PALTTABINFO;
typedef tagPAINTSTRUCT PAINTSTRUCT;
typedef tagPAINTSTRUCT* NPPAINTSTRUCT;
typedef tagCREATESTRUCTA CREATESTRUCTA;
typedef tagCREATESTRUCTA* LPCREATESTRUCTA;
typedef _SERVICE_SID_INFO SERVICE_SID_INFO;
typedef CREATESTRUCTW CREATESTRUCT;
typedef LPCREATESTRUCTW LPCREATESTRUCT;
typedef _STORAGE_DESCRIPTOR_HEADER* PSTORAGE_DESCRIPTOR_HEADER;
typedef WINDOWPLACEMENT* PWINDOWPLACEMENT;
typedef WINDOWPLACEMENT* LPWINDOWPLACEMENT;
typedef tagRAWKEYBOARD* PRAWKEYBOARD;
typedef tagRAWHID RAWHID;
typedef _numberfmtW* LPNUMBERFMTW;
typedef tagSTYLESTRUCT STYLESTRUCT;
typedef SERVICE_DESCRIPTIONW SERVICE_DESCRIPTION;
typedef LPNUMBERFMTW LPNUMBERFMT;
typedef tagRAWKEYBOARD RAWKEYBOARD;
typedef tagMEASUREITEMSTRUCT* PMEASUREITEMSTRUCT;
typedef tagTITLEBARINFOEX* PTITLEBARINFOEX;
typedef tagMEASUREITEMSTRUCT* LPMEASUREITEMSTRUCT;
typedef _UNIVERSAL_NAME_INFOW UNIVERSAL_NAME_INFOW;
typedef _STORAGE_BUS_RESET_REQUEST* PSTORAGE_BUS_RESET_REQUEST;
typedef tagDRAWITEMSTRUCT DRAWITEMSTRUCT;
typedef tagMENUBARINFO MENUBARINFO;
typedef tagDRAWITEMSTRUCT* LPDRAWITEMSTRUCT;
typedef tagDELETEITEMSTRUCT DELETEITEMSTRUCT;
typedef _PREVENT_MEDIA_REMOVAL PREVENT_MEDIA_REMOVAL;
typedef tagDELETEITEMSTRUCT* PDELETEITEMSTRUCT;
typedef tagSCROLLBARINFO* PSCROLLBARINFO;
typedef _FILE_ZERO_DATA_INFORMATION FILE_ZERO_DATA_INFORMATION;
typedef LPUNIVERSAL_NAME_INFOW LPUNIVERSAL_NAME_INFO;
typedef tagCOMPAREITEMSTRUCT COMPAREITEMSTRUCT;
typedef tagCOMPAREITEMSTRUCT* PCOMPAREITEMSTRUCT;
typedef _BIN_RANGE BIN_RANGE;
typedef BSMINFO BSMINFO;
typedef SERVICE_NOTIFY_2A* PSERVICE_NOTIFYA;
typedef BSMINFO* PBSMINFO;
typedef _SERVICE_DELAYED_AUTO_START_INFO* LPSERVICE_DELAYED_AUTO_START_INFO;
typedef _SERVICE_DELAYED_AUTO_START_INFO SERVICE_DELAYED_AUTO_START_INFO;
typedef BOOLEAN ( *PREGISTERCLASSNAMEW )( LPCWSTR );
typedef tagINPUT_MESSAGE_SOURCE INPUT_MESSAGE_SOURCE;
typedef PSERVICE_NOTIFYW PSERVICE_NOTIFY;
typedef tagUPDATELAYEREDWINDOWINFO UPDATELAYEREDWINDOWINFO;
typedef _SERVICE_CONTROL_STATUS_REASON_PARAMSW
    SERVICE_CONTROL_STATUS_REASON_PARAMSW;
typedef _SC_ENUM_TYPE SC_ENUM_TYPE;
typedef tagUPDATELAYEREDWINDOWINFO* PUPDATELAYEREDWINDOWINFO;
typedef tagPOINTER_DEVICE_TYPE POINTER_DEVICE_TYPE;
typedef LPSERVICE_REQUIRED_PRIVILEGES_INFOW LPSERVICE_REQUIRED_PRIVILEGES_INFO;
typedef _STORAGE_ADAPTER_DESCRIPTOR STORAGE_ADAPTER_DESCRIPTOR;
typedef FLASHWINFO* PFLASHWINFO;
typedef SERVICE_REQUIRED_PRIVILEGES_INFOW SERVICE_REQUIRED_PRIVILEGES_INFO;
typedef _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM SERVICE_TRIGGER_SPECIFIC_DATA_ITEM;
typedef tagRAWINPUT RAWINPUT;
typedef const DLGTEMPLATE* LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE* LPCDLGTEMPLATEW;
typedef _STORAGE_PREDICT_FAILURE STORAGE_PREDICT_FAILURE;
typedef _DISK_LOGGING* PDISK_LOGGING;
typedef LPCDLGTEMPLATEW LPCDLGTEMPLATE;
typedef tagRID_DEVICE_INFO_MOUSE* PRID_DEVICE_INFO_MOUSE;
typedef _SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONSA;
typedef DLGITEMTEMPLATE* PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE* LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE* LPDLGITEMTEMPLATEW;
typedef LPDLGITEMTEMPLATEW LPDLGITEMTEMPLATE;
typedef tagSOUNDSENTRYA SOUNDSENTRYA;
typedef tagSTYLEBUFA* LPSTYLEBUFA;
typedef DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS;
typedef PVALUEW PVALUE;
typedef _PARTITION_INFORMATION PARTITION_INFORMATION;
typedef tagGETCLIPBMETADATA GETCLIPBMETADATA;
typedef tagGETCLIPBMETADATA* PGETCLIPBMETADATA;
typedef PPVALUEW PPVALUE;
typedef tagMOUSEINPUT* PMOUSEINPUT;
typedef _CONSOLE_CURSOR_INFO* PCONSOLE_CURSOR_INFO;
typedef LPSERIALKEYSW LPSERIALKEYS;
typedef tagCANDIDATELIST CANDIDATELIST;
typedef tagHARDWAREINPUT* PHARDWAREINPUT;
typedef tagHIGHCONTRASTW HIGHCONTRASTW;
typedef tagHARDWAREINPUT* LPHARDWAREINPUT;
typedef _SMALL_RECT SMALL_RECT;
typedef _STORAGE_LB_PROVISIONING_MAP_RESOURCES* PSTORAGE_LB_PROVISIONING_MAP_RESOURCES;
typedef tagINPUT INPUT;
typedef _DEVICE_LB_PROVISIONING_DESCRIPTOR DEVICE_LB_PROVISIONING_DESCRIPTOR;
typedef _DEVICE_COPY_OFFLOAD_DESCRIPTOR DEVICE_COPY_OFFLOAD_DESCRIPTOR;
typedef tagMINIMIZEDMETRICS MINIMIZEDMETRICS;
typedef tagTOUCHINPUT* PTOUCHINPUT;
typedef const TOUCHINPUT* PCTOUCHINPUT;
typedef tagRECONVERTSTRING* NPRECONVERTSTRING;
typedef _STORAGE_RPMB_DESCRIPTOR STORAGE_RPMB_DESCRIPTOR;
typedef _DISK_EX_INT13_INFO* PDISK_EX_INT13_INFO;
typedef tagPOINTER_INFO POINTER_INFO;
typedef _STORAGE_DEVICE_NUMBER* PSTORAGE_DEVICE_NUMBER;
typedef tagWINDOWINFO* PWINDOWINFO;
typedef tagTITLEBARINFO TITLEBARINFO;
typedef UINT32 PEN_FLAGS;
typedef UINT32 PEN_MASK;
typedef tagTOGGLEKEYS* LPTOGGLEKEYS;
typedef POINTER_FEEDBACK_MODE POINTER_FEEDBACK_MODE;
typedef MULTIKEYHELPW MULTIKEYHELP;
typedef tagAUDIODESCRIPTION AUDIODESCRIPTION;
typedef tagHELPWININFOA HELPWININFOA;
typedef tagPOINTER_TYPE_INFO POINTER_TYPE_INFO;
typedef tagPOINTER_TYPE_INFO* PPOINTER_TYPE_INFO;
typedef HIGHCONTRASTW HIGHCONTRAST;
typedef tagINPUT_INJECTION_VALUE INPUT_INJECTION_VALUE;
typedef tagINPUT_INJECTION_VALUE* PINPUT_INJECTION_VALUE;
typedef _CONSOLE_SCREEN_BUFFER_INFOEX CONSOLE_SCREEN_BUFFER_INFOEX;
typedef HSYNTHETICPOINTERDEVICE__* HSYNTHETICPOINTERDEVICE;
typedef _VIDEOPARAMETERS* PVIDEOPARAMETERS;
typedef tagREGISTERWORDW* PREGISTERWORDW;
typedef tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION
    TOUCH_HIT_TESTING_PROXIMITY_EVALUATION;
typedef tagFILTERKEYS FILTERKEYS;
typedef tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION* PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION;
typedef tagTOUCH_HIT_TESTING_INPUT TOUCH_HIT_TESTING_INPUT;
typedef tagTOUCH_HIT_TESTING_INPUT* PTOUCH_HIT_TESTING_INPUT;
typedef BOOL ( *IMCENUMPROC )( HIMC, LPARAM );
typedef _CONNECTDLGSTRUCTA* LPCONNECTDLGSTRUCTA;
typedef tagFEEDBACK_TYPE FEEDBACK_TYPE;
typedef LPNETRESOURCEW LPNETRESOURCE;
typedef tagGUITHREADINFO* LPGUITHREADINFO;
typedef tagINPUT_TRANSFORM INPUT_TRANSFORM;
typedef _CONNECTDLGSTRUCTW* LPCONNECTDLGSTRUCTW;
typedef LPMDICREATESTRUCTW LPMDICREATESTRUCT;
typedef tagLASTINPUTINFO* PLASTINPUTINFO;
typedef BOOL ( *LANGGROUPLOCALE_ENUMPROCW )( LGRPID, LCID, LPWSTR, LONG_PTR );
typedef void ( *LPHANDLER_FUNCTION )( DWORD );
typedef _SCM_PD_OPERATIONAL_STATUS_REASON SCM_PD_OPERATIONAL_STATUS_REASON;
typedef TPMPARAMS* LPTPMPARAMS;
typedef BOOL ( *DATEFMT_ENUMPROCEXW )( LPWSTR, CALID );
typedef tagMENUINFO* LPMENUINFO;
typedef tagMULTIKEYHELPA* LPMULTIKEYHELPA;
typedef const MENUINFO* LPCMENUINFO;
typedef _WINDOW_BUFFER_SIZE_RECORD WINDOW_BUFFER_SIZE_RECORD;
typedef tagMENUGETOBJECTINFO MENUGETOBJECTINFO;
typedef tagICONMETRICSA* LPICONMETRICSA;
typedef _KEY_EVENT_RECORD KEY_EVENT_RECORD;
typedef ICONMETRICSW ICONMETRICS;
typedef tagMONITORINFOEXA* LPMONITORINFOEXA;
typedef LPMENUITEMINFOW LPMENUITEMINFO;
typedef _COORD COORD;
typedef NETRESOURCEW NETRESOURCE;
typedef LPHELPWININFOW LPHELPWININFO;
typedef tagDROPSTRUCT DROPSTRUCT;
typedef tagDROPSTRUCT* PDROPSTRUCT;
typedef _SERVICE_TABLE_ENTRYA* LPSERVICE_TABLE_ENTRYA;
typedef _SCM_PD_HEALTH_STATUS SCM_PD_HEALTH_STATUS;
typedef tagDROPSTRUCT* LPDROPSTRUCT;
typedef BOOL ( *LANGGROUPLOCALE_ENUMPROCA )( LGRPID, LCID, LPSTR, LONG_PTR );
typedef tagDRAWTEXTPARAMS* LPDRAWTEXTPARAMS;
typedef BOOL ( *TIMEFMT_ENUMPROCA )( LPSTR );
typedef SERVICE_TABLE_ENTRYW SERVICE_TABLE_ENTRY;
typedef RETRIEVAL_POINTERS_BUFFER RETRIEVAL_POINTERS_BUFFER;
typedef _STORAGE_BUS_TYPE* PSTORAGE_BUS_TYPE;
typedef NONCLIENTMETRICSW NONCLIENTMETRICS;
typedef _SCM_PD_PASSTHROUGH_INVDIMM_INPUT* PSCM_PD_PASSTHROUGH_INVDIMM_INPUT;
typedef tagMSGBOXPARAMSA MSGBOXPARAMSA;
typedef tagMSGBOXPARAMSA* PMSGBOXPARAMSA;
typedef tagMSGBOXPARAMSA* LPMSGBOXPARAMSA;
typedef LPNONCLIENTMETRICSW LPNONCLIENTMETRICS;
typedef _MENU_EVENT_RECORD* PMENU_EVENT_RECORD;
typedef MSGBOXPARAMSW MSGBOXPARAMS;
typedef tagSTICKYKEYS STICKYKEYS;
typedef LPMSGBOXPARAMSW LPMSGBOXPARAMS;
typedef MENUITEMTEMPLATEHEADER MENUITEMTEMPLATEHEADER;
typedef _GET_MEDIA_TYPES GET_MEDIA_TYPES;
typedef MENUITEMTEMPLATE* PMENUITEMTEMPLATE;
typedef LPICONMETRICSW LPICONMETRICS;
typedef ICONINFO* PICONINFO;
typedef tagCURSORSHAPE CURSORSHAPE;
typedef _CHAR_INFO* PCHAR_INFO;
typedef tagSERIALKEYSA SERIALKEYSA;
typedef tagCURSORSHAPE* LPCURSORSHAPE;
typedef _ICONINFOEXA ICONINFOEXA;
typedef PSERVICE_CONTROL_STATUS_REASON_PARAMSW
    PSERVICE_CONTROL_STATUS_REASON_PARAMS;
typedef _SCM_PD_PASSTHROUGH_INPUT* PSCM_PD_PASSTHROUGH_INPUT;
typedef tagHANDEDNESS HANDEDNESS;
typedef PICONINFOEXW PICONINFOEX;
typedef EDIT_CONTROL_FEATURE EDIT_CONTROL_FEATURE;
typedef _SC_EVENT_TYPE SC_EVENT_TYPE;
typedef tagNONCLIENTMETRICSA* LPNONCLIENTMETRICSA;
typedef MFT_ENUM_DATA_V1 MFT_ENUM_DATA_V1;
typedef tagSCROLLINFO* LPSCROLLINFO;
typedef _KEY_EVENT_RECORD* PKEY_EVENT_RECORD;
typedef _TXFS_TRANSACTION_ACTIVE_INFO* PTXFS_TRANSACTION_ACTIVE_INFO;
typedef const SCROLLINFO* LPCSCROLLINFO;
typedef tagMDICREATESTRUCTA MDICREATESTRUCTA;
typedef _DEVICE_SEEK_PENALTY_DESCRIPTOR DEVICE_SEEK_PENALTY_DESCRIPTOR;
typedef _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY* PTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY;
typedef tagMDICREATESTRUCTW MDICREATESTRUCTW;
typedef _ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUSA;
typedef _CHANGER_SET_POSITION CHANGER_SET_POSITION;
typedef MDICREATESTRUCTW MDICREATESTRUCT;
typedef _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM* PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM;
typedef tagCLIENTCREATESTRUCT CLIENTCREATESTRUCT;
typedef tagCLIENTCREATESTRUCT* LPCLIENTCREATESTRUCT;
typedef _SERVICE_TRIGGER_INFO SERVICE_TRIGGER_INFO;
typedef tagMULTIKEYHELPA* PMULTIKEYHELPA;
typedef DWORD ( *PQUERYHANDLER )( LPVOID, PVALCONTEXT, DWORD, LPVOID, DWORD*, DWORD );
typedef value_entA VALENTA;
typedef _STORAGE_PROPERTY_ID* PSTORAGE_PROPERTY_ID;
typedef tagHELPWININFOA* PHELPWININFOA;
typedef _STORAGE_ASSOCIATION_TYPE* PSTORAGE_ASSOCIATION_TYPE;
typedef PHELPWININFOW PHELPWININFO;
typedef _STORAGE_IDENTIFIER* PSTORAGE_IDENTIFIER;
typedef tagTouchPredictionParameters TOUCHPREDICTIONPARAMETERS;
typedef _STORAGE_CRYPTO_DESCRIPTOR STORAGE_CRYPTO_DESCRIPTOR;
typedef _FILE_FS_PERSISTENT_VOLUME_INFORMATION* PFILE_FS_PERSISTENT_VOLUME_INFORMATION;
typedef tagNONCLIENTMETRICSA NONCLIENTMETRICSA;
typedef tagNONCLIENTMETRICSA* PNONCLIENTMETRICSA;
typedef _STORAGE_CRYPTO_DESCRIPTOR* PSTORAGE_CRYPTO_DESCRIPTOR;
typedef tagMINIMIZEDMETRICS* PMINIMIZEDMETRICS;
typedef tagICONMETRICSA* PICONMETRICSA;
typedef _STORAGE_IDENTIFIER_TYPE* PSTORAGE_IDENTIFIER_TYPE;
typedef tagICONMETRICSW* PICONMETRICSW;
typedef _STORAGE_ASSOCIATION_TYPE STORAGE_ASSOCIATION_TYPE;
typedef PICONMETRICSW PICONMETRICS;
typedef tagANIMATIONINFO ANIMATIONINFO;
typedef tagANIMATIONINFO* LPANIMATIONINFO;
typedef _STORAGE_RPMB_DESCRIPTOR* PSTORAGE_RPMB_DESCRIPTOR;
typedef tagSERIALKEYSA* LPSERIALKEYSA;
typedef tagSERIALKEYSW SERIALKEYSW;
typedef SERIALKEYSW SERIALKEYS;
typedef _FILE_SET_SPARSE_BUFFER FILE_SET_SPARSE_BUFFER;
typedef tagHIGHCONTRASTA HIGHCONTRASTA;
typedef tagHIGHCONTRASTA* LPHIGHCONTRASTA;
typedef _TAPE_GET_STATISTICS* PTAPE_GET_STATISTICS;
typedef _STORAGE_PROPERTY_SET* PSTORAGE_PROPERTY_SET;
typedef LPHIGHCONTRASTW LPHIGHCONTRAST;
typedef _SERVICE_FAILURE_ACTIONS_FLAG* LPSERVICE_FAILURE_ACTIONS_FLAG;
typedef _STORAGE_PROPERTY_SET STORAGE_PROPERTY_SET;
typedef _VIDEOPARAMETERS* LPVIDEOPARAMETERS;
typedef _STORAGE_DEVICE_DESCRIPTOR STORAGE_DEVICE_DESCRIPTOR;
typedef _SERVICE_REQUIRED_PRIVILEGES_INFOA SERVICE_REQUIRED_PRIVILEGES_INFOA;
typedef tagFILTERKEYS* LPFILTERKEYS;
typedef STORAGE_BREAK_RESERVATION_REQUEST STORAGE_BREAK_RESERVATION_REQUEST;
typedef tagSOUNDSENTRYA* LPSOUNDSENTRYA;
typedef _UNIVERSAL_NAME_INFOA* LPUNIVERSAL_NAME_INFOA;
typedef SOUNDSENTRYW SOUNDSENTRY;
typedef tagTOGGLEKEYS TOGGLEKEYS;
typedef BOOL ( *GEO_ENUMPROC )( GEOID );
typedef _STORAGE_SET_TYPE* PSTORAGE_SET_TYPE;
typedef tagMONITORINFO MONITORINFO;
typedef _STORAGE_PROPERTY_QUERY STORAGE_PROPERTY_QUERY;
typedef _FILEMUIINFO* PFILEMUIINFO;
typedef _STORAGE_QUERY_TYPE STORAGE_QUERY_TYPE;
typedef MONITORINFOEXW MONITORINFOEX;
typedef BOOL ( *MONITORENUMPROC )( HMONITOR, HDC, LPRECT, LPARAM );
typedef _STORAGE_DEVICE_ID_DESCRIPTOR STORAGE_DEVICE_ID_DESCRIPTOR;
typedef void ( *WINEVENTPROC )( HWINEVENTHOOK, DWORD, HWND, LONG, LONG, DWORD, DWORD );
typedef tagGUITHREADINFO GUITHREADINFO;
typedef tagGUITHREADINFO* PGUITHREADINFO;
typedef _SERVICE_PRESHUTDOWN_INFO* LPSERVICE_PRESHUTDOWN_INFO;
typedef tagWINDOWINFO WINDOWINFO;
typedef _SC_ACTION_TYPE SC_ACTION_TYPE;
typedef tagTITLEBARINFO* PTITLEBARINFO;
typedef _PERF_BIN* PPERF_BIN;
typedef tagTITLEBARINFOEX TITLEBARINFOEX;
typedef tagSTYLEBUFA* NPSTYLEBUFA;
typedef USN_RECORD_COMMON_HEADER* PUSN_RECORD_COMMON_HEADER;
typedef tagSCROLLBARINFO SCROLLBARINFO;
typedef tagSTYLEBUFW* NPSTYLEBUFW;
typedef NPSTYLEBUFW NPSTYLEBUF;
typedef tagSCROLLBARINFO* LPSCROLLBARINFO;
typedef _CREATE_DISK_MBR* PCREATE_DISK_MBR;
typedef tagCOMBOBOXINFO* PCOMBOBOXINFO;
typedef BOOL ( *PHANDLER_ROUTINE )( DWORD );
typedef tagCOMBOBOXINFO* LPCOMBOBOXINFO;
typedef tagCANDIDATEFORM* LPCANDIDATEFORM;
typedef HRAWINPUT__* HRAWINPUT;
typedef void ( *PSC_NOTIFICATION_CALLBACK )( DWORD, PVOID );
typedef _ENUM_SERVICE_STATUS_PROCESSW* LPENUM_SERVICE_STATUS_PROCESSW;
typedef _QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUSA;
typedef tagRECONVERTSTRING* PRECONVERTSTRING;
typedef tagRAWINPUT* PRAWINPUT;
typedef tagRAWINPUT* LPRAWINPUT;
typedef _STORAGE_DEVICE_NUMBERS STORAGE_DEVICE_NUMBERS;
typedef tagRID_DEVICE_INFO_KEYBOARD* PRID_DEVICE_INFO_KEYBOARD;
typedef _STORAGE_DEVICE_NUMBERS* PSTORAGE_DEVICE_NUMBERS;
typedef tagRID_DEVICE_INFO_HID* PRID_DEVICE_INFO_HID;
typedef provider_info REG_PROVIDER;
typedef tagRAWINPUTDEVICE* LPRAWINPUTDEVICE;
typedef tagREGISTERWORDA REGISTERWORDA;
typedef tagRAWINPUTDEVICELIST RAWINPUTDEVICELIST;
typedef tagRAWINPUTDEVICELIST* PRAWINPUTDEVICELIST;
typedef tagPOINTER_DEVICE_INFO POINTER_DEVICE_INFO;
typedef tagPOINTER_DEVICE_CURSOR_INFO POINTER_DEVICE_CURSOR_INFO;
typedef tagCHANGEFILTERSTRUCT CHANGEFILTERSTRUCT;
typedef BOOL ( *LANGUAGEGROUP_ENUMPROCW )( LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR );
typedef HGESTUREINFO__* HGESTUREINFO;
typedef BOOL ( *DATEFMT_ENUMPROCW )( LPWSTR );
typedef _SERVICE_NOTIFY_1* PSERVICE_NOTIFY_1;
typedef _MODEMDEVCAPS* PMODEMDEVCAPS;
typedef tagGESTURENOTIFYSTRUCT GESTURENOTIFYSTRUCT;
typedef _MODEMDEVCAPS MODEMDEVCAPS;
typedef tagGESTURECONFIG* PGESTURECONFIG;
typedef _INPUT_RECORD INPUT_RECORD;
typedef _MODEMSETTINGS* PMODEMSETTINGS;
typedef tagAR_STATE* PAR_STATE;
typedef BOOL ( *LOCALE_ENUMPROCEX )( LPWSTR, DWORD, LPARAM );
typedef DWORD LCTYPE;
typedef DWORD CALTYPE;
typedef _cpinfo CPINFO;
typedef _cpinfo* LPCPINFO;
typedef DWORD GEOTYPE;
typedef _SCM_PD_OPERATIONAL_STATUS SCM_PD_OPERATIONAL_STATUS;
typedef _cpinfoexA CPINFOEXA;
typedef _SERVICE_TABLE_ENTRYW* LPSERVICE_TABLE_ENTRYW;
typedef const WCHAR* PUWSTR_C;
typedef SERVICE_SHARED_REGISTRY_STATE_TYPE SERVICE_SHARED_REGISTRY_STATE_TYPE;
typedef _numberfmtA* LPNUMBERFMTA;
typedef _SERVICE_DESCRIPTIONA SERVICE_DESCRIPTIONA;
typedef LPREGISTERWORDW LPREGISTERWORD;
typedef tagCOMPOSITIONFORM* PCOMPOSITIONFORM;
typedef tagCOMPOSITIONFORM COMPOSITIONFORM;
typedef _SERVICE_START_REASON SERVICE_START_REASON;
typedef _nlsversioninfoex* LPNLSVERSIONINFOEX;
typedef BOOL ( *LOCALE_ENUMPROCA )( LPSTR );
typedef BOOL ( *LOCALE_ENUMPROCW )( LPWSTR );
typedef _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT* PSCM_PD_PASSTHROUGH_INVDIMM_OUTPUT;
typedef BOOL ( *LANGUAGEGROUP_ENUMPROCA )( LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR );
typedef BOOL ( *DATEFMT_ENUMPROCA )( LPSTR );
typedef _DEVICE_WRITE_AGGREGATION_DESCRIPTOR* PDEVICE_WRITE_AGGREGATION_DESCRIPTOR;
typedef _DEVICE_DATA_SET_SCRUB_EX_OUTPUT DEVICE_DATA_SET_SCRUB_EX_OUTPUT;
typedef BOOL ( *DATEFMT_ENUMPROCEXA )( LPSTR, CALID );
typedef BOOL ( *CALINFO_ENUMPROCA )( LPSTR );
typedef _STORAGE_PORT_CODE_SET* PSTORAGE_PORT_CODE_SET;
typedef BOOL ( *UILANGUAGE_ENUMPROCW )( LPWSTR, LONG_PTR );
typedef BOOL ( *CALINFO_ENUMPROCW )( LPWSTR );
typedef HSAVEDUILANGUAGES__* HSAVEDUILANGUAGES;
typedef _COORD* PCOORD;
typedef _SMALL_RECT* PSMALL_RECT;
typedef _STORAGE_ZONE_CONDITION STORAGE_ZONE_CONDITION;
typedef _STORAGE_TIER_MEDIA_TYPE STORAGE_TIER_MEDIA_TYPE;
typedef _FOCUS_EVENT_RECORD* PFOCUS_EVENT_RECORD;
typedef _INPUT_RECORD* PINPUT_RECORD;
typedef _STORAGE_ID_NAA_FORMAT* PSTORAGE_ID_NAA_FORMAT;
typedef _CONSOLE_FONT_INFO* PCONSOLE_FONT_INFO;
typedef _CONSOLE_READCONSOLE_CONTROL CONSOLE_READCONSOLE_CONTROL;
typedef _TAPE_STATISTICS TAPE_STATISTICS;
typedef _STORAGE_ENCRYPTION_TYPE STORAGE_ENCRYPTION_TYPE;
typedef _CONSOLE_CURSOR_INFO CONSOLE_CURSOR_INFO;
typedef _CONSOLE_SCREEN_BUFFER_INFOEX* PCONSOLE_SCREEN_BUFFER_INFOEX;
typedef _CONSOLE_FONT_INFOEX* PCONSOLE_FONT_INFOEX;
typedef _STORAGE_DESCRIPTOR_HEADER STORAGE_DESCRIPTOR_HEADER;
typedef _CONSOLE_HISTORY_INFO CONSOLE_HISTORY_INFO;
typedef tagVS_FIXEDFILEINFO VS_FIXEDFILEINFO;
typedef _STORAGE_DEVICE_RESILIENCY_DESCRIPTOR
    STORAGE_DEVICE_RESILIENCY_DESCRIPTOR;
typedef pvalueA* PPVALUEA;
typedef _STORAGE_BUS_RESET_REQUEST STORAGE_BUS_RESET_REQUEST;
typedef _STORAGE_DEVICE_LED_STATE_DESCRIPTOR
    STORAGE_DEVICE_LED_STATE_DESCRIPTOR;
typedef DWORD QUERYHANDLER( LPVOID, PVALCONTEXT, DWORD, LPVOID, DWORD*, DWORD );
typedef _PREVENT_MEDIA_REMOVAL* PPREVENT_MEDIA_REMOVAL;
typedef _STORAGE_COUNTERS* PSTORAGE_COUNTERS;
typedef provider_info* PPROVIDER;
typedef PVALENTW PVALENT;
typedef _STORAGE_ADAPTER_DESCRIPTOR* PSTORAGE_ADAPTER_DESCRIPTOR;
typedef _CONNECTDLGSTRUCTA CONNECTDLGSTRUCTA;
typedef _STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR
    STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR;
typedef LPCONNECTDLGSTRUCTW LPCONNECTDLGSTRUCT;
typedef _STORAGE_OFFLOAD_TOKEN STORAGE_OFFLOAD_TOKEN;
typedef _DISCDLGSTRUCTA DISCDLGSTRUCTA;
typedef _STORAGE_PREDICT_FAILURE* PSTORAGE_PREDICT_FAILURE;
typedef DISCDLGSTRUCTW DISCDLGSTRUCT;
typedef LPDISCDLGSTRUCTW LPDISCDLGSTRUCT;
typedef _STORAGE_DEVICE_MANAGEMENT_STATUS STORAGE_DEVICE_MANAGEMENT_STATUS;
typedef _UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFOA;
typedef tagSTYLEBUFA* PSTYLEBUFA;
typedef UNIVERSAL_NAME_INFOW UNIVERSAL_NAME_INFO;
typedef _REMOTE_NAME_INFOA REMOTE_NAME_INFOA;
typedef _REMOTE_NAME_INFOA* LPREMOTE_NAME_INFOA;
typedef tagCOMPOSITIONFORM* LPCOMPOSITIONFORM;
typedef _NETINFOSTRUCT NETINFOSTRUCT;
typedef tagCANDIDATELIST* PCANDIDATELIST;
typedef PREGISTERWORDW PREGISTERWORD;
typedef LPSERVICE_DESCRIPTIONW LPSERVICE_DESCRIPTION;
typedef _SC_ACTION* LPSC_ACTION;
typedef _STORAGE_DEVICE_NUMBER_EX STORAGE_DEVICE_NUMBER_EX;
typedef _STORAGE_COUNTER_TYPE* PSTORAGE_COUNTER_TYPE;
typedef tagIMEMENUITEMINFOA IMEMENUITEMINFOA;
typedef _SERVICE_FAILURE_ACTIONS_FLAG SERVICE_FAILURE_ACTIONS_FLAG;
typedef tagREGISTERWORDA* NPREGISTERWORDA;
typedef _SERVICE_REQUIRED_PRIVILEGES_INFOA* LPSERVICE_REQUIRED_PRIVILEGES_INFOA;
typedef _SERVICE_PRESHUTDOWN_INFO SERVICE_PRESHUTDOWN_INFO;
typedef int ( *REGISTERWORDENUMPROCW )( LPCWSTR, DWORD, LPCWSTR, LPVOID );
typedef DWORD HANDLER_FUNCTION_EX( DWORD, DWORD, LPVOID, LPVOID );
typedef _SERVICE_TRIGGER SERVICE_TRIGGER;
typedef DWORD ( *LPHANDLER_FUNCTION_EX )( DWORD, DWORD, LPVOID, LPVOID );
typedef _STORAGE_TIER* PSTORAGE_TIER;
typedef _SERVICE_TRIGGER_INFO* PSERVICE_TRIGGER_INFO;
typedef SERVICE_SHARED_DIRECTORY_TYPE SERVICE_SHARED_DIRECTORY_TYPE;
typedef _SERVICE_TIMECHANGE_INFO SERVICE_TIMECHANGE_INFO;
typedef _MODEMSETTINGS* LPMODEMSETTINGS;
typedef _SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRYA;
typedef _ENUM_SERVICE_STATUSA* LPENUM_SERVICE_STATUSA;
typedef LPSERVICE_TABLE_ENTRYW LPSERVICE_TABLE_ENTRY;
typedef _STORAGE_DIAGNOSTIC_LEVEL STORAGE_DIAGNOSTIC_LEVEL;
typedef _SC_NOTIFICATION_REGISTRATION* PSC_NOTIFICATION_REGISTRATION;
typedef LPENUM_SERVICE_STATUSW LPENUM_SERVICE_STATUS;
typedef LPENUM_SERVICE_STATUS_PROCESSW LPENUM_SERVICE_STATUS_PROCESS;
typedef HIMCC__* HIMCC;
typedef _QUERY_SERVICE_CONFIGA* LPQUERY_SERVICE_CONFIGA;
typedef UINT* LPUINT;
typedef SERVICE_CONTROL_STATUS_REASON_PARAMSW
    SERVICE_CONTROL_STATUS_REASON_PARAMS;
typedef _STORAGE_PROTOCOL_DATA_DESCRIPTOR STORAGE_PROTOCOL_DATA_DESCRIPTOR;
typedef void SERVICE_MAIN_FUNCTIONW( DWORD, LPWSTR* );
typedef _SC_EVENT_TYPE* PSC_EVENT_TYPE;
typedef _DEVICE_INTERNAL_STATUS_DATA* PDEVICE_INTERNAL_STATUS_DATA;
typedef _SCM_LD_INTERLEAVE_SET_INFO SCM_LD_INTERLEAVE_SET_INFO;
typedef _STORAGE_ZONES_ATTRIBUTES* PSTORAGE_ZONES_ATTRIBUTES;
typedef void HANDLER_FUNCTION( DWORD );
typedef PSERVICE_NOTIFY_2W PSERVICE_NOTIFY_2;
typedef void SC_NOTIFICATION_CALLBACK( DWORD, PVOID );
typedef _MODEMSETTINGS MODEMSETTINGS;
typedef _STORAGE_COUNTER STORAGE_COUNTER;
typedef tagCANDIDATEFORM* PCANDIDATEFORM;
typedef tagREGISTERWORDA* PREGISTERWORDA;
typedef REGISTERWORDW REGISTERWORD;
typedef _STORAGE_COUNTER_TYPE STORAGE_COUNTER_TYPE;
typedef PIMEMENUITEMINFOW PIMEMENUITEMINFO;
typedef tagIMECHARPOSITION* LPIMECHARPOSITION;
typedef int ( *REGISTERWORDENUMPROCA )( LPCSTR, DWORD, LPCSTR, LPVOID );
typedef _STORAGE_DEVICE_NUMBER_EX* PSTORAGE_DEVICE_NUMBER_EX;
typedef _DEVICEDUMP_STRUCTURE_VERSION DEVICEDUMP_STRUCTURE_VERSION;
typedef _PERSISTENT_RESERVE_COMMAND* PPERSISTENT_RESERVE_COMMAND;
typedef _GET_MEDIA_TYPES* PGET_MEDIA_TYPES;
typedef _STORAGE_FAILURE_PREDICTION_CONFIG* PSTORAGE_FAILURE_PREDICTION_CONFIG;
typedef _STORAGE_QUERY_TYPE* PSTORAGE_QUERY_TYPE;
typedef _STORAGE_PROPERTY_QUERY* PSTORAGE_PROPERTY_QUERY;
typedef _STORAGE_PRIORITY_HINT_SUPPORT STORAGE_PRIORITY_HINT_SUPPORT;
typedef _STORAGE_ALLOCATE_BC_STREAM_INPUT STORAGE_ALLOCATE_BC_STREAM_INPUT;
typedef _DEVICE_SEEK_PENALTY_DESCRIPTOR* PDEVICE_SEEK_PENALTY_DESCRIPTOR;
typedef _STORAGE_DEVICE_TIERING_DESCRIPTOR STORAGE_DEVICE_TIERING_DESCRIPTOR;
typedef _STORAGE_LB_PROVISIONING_MAP_RESOURCES
    STORAGE_LB_PROVISIONING_MAP_RESOURCES;
typedef _DEVICE_INTERNAL_STATUS_DATA_SET DEVICE_INTERNAL_STATUS_DATA_SET;
typedef _STORAGE_TEMPERATURE_INFO STORAGE_TEMPERATURE_INFO;
typedef _STORAGE_TIER_MEDIA_TYPE* PSTORAGE_TIER_MEDIA_TYPE;
typedef _SCM_INTERLEAVED_PD_INFO SCM_INTERLEAVED_PD_INFO;
typedef _STORAGE_TIER_CLASS STORAGE_TIER_CLASS;
typedef _STORAGE_TIER_CLASS* PSTORAGE_TIER_CLASS;
typedef _CHANGER_ELEMENT_STATUS* PCHANGER_ELEMENT_STATUS;
typedef void* NDR_CCONTEXT;
typedef _STORAGE_TIER STORAGE_TIER;
typedef _SCM_PD_QUERY_TYPE SCM_PD_QUERY_TYPE;
typedef _CHANGER_INITIALIZE_ELEMENT_STATUS CHANGER_INITIALIZE_ELEMENT_STATUS;
typedef _STORAGE_DEVICE_TIERING_DESCRIPTOR* PSTORAGE_DEVICE_TIERING_DESCRIPTOR;
typedef _STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR
    STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR;
typedef _STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR* PSTORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR;
typedef _RPC_CALL_LOCAL_ADDRESS_V1 RPC_CALL_LOCAL_ADDRESS_V1;
typedef _MINIDUMP_IO_CALLBACK* PMINIDUMP_IO_CALLBACK;
typedef _SCM_BUS_FIRMWARE_ACTIVATION_STATE* PSCM_BUS_FIRMWARE_ACTIVATION_STATE;
typedef _STORAGE_PROTOCOL_TYPE STORAGE_PROTOCOL_TYPE;
typedef _TXFS_LIST_TRANSACTION_LOCKED_FILES* PTXFS_LIST_TRANSACTION_LOCKED_FILES;
typedef _STORAGE_PROTOCOL_TYPE* PSTORAGE_PROTOCOL_TYPE;
typedef _STORAGE_PROTOCOL_NVME_DATA_TYPE STORAGE_PROTOCOL_NVME_DATA_TYPE;
typedef _ST_READ_LATENCY_BUCKET* PST_READ_LATENCY_BUCKET;
typedef _STORAGE_PROTOCOL_NVME_DATA_TYPE* PSTORAGE_PROTOCOL_NVME_DATA_TYPE;
typedef _SCM_LOGICAL_DEVICES* PSCM_LOGICAL_DEVICES;
typedef _STORAGE_PROTOCOL_ATA_DATA_TYPE STORAGE_PROTOCOL_ATA_DATA_TYPE;
typedef tagWNODE_SINGLE_ITEM* PWNODE_SINGLE_ITEM;
typedef _BIN_COUNT BIN_COUNT;
typedef _STORAGE_PROTOCOL_ATA_DATA_TYPE* PSTORAGE_PROTOCOL_ATA_DATA_TYPE;
typedef BULK_SECURITY_TEST_DATA BULK_SECURITY_TEST_DATA;
typedef tagWNODE_SINGLE_INSTANCE* PWNODE_SINGLE_INSTANCE;
typedef _STORAGE_PROTOCOL_UFS_DATA_TYPE STORAGE_PROTOCOL_UFS_DATA_TYPE;
typedef void* RPC_INTERFACE_GROUP;
typedef void RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN( RPC_INTERFACE_GROUP, void*, unsigned long );
typedef _SCM_PHYSICAL_DEVICE_INSTANCE SCM_PHYSICAL_DEVICE_INSTANCE;
typedef _STORAGE_PROTOCOL_UFS_DATA_TYPE* PSTORAGE_PROTOCOL_UFS_DATA_TYPE;
typedef _FILE_INITIATE_REPAIR_OUTPUT_BUFFER* PFILE_INITIATE_REPAIR_OUTPUT_BUFFER;
typedef _STRING64 STRING64;
typedef STRING64 UNICODE_STRING64;
typedef _SCM_PHYSICAL_DEVICES* PSCM_PHYSICAL_DEVICES;
typedef _STORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE
    STORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE;
typedef _FILE_PREFETCH* PFILE_PREFETCH;
typedef _BIN_RESULTS BIN_RESULTS;
typedef _EVENT_TRACE_SYSTEM_EVENT_INFORMATION* PEVENT_TRACE_SYSTEM_EVENT_INFORMATION;
typedef _STORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE* PSTORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE;
typedef STRING64* PANSI_STRING64;
typedef _SCM_BUS_SET_TYPE SCM_BUS_SET_TYPE;
typedef GUID UUID;
typedef _RPC_VERSION RPC_VERSION;
typedef _MINIDUMP_CALLBACK_INPUT MINIDUMP_CALLBACK_INPUT;
typedef _TXFS_GET_TRANSACTED_VERSION TXFS_GET_TRANSACTED_VERSION;
typedef _STORAGE_PROTOCOL_SPECIFIC_DATA STORAGE_PROTOCOL_SPECIFIC_DATA;
typedef _CHANGER_ELEMENT_LIST CHANGER_ELEMENT_LIST;
typedef _FAT_STATISTICS* PFAT_STATISTICS;
typedef _SCM_BUS_PROPERTY_SET* PSCM_BUS_PROPERTY_SET;
typedef _STORAGE_PROTOCOL_SPECIFIC_DATA* PSTORAGE_PROTOCOL_SPECIFIC_DATA;
typedef _FILESYSTEM_STATISTICS FILESYSTEM_STATISTICS;
typedef tagRPC_CALL_ATTRIBUTES_V3_W RPC_CALL_ATTRIBUTES_V3_W;
typedef RPC_CALL_ATTRIBUTES_V3_W RPC_CALL_ATTRIBUTES;
typedef _MINIDUMP_VM_POST_READ_CALLBACK MINIDUMP_VM_POST_READ_CALLBACK;
typedef tagWNODE_TOO_SMALL WNODE_TOO_SMALL;
typedef _EVENT_TRACE_HEAP_TRACING_INFORMATION* PEVENT_TRACE_HEAP_TRACING_INFORMATION;
typedef _STORAGE_PROTOCOL_SPECIFIC_DATA_EXT STORAGE_PROTOCOL_SPECIFIC_DATA_EXT;
typedef _CHANGER_ELEMENT_STATUS CHANGER_ELEMENT_STATUS;
typedef _STORAGE_PROTOCOL_SPECIFIC_DATA_EXT* PSTORAGE_PROTOCOL_SPECIFIC_DATA_EXT;
typedef _CHANGER_READ_ELEMENT_STATUS CHANGER_READ_ELEMENT_STATUS;
typedef _SM_STORE_TYPE SM_STORE_TYPE;
typedef _OBJECT_ATTRIBUTES OBJECT_ATTRIBUTES;
typedef _STORAGE_PROTOCOL_DATA_DESCRIPTOR* PSTORAGE_PROTOCOL_DATA_DESCRIPTOR;
typedef _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE
    STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE;
typedef _SCM_PD_FIRMWARE_SLOT_INFO SCM_PD_FIRMWARE_SLOT_INFO;
typedef _STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT
    STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT;
typedef _STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT* PSTORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT;
typedef STARTING_LCN_INPUT_BUFFER_EX* PSTARTING_LCN_INPUT_BUFFER_EX;
typedef _STORAGE_TEMPERATURE_INFO* PSTORAGE_TEMPERATURE_INFO;
typedef _EVENT_TRACE_PROFILE_COUNTER_INFORMATION
    EVENT_TRACE_PROFILE_COUNTER_INFORMATION;
typedef _DECRYPTION_STATUS_BUFFER DECRYPTION_STATUS_BUFFER;
typedef _STORAGE_TEMPERATURE_DATA_DESCRIPTOR
    STORAGE_TEMPERATURE_DATA_DESCRIPTOR;
typedef _STORAGE_HW_FIRMWARE_DOWNLOAD* PSTORAGE_HW_FIRMWARE_DOWNLOAD;
typedef _STORAGE_TEMPERATURE_DATA_DESCRIPTOR* PSTORAGE_TEMPERATURE_DATA_DESCRIPTOR;
typedef _SCM_PD_PROPERTY_ID* PSCM_PD_PROPERTY_ID;
typedef _RPC_HTTP_REDIRECTOR_STAGE RPC_HTTP_REDIRECTOR_STAGE;
typedef RPC_STATUS ( *I_RpcPerformCalloutFn )( void*, RDR_CALLOUT_STATE*, RPC_HTTP_REDIRECTOR_STAGE );
typedef _STORAGE_TEMPERATURE_THRESHOLD STORAGE_TEMPERATURE_THRESHOLD;
typedef _DISK_HISTOGRAM DISK_HISTOGRAM;
typedef _STORAGE_TEMPERATURE_THRESHOLD* PSTORAGE_TEMPERATURE_THRESHOLD;
typedef _STORAGE_HW_FIRMWARE_ACTIVATE STORAGE_HW_FIRMWARE_ACTIVATE;
typedef _CHANGER_SEND_VOLUME_TAG_INFORMATION* PCHANGER_SEND_VOLUME_TAG_INFORMATION;
typedef _STORAGE_DEVICE_FORM_FACTOR STORAGE_DEVICE_FORM_FACTOR;
typedef _STORAGE_DEVICE_FORM_FACTOR* PSTORAGE_DEVICE_FORM_FACTOR;
typedef _HISTOGRAM_BUCKET* PHISTOGRAM_BUCKET;
typedef _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO* PSCM_BUS_RUNTIME_FW_ACTIVATION_INFO;
typedef _STORAGE_COMPONENT_HEALTH_STATUS STORAGE_COMPONENT_HEALTH_STATUS;
typedef _TXFS_LIST_TRANSACTIONS TXFS_LIST_TRANSACTIONS;
typedef _STORAGE_COMPONENT_HEALTH_STATUS* PSTORAGE_COMPONENT_HEALTH_STATUS;
typedef tagRpcCallClientLocality RpcCallClientLocality;
typedef _STORAGE_SPEC_VERSION STORAGE_SPEC_VERSION;
typedef _TXFS_READ_BACKUP_INFORMATION_OUT* PTXFS_READ_BACKUP_INFORMATION_OUT;
typedef _STORAGE_SPEC_VERSION* PSTORAGE_SPEC_VERSION;
typedef _SCM_BUS_DEDICATED_MEMORY_DEVICES_INFO
    SCM_BUS_DEDICATED_MEMORY_DEVICES_INFO;
typedef _GET_CHANGER_PARAMETERS GET_CHANGER_PARAMETERS;
typedef _SCM_PD_DEVICE_HANDLE* PSCM_PD_DEVICE_HANDLE;
typedef _STORAGE_PHYSICAL_DEVICE_DATA STORAGE_PHYSICAL_DEVICE_DATA;
typedef _STORAGE_PHYSICAL_DEVICE_DATA* PSTORAGE_PHYSICAL_DEVICE_DATA;
typedef _STORAGE_PHYSICAL_ADAPTER_DATA STORAGE_PHYSICAL_ADAPTER_DATA;
typedef _SCM_PD_DEVICE_SPECIFIC_PROPERTY SCM_PD_DEVICE_SPECIFIC_PROPERTY;
typedef _STORAGE_PHYSICAL_ADAPTER_DATA* PSTORAGE_PHYSICAL_ADAPTER_DATA;
typedef _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY* PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY;
typedef NTFS_EXTENDED_VOLUME_DATA* PNTFS_EXTENDED_VOLUME_DATA;
typedef _STORAGE_PHYSICAL_NODE_DATA STORAGE_PHYSICAL_NODE_DATA;
typedef _STORAGE_PHYSICAL_NODE_DATA* PSTORAGE_PHYSICAL_NODE_DATA;
typedef _RTL_PROCESS_LOCK_INFORMATION RTL_PROCESS_LOCK_INFORMATION;
typedef _STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR
    STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR;
typedef _STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR* PSTORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR;
typedef _STORAGE_HW_FIRMWARE_SLOT_INFO* PSTORAGE_HW_FIRMWARE_SLOT_INFO;
typedef _DISK_CACHE_INFORMATION DISK_CACHE_INFORMATION;
typedef _STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR
    STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR;
typedef _FILE_ALLOCATED_RANGE_BUFFER* PFILE_ALLOCATED_RANGE_BUFFER;
typedef _STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR* PSTORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR;
typedef _MINIDUMP_THREAD_INFO* PMINIDUMP_THREAD_INFO;
typedef _SYSTEM_VERIFIER_INFORMATION_EX SYSTEM_VERIFIER_INFORMATION_EX;
typedef _STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR
    STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR;
typedef _SCM_REGION_FLAG* PSCM_REGION_FLAG;
typedef _STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR* PSTORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR;
typedef _IDEREGS* PIDEREGS;
typedef _SHRINK_VOLUME_INFORMATION SHRINK_VOLUME_INFORMATION;
typedef _STORAGE_DISK_HEALTH_STATUS STORAGE_DISK_HEALTH_STATUS;
typedef _STORAGE_DISK_HEALTH_STATUS* PSTORAGE_DISK_HEALTH_STATUS;
typedef _IDEREGS IDEREGS;
typedef _SCM_REGION SCM_REGION;
typedef _STORAGE_DISK_OPERATIONAL_STATUS STORAGE_DISK_OPERATIONAL_STATUS;
typedef _SENDCMDINPARAMS* LPSENDCMDINPARAMS;
typedef _STORAGE_DISK_OPERATIONAL_STATUS* PSTORAGE_DISK_OPERATIONAL_STATUS;
typedef _SCM_REGIONS* PSCM_REGIONS;
typedef _MINIDUMP_USER_STREAM_INFORMATION* PMINIDUMP_USER_STREAM_INFORMATION;
typedef _STORAGE_OPERATIONAL_STATUS_REASON STORAGE_OPERATIONAL_STATUS_REASON;
typedef _STORAGE_OPERATIONAL_STATUS_REASON* PSTORAGE_OPERATIONAL_STATUS_REASON;
typedef _DISK_PERFORMANCE* PDISK_PERFORMANCE;
typedef _SYSTEM_HANDLE_INFORMATION SYSTEM_HANDLE_INFORMATION;
typedef _SCM_PD_RUNTIME_FW_ACTIVATION_ARM_STATE
    SCM_PD_RUNTIME_FW_ACTIVATION_ARM_STATE;
typedef RpcProxyPerfCounters RpcPerfCounters;
typedef void ( *I_RpcProxyUpdatePerfCounterFn )( RpcPerfCounters, int, unsigned long );
typedef _DISK_PERFORMANCE DISK_PERFORMANCE;
typedef unsigned char* PFORMAT_STRING;
typedef _STORAGE_ATTRIBUTE_MGMT_ACTION* PSTORAGE_ATTRIBUTE_MGMT_ACTION;
typedef _DISK_LOGGING DISK_LOGGING;
typedef _STORAGE_OPERATIONAL_REASON STORAGE_OPERATIONAL_REASON;
typedef _VIRTUAL_STORAGE_TYPE* PVIRTUAL_STORAGE_TYPE;
typedef _MINIDUMP_SYSTEM_FILECACHE_INFORMATION
    MINIDUMP_SYSTEM_FILECACHE_INFORMATION;
typedef _STORAGE_OPERATIONAL_REASON* PSTORAGE_OPERATIONAL_REASON;
typedef _STORAGE_ATTRIBUTE_MGMT STORAGE_ATTRIBUTE_MGMT;
typedef _CHANGER_DEVICE_PROBLEM_TYPE CHANGER_DEVICE_PROBLEM_TYPE;
typedef _SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT_WIN8
    SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT_WIN8;
typedef _SYSTEM_OBJECT_INFORMATION SYSTEM_OBJECT_INFORMATION;
typedef _STORAGE_DEVICE_MANAGEMENT_STATUS* PSTORAGE_DEVICE_MANAGEMENT_STATUS;
typedef _STORAGE_ADAPTER_SERIAL_NUMBER STORAGE_ADAPTER_SERIAL_NUMBER;
typedef _STORAGE_ADAPTER_SERIAL_NUMBER* PSTORAGE_ADAPTER_SERIAL_NUMBER;
typedef _MINIDUMP_THREAD_NAME MINIDUMP_THREAD_NAME;
typedef _STORAGE_COUNTERS STORAGE_COUNTERS;
typedef _STORAGE_ZONED_DEVICE_TYPES STORAGE_ZONED_DEVICE_TYPES;
typedef _STORAGE_ZONED_DEVICE_TYPES* PSTORAGE_ZONED_DEVICE_TYPES;
typedef NTFS_FILE_RECORD_OUTPUT_BUFFER NTFS_FILE_RECORD_OUTPUT_BUFFER;
typedef _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER* PFILE_QUERY_ON_DISK_VOL_INFO_BUFFER;
typedef _STORAGE_ZONE_TYPES STORAGE_ZONE_TYPES;
typedef _SYSTEM_CONTEXT_SWITCH_INFORMATION* PSYSTEM_CONTEXT_SWITCH_INFORMATION;
typedef _SYSTEM_BASIC_WORKING_SET_INFORMATION* PSYSTEM_BASIC_WORKING_SET_INFORMATION;
typedef _SCM_PHYSICAL_DEVICE_INSTANCE* PSCM_PHYSICAL_DEVICE_INSTANCE;
typedef _STORAGE_ZONE_TYPES* PSTORAGE_ZONE_TYPES;
typedef _BIN_COUNT* PBIN_COUNT;
typedef _STORAGE_ZONE_GROUP STORAGE_ZONE_GROUP;
typedef _GETVERSIONINPARAMS GETVERSIONINPARAMS;
typedef _STORAGE_ZONE_GROUP* PSTORAGE_ZONE_GROUP;
typedef _FILE_PROVIDER_EXTERNAL_INFO_V1* PFILE_PROVIDER_EXTERNAL_INFO_V1;
typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W* PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W;
typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_A RPC_HTTP_TRANSPORT_CREDENTIALS_A;
typedef MINIDUMP_PROCESS_VM_COUNTERS_N* PMINIDUMP_PROCESS_VM_COUNTERS_N;
typedef _FILE_PROVIDER_EXTERNAL_INFO_V0* PFILE_PROVIDER_EXTERNAL_INFO_V0;
typedef tagPARAMDATA PARAMDATA;
typedef MOVE_FILE_DATA* PMOVE_FILE_DATA;
typedef _STORAGE_ZONED_DEVICE_DESCRIPTOR STORAGE_ZONED_DEVICE_DESCRIPTOR;
typedef _CONTAINER_ROOT_INFO_INPUT CONTAINER_ROOT_INFO_INPUT;
typedef _MOVE_FILE_DATA32 MOVE_FILE_DATA32;
typedef _STORAGE_ZONED_DEVICE_DESCRIPTOR* PSTORAGE_ZONED_DEVICE_DESCRIPTOR;
typedef _SCM_BUS_DEDICATED_MEMORY_STATE* PSCM_BUS_DEDICATED_MEMORY_STATE;
typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A* PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_A;
typedef _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK
    MINIDUMP_READ_MEMORY_FAILURE_CALLBACK;
typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W
    RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W;
typedef _MINIDUMP_THREAD_CALLBACK MINIDUMP_THREAD_CALLBACK;
typedef _DEVICE_LOCATION DEVICE_LOCATION;
typedef _DEVICE_LOCATION* PDEVICE_LOCATION;
typedef _DRIVERSTATUS DRIVERSTATUS;
typedef _STORAGE_DEVICE_LOCATION_DESCRIPTOR STORAGE_DEVICE_LOCATION_DESCRIPTOR;
typedef _STORAGE_DEVICE_LOCATION_DESCRIPTOR* PSTORAGE_DEVICE_LOCATION_DESCRIPTOR;
typedef _DRIVERSTATUS* LPDRIVERSTATUS;
typedef _GET_DISK_ATTRIBUTES GET_DISK_ATTRIBUTES;
typedef _STORAGE_DEVICE_NUMA_PROPERTY STORAGE_DEVICE_NUMA_PROPERTY;
typedef _THREAD_WRITE_FLAGS THREAD_WRITE_FLAGS;
typedef _STORAGE_DEVICE_NUMA_PROPERTY* PSTORAGE_DEVICE_NUMA_PROPERTY;
typedef _STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT
    STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT;
typedef _STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT* PSTORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT;
typedef _FILE_MAKE_COMPATIBLE_BUFFER* PFILE_MAKE_COMPATIBLE_BUFFER;
typedef _STORAGE_HW_ENDURANCE_INFO STORAGE_HW_ENDURANCE_INFO;
typedef void* RPC_NS_HANDLE;
typedef _STORAGE_HW_ENDURANCE_INFO* PSTORAGE_HW_ENDURANCE_INFO;
typedef _SCM_LOGICAL_DEVICE_INSTANCE* PSCM_LOGICAL_DEVICE_INSTANCE;
typedef _FILE_QUERY_SPARING_BUFFER FILE_QUERY_SPARING_BUFFER;
typedef _MINIDUMP_PROCESS_VM_COUNTERS_1* PMINIDUMP_PROCESS_VM_COUNTERS_1;
typedef _STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR
    STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR;
typedef _STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR* PSTORAGE_HW_ENDURANCE_DATA_DESCRIPTOR;
typedef _STORAGE_DEVICE_LED_STATE_DESCRIPTOR* PSTORAGE_DEVICE_LED_STATE_DESCRIPTOR;
typedef _CREATE_DISK_GPT CREATE_DISK_GPT;
typedef _DEVICEDUMP_SECTION_HEADER DEVICEDUMP_SECTION_HEADER;
typedef _STORAGE_DEVICE_SELF_ENCRYPTION_PROPERTY
    STORAGE_DEVICE_SELF_ENCRYPTION_PROPERTY;
typedef _STORAGE_DEVICE_SELF_ENCRYPTION_PROPERTY* PSTORAGE_DEVICE_SELF_ENCRYPTION_PROPERTY;
typedef _STORAGE_ENCRYPTION_TYPE* PSTORAGE_ENCRYPTION_TYPE;
typedef _CREATE_DISK_GPT* PCREATE_DISK_GPT;
typedef _TIMER_SET_INFORMATION_CLASS TIMER_SET_INFORMATION_CLASS;
typedef _STORAGE_DEVICE_SELF_ENCRYPTION_PROPERTY_V2
    STORAGE_DEVICE_SELF_ENCRYPTION_PROPERTY_V2;
typedef _STORAGE_DEVICE_SELF_ENCRYPTION_PROPERTY_V2* PSTORAGE_DEVICE_SELF_ENCRYPTION_PROPERTY_V2;
typedef _DRIVE_LAYOUT_INFORMATION DRIVE_LAYOUT_INFORMATION;
typedef _STORAGE_FRU_ID_DESCRIPTOR STORAGE_FRU_ID_DESCRIPTOR;
typedef _STORAGE_FRU_ID_DESCRIPTOR* PSTORAGE_FRU_ID_DESCRIPTOR;
typedef DWORD DEVICE_DATA_MANAGEMENT_SET_ACTION;
typedef _DEVICEDUMP_COLLECTION_TYPE
    DEVICEDUMP_COLLECTION_TYPEIDE_NOTIFICATION_TYPE;
typedef DWORD DEVICE_DSM_ACTION;
typedef _WNF_STATE_NAME WNF_STATE_NAME;
typedef USN_RECORD_EXTENT* PUSN_RECORD_EXTENT;
typedef _DEVICE_DATA_SET_RANGE DEVICE_DATA_SET_RANGE;
typedef _DRIVE_LAYOUT_INFORMATION* PDRIVE_LAYOUT_INFORMATION;
typedef _DEVICE_DATA_SET_RANGE* PDEVICE_DATA_SET_RANGE;
typedef _SYSTEM_SESSION_MAPPED_VIEW_INFORMATION* PSYSTEM_SESSION_MAPPED_VIEW_INFORMATION;
typedef _DEVICE_DATA_SET_RANGE DEVICE_DSM_RANGE;
typedef _DEVICE_DATA_SET_RANGE* PDEVICE_DSM_RANGE;
typedef ETW_PROCESS_TRACE_MODES ETW_PROCESS_TRACE_MODES;
typedef _DEVICE_MANAGE_DATA_SET_ATTRIBUTES DEVICE_MANAGE_DATA_SET_ATTRIBUTES;
typedef _STORAGE_SANITIZE_METHOD* PSTORAGE_SANITIZE_METHOD;
typedef _DEVICE_MANAGE_DATA_SET_ATTRIBUTES* PDEVICE_MANAGE_DATA_SET_ATTRIBUTES;
typedef _RETRIEVAL_POINTER_BASE* PRETRIEVAL_POINTER_BASE;
typedef _DEVICE_MANAGE_DATA_SET_ATTRIBUTES DEVICE_DSM_INPUT;
typedef ETW_BUFFER_CALLBACK_INFORMATION ETW_BUFFER_CALLBACK_INFORMATION;
typedef _DEVICE_MANAGE_DATA_SET_ATTRIBUTES* PDEVICE_DSM_INPUT;
typedef BOOL ( *PETW_BUFFER_CALLBACK )( const ETW_BUFFER_HEADER*, ULONG, const ETW_BUFFER_CALLBACK_INFORMATION*, void* );
typedef _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT
    DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT;
typedef READ_FILE_USN_DATA* PREAD_FILE_USN_DATA;
typedef _SCM_PD_REINITIALIZE_MEDIA_OUTPUT SCM_PD_REINITIALIZE_MEDIA_OUTPUT;
typedef _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT* PDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT;
typedef _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT DEVICE_DSM_OUTPUT;
typedef _SCM_PD_MEDIA_REINITIALIZATION_STATUS
    SCM_PD_MEDIA_REINITIALIZATION_STATUS;
typedef _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT* PDEVICE_DSM_OUTPUT;
typedef _DEVICE_DSM_DEFINITION DEVICE_DSM_DEFINITION;
typedef _EVENT_TRACE_LOGFILEW* PEVENT_TRACE_LOGFILEW;
typedef ULONG ( *PEVENT_TRACE_BUFFER_CALLBACKW )( PEVENT_TRACE_LOGFILEW );
typedef _DEVICE_DSM_DEFINITION* PDEVICE_DSM_DEFINITION;
typedef void ( *PETW_BUFFER_COMPLETION_CALLBACK )( const ETW_BUFFER_HEADER*,
    void* );
typedef _PARTITION_INFORMATION_MBR* PPARTITION_INFORMATION_MBR;
typedef _REQUEST_OPLOCK_INPUT_BUFFER* PREQUEST_OPLOCK_INPUT_BUFFER;
typedef _DEVICE_DSM_NOTIFICATION_PARAMETERS DEVICE_DSM_NOTIFICATION_PARAMETERS;
typedef ULONG ( *WMIDPREQUEST )( WMIDPREQUESTCODE, PVOID, ULONG*, PVOID );
typedef _DEVICE_DSM_NOTIFICATION_PARAMETERS* PDEVICE_DSM_NOTIFICATION_PARAMETERS;
typedef ARRAY_INFO* PARRAY_INFO;
typedef _WNF_DELIVERY_DESCRIPTOR* PWNF_DELIVERY_DESCRIPTOR;
typedef USN_JOURNAL_DATA_V1 USN_JOURNAL_DATA_V1;
typedef USN_JOURNAL_DATA_V1 USN_JOURNAL_DATA;
typedef _SET_PARTITION_INFORMATION SET_PARTITION_INFORMATION;
typedef SET_PARTITION_INFORMATION SET_PARTITION_INFORMATION_MBR;
typedef _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST* PSTORAGE_QUERY_DEPENDENT_VOLUME_REQUEST;
typedef _DEVICEDUMP_RESTRICTED_SUBSECTION* PDEVICEDUMP_RESTRICTED_SUBSECTION;
typedef _VIRTUAL_STORAGE_TYPE VIRTUAL_STORAGE_TYPE;
typedef _SYSTEM_FIRMWARE_TABLE_INFORMATION* PSYSTEM_FIRMWARE_TABLE_INFORMATION;
typedef _STORAGE_OFFLOAD_TOKEN* PSTORAGE_OFFLOAD_TOKEN;
typedef _STORAGE_RPMB_COMMAND_TYPE* PSTORAGE_RPMB_COMMAND_TYPE;
typedef _DEVICE_DSM_OFFLOAD_READ_PARAMETERS DEVICE_DSM_OFFLOAD_READ_PARAMETERS;
typedef _DISK_EX_INT13_INFO DISK_EX_INT13_INFO;
typedef _RPC_SERVER_INTERFACE* PRPC_SERVER_INTERFACE;
typedef _DEVICE_DSM_OFFLOAD_READ_PARAMETERS* PDEVICE_DSM_OFFLOAD_READ_PARAMETERS;
typedef _STORAGE_OFFLOAD_READ_OUTPUT STORAGE_OFFLOAD_READ_OUTPUT;
typedef _STORAGE_OFFLOAD_READ_OUTPUT* PSTORAGE_OFFLOAD_READ_OUTPUT;
typedef _WORKER_FACTORY_DEFERRED_WORK WORKER_FACTORY_DEFERRED_WORK;
typedef _DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS
    DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS;
typedef NTFS_FILE_RECORD_INPUT_BUFFER* PNTFS_FILE_RECORD_INPUT_BUFFER;
typedef _MINIDUMP_UNLOADED_MODULE* PMINIDUMP_UNLOADED_MODULE;
typedef _DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS* PDEVICE_DSM_OFFLOAD_WRITE_PARAMETERS;
typedef BULK_SECURITY_TEST_DATA* PBULK_SECURITY_TEST_DATA;
typedef _PHYSICAL_ELEMENT_STATUS_REQUEST PHYSICAL_ELEMENT_STATUS_REQUEST;
typedef _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD
    DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD;
typedef _STORAGE_OFFLOAD_WRITE_OUTPUT STORAGE_OFFLOAD_WRITE_OUTPUT;
typedef _CREATE_DISK_MBR CREATE_DISK_MBR;
typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W
    RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W;
typedef RPC_INTERFACE_TEMPLATEW RPC_INTERFACE_TEMPLATEW;
typedef _STORAGE_OFFLOAD_WRITE_OUTPUT* PSTORAGE_OFFLOAD_WRITE_OUTPUT;
typedef _MINIDUMP_UNLOADED_MODULE MINIDUMP_UNLOADED_MODULE;
typedef MOVE_FILE_DATA MOVE_FILE_DATA;
typedef _SYSTEM_PERFORMANCE_INFORMATION SYSTEM_PERFORMANCE_INFORMATION;
typedef _DEVICE_DATA_SET_LBP_STATE_PARAMETERS
    DEVICE_DATA_SET_LBP_STATE_PARAMETERS;
typedef _DEVICE_DATA_SET_LBP_STATE_PARAMETERS* PDEVICE_DATA_SET_LBP_STATE_PARAMETERS;
typedef _DEVICE_DATA_SET_LBP_STATE_PARAMETERS DEVICE_DSM_ALLOCATION_PARAMETERS;
typedef _GET_LENGTH_INFORMATION GET_LENGTH_INFORMATION;
typedef _DEVICE_DATA_SET_LBP_STATE_PARAMETERS* PDEVICE_DSM_ALLOCATION_PARAMETERS;
typedef _SYSTEM_VERIFIER_ISSUE SYSTEM_VERIFIER_ISSUE;
typedef _DEVICE_DATA_SET_LB_PROVISIONING_STATE
    DEVICE_DATA_SET_LB_PROVISIONING_STATE;
typedef _MINIDUMP_EXCEPTION_INFORMATION64 MINIDUMP_EXCEPTION_INFORMATION64;
typedef USN_RECORD_V4* PUSN_RECORD_V4;
typedef _DEVICE_DATA_SET_LB_PROVISIONING_STATE* PDEVICE_DATA_SET_LB_PROVISIONING_STATE;
typedef _REASSIGN_BLOCKS_EX REASSIGN_BLOCKS_EX;
typedef _DEVICE_DATA_SET_LB_PROVISIONING_STATE DEVICE_DSM_ALLOCATION_OUTPUT;
typedef _DEVICEDUMP_STRUCTURE_VERSION* PDEVICEDUMP_STRUCTURE_VERSION;
typedef _DEVICE_DATA_SET_LB_PROVISIONING_STATE* PDEVICE_DSM_ALLOCATION_OUTPUT;
typedef _REASSIGN_BLOCKS REASSIGN_BLOCKS;
typedef _DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2
    DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2;
typedef _DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2* PDEVICE_DATA_SET_LB_PROVISIONING_STATE_V2;
typedef _DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 DEVICE_DSM_ALLOCATION_OUTPUT2;
typedef _DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2* PDEVICE_DSM_ALLOCATION_OUTPUT2;
typedef _REASSIGN_BLOCKS_EX* PREASSIGN_BLOCKS_EX;
typedef _DEVICE_DATA_SET_REPAIR_PARAMETERS DEVICE_DATA_SET_REPAIR_PARAMETERS;
typedef _STORAGE_DEVICE_POWER_CAP_UNITS STORAGE_DEVICE_POWER_CAP_UNITS;
typedef _DEVICE_DATA_SET_REPAIR_PARAMETERS* PDEVICE_DATA_SET_REPAIR_PARAMETERS;
typedef _DEVICE_DATA_SET_REPAIR_PARAMETERS DEVICE_DSM_REPAIR_PARAMETERS;
typedef _DEVICE_DATA_SET_REPAIR_PARAMETERS* PDEVICE_DSM_REPAIR_PARAMETERS;
typedef _PARTITION_INFORMATION_EX PARTITION_INFORMATION_EX;
typedef _DEVICE_DATA_SET_REPAIR_OUTPUT DEVICE_DATA_SET_REPAIR_OUTPUT;
typedef _STORAGE_DEVICE_POWER_CAP* PSTORAGE_DEVICE_POWER_CAP;
typedef _DEVICE_DATA_SET_REPAIR_OUTPUT* PDEVICE_DATA_SET_REPAIR_OUTPUT;
typedef _SYSTEM_CALL_COUNT_INFORMATION SYSTEM_CALL_COUNT_INFORMATION;
typedef _DEVICE_DATA_SET_REPAIR_OUTPUT DEVICE_DSM_REPAIR_OUTPUT;
typedef _DEVICE_DATA_SET_REPAIR_OUTPUT* PDEVICE_DSM_REPAIR_OUTPUT;
typedef _DETECTION_TYPE DETECTION_TYPE;
typedef _DEVICE_DATA_SET_SCRUB_OUTPUT DEVICE_DATA_SET_SCRUB_OUTPUT;
typedef _STORAGE_DIAGNOSTIC_LEVEL* PSTORAGE_DIAGNOSTIC_LEVEL;
typedef _DEVICE_DATA_SET_SCRUB_OUTPUT* PDEVICE_DATA_SET_SCRUB_OUTPUT;
typedef _SCM_PD_MANAGEMENT_STATUS* PSCM_PD_MANAGEMENT_STATUS;
typedef _DEVICE_DATA_SET_SCRUB_OUTPUT DEVICE_DSM_SCRUB_OUTPUT;
typedef _DEVICE_DATA_SET_SCRUB_OUTPUT* PDEVICE_DSM_SCRUB_OUTPUT;
typedef _SEC_WINNT_AUTH_IDENTITY_W SEC_WINNT_AUTH_IDENTITY_W;
typedef _SCM_PD_MANAGEMENT_STATUS SCM_PD_MANAGEMENT_STATUS;
typedef _DEVICE_DATA_SET_SCRUB_EX_OUTPUT* PDEVICE_DATA_SET_SCRUB_EX_OUTPUT;
typedef _DEVICE_DATA_SET_SCRUB_EX_OUTPUT DEVICE_DSM_SCRUB_OUTPUT2;
typedef _SCM_PD_FRU_ID_STRING SCM_PD_FRU_ID_STRING;
typedef _DEVICE_DATA_SET_SCRUB_EX_OUTPUT* PDEVICE_DSM_SCRUB_OUTPUT2;
typedef DWORD RVA;
typedef _STORAGE_DIAGNOSTIC_REQUEST* PSTORAGE_DIAGNOSTIC_REQUEST;
typedef _DEVICE_DSM_TIERING_QUERY_INPUT DEVICE_DSM_TIERING_QUERY_INPUT;
typedef _ETW_TRACE_PARTITION_INFORMATION* PETW_TRACE_PARTITION_INFORMATION;
typedef _SYSTEM_CONTEXT_SWITCH_INFORMATION SYSTEM_CONTEXT_SWITCH_INFORMATION;
typedef _DEVICE_DSM_TIERING_QUERY_INPUT* PDEVICE_DSM_TIERING_QUERY_INPUT;
typedef _DEVICE_DSM_TIERING_QUERY_INPUT DEVICE_DSM_TIERING_QUERY_PARAMETERS;
typedef _STORAGE_MEDIA_SERIAL_NUMBER_DATA* PSTORAGE_MEDIA_SERIAL_NUMBER_DATA;
typedef _DEVICE_DSM_TIERING_QUERY_INPUT* PDEVICE_DSM_TIERING_QUERY_PARAMETERS;
typedef _MEDIA_TYPE* PMEDIA_TYPE;
typedef _STORAGE_TIER_REGION STORAGE_TIER_REGION;
typedef _STORAGE_TIER_REGION* PSTORAGE_TIER_REGION;
typedef _RPC_SECURITY_QOS_V4_A* PRPC_SECURITY_QOS_V4_A;
typedef _MEDIA_TYPE MEDIA_TYPE;
typedef _WRITE_CACHE_TYPE WRITE_CACHE_TYPE;
typedef WORD* PBAD_TRACK_NUMBER;
typedef USN_TRACK_MODIFIED_RANGES USN_TRACK_MODIFIED_RANGES;
typedef _DEVICE_DSM_TIERING_QUERY_OUTPUT DEVICE_DSM_TIERING_QUERY_OUTPUT;
typedef _MINIDUMP_THREAD_EX* PMINIDUMP_THREAD_EX;
typedef _DEVICE_DSM_TIERING_QUERY_OUTPUT* PDEVICE_DSM_TIERING_QUERY_OUTPUT;
typedef _FORMAT_PARAMETERS* PFORMAT_PARAMETERS;
typedef _DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS
    DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS;
typedef _PHYSICAL_ELEMENT_STATUS PHYSICAL_ELEMENT_STATUS;
typedef _STORAGE_IDLE_POWER STORAGE_IDLE_POWER;
typedef _SCM_PD_LAST_FW_ACTIVATION_STATUS SCM_PD_LAST_FW_ACTIVATION_STATUS;
typedef _DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS* PDEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS;
typedef _FILESYSTEM_STATISTICS* PFILESYSTEM_STATISTICS;
typedef _DRIVE_LAYOUT_INFORMATION_GPT* PDRIVE_LAYOUT_INFORMATION_GPT;
typedef _DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT
    DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT;
typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A
    RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A;
typedef _DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT* PDEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT;
typedef _SCM_PD_FIRMWARE_ACTIVATION_STATE* PSCM_PD_FIRMWARE_ACTIVATION_STATE;
typedef _RPC_SYNTAX_IDENTIFIER* PRPC_SYNTAX_IDENTIFIER;
typedef _DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT
    DEVICE_DSM_TOPOLOGY_ID_QUERY_OUTPUT;
typedef _DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT* PDEVICE_DSM_TOPOLOGY_ID_QUERY_OUTPUT;
typedef _SCM_PD_PASSTHROUGH_INPUT SCM_PD_PASSTHROUGH_INPUT;
typedef _EXFAT_STATISTICS EXFAT_STATISTICS;
typedef _DEVICE_STORAGE_ADDRESS_RANGE DEVICE_STORAGE_ADDRESS_RANGE;
typedef _DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE* PDEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE;
typedef _DRIVE_LAYOUT_INFORMATION_MBR DRIVE_LAYOUT_INFORMATION_MBR;
typedef _MINIDUMP_HEADER* PMINIDUMP_HEADER;
typedef _DEVICE_STORAGE_ADDRESS_RANGE* PDEVICE_STORAGE_ADDRESS_RANGE;
typedef _SYSTEM_VERIFIER_INFORMATION_LEGACY* PSYSTEM_VERIFIER_INFORMATION_LEGACY;
typedef _DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT
    DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT;
typedef _STORAGE_ALLOCATE_BC_STREAM_OUTPUT STORAGE_ALLOCATE_BC_STREAM_OUTPUT;
typedef _DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT* PDEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT;
typedef _DEVICE_DSM_REPORT_ZONES_PARAMETERS DEVICE_DSM_REPORT_ZONES_PARAMETERS;
typedef _DEVICE_DSM_REPORT_ZONES_PARAMETERS* PDEVICE_DSM_REPORT_ZONES_PARAMETERS;
typedef _TRACE_PERIODIC_CAPTURE_STATE_INFO TRACE_PERIODIC_CAPTURE_STATE_INFO;
typedef _STORAGE_ZONES_ATTRIBUTES STORAGE_ZONES_ATTRIBUTES;
typedef _SCM_PD_OPERATIONAL_STATUS_REASON* PSCM_PD_OPERATIONAL_STATUS_REASON;
typedef _SCM_PD_REINITIALIZE_MEDIA_INPUT* PSCM_PD_REINITIALIZE_MEDIA_INPUT;
typedef CREATE_USN_JOURNAL_DATA CREATE_USN_JOURNAL_DATA;
typedef _STORAGE_ZONE_CONDITION* PSTORAGE_ZONE_CONDITION;
typedef _SYSTEM_VERIFIER_INFORMATION_EX* PSYSTEM_VERIFIER_INFORMATION_EX;
typedef _EFI_DRIVER_ENTRY_LIST EFI_DRIVER_ENTRY_LIST;
typedef _RPC_SECURITY_QOS_V3_A RPC_SECURITY_QOS_V3_A;
typedef _TRACE_LOGFILE_HEADER* PTRACE_LOGFILE_HEADER;
typedef _STORAGE_ZONE_DESCRIPTOR STORAGE_ZONE_DESCRIPTOR;
typedef _DECRYPTION_STATUS_BUFFER* PDECRYPTION_STATUS_BUFFER;
typedef _SCM_PD_REINITIALIZE_MEDIA_INPUT SCM_PD_REINITIALIZE_MEDIA_INPUT;
typedef _STORAGE_REINITIALIZE_MEDIA STORAGE_REINITIALIZE_MEDIA;
typedef _STORAGE_ZONE_DESCRIPTOR* PSTORAGE_ZONE_DESCRIPTOR;
typedef _MINIDUMP_MEMORY_DESCRIPTOR MINIDUMP_MEMORY_DESCRIPTOR;
typedef RPC_STATUS ( *I_RpcProxyGetConnectionTimeoutFn )( unsigned long* );
typedef _ACTIVATION_CONTEXT* PACTIVATION_CONTEXT;
typedef _DEVICE_DSM_REPORT_ZONES_DATA DEVICE_DSM_REPORT_ZONES_DATA;
typedef _ENCRYPTED_DATA_INFO ENCRYPTED_DATA_INFO;
typedef _GP_LOG_PAGE_DESCRIPTOR GP_LOG_PAGE_DESCRIPTOR;
typedef _DEVICE_DSM_REPORT_ZONES_DATA* PDEVICE_DSM_REPORT_ZONES_DATA;
typedef _TRACE_LOGFILE_HEADER64 TRACE_LOGFILE_HEADER64;
typedef _DEVICE_DSM_REPORT_ZONES_DATA DEVICE_DSM_REPORT_ZONES_OUTPUT;
typedef _LDRP_LOAD_CONTEXT* PLDRP_LOAD_CONTEXT;
typedef USN_JOURNAL_DATA_V1* PUSN_JOURNAL_DATA_V1;
typedef _DEVICE_DSM_REPORT_ZONES_DATA* PDEVICE_DSM_REPORT_ZONES_OUTPUT;
typedef _DEVICEDUMP_PUBLIC_SUBSECTION DEVICEDUMP_PUBLIC_SUBSECTION;
typedef _EVENT_TYPE EVENT_TYPE;
typedef RPC_CLIENT_INFORMATION1 RPC_CLIENT_INFORMATION1;
typedef _DEVICE_STORAGE_RANGE_ATTRIBUTES DEVICE_STORAGE_RANGE_ATTRIBUTES;
typedef _SI_COPYFILE* PSI_COPYFILE;
typedef _DEVICE_STORAGE_RANGE_ATTRIBUTES* PDEVICE_STORAGE_RANGE_ATTRIBUTES;
typedef _MINIDUMP_HANDLE_DESCRIPTOR MINIDUMP_HANDLE_DESCRIPTOR;
typedef _MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE
    MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE;
typedef _DEVICE_DSM_RANGE_ERROR_INFO DEVICE_DSM_RANGE_ERROR_INFO;
typedef _DISK_GEOMETRY DISK_GEOMETRY;
typedef _DEVICE_DSM_RANGE_ERROR_INFO* PDEVICE_DSM_RANGE_ERROR_INFO;
typedef _DEVICE_DSM_RANGE_ERROR_INFO DEVICE_DSM_RANGE_ERROR_OUTPUT;
typedef _DEVICE_DSM_RANGE_ERROR_INFO* PDEVICE_DSM_RANGE_ERROR_OUTPUT;
typedef _WRITE_CACHE_ENABLE WRITE_CACHE_ENABLE;
typedef _DEVICE_DSM_LOST_QUERY_PARAMETERS DEVICE_DSM_LOST_QUERY_PARAMETERS;
typedef _STORAGE_WRITE_CACHE_PROPERTY STORAGE_WRITE_CACHE_PROPERTY;
typedef _DEVICE_DSM_LOST_QUERY_PARAMETERS* PDEVICE_DSM_LOST_QUERY_PARAMETERS;
typedef _DEVICE_DSM_LOST_QUERY_OUTPUT DEVICE_DSM_LOST_QUERY_OUTPUT;
typedef _DEVICE_DSM_LOST_QUERY_OUTPUT* PDEVICE_DSM_LOST_QUERY_OUTPUT;
typedef _SYSTEM_POOL_ENTRY SYSTEM_POOL_ENTRY;
typedef _DEVICE_DSM_FREE_SPACE_OUTPUT DEVICE_DSM_FREE_SPACE_OUTPUT;
typedef _DEVICE_DSM_FREE_SPACE_OUTPUT* PDEVICE_DSM_FREE_SPACE_OUTPUT;
typedef _TIMER_BASIC_INFORMATION TIMER_BASIC_INFORMATION;
typedef _DEVICE_DSM_CONVERSION_OUTPUT DEVICE_DSM_CONVERSION_OUTPUT;
typedef _DEVICE_DSM_CONVERSION_OUTPUT* PDEVICE_DSM_CONVERSION_OUTPUT;
typedef _GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST* PGET_DEVICE_INTERNAL_STATUS_DATA_REQUEST;
typedef _STORAGE_GET_BC_PROPERTIES_OUTPUT STORAGE_GET_BC_PROPERTIES_OUTPUT;
typedef _DEVICE_INTERNAL_STATUS_DATA DEVICE_INTERNAL_STATUS_DATA;
typedef _STORAGE_GET_BC_PROPERTIES_OUTPUT* PSTORAGE_GET_BC_PROPERTIES_OUTPUT;
typedef _STORAGE_ALLOCATE_BC_STREAM_INPUT* PSTORAGE_ALLOCATE_BC_STREAM_INPUT;
typedef _TXFS_TRANSACTION_ACTIVE_INFO TXFS_TRANSACTION_ACTIVE_INFO;
typedef _STORAGE_ALLOCATE_BC_STREAM_OUTPUT* PSTORAGE_ALLOCATE_BC_STREAM_OUTPUT;
typedef _STORAGE_PRIORITY_HINT_SUPPORT* PSTORAGE_PRIORITY_HINT_SUPPORT;
typedef _BOOT_AREA_INFO BOOT_AREA_INFO;
typedef _STORAGE_DIAGNOSTIC_TARGET_TYPE STORAGE_DIAGNOSTIC_TARGET_TYPE;
typedef _STORAGE_DIAGNOSTIC_TARGET_TYPE* PSTORAGE_DIAGNOSTIC_TARGET_TYPE;
typedef _MODULE_WRITE_FLAGS MODULE_WRITE_FLAGS;
typedef tagRPC_CALL_ATTRIBUTES_V1_W RPC_CALL_ATTRIBUTES_V1_W;
typedef _ST_READ_LATENCY_STATS* PST_READ_LATENCY_STATS;
typedef _ELEMENT_TYPE* PELEMENT_TYPE;
typedef _STORAGE_DIAGNOSTIC_REQUEST STORAGE_DIAGNOSTIC_REQUEST;
typedef _TXFS_LIST_TRANSACTIONS_ENTRY* PTXFS_LIST_TRANSACTIONS_ENTRY;
typedef _STORAGE_DIAGNOSTIC_DATA STORAGE_DIAGNOSTIC_DATA;
typedef _STORAGE_DIAGNOSTIC_DATA* PSTORAGE_DIAGNOSTIC_DATA;
typedef _QUERY_FILE_LAYOUT_INPUT QUERY_FILE_LAYOUT_INPUT;
typedef _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER FILE_QUERY_ON_DISK_VOL_INFO_BUFFER;
typedef _PHYSICAL_ELEMENT_STATUS_REQUEST* PPHYSICAL_ELEMENT_STATUS_REQUEST;
typedef _STORAGE_RESERVE_ID STORAGE_RESERVE_ID;
typedef _PHYSICAL_ELEMENT_STATUS_DESCRIPTOR PHYSICAL_ELEMENT_STATUS_DESCRIPTOR;
typedef _PHYSICAL_ELEMENT_STATUS_DESCRIPTOR* PPHYSICAL_ELEMENT_STATUS_DESCRIPTOR;
typedef _SHRINK_VOLUME_REQUEST_TYPES* PSHRINK_VOLUME_REQUEST_TYPES;
typedef _RPC_BINDING_VECTOR RPC_BINDING_VECTOR;
typedef _MINIDUMP_MISC_INFO* PMINIDUMP_MISC_INFO;
typedef _PHYSICAL_ELEMENT_STATUS* PPHYSICAL_ELEMENT_STATUS;
typedef _TXFS_SAVEPOINT_INFORMATION TXFS_SAVEPOINT_INFORMATION;
typedef _REMOVE_ELEMENT_AND_TRUNCATE_REQUEST
    REMOVE_ELEMENT_AND_TRUNCATE_REQUEST;
typedef _MINIDUMP_INCLUDE_MODULE_CALLBACK MINIDUMP_INCLUDE_MODULE_CALLBACK;
typedef _REMOVE_ELEMENT_AND_TRUNCATE_REQUEST* PREMOVE_ELEMENT_AND_TRUNCATE_REQUEST;
typedef _SM_STORE_BASIC_PARAMS* PSM_STORE_BASIC_PARAMS;
typedef _DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE
    DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE;
typedef _TXFS_SAVEPOINT_INFORMATION* PTXFS_SAVEPOINT_INFORMATION;
typedef _EVENT_TRACE_EXECUTIVE_RESOURCE_INFORMATION
    EVENT_TRACE_EXECUTIVE_RESOURCE_INFORMATION;
typedef XMLHTTPRequest XMLHTTPRequest;
typedef _NDR_ASYNC_MESSAGE* PNDR_ASYNC_MESSAGE;
typedef _DEVICE_INTERNAL_STATUS_DATA_SET* PDEVICE_INTERNAL_STATUS_DATA_SET;
typedef _SD_CHANGE_MACHINE_SID_INPUT SD_CHANGE_MACHINE_SID_INPUT;
typedef void* RPC_IF_HANDLE;
typedef _GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST
    GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST;
typedef STARTING_LCN_INPUT_BUFFER* PSTARTING_LCN_INPUT_BUFFER;
typedef _SD_CHANGE_MACHINE_SID_INPUT* PSD_CHANGE_MACHINE_SID_INPUT;
typedef _DISK_GROW_PARTITION DISK_GROW_PARTITION;
typedef _STORAGE_SANITIZE_METHOD STORAGE_SANITIZE_METHOD;
typedef _MINIDUMP_CALLBACK_INPUT* PMINIDUMP_CALLBACK_INPUT;
typedef BOOL ( *MINIDUMP_CALLBACK_ROUTINE )( PVOID, PMINIDUMP_CALLBACK_INPUT, PMINIDUMP_CALLBACK_OUTPUT );
typedef _SM_CREATE_REQUEST SM_CREATE_REQUEST;
typedef _CHANGER_MOVE_MEDIUM* PCHANGER_MOVE_MEDIUM;
typedef _STORAGE_REINITIALIZE_MEDIA* PSTORAGE_REINITIALIZE_MEDIA;
typedef _FILE_SYSTEM_RECOGNITION_INFORMATION
    FILE_SYSTEM_RECOGNITION_INFORMATION;
typedef _PROFILE_SOURCE_INFO* PPROFILE_SOURCE_INFO;
typedef _STORAGE_MEDIA_SERIAL_NUMBER_DATA STORAGE_MEDIA_SERIAL_NUMBER_DATA;
typedef _CHANGER_ELEMENT CHANGER_ELEMENT;
typedef _STORAGE_READ_CAPACITY STORAGE_READ_CAPACITY;
typedef _STORAGE_READ_CAPACITY* PSTORAGE_READ_CAPACITY;
typedef tagRPC_CALL_ATTRIBUTES_V2_W RPC_CALL_ATTRIBUTES_V2_W;
typedef _TXFS_WRITE_BACKUP_INFORMATION* PTXFS_WRITE_BACKUP_INFORMATION;
typedef _WRITE_CACHE_CHANGE WRITE_CACHE_CHANGE;
typedef _WRITE_THROUGH WRITE_THROUGH;
typedef NTFS_VOLUME_DATA_BUFFER* PNTFS_VOLUME_DATA_BUFFER;
typedef _STORAGE_WRITE_CACHE_PROPERTY* PSTORAGE_WRITE_CACHE_PROPERTY;
typedef _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY
    STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY;
typedef _FILE_ZERO_DATA_INFORMATION_EX* PFILE_ZERO_DATA_INFORMATION_EX;
typedef _COVERAGE_MODULES COVERAGE_MODULES;
typedef _PERSISTENT_RESERVE_COMMAND PERSISTENT_RESERVE_COMMAND;
typedef _MINIDUMP_THREAD_INFO_LIST* PMINIDUMP_THREAD_INFO_LIST;
typedef _FILE_ZERO_DATA_INFORMATION_EX FILE_ZERO_DATA_INFORMATION_EX;
typedef _ENCRYPTION_BUFFER ENCRYPTION_BUFFER;
typedef _DEVICEDUMP_COLLECTION_TYPE* PDEVICEDUMP_COLLECTION_TYPE;
typedef _DEVICEDUMP_SUBSECTION_POINTER DEVICEDUMP_SUBSECTION_POINTER;
typedef _RTL_PROCESS_BACKTRACE_INFORMATION* PRTL_PROCESS_BACKTRACE_INFORMATION;
typedef _DEVICEDUMP_SUBSECTION_POINTER* PDEVICEDUMP_SUBSECTION_POINTER;
typedef _SYSTEM_VERIFIER_FAULTS_INFORMATION SYSTEM_VERIFIER_FAULTS_INFORMATION;
typedef _SENDCMDINPARAMS SENDCMDINPARAMS;
typedef _DEVICEDUMP_SECTION_HEADER* PDEVICEDUMP_SECTION_HEADER;
typedef _RPC_ASYNC_STATE* PRPC_ASYNC_STATE;
typedef _GP_LOG_PAGE_DESCRIPTOR* PGP_LOG_PAGE_DESCRIPTOR;
typedef _SYSTEM_NUMA_PROXIMITY_MAP* PSYSTEM_NUMA_PROXIMITY_MAP;
typedef _MINIDUMP_SYSTEM_BASIC_INFORMATION MINIDUMP_SYSTEM_BASIC_INFORMATION;
typedef _EXTENDED_ENCRYPTED_DATA_INFO* PEXTENDED_ENCRYPTED_DATA_INFO;
typedef _DEVICEDUMP_PUBLIC_SUBSECTION* PDEVICEDUMP_PUBLIC_SUBSECTION;
typedef _DISK_RECORD* PDISK_RECORD;
typedef _DEVICEDUMP_RESTRICTED_SUBSECTION DEVICEDUMP_RESTRICTED_SUBSECTION;
typedef _SYSTEM_PAGEFILE_INFORMATION SYSTEM_PAGEFILE_INFORMATION;
typedef _SI_COPYFILE SI_COPYFILE;
typedef _DEVICEDUMP_PRIVATE_SUBSECTION DEVICEDUMP_PRIVATE_SUBSECTION;
typedef _DEVICEDUMP_PRIVATE_SUBSECTION* PDEVICEDUMP_PRIVATE_SUBSECTION;
typedef _SYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION
    SYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION;
typedef _DEVICEDUMP_STORAGEDEVICE_DATA DEVICEDUMP_STORAGEDEVICE_DATA;
typedef _DEVICEDUMP_STORAGEDEVICE_DATA* PDEVICEDUMP_STORAGEDEVICE_DATA;
typedef _DISK_GEOMETRY_EX DISK_GEOMETRY_EX;
typedef _FILE_SET_SPARSE_BUFFER* PFILE_SET_SPARSE_BUFFER;
typedef _SD_ENUM_SDS_OUTPUT SD_ENUM_SDS_OUTPUT;
typedef DWORDLONG CLSN;
typedef _MINIDUMP_USER_RECORD* PMINIDUMP_USER_RECORD;
typedef _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD* PDEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD;
typedef _SCM_PD_FIRMWARE_DOWNLOAD* PSCM_PD_FIRMWARE_DOWNLOAD;
typedef _BIN_RESULTS* PBIN_RESULTS;
typedef _RPC_ASYNC_EVENT RPC_ASYNC_EVENT;
typedef void ( *PFN_RPCNOTIFICATION_ROUTINE )( _RPC_ASYNC_STATE*, void*, RPC_ASYNC_EVENT );
typedef _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP
    DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP;
typedef _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP* PDEVICEDUMP_STORAGESTACK_PUBLIC_DUMP;
typedef tagOLERENDER OLERENDER;
typedef _STORAGE_IDLE_POWER* PSTORAGE_IDLE_POWER;
typedef _CHANGER_SET_ACCESS CHANGER_SET_ACCESS;
typedef _STORAGE_POWERUP_REASON_TYPE STORAGE_POWERUP_REASON_TYPE;
typedef _MINIDUMP_IO_CALLBACK MINIDUMP_IO_CALLBACK;
typedef _TXFS_GET_TRANSACTED_VERSION* PTXFS_GET_TRANSACTED_VERSION;
typedef _STORAGE_POWERUP_REASON_TYPE* PSTORAGE_POWERUP_REASON_TYPE;
typedef _TXFS_CREATE_MINIVERSION_INFO* PTXFS_CREATE_MINIVERSION_INFO;
typedef _LOOKUP_STREAM_FROM_CLUSTER_ENTRY LOOKUP_STREAM_FROM_CLUSTER_ENTRY;
typedef _CHANGER_READ_ELEMENT_STATUS* PCHANGER_READ_ELEMENT_STATUS;
typedef _STORAGE_IDLE_POWERUP_REASON STORAGE_IDLE_POWERUP_REASON;
typedef _STORAGE_IDLE_POWERUP_REASON* PSTORAGE_IDLE_POWERUP_REASON;
typedef _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT LOOKUP_STREAM_FROM_CLUSTER_OUTPUT;
typedef _TXFS_CREATE_MINIVERSION_INFO TXFS_CREATE_MINIVERSION_INFO;
typedef _DRIVERSTATUS* PDRIVERSTATUS;
typedef _STORAGE_DEVICE_POWER_CAP_UNITS* PSTORAGE_DEVICE_POWER_CAP_UNITS;
typedef _STORAGE_DEVICE_POWER_CAP STORAGE_DEVICE_POWER_CAP;
typedef _TXFS_ROLLFORWARD_REDO_INFORMATION* PTXFS_ROLLFORWARD_REDO_INFORMATION;
typedef _TXFS_GET_METADATA_INFO_OUT TXFS_GET_METADATA_INFO_OUT;
typedef _SENDCMDOUTPARAMS* LPSENDCMDOUTPARAMS;
typedef tagBinaryParam BinaryParam;
typedef _STORAGE_RPMB_DATA_FRAME STORAGE_RPMB_DATA_FRAME;
typedef _STORAGE_RPMB_DATA_FRAME* PSTORAGE_RPMB_DATA_FRAME;
typedef _FILE_SET_DEFECT_MGMT_BUFFER FILE_SET_DEFECT_MGMT_BUFFER;
typedef _BIN_TYPES BIN_TYPES;
typedef _STORAGE_RPMB_COMMAND_TYPE STORAGE_RPMB_COMMAND_TYPE;
typedef _ST_DATA_MGR_STATS ST_DATA_MGR_STATS;
typedef _STORAGE_EVENT_NOTIFICATION STORAGE_EVENT_NOTIFICATION;
typedef _STORAGE_EVENT_NOTIFICATION* PSTORAGE_EVENT_NOTIFICATION;
typedef RPC_STATUS ( *I_RpcProxyFilterIfFn )( void*, UUID*, unsigned short, int* );
typedef _SET_PARTITION_INFORMATION_EX SET_PARTITION_INFORMATION_EX;
typedef _MARK_HANDLE_INFO* PMARK_HANDLE_INFO;
typedef DELETE_USN_JOURNAL_DATA* PDELETE_USN_JOURNAL_DATA;
typedef RPC_ENDPOINT_TEMPLATEA* PRPC_ENDPOINT_TEMPLATEA;
typedef _STORAGE_COUNTER* PSTORAGE_COUNTER;
typedef _RPC_BINDING_HANDLE_SECURITY_V1_A RPC_BINDING_HANDLE_SECURITY_V1_A;
typedef _STORAGE_HW_FIRMWARE_INFO_QUERY STORAGE_HW_FIRMWARE_INFO_QUERY;
typedef _SET_PARTITION_INFORMATION* PSET_PARTITION_INFORMATION;
typedef _STORAGE_HW_FIRMWARE_INFO_QUERY* PSTORAGE_HW_FIRMWARE_INFO_QUERY;
typedef _MINIDUMP_MODULE_LIST MINIDUMP_MODULE_LIST;
typedef _STORAGE_HW_FIRMWARE_SLOT_INFO STORAGE_HW_FIRMWARE_SLOT_INFO;
typedef _WATCHDOG_HANDLER_ACTION WATCHDOG_HANDLER_ACTION;
typedef unsigned char boolean;
typedef boolean BOOLEAN;
typedef LONG NTSTATUS;
typedef _STORAGE_HW_FIRMWARE_INFO STORAGE_HW_FIRMWARE_INFO;
typedef _T2_SET_PARAMETERS_V0 T2_SET_PARAMETERS;
typedef _STORAGE_HW_FIRMWARE_INFO* PSTORAGE_HW_FIRMWARE_INFO;
typedef _MINIDUMP_CALLBACK_INFORMATION* PMINIDUMP_CALLBACK_INFORMATION;
typedef _STORAGE_HW_FIRMWARE_DOWNLOAD STORAGE_HW_FIRMWARE_DOWNLOAD;
typedef _CHANGER_SET_POSITION* PCHANGER_SET_POSITION;
typedef char __C_ASSERT__[1];
typedef _STORAGE_HW_FIRMWARE_DOWNLOAD_V2 STORAGE_HW_FIRMWARE_DOWNLOAD_V2;
typedef _STORAGE_HW_FIRMWARE_DOWNLOAD_V2* PSTORAGE_HW_FIRMWARE_DOWNLOAD_V2;
typedef READ_USN_JOURNAL_DATA_V0* PREAD_USN_JOURNAL_DATA_V0;
typedef _CHANGER_MOVE_MEDIUM CHANGER_MOVE_MEDIUM;
typedef _STORAGE_HW_FIRMWARE_ACTIVATE* PSTORAGE_HW_FIRMWARE_ACTIVATE;
typedef _SYSTEM_WATCHDOG_TIMER_INFORMATION SYSTEM_WATCHDOG_TIMER_INFORMATION;
typedef _STORAGE_PROTOCOL_COMMAND STORAGE_PROTOCOL_COMMAND;
typedef _PARTITION_INFORMATION_GPT* PPARTITION_INFORMATION_GPT;
typedef _STORAGE_PROTOCOL_COMMAND* PSTORAGE_PROTOCOL_COMMAND;
typedef _STORAGE_ATTRIBUTE_MGMT_ACTION STORAGE_ATTRIBUTE_MGMT_ACTION;
typedef I_RPC_HANDLE* RPC_EP_INQ_HANDLE;
typedef _QUERY_BAD_RANGES_OUTPUT QUERY_BAD_RANGES_OUTPUT;
typedef _PARTITION_INFORMATION_GPT PARTITION_INFORMATION_GPT;
typedef DELETE_USN_JOURNAL_DATA DELETE_USN_JOURNAL_DATA;
typedef ULONG WNF_CHANGE_STAMP;
typedef _STORAGE_ATTRIBUTE_MGMT* PSTORAGE_ATTRIBUTE_MGMT;
typedef _SCM_PD_HEALTH_NOTIFICATION_DATA SCM_PD_HEALTH_NOTIFICATION_DATA;
typedef _SCM_PD_HEALTH_NOTIFICATION_DATA* PSCM_PD_HEALTH_NOTIFICATION_DATA;
typedef MINIDUMP_MISC_INFO_5 MINIDUMP_MISC_INFO_N;
typedef _SCM_LOGICAL_DEVICE_INSTANCE SCM_LOGICAL_DEVICE_INSTANCE;
typedef _RPC_CLIENT_INTERFACE* PRPC_CLIENT_INTERFACE;
typedef _NTFS_STATISTICS_EX* PNTFS_STATISTICS_EX;
typedef _SCM_LOGICAL_DEVICES SCM_LOGICAL_DEVICES;
typedef _SCM_PD_FIRMWARE_DOWNLOAD SCM_PD_FIRMWARE_DOWNLOAD;
typedef _MINIDUMP_MEMORY_DESCRIPTOR* PMINIDUMP_MEMORY_DESCRIPTOR;
typedef _MINIDUMP_FUNCTION_TABLE_STREAM MINIDUMP_FUNCTION_TABLE_STREAM;
typedef _SYSTEM_VERIFIER_CANCELLATION_INFORMATION
    SYSTEM_VERIFIER_CANCELLATION_INFORMATION;
typedef _SCM_PHYSICAL_DEVICES SCM_PHYSICAL_DEVICES;
typedef _SCM_REGION_FLAG SCM_REGION_FLAG;
typedef unsigned short* RPC_WSTR;
typedef RPC_STATUS ( *RPC_NEW_HTTP_PROXY_CHANNEL )( RPC_HTTP_REDIRECTOR_STAGE,
    RPC_WSTR,
    RPC_WSTR,
    RPC_WSTR,
    RPC_WSTR,
    void*,
    void*,
    void*,
    void*,
    unsigned long,
    RPC_WSTR*,
    RPC_WSTR* );
typedef USN_RECORD_UNION USN_RECORD_UNION;
typedef _SCM_REGION* PSCM_REGION;
typedef _SCM_REGIONS SCM_REGIONS;
typedef USN_RECORD_UNION* PUSN_RECORD_UNION;
typedef _SCM_BUS_QUERY_TYPE SCM_BUS_QUERY_TYPE;
typedef _SCM_BUS_QUERY_TYPE* PSCM_BUS_QUERY_TYPE;
typedef _MINIDUMP_MISC_INFO_3* PMINIDUMP_MISC_INFO_3;
typedef _SCM_BUS_SET_TYPE* PSCM_BUS_SET_TYPE;
typedef _SCM_BUS_PROPERTY_ID SCM_BUS_PROPERTY_ID;
typedef _SCM_BUS_PROPERTY_ID* PSCM_BUS_PROPERTY_ID;
typedef _NTFS_STATISTICS NTFS_STATISTICS;
typedef _SYSTEM_THREAD_INFORMATION SYSTEM_THREAD_INFORMATION;
typedef _SCM_BUS_PROPERTY_QUERY SCM_BUS_PROPERTY_QUERY;
typedef _SCM_BUS_PROPERTY_QUERY* PSCM_BUS_PROPERTY_QUERY;
typedef _ETW_TRACE_PARTITION_INFORMATION_V2* PETW_TRACE_PARTITION_INFORMATION_V2;
typedef _SCM_BUS_FIRMWARE_ACTIVATION_STATE SCM_BUS_FIRMWARE_ACTIVATION_STATE;
typedef RETRIEVAL_POINTER_COUNT* PRETRIEVAL_POINTER_COUNT;
typedef _SCM_PD_LOCATION_STRING* PSCM_PD_LOCATION_STRING;
typedef _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO SCM_BUS_RUNTIME_FW_ACTIVATION_INFO;
typedef RETRIEVAL_POINTER_COUNT RETRIEVAL_POINTER_COUNT;
typedef READ_USN_JOURNAL_DATA_V1 READ_USN_JOURNAL_DATA_V1;
typedef READ_USN_JOURNAL_DATA_V1 READ_USN_JOURNAL_DATA;
typedef _SYSTEM_KERNEL_DEBUGGER_INFORMATION SYSTEM_KERNEL_DEBUGGER_INFORMATION;
typedef _SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO
    SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO;
typedef READ_USN_JOURNAL_DATA_V1* PREAD_USN_JOURNAL_DATA_V1;
typedef _SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO* PSCM_BUS_DEDICATED_MEMORY_DEVICE_INFO;
typedef _SCM_BUS_DEDICATED_MEMORY_DEVICES_INFO* PSCM_BUS_DEDICATED_MEMORY_DEVICES_INFO;
typedef RPC_STATUS RPC_FORWARD_FUNCTION( UUID*, RPC_VERSION*, UUID*, unsigned char*, void** );
typedef _SCM_BUS_PROPERTY_SET SCM_BUS_PROPERTY_SET;
typedef _PARTITION_INFORMATION_EX* PPARTITION_INFORMATION_EX;
typedef _SYSTEM_LEGACY_DRIVER_INFORMATION* PSYSTEM_LEGACY_DRIVER_INFORMATION;
typedef _MINIDUMP_DIRECTORY* PMINIDUMP_DIRECTORY;
typedef _SCM_BUS_DEDICATED_MEMORY_STATE SCM_BUS_DEDICATED_MEMORY_STATE;
typedef _SCM_PD_RUNTIME_FW_ACTIVATION_INFO* PSCM_PD_RUNTIME_FW_ACTIVATION_INFO;
typedef _SCM_INTERLEAVED_PD_INFO* PSCM_INTERLEAVED_PD_INFO;
typedef FIND_BY_SID_DATA* PFIND_BY_SID_DATA;
typedef _SYSTEM_RANGE_START_INFORMATION* PSYSTEM_RANGE_START_INFORMATION;
typedef _SCM_LD_INTERLEAVE_SET_INFO* PSCM_LD_INTERLEAVE_SET_INFO;
typedef VOLUME_BITMAP_BUFFER* PVOLUME_BITMAP_BUFFER;
typedef _SCM_PD_QUERY_TYPE* PSCM_PD_QUERY_TYPE;
typedef _SCM_PD_SET_TYPE SCM_PD_SET_TYPE;
typedef _SCM_PD_SET_TYPE* PSCM_PD_SET_TYPE;
typedef _FILE_REGION_INFO FILE_REGION_INFO;
typedef _SCM_PD_PROPERTY_ID SCM_PD_PROPERTY_ID;
typedef _RTL_PROCESS_BACKTRACE_INFORMATION RTL_PROCESS_BACKTRACE_INFORMATION;
typedef _REPAIR_COPIES_OUTPUT* PREPAIR_COPIES_OUTPUT;
typedef _DISK_GROW_PARTITION* PDISK_GROW_PARTITION;
typedef _SCM_PD_PROPERTY_QUERY SCM_PD_PROPERTY_QUERY;
typedef _SCM_PD_MEDIA_REINITIALIZATION_STATUS* PSCM_PD_MEDIA_REINITIALIZATION_STATUS;
typedef _SCM_PD_PROPERTY_QUERY* PSCM_PD_PROPERTY_QUERY;
typedef _RPC_SECURITY_QOS_V3_W* PRPC_SECURITY_QOS_V3_W;
typedef _REMSECURITY_ATTRIBUTES* LPREMSECURITY_ATTRIBUTES;
typedef _SCM_PD_PROPERTY_SET SCM_PD_PROPERTY_SET;
typedef _SCM_PD_PROPERTY_SET* PSCM_PD_PROPERTY_SET;
typedef USN_JOURNAL_DATA_V2 USN_JOURNAL_DATA_V2;
typedef _tagRemBINDINFO RemBINDINFO;
typedef _REMSECURITY_ATTRIBUTES* PREMSECURITY_ATTRIBUTES;
typedef _SCM_PD_RUNTIME_FW_ACTIVATION_ARM_STATE* PSCM_PD_RUNTIME_FW_ACTIVATION_ARM_STATE;
typedef _SCM_PD_DESCRIPTOR_HEADER SCM_PD_DESCRIPTOR_HEADER;
typedef tagBINDSTATUS BINDSTATUS;
typedef _WRITE_USN_REASON_INPUT WRITE_USN_REASON_INPUT;
typedef PARTITION_INFORMATION_GPT SET_PARTITION_INFORMATION_GPT;
typedef _SCM_PD_DESCRIPTOR_HEADER* PSCM_PD_DESCRIPTOR_HEADER;
typedef _MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION
    MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION;
typedef _FILE_REGION_INPUT FILE_REGION_INPUT;
typedef _SCM_PD_DEVICE_HANDLE SCM_PD_DEVICE_HANDLE;
typedef USN_JOURNAL_DATA_V1* PUSN_JOURNAL_DATA;
typedef _FORMAT_EX_PARAMETERS* PFORMAT_EX_PARAMETERS;
typedef _SYSTEM_BIGPOOL_ENTRY* PSYSTEM_BIGPOOL_ENTRY;
typedef _SCM_PD_DEVICE_INFO SCM_PD_DEVICE_INFO;
typedef _SCM_PD_DEVICE_INFO* PSCM_PD_DEVICE_INFO;
typedef _MINIDUMP_EXCEPTION MINIDUMP_EXCEPTION;
typedef USN_RECORD_V2 USN_RECORD_V2;
typedef USN_RECORD_V2 USN_RECORD;
typedef _SCM_PD_DEVICE_SPECIFIC_PROPERTY* PSCM_PD_DEVICE_SPECIFIC_PROPERTY;
typedef USN_RECORD_V3* PUSN_RECORD_V3;
typedef _SCM_PD_DEVICE_SPECIFIC_INFO SCM_PD_DEVICE_SPECIFIC_INFO;
typedef _SCM_PD_DEVICE_SPECIFIC_INFO* PSCM_PD_DEVICE_SPECIFIC_INFO;
typedef _SCM_PD_PASSTHROUGH_OUTPUT SCM_PD_PASSTHROUGH_OUTPUT;
typedef _SCM_PD_FIRMWARE_SLOT_INFO* PSCM_PD_FIRMWARE_SLOT_INFO;
typedef MFT_ENUM_DATA_V1 MFT_ENUM_DATA;
typedef _SCM_PD_FIRMWARE_INFO SCM_PD_FIRMWARE_INFO;
typedef _RPC_SECURITY_QOS_V2_W* PRPC_SECURITY_QOS_V2_W;
typedef _SCM_PD_FIRMWARE_INFO* PSCM_PD_FIRMWARE_INFO;
typedef MFT_ENUM_DATA_V1* PMFT_ENUM_DATA_V1;
typedef _STREAMS_ASSOCIATE_ID_INPUT_BUFFER STREAMS_ASSOCIATE_ID_INPUT_BUFFER;
typedef _SCM_PD_HEALTH_STATUS* PSCM_PD_HEALTH_STATUS;
typedef _SCM_PD_OPERATIONAL_STATUS* PSCM_PD_OPERATIONAL_STATUS;
typedef IInternetBindInfo IInternetBindInfo;
typedef _TXFS_GET_METADATA_INFO_OUT* PTXFS_GET_METADATA_INFO_OUT;
typedef _ETW_PMC_COUNTER_OWNER ETW_PMC_COUNTER_OWNER;
typedef _TXFS_LIST_TRANSACTION_LOCKED_FILES TXFS_LIST_TRANSACTION_LOCKED_FILES;
typedef _SCM_PD_LOCATION_STRING SCM_PD_LOCATION_STRING;
typedef _SCM_PD_FRU_ID_STRING* PSCM_PD_FRU_ID_STRING;
typedef STRING32 UNICODE_STRING32;
typedef RPC_INTERFACE_TEMPLATEA RPC_INTERFACE_TEMPLATEA;
typedef _SCM_PD_FIRMWARE_ACTIVATE SCM_PD_FIRMWARE_ACTIVATE;
typedef tagWNODE_METHOD_ITEM* PWNODE_METHOD_ITEM;
typedef _FILE_INITIATE_REPAIR_OUTPUT_BUFFER FILE_INITIATE_REPAIR_OUTPUT_BUFFER;
typedef _SCM_PD_FIRMWARE_ACTIVATE* PSCM_PD_FIRMWARE_ACTIVATE;
typedef _SCM_PD_LAST_FW_ACTIVATION_STATUS* PSCM_PD_LAST_FW_ACTIVATION_STATUS;
typedef _SCM_PD_FIRMWARE_ACTIVATION_STATE SCM_PD_FIRMWARE_ACTIVATION_STATE;
typedef tagWNODE_TOO_SMALL* PWNODE_TOO_SMALL;
typedef _REFS_SMR_VOLUME_GC_METHOD* PREFS_SMR_VOLUME_GC_METHOD;
typedef _RPC_MESSAGE* PRPC_MESSAGE;
typedef _REFS_SMR_VOLUME_GC_METHOD REFS_SMR_VOLUME_GC_METHOD;
typedef _SCM_PD_RUNTIME_FW_ACTIVATION_INFO SCM_PD_RUNTIME_FW_ACTIVATION_INFO;
typedef _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE* PSTORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE;
typedef _SCM_PD_PASSTHROUGH_OUTPUT* PSCM_PD_PASSTHROUGH_OUTPUT;
typedef _CLASSIC_EVENT_ID* PCLASSIC_EVENT_ID;
typedef _WOF_EXTERNAL_FILE_ID* PWOF_EXTERNAL_FILE_ID;
typedef _SCM_PD_PASSTHROUGH_INVDIMM_INPUT SCM_PD_PASSTHROUGH_INVDIMM_INPUT;
typedef _SD_CHANGE_MACHINE_SID_OUTPUT SD_CHANGE_MACHINE_SID_OUTPUT;
typedef _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT;
typedef __MIDL_IInternetSecurityManager_0003 SZM_FLAGS;
typedef _QUERY_BAD_RANGES_INPUT_RANGE QUERY_BAD_RANGES_INPUT_RANGE;
typedef _REPAIR_COPIES_OUTPUT REPAIR_COPIES_OUTPUT;
typedef _SCM_PD_REINITIALIZE_MEDIA_OUTPUT* PSCM_PD_REINITIALIZE_MEDIA_OUTPUT;
typedef _TXFS_LIST_TRANSACTIONS* PTXFS_LIST_TRANSACTIONS;
typedef _EVENT_TRACE* PEVENT_TRACE;
typedef _TXFS_READ_BACKUP_INFORMATION_OUT TXFS_READ_BACKUP_INFORMATION_OUT;
typedef _FORMAT_PARAMETERS FORMAT_PARAMETERS;
typedef WORD BAD_TRACK_NUMBER;
typedef _tagSOFTDISTINFO SOFTDISTINFO;
typedef _FORMAT_EX_PARAMETERS FORMAT_EX_PARAMETERS;
typedef _DISK_GEOMETRY* PDISK_GEOMETRY;
typedef _tagDATAINFO DATAINFO;
typedef _PARTITION_INFORMATION* PPARTITION_INFORMATION;
typedef _FILE_ZERO_DATA_INFORMATION* PFILE_ZERO_DATA_INFORMATION;
typedef IBinding IBinding;
typedef _MOF_FIELD MOF_FIELD;
typedef _FILE_ALLOCATED_RANGE_BUFFER FILE_ALLOCATED_RANGE_BUFFER;
typedef _SET_PURGE_FAILURE_MODE_INPUT SET_PURGE_FAILURE_MODE_INPUT;
typedef _VERIFY_INFORMATION VERIFY_INFORMATION;
typedef _KHETERO_CPU_POLICY KHETERO_CPU_POLICY;
typedef _VERIFY_INFORMATION* PVERIFY_INFORMATION;
typedef _SHRINK_VOLUME_REQUEST_TYPES SHRINK_VOLUME_REQUEST_TYPES;
typedef _REASSIGN_BLOCKS* PREASSIGN_BLOCKS;
typedef _SHRINK_VOLUME_INFORMATION* PSHRINK_VOLUME_INFORMATION;
typedef _ETW_BUFFER_CONTEXT* PETW_BUFFER_CONTEXT;
typedef _TXFS_QUERY_RM_INFORMATION TXFS_QUERY_RM_INFORMATION;
typedef _PARTITION_STYLE PARTITION_STYLE;
typedef _PARTITION_INFORMATION_MBR PARTITION_INFORMATION_MBR;
typedef _PLEX_READ_DATA_REQUEST* PPLEX_READ_DATA_REQUEST;
typedef _FILE_OBJECTID_BUFFER FILE_OBJECTID_BUFFER;
typedef _SET_PARTITION_INFORMATION_EX* PSET_PARTITION_INFORMATION_EX;
typedef _EVENT_TRACE_HEADER* PEVENT_TRACE_HEADER;
typedef ICreateTypeInfo ICreateTypeInfo;
typedef ICreateTypeInfo* LPCREATETYPEINFO;
typedef _CREATE_DISK CREATE_DISK;
typedef _CREATE_DISK* PCREATE_DISK;
typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_A* PRPC_HTTP_TRANSPORT_CREDENTIALS_A;
typedef _GET_LENGTH_INFORMATION* PGET_LENGTH_INFORMATION;
typedef _FILE_PROVIDER_EXTERNAL_INFO_V1 FILE_PROVIDER_EXTERNAL_INFO_V1;
typedef _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT* PFSCTL_QUERY_STORAGE_CLASSES_OUTPUT;
typedef _LDR_HOT_PATCH_STATE* PLDR_HOT_PATCH_STATE;
typedef _DRIVE_LAYOUT_INFORMATION_GPT DRIVE_LAYOUT_INFORMATION_GPT;
typedef _SYSTEM_PROCESSOR_IDLE_INFORMATION* PSYSTEM_PROCESSOR_IDLE_INFORMATION;
typedef IHttpNegotiate3 IHttpNegotiate3;
typedef IHttpNegotiate3* LPHTTPNEGOTIATE3;
typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W* PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_W;
typedef _CONTAINER_ROOT_INFO_OUTPUT CONTAINER_ROOT_INFO_OUTPUT;
typedef _REFS_SMR_VOLUME_GC_ACTION* PREFS_SMR_VOLUME_GC_ACTION;
typedef _DRIVE_LAYOUT_INFORMATION_MBR* PDRIVE_LAYOUT_INFORMATION_MBR;
typedef IHttpSecurity IHttpSecurity;
typedef _DRIVE_LAYOUT_INFORMATION_EX DRIVE_LAYOUT_INFORMATION_EX;
typedef _DRIVE_LAYOUT_INFORMATION_EX* PDRIVE_LAYOUT_INFORMATION_EX;
typedef _TXFS_START_RM_INFORMATION* PTXFS_START_RM_INFORMATION;
typedef _DISK_INT13_INFO DISK_INT13_INFO;
typedef _FSCTL_QUERY_REGION_INFO_OUTPUT* PFSCTL_QUERY_REGION_INFO_OUTPUT;
typedef _LDR_IMPORT_CALLBACK_INFO LDR_IMPORT_CALLBACK_INFO;
typedef _DISK_INT13_INFO* PDISK_INT13_INFO;
typedef _FILE_MAKE_COMPATIBLE_BUFFER FILE_MAKE_COMPATIBLE_BUFFER;
typedef IWinInetCacheHints2 IWinInetCacheHints2;
typedef _DISK_DETECTION_INFO DISK_DETECTION_INFO;
typedef _FILE_QUERY_SPARING_BUFFER* PFILE_QUERY_SPARING_BUFFER;
typedef _FILE_STORAGE_TIER_CLASS FILE_STORAGE_TIER_CLASS;
typedef _DISK_DETECTION_INFO* PDISK_DETECTION_INFO;
typedef _DISK_PARTITION_INFO DISK_PARTITION_INFO;
typedef OFFSETINSTANCEDATAANDLENGTH OFFSETINSTANCEDATAANDLENGTH;
typedef _DISK_PARTITION_INFO* PDISK_PARTITION_INFO;
typedef _CLUSTER_RANGE* PCLUSTER_RANGE;
typedef _DISK_GEOMETRY_EX* PDISK_GEOMETRY_EX;
typedef _DISK_CONTROLLER_NUMBER DISK_CONTROLLER_NUMBER;
typedef USN_RECORD_V2* PUSN_RECORD;
typedef _DISK_CONTROLLER_NUMBER* PDISK_CONTROLLER_NUMBER;
typedef DISK_CACHE_RETENTION_PRIORITY DISK_CACHE_RETENTION_PRIORITY;
typedef USN_RECORD_EXTENT USN_RECORD_EXTENT;
typedef USN_RECORD_COMMON_HEADER USN_RECORD_COMMON_HEADER;
typedef _DISK_CACHE_INFORMATION* PDISK_CACHE_INFORMATION;
typedef MFT_ENUM_DATA_V1* PMFT_ENUM_DATA;
typedef _CSV_QUERY_FILE_REVISION CSV_QUERY_FILE_REVISION;
typedef _HISTOGRAM_BUCKET HISTOGRAM_BUCKET;
typedef READ_FILE_USN_DATA READ_FILE_USN_DATA;
typedef _DISK_HISTOGRAM* PDISK_HISTOGRAM;
typedef IXMLDOMNamedNodeMap IXMLDOMNamedNodeMap;
typedef _EVENT_TRACE EVENT_TRACE;
typedef _DISK_RECORD DISK_RECORD;
typedef USN_JOURNAL_DATA_V2* PUSN_JOURNAL_DATA_V2;
typedef IXMLDOMProcessingInstruction IXMLDOMProcessingInstruction;
typedef _FILESYSTEM_STATISTICS_EX* PFILESYSTEM_STATISTICS_EX;
typedef ULONG64* PTRACEHANDLE;
typedef _BIN_RANGE* PBIN_RANGE;
typedef _PERF_BIN PERF_BIN;
typedef NTFS_FILE_RECORD_INPUT_BUFFER NTFS_FILE_RECORD_INPUT_BUFFER;
typedef _SD_GLOBAL_CHANGE_INPUT* PSD_GLOBAL_CHANGE_INPUT;
typedef _GETVERSIONINPARAMS* PGETVERSIONINPARAMS;
typedef USN_RECORD_V4 USN_RECORD_V4;
typedef _GETVERSIONINPARAMS* LPGETVERSIONINPARAMS;
typedef _STORAGE_RESERVE_ID* PSTORAGE_RESERVE_ID;
typedef USN_RECORD_V3 USN_RECORD_V3;
typedef _IDEREGS* LPIDEREGS;
typedef USN_JOURNAL_DATA_V0 USN_JOURNAL_DATA_V0;
typedef _SENDCMDINPARAMS* PSENDCMDINPARAMS;
typedef WMIREGGUIDW* PWMIREGGUIDW;
typedef PWMIREGGUIDW PWMIREGGUID;
typedef _SENDCMDOUTPARAMS SENDCMDOUTPARAMS;
typedef _SENDCMDOUTPARAMS* PSENDCMDOUTPARAMS;
typedef _OBJECT_ATTRIBUTES32 OBJECT_ATTRIBUTES32;
typedef const OBJECT_ATTRIBUTES32* PCOBJECT_ATTRIBUTES32;
typedef RETRIEVAL_POINTERS_BUFFER* PRETRIEVAL_POINTERS_BUFFER;
typedef _GET_DISK_ATTRIBUTES* PGET_DISK_ATTRIBUTES;
typedef IParseDisplayName* LPPARSEDISPLAYNAME;
typedef _SET_DISK_ATTRIBUTES SET_DISK_ATTRIBUTES;
typedef _WIM_PROVIDER_SUSPEND_OVERLAY_INPUT WIM_PROVIDER_SUSPEND_OVERLAY_INPUT;
typedef RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER* PRETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER;
typedef _ELEMENT_TYPE ELEMENT_TYPE;
typedef _SD_ENUM_SDS_ENTRY* PSD_ENUM_SDS_ENTRY;
typedef ITypeComp ITypeComp;
typedef ITypeComp* LPTYPECOMP;
typedef _CHANGER_ELEMENT* PCHANGER_ELEMENT;
typedef _FS_BPIO_RESULTS FS_BPIO_RESULTS;
typedef _CHANGER_ELEMENT_LIST* PCHANGER_ELEMENT_LIST;
typedef _GET_CHANGER_PARAMETERS* PGET_CHANGER_PARAMETERS;
typedef USN_TRACK_MODIFIED_RANGES* PUSN_TRACK_MODIFIED_RANGES;
typedef _CSV_QUERY_FILE_REVISION_FILE_ID_128
    CSV_QUERY_FILE_REVISION_FILE_ID_128;
typedef _CHANGER_PRODUCT_DATA CHANGER_PRODUCT_DATA;
typedef _CHANGER_PRODUCT_DATA* PCHANGER_PRODUCT_DATA;
typedef _CHANGER_SET_ACCESS* PCHANGER_SET_ACCESS;
typedef _EXFAT_STATISTICS* PEXFAT_STATISTICS;
typedef _CHANGER_ELEMENT_STATUS_EX CHANGER_ELEMENT_STATUS_EX;
typedef IOleWindow IOleWindow;
typedef _CHANGER_ELEMENT_STATUS_EX* PCHANGER_ELEMENT_STATUS_EX;
typedef STARTING_VCN_INPUT_BUFFER* PSTARTING_VCN_INPUT_BUFFER;
typedef _SD_QUERY_STATS_OUTPUT* PSD_QUERY_STATS_OUTPUT;
typedef _CHANGER_INITIALIZE_ELEMENT_STATUS* PCHANGER_INITIALIZE_ELEMENT_STATUS;
typedef _CHANGER_EXCHANGE_MEDIUM CHANGER_EXCHANGE_MEDIUM;
typedef _KHETERO_CPU_POLICY* PKHETERO_CPU_POLICY;
typedef CREATE_USN_JOURNAL_DATA* PCREATE_USN_JOURNAL_DATA;
typedef _FS_BPIO_OPERATIONS FS_BPIO_OPERATIONS;
typedef READ_USN_JOURNAL_DATA_V0 READ_USN_JOURNAL_DATA_V0;
typedef _CHANGER_SEND_VOLUME_TAG_INFORMATION
    CHANGER_SEND_VOLUME_TAG_INFORMATION;
typedef _CSV_CONTROL_PARAM CSV_CONTROL_PARAM;
typedef char CCHAR;
typedef _READ_ELEMENT_ADDRESS_INFO READ_ELEMENT_ADDRESS_INFO;
typedef _SYSTEM_SYSTEM_DISK_INFORMATION* PSYSTEM_SYSTEM_DISK_INFORMATION;
typedef IOleInPlaceActiveObject IOleInPlaceActiveObject;
typedef _READ_ELEMENT_ADDRESS_INFO* PREAD_ELEMENT_ADDRESS_INFO;
typedef _CHANGER_DEVICE_PROBLEM_TYPE* PCHANGER_DEVICE_PROBLEM_TYPE;
typedef _TRACE_LOGFILE_HEADER64* PTRACE_LOGFILE_HEADER64;
typedef _CSV_IS_OWNED_BY_CSVFS* PCSV_IS_OWNED_BY_CSVFS;
typedef _PATHNAME_BUFFER PATHNAME_BUFFER;
typedef _PATHNAME_BUFFER* PPATHNAME_BUFFER;
typedef IOleInPlaceObject IOleInPlaceObject;
typedef IOleInPlaceObject* LPOLEINPLACEOBJECT;
typedef _FSCTL_QUERY_FAT_BPB_BUFFER FSCTL_QUERY_FAT_BPB_BUFFER;
typedef _FSCTL_QUERY_FAT_BPB_BUFFER* PFSCTL_QUERY_FAT_BPB_BUFFER;
typedef _FS_BPIO_OUTPUT* PFS_BPIO_OUTPUT;
typedef NTFS_VOLUME_DATA_BUFFER NTFS_VOLUME_DATA_BUFFER;
typedef _CSV_QUERY_VOLUME_REDIRECT_STATE CSV_QUERY_VOLUME_REDIRECT_STATE;
typedef NTFS_EXTENDED_VOLUME_DATA NTFS_EXTENDED_VOLUME_DATA;
typedef FIND_BY_SID_OUTPUT* PFIND_BY_SID_OUTPUT;
typedef MFT_ENUM_DATA_V0 MFT_ENUM_DATA_V0;
typedef IDropSource IDropSource;
typedef REFS_VOLUME_DATA_BUFFER* PREFS_VOLUME_DATA_BUFFER;
typedef STARTING_LCN_INPUT_BUFFER STARTING_LCN_INPUT_BUFFER;
typedef _CSV_MGMT_LOCK CSV_MGMT_LOCK;
typedef STARTING_LCN_INPUT_BUFFER_EX STARTING_LCN_INPUT_BUFFER_EX;
typedef VOLUME_BITMAP_BUFFER VOLUME_BITMAP_BUFFER;
typedef STARTING_VCN_INPUT_BUFFER STARTING_VCN_INPUT_BUFFER;
typedef _DUPLICATE_EXTENTS_DATA_EX* PDUPLICATE_EXTENTS_DATA_EX;
typedef RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER
    RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER;
typedef _ETW_PMC_COUNTER_OWNERSHIP_STATUS* PETW_PMC_COUNTER_OWNERSHIP_STATUS;
typedef _MINIDUMP_FUNCTION_TABLE_DESCRIPTOR MINIDUMP_FUNCTION_TABLE_DESCRIPTOR;
typedef NTFS_FILE_RECORD_OUTPUT_BUFFER* PNTFS_FILE_RECORD_OUTPUT_BUFFER;
typedef _TRACE_GUID_REGISTRATION* PTRACE_GUID_REGISTRATION;
typedef MOVE_FILE_RECORD_DATA MOVE_FILE_RECORD_DATA;
typedef _SYSTEM_PROCESSOR_INFORMATION* PSYSTEM_PROCESSOR_INFORMATION;
typedef _EVENT_TRACE_LOGFILEA* PEVENT_TRACE_LOGFILEA;
typedef ULONG ( *PEVENT_TRACE_BUFFER_CALLBACKA )( PEVENT_TRACE_LOGFILEA );
typedef MOVE_FILE_RECORD_DATA* PMOVE_FILE_RECORD_DATA;
typedef _FILE_LAYOUT_NAME_ENTRY FILE_LAYOUT_NAME_ENTRY;
typedef _MOVE_FILE_DATA32* PMOVE_FILE_DATA32;
typedef _REFS_SMR_VOLUME_GC_ACTION REFS_SMR_VOLUME_GC_ACTION;
typedef _MINIDUMP_MISC_INFO MINIDUMP_MISC_INFO;
typedef _PS_SYSTEM_DLL_INIT_BLOCK* PPS_SYSTEM_DLL_INIT_BLOCK;
typedef FIND_BY_SID_DATA FIND_BY_SID_DATA;
typedef FIND_BY_SID_OUTPUT FIND_BY_SID_OUTPUT;
typedef IInternetProtocolInfo IInternetProtocolInfo;
typedef IInternetProtocolInfo* LPIINTERNETPROTOCOLINFO;
typedef _WOF_EXTERNAL_INFO* PWOF_EXTERNAL_INFO;
typedef MFT_ENUM_DATA_V0* PMFT_ENUM_DATA_V0;
typedef _TRACE_STACK_CACHING_INFO* PTRACE_STACK_CACHING_INFO;
typedef READ_USN_JOURNAL_DATA_V1* PREAD_USN_JOURNAL_DATA;
typedef _LDR_DATA_TABLE_ENTRY* PLDR_DATA_TABLE_ENTRY;
typedef void LDR_ENUM_CALLBACK( PLDR_DATA_TABLE_ENTRY, PVOID, BOOLEAN* );
typedef USN_RANGE_TRACK_OUTPUT USN_RANGE_TRACK_OUTPUT;
typedef USN_RANGE_TRACK_OUTPUT* PUSN_RANGE_TRACK_OUTPUT;
typedef _VIRTUAL_STORAGE_BEHAVIOR_CODE* PVIRTUAL_STORAGE_BEHAVIOR_CODE;
typedef USN_RECORD_V2* PUSN_RECORD_V2;
typedef _DELAYLOAD_INFO* PDELAYLOAD_INFO;
typedef _EVENT_INSTANCE_HEADER EVENT_INSTANCE_HEADER;
typedef _KTHREAD_STATE KTHREAD_STATE;
typedef USN_JOURNAL_DATA_V0* PUSN_JOURNAL_DATA_V0;
typedef _LDR_SERVICE_TAG_RECORD LDR_SERVICE_TAG_RECORD;
typedef _MARK_HANDLE_INFO MARK_HANDLE_INFO;
typedef _MARK_HANDLE_INFO32 MARK_HANDLE_INFO32;
typedef _MARK_HANDLE_INFO32* PMARK_HANDLE_INFO32;
typedef _FILE_PREFETCH FILE_PREFETCH;
typedef _FILE_PREFETCH_EX FILE_PREFETCH_EX;
typedef _SD_GLOBAL_CHANGE_OUTPUT SD_GLOBAL_CHANGE_OUTPUT;
typedef _FILE_PREFETCH_EX* PFILE_PREFETCH_EX;
typedef _MINIDUMP_LOCATION_DESCRIPTOR MINIDUMP_LOCATION_DESCRIPTOR;
typedef _VARIABLE_NAME* PVARIABLE_NAME;
typedef IWindowForBindingUI IWindowForBindingUI;
typedef _FAT_STATISTICS FAT_STATISTICS;
typedef _LDR_DLL_LOAD_REASON* PLDR_DLL_LOAD_REASON;
typedef _FILE_DESIRED_STORAGE_CLASS_INFORMATION* PFILE_DESIRED_STORAGE_CLASS_INFORMATION;
typedef _NTFS_STATISTICS* PNTFS_STATISTICS;
typedef IInternet IInternet;
typedef _FILESYSTEM_STATISTICS_EX FILESYSTEM_STATISTICS_EX;
typedef _EVENT_TRACE_PROPERTIES EVENT_TRACE_PROPERTIES;
typedef _NTFS_STATISTICS_EX NTFS_STATISTICS_EX;
typedef _QUERY_FILE_LAYOUT_FILTER_TYPE QUERY_FILE_LAYOUT_FILTER_TYPE;
typedef _FILE_OBJECTID_BUFFER* PFILE_OBJECTID_BUFFER;
typedef tagWNODE_ALL_DATA* PWNODE_ALL_DATA;
typedef _LMR_QUERY_INFO_CLASS LMR_QUERY_INFO_CLASS;
typedef _STRING STRING;
typedef STRING UTF8_STRING;
typedef IServiceProvider IServiceProvider;
typedef _ENCRYPTION_BUFFER* PENCRYPTION_BUFFER;
typedef _FS_BPIO_INFLAGS FS_BPIO_INFLAGS;
typedef _MINIDUMP_SECONDARY_FLAGS MINIDUMP_SECONDARY_FLAGS;
typedef _REQUEST_RAW_ENCRYPTED_DATA REQUEST_RAW_ENCRYPTED_DATA;
typedef _MINIDUMP_CALLBACK_INFORMATION MINIDUMP_CALLBACK_INFORMATION;
typedef _REQUEST_RAW_ENCRYPTED_DATA* PREQUEST_RAW_ENCRYPTED_DATA;
typedef _ENCRYPTED_DATA_INFO* PENCRYPTED_DATA_INFO;
typedef _WNODE_HEADER* PWNODE_HEADER;
typedef _EXTENDED_ENCRYPTED_DATA_INFO EXTENDED_ENCRYPTED_DATA_INFO;
typedef _QUERY_BAD_RANGES_OUTPUT* PQUERY_BAD_RANGES_OUTPUT;
typedef _PLEX_READ_DATA_REQUEST PLEX_READ_DATA_REQUEST;
typedef unsigned short* RPC_CWSTR;
typedef _WNODE_HEADER WNODE_HEADER;
typedef _RTL_BALANCED_NODE RTL_BALANCED_NODE;
typedef _EVENT_TRACE_STACK_CACHING_INFORMATION* PEVENT_TRACE_STACK_CACHING_INFORMATION;
typedef _FILE_SET_DEFECT_MGMT_BUFFER* PFILE_SET_DEFECT_MGMT_BUFFER;
typedef _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT
    CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT;
typedef _TXFS_MODIFY_RM TXFS_MODIFY_RM;
typedef _TXFS_MODIFY_RM* PTXFS_MODIFY_RM;
typedef _TXFS_QUERY_RM_INFORMATION* PTXFS_QUERY_RM_INFORMATION;
typedef _OBJECT_ATTRIBUTES64 OBJECT_ATTRIBUTES64;
typedef WMIREGINFOW WMIREGINFOW;
typedef _TXFS_ROLLFORWARD_REDO_INFORMATION TXFS_ROLLFORWARD_REDO_INFORMATION;
typedef _TXFS_START_RM_INFORMATION TXFS_START_RM_INFORMATION;
typedef IXMLElement2 IXMLElement2;
typedef _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY
    TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY;
typedef _WIM_PROVIDER_REMOVE_OVERLAY_INPUT WIM_PROVIDER_REMOVE_OVERLAY_INPUT;
typedef _TXFS_LIST_TRANSACTIONS_ENTRY TXFS_LIST_TRANSACTIONS_ENTRY;
typedef tagOLEWHICHMK OLEWHICHMK;
typedef ITypeLib ITypeLib;
typedef ITypeLib* LPTYPELIB;
typedef _CSV_QUERY_MDS_PATH CSV_QUERY_MDS_PATH;
typedef _TXFS_WRITE_BACKUP_INFORMATION TXFS_WRITE_BACKUP_INFORMATION;
typedef _WIM_PROVIDER_ADD_OVERLAY_INPUT WIM_PROVIDER_ADD_OVERLAY_INPUT;
typedef _BOOT_AREA_INFO* PBOOT_AREA_INFO;
typedef _FILE_FS_PERSISTENT_VOLUME_INFORMATION
    FILE_FS_PERSISTENT_VOLUME_INFORMATION;
typedef __MIDL_IBindStatusCallback_0004 URL_ENCODING;
typedef _CSV_QUERY_REDIRECT_STATE CSV_QUERY_REDIRECT_STATE;
typedef _FILE_SYSTEM_RECOGNITION_INFORMATION* PFILE_SYSTEM_RECOGNITION_INFORMATION;
typedef _FILE_REGION_INFO* PFILE_REGION_INFO;
typedef _GET_FILTER_FILE_IDENTIFIER_OUTPUT GET_FILTER_FILE_IDENTIFIER_OUTPUT;
typedef _REQUEST_OPLOCK_INPUT_BUFFER REQUEST_OPLOCK_INPUT_BUFFER;
typedef _REQUEST_OPLOCK_OUTPUT_BUFFER REQUEST_OPLOCK_OUTPUT_BUFFER;
typedef _REQUEST_OPLOCK_OUTPUT_BUFFER* PREQUEST_OPLOCK_OUTPUT_BUFFER;
typedef _SYSTEM_HANDLE_TABLE_ENTRY_INFO* PSYSTEM_HANDLE_TABLE_ENTRY_INFO;
typedef ULONG* PLOGICAL;
typedef _FILE_LEVEL_TRIM_RANGE* PFILE_LEVEL_TRIM_RANGE;
typedef _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST
    STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST;
typedef _MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION
    MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION;
typedef LONG KPRIORITY;
typedef _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY
    STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY;
typedef _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY* PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY;
typedef _CSV_QUERY_MDS_PATH_V2 CSV_QUERY_MDS_PATH_V2;
typedef IDropTarget IDropTarget;
typedef IDropTarget* LPDROPTARGET;
typedef _CSV_NAMESPACE_INFO CSV_NAMESPACE_INFO;
typedef _VIRTUALIZATION_INSTANCE_INFO_OUTPUT
    VIRTUALIZATION_INSTANCE_INFO_OUTPUT;
typedef _SD_QUERY_STATS_INPUT SD_QUERY_STATS_INPUT;
typedef _SD_QUERY_STATS_INPUT* PSD_QUERY_STATS_INPUT;
typedef _SD_QUERY_STATS_OUTPUT SD_QUERY_STATS_OUTPUT;
typedef _SD_ENUM_SDS_INPUT SD_ENUM_SDS_INPUT;
typedef ULONG64 TRACEHANDLE;
typedef _SD_ENUM_SDS_INPUT* PSD_ENUM_SDS_INPUT;
typedef _MINIDUMP_CALLBACK_OUTPUT MINIDUMP_CALLBACK_OUTPUT;
typedef tagSAFEARRAYBOUND SAFEARRAYBOUND;
typedef _SD_ENUM_SDS_ENTRY SD_ENUM_SDS_ENTRY;
typedef _ETW_PMC_COUNTER_OWNER_TYPE ETW_PMC_COUNTER_OWNER_TYPE;
typedef tagRpcLocalAddressFormat RpcLocalAddressFormat;
typedef _ETW_PMC_COUNTER_OWNER* PETW_PMC_COUNTER_OWNER;
typedef _SD_ENUM_SDS_OUTPUT* PSD_ENUM_SDS_OUTPUT;
typedef unsigned short VARTYPE;
typedef _SD_GLOBAL_CHANGE_INPUT SD_GLOBAL_CHANGE_INPUT;
typedef tagCAFILETIME CAFILETIME;
typedef _SD_GLOBAL_CHANGE_OUTPUT* PSD_GLOBAL_CHANGE_OUTPUT;
typedef MachineGlobalObjectTableRegistrationToken__* MachineGlobalObjectTableRegistrationToken;
typedef DWORD APARTMENTID;
typedef _LOOKUP_STREAM_FROM_CLUSTER_INPUT LOOKUP_STREAM_FROM_CLUSTER_INPUT;
typedef RPC_INTERFACE_TEMPLATEW* PRPC_INTERFACE_TEMPLATEW;
typedef _LOOKUP_STREAM_FROM_CLUSTER_INPUT* PLOOKUP_STREAM_FROM_CLUSTER_INPUT;
typedef _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT* PLOOKUP_STREAM_FROM_CLUSTER_OUTPUT;
typedef _LOOKUP_STREAM_FROM_CLUSTER_ENTRY* PLOOKUP_STREAM_FROM_CLUSTER_ENTRY;
typedef _FILE_TYPE_NOTIFICATION_INPUT FILE_TYPE_NOTIFICATION_INPUT;
typedef _RPC_MESSAGE RPC_MESSAGE;
typedef _MINIDUMP_VM_QUERY_CALLBACK MINIDUMP_VM_QUERY_CALLBACK;
typedef _FILE_TYPE_NOTIFICATION_INPUT* PFILE_TYPE_NOTIFICATION_INPUT;
typedef _TRACE_QUERY_INFO_CLASS TRACE_INFO_CLASS;
typedef _CSV_MGMT_LOCK* PCSV_MGMT_LOCK;
typedef _CLASSIC_EVENT_ID CLASSIC_EVENT_ID;
typedef _RPC_POLICY* PRPC_POLICY;
typedef _CSV_NAMESPACE_INFO* PCSV_NAMESPACE_INFO;
typedef _CSV_CONTROL_OP CSV_CONTROL_OP;
typedef _CSV_CONTROL_OP* PCSV_CONTROL_OP;
typedef tagPARAMDESCEX PARAMDESCEX;
typedef _MINIDUMP_SYSTEM_BASIC_INFORMATION* PMINIDUMP_SYSTEM_BASIC_INFORMATION;
typedef void ( *NDR_NOTIFY2_ROUTINE )( boolean );
typedef _CSV_CONTROL_PARAM* PCSV_CONTROL_PARAM;
typedef _CSV_QUERY_REDIRECT_STATE* PCSV_QUERY_REDIRECT_STATE;
typedef _TRACE_LOGFILE_HEADER32 TRACE_LOGFILE_HEADER32;
typedef unsigned char* RPC_CSTR;
typedef IOleObject IOleObject;
typedef _CSV_QUERY_FILE_REVISION* PCSV_QUERY_FILE_REVISION;
typedef _EVENT_TRACE_HEADER EVENT_TRACE_HEADER;
typedef _CSV_QUERY_FILE_REVISION_FILE_ID_128* PCSV_QUERY_FILE_REVISION_FILE_ID_128;
typedef _CSV_QUERY_MDS_PATH* PCSV_QUERY_MDS_PATH;
typedef _MINIDUMP_VM_POST_READ_CALLBACK* PMINIDUMP_VM_POST_READ_CALLBACK;
typedef _CSVFS_DISK_CONNECTIVITY CSVFS_DISK_CONNECTIVITY;
typedef _CSVFS_DISK_CONNECTIVITY* PCSVFS_DISK_CONNECTIVITY;
typedef tagTYPEATTR* LPTYPEATTR;
typedef _CSV_QUERY_VOLUME_REDIRECT_STATE* PCSV_QUERY_VOLUME_REDIRECT_STATE;
typedef _CSV_QUERY_MDS_PATH_V2* PCSV_QUERY_MDS_PATH_V2;
typedef _RPC_POLICY RPC_POLICY;
typedef _CSV_SET_VOLUME_ID CSV_SET_VOLUME_ID;
typedef _ENABLE_TRACE_PARAMETERS* PENABLE_TRACE_PARAMETERS;
typedef _CSV_SET_VOLUME_ID* PCSV_SET_VOLUME_ID;
typedef _CSV_QUERY_VOLUME_ID CSV_QUERY_VOLUME_ID;
typedef RPC_STATUS ( *RPC_BLOCKING_FN )( void*, void*, void* );
typedef _CSV_QUERY_VOLUME_ID* PCSV_QUERY_VOLUME_ID;
typedef _MOF_FIELD* PMOF_FIELD;
typedef _LMR_QUERY_INFO_CLASS* PLMR_QUERY_INFO_CLASS;
typedef _LMR_QUERY_INFO_PARAM LMR_QUERY_INFO_PARAM;
typedef _LMR_QUERY_INFO_PARAM* PLMR_QUERY_INFO_PARAM;
typedef _MINIDUMP_TOKEN_INFO_HEADER* PMINIDUMP_TOKEN_INFO_HEADER;
typedef _LMR_QUERY_SESSION_INFO LMR_QUERY_SESSION_INFO;
typedef _RPC_ASYNC_NOTIFICATION_INFO RPC_ASYNC_NOTIFICATION_INFO;
typedef _LMR_QUERY_SESSION_INFO* PLMR_QUERY_SESSION_INFO;
typedef _ETW_BUFFER_CONTEXT ETW_BUFFER_CONTEXT;
typedef _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT* PCSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT;
typedef _MINIDUMP_THREAD_EX_CALLBACK MINIDUMP_THREAD_EX_CALLBACK;
typedef tagExtendedErrorParamTypes ExtendedErrorParamTypes;
typedef _CSV_IS_OWNED_BY_CSVFS CSV_IS_OWNED_BY_CSVFS;
typedef void ( *PEVENT_RECORD_CALLBACK )( PEVENT_RECORD );
typedef ITypeFactory ITypeFactory;
typedef _FILE_LEVEL_TRIM_RANGE FILE_LEVEL_TRIM_RANGE;
typedef _MINIDUMP_SYSTEM_MEMORY_INFO_1* PMINIDUMP_SYSTEM_MEMORY_INFO_1;
typedef _FILE_LEVEL_TRIM FILE_LEVEL_TRIM;
typedef _FILE_LEVEL_TRIM* PFILE_LEVEL_TRIM;
typedef _MINIDUMP_THREAD_NAME* PMINIDUMP_THREAD_NAME;
typedef _FILE_LEVEL_TRIM_OUTPUT FILE_LEVEL_TRIM_OUTPUT;
typedef _FILE_REFERENCE_RANGE* PFILE_REFERENCE_RANGE;
typedef void RPCNOTIFICATION_ROUTINE( _RPC_ASYNC_STATE*, void*, RPC_ASYNC_EVENT );
typedef _EVENT_TRACE_PROPERTIES_V2* PEVENT_TRACE_PROPERTIES_V2;
typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A* PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A;
typedef _TRACE_GUID_REGISTRATION TRACE_GUID_REGISTRATION;
typedef _MINIDUMP_USER_STREAM* PMINIDUMP_USER_STREAM;
typedef _QUERY_FILE_LAYOUT_INPUT* PQUERY_FILE_LAYOUT_INPUT;
typedef _QUERY_FILE_LAYOUT_OUTPUT QUERY_FILE_LAYOUT_OUTPUT;
typedef IComThreadingInfo IComThreadingInfo;
typedef _QUERY_FILE_LAYOUT_OUTPUT* PQUERY_FILE_LAYOUT_OUTPUT;
typedef _wireSAFEARR_UNKNOWN SAFEARR_UNKNOWN;
typedef _FILE_LAYOUT_ENTRY FILE_LAYOUT_ENTRY;
typedef _MINIDUMP_MODULE_CALLBACK MINIDUMP_MODULE_CALLBACK;
typedef _FILE_LAYOUT_ENTRY* PFILE_LAYOUT_ENTRY;
typedef IMachineGlobalObjectTable IMachineGlobalObjectTable;
typedef _FILE_LAYOUT_NAME_ENTRY* PFILE_LAYOUT_NAME_ENTRY;
typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_W RPC_HTTP_TRANSPORT_CREDENTIALS_W;
typedef _TRACE_PROVIDER_INSTANCE_INFO* PTRACE_PROVIDER_INSTANCE_INFO;
typedef tagSF_TYPE SF_TYPE;
typedef _FILE_LAYOUT_INFO_ENTRY FILE_LAYOUT_INFO_ENTRY;
typedef _FILE_LAYOUT_INFO_ENTRY* PFILE_LAYOUT_INFO_ENTRY;
typedef _PROFILE_SOURCE_INFO PROFILE_SOURCE_INFO;
typedef _STREAM_LAYOUT_ENTRY STREAM_LAYOUT_ENTRY;
typedef _MINIDUMP_MODULE_CALLBACK* PMINIDUMP_MODULE_CALLBACK;
typedef _STREAM_LAYOUT_ENTRY* PSTREAM_LAYOUT_ENTRY;
typedef _EVENT_FILTER_DESCRIPTOR EVENT_FILTER_DESCRIPTOR;
typedef _STREAM_EXTENT_ENTRY STREAM_EXTENT_ENTRY;
typedef _MINIDUMP_PROCESS_VM_COUNTERS_1 MINIDUMP_PROCESS_VM_COUNTERS_1;
typedef _STREAM_EXTENT_ENTRY* PSTREAM_EXTENT_ENTRY;
typedef _SHORT_SIZEDARR WORD_SIZEDARR;
typedef _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER
    FSCTL_GET_INTEGRITY_INFORMATION_BUFFER;
typedef _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER* PFSCTL_GET_INTEGRITY_INFORMATION_BUFFER;
typedef _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER
    FSCTL_SET_INTEGRITY_INFORMATION_BUFFER;
typedef _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER* PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER;
typedef _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX
    FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX;
typedef _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX* PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX;
typedef _MINIDUMP_HANDLE_DATA_STREAM MINIDUMP_HANDLE_DATA_STREAM;
typedef _FSCTL_OFFLOAD_READ_INPUT FSCTL_OFFLOAD_READ_INPUT;
typedef _FSCTL_OFFLOAD_READ_INPUT* PFSCTL_OFFLOAD_READ_INPUT;
typedef _FSCTL_OFFLOAD_READ_OUTPUT FSCTL_OFFLOAD_READ_OUTPUT;
typedef _FSCTL_OFFLOAD_READ_OUTPUT* PFSCTL_OFFLOAD_READ_OUTPUT;
typedef _MINIDUMP_HANDLE_DATA_STREAM* PMINIDUMP_HANDLE_DATA_STREAM;
typedef _FSCTL_OFFLOAD_WRITE_INPUT FSCTL_OFFLOAD_WRITE_INPUT;
typedef _FSCTL_OFFLOAD_WRITE_INPUT* PFSCTL_OFFLOAD_WRITE_INPUT;
typedef const _SMB_SHARE_FLUSH_AND_PURGE_INPUT* PCSMB_SHARE_FLUSH_AND_PURGE_INPUT;
typedef _FSCTL_OFFLOAD_WRITE_OUTPUT FSCTL_OFFLOAD_WRITE_OUTPUT;
typedef _FSCTL_OFFLOAD_WRITE_OUTPUT* PFSCTL_OFFLOAD_WRITE_OUTPUT;
typedef _MINIDUMP_MODULE* PMINIDUMP_MODULE;
typedef IAdviseSink IAdviseSink;
typedef IAdviseSink* LPADVISESINK;
typedef _SET_PURGE_FAILURE_MODE_INPUT* PSET_PURGE_FAILURE_MODE_INPUT;
typedef _RPC_BINDING_HANDLE_SECURITY_V1_W* PRPC_BINDING_HANDLE_SECURITY_V1_W;
typedef _DISK_EXTENT DISK_EXTENT;
typedef _REPAIR_COPIES_INPUT REPAIR_COPIES_INPUT;
typedef tagCAUI CAUI;
typedef _REPAIR_COPIES_INPUT* PREPAIR_COPIES_INPUT;
typedef _SCONTEXT_QUEUE SCONTEXT_QUEUE;
typedef _GET_FILTER_FILE_IDENTIFIER_OUTPUT* PGET_FILTER_FILE_IDENTIFIER_OUTPUT;
typedef _CPU_INFORMATION CPU_INFORMATION;
typedef _RemotableHandle RemotableHandle;
typedef RemotableHandle* wireHWND;
typedef _MINIDUMP_THREAD MINIDUMP_THREAD;
typedef unsigned long RPC_LENGTH;
typedef _FILE_REGION_OUTPUT FILE_REGION_OUTPUT;
typedef _FILE_REGION_OUTPUT* PFILE_REGION_OUTPUT;
typedef void ( *PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK )(
    _IO_IRP_EXT_TRACK_OFFSET_HEADER*, _IO_IRP_EXT_TRACK_OFFSET_HEADER*, LONGLONG );
typedef _FILE_REGION_INPUT* PFILE_REGION_INPUT;
typedef _userSTGMEDIUM userSTGMEDIUM;
typedef _WRITE_USN_REASON_INPUT* PWRITE_USN_REASON_INPUT;
typedef _MINIDUMP_HANDLE_DESCRIPTOR_2* PMINIDUMP_HANDLE_DESCRIPTOR_2;
typedef _FILE_STORAGE_TIER_MEDIA_TYPE FILE_STORAGE_TIER_MEDIA_TYPE;
typedef tagCASCODE CASCODE;
typedef _FILE_STORAGE_TIER_MEDIA_TYPE* PFILE_STORAGE_TIER_MEDIA_TYPE;
typedef RemotableHandle* wireHFONT;
typedef WMIREGINFOW* PWMIREGINFOW;
typedef PWMIREGINFOW PWMIREGINFO;
typedef _RPC_PROTSEQ_ENDPOINT* PRPC_PROTSEQ_ENDPOINT;
typedef MINIDUMP_MISC_INFO_N* PMINIDUMP_MISC_INFO_N;
typedef _FILE_STORAGE_TIER_CLASS* PFILE_STORAGE_TIER_CLASS;
typedef _FILE_STORAGE_TIER FILE_STORAGE_TIER;
typedef _FILE_STORAGE_TIER* PFILE_STORAGE_TIER;
typedef _MINIDUMP_MEMORY_INFO_LIST MINIDUMP_MEMORY_INFO_LIST;
typedef _FILE_PROVIDER_EXTERNAL_INFO_V0 FILE_PROVIDER_EXTERNAL_INFO_V0;
typedef _userFLAG_STGMEDIUM userFLAG_STGMEDIUM;
typedef _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT FSCTL_QUERY_STORAGE_CLASSES_OUTPUT;
typedef tagWNODE_SINGLE_ITEM WNODE_SINGLE_ITEM;
typedef IMessageFilter IMessageFilter;
typedef _MINIDUMP_MEMORY_DESCRIPTOR64* PMINIDUMP_MEMORY_DESCRIPTOR64;
typedef WORD PROPVAR_PAD3;
typedef _STREAM_INFORMATION_ENTRY STREAM_INFORMATION_ENTRY;
typedef _STREAM_INFORMATION_ENTRY* PSTREAM_INFORMATION_ENTRY;
typedef _RPC_BINDING_HANDLE_OPTIONS_V1 RPC_BINDING_HANDLE_OPTIONS_V1;
typedef _FSCTL_QUERY_REGION_INFO_INPUT FSCTL_QUERY_REGION_INFO_INPUT;
typedef _MINIDUMP_MEMORY_DESCRIPTOR64 MINIDUMP_MEMORY_DESCRIPTOR64;
typedef _FSCTL_QUERY_REGION_INFO_INPUT* PFSCTL_QUERY_REGION_INFO_INPUT;
typedef _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION
    VOLUME_GET_GPT_ATTRIBUTES_INFORMATION;
typedef _FILE_STORAGE_TIER_REGION FILE_STORAGE_TIER_REGION;
typedef _FILE_STORAGE_TIER_REGION* PFILE_STORAGE_TIER_REGION;
typedef _MINIDUMP_EXCEPTION_INFORMATION64* PMINIDUMP_EXCEPTION_INFORMATION64;
typedef _FSCTL_QUERY_REGION_INFO_OUTPUT FSCTL_QUERY_REGION_INFO_OUTPUT;
typedef WMIREGGUIDW WMIREGGUIDW;
typedef void ( *RPC_DISPATCH_FUNCTION )( PRPC_MESSAGE );
typedef WMIREGGUIDW WMIREGGUID;
typedef _FILE_DESIRED_STORAGE_CLASS_INFORMATION
    FILE_DESIRED_STORAGE_CLASS_INFORMATION;
typedef _MINIDUMP_MISC_INFO_2* PMINIDUMP_MISC_INFO_2;
typedef _DUPLICATE_EXTENTS_DATA DUPLICATE_EXTENTS_DATA;
typedef _DUPLICATE_EXTENTS_DATA* PDUPLICATE_EXTENTS_DATA;
typedef tagSAFEARRAY SAFEARRAY;
typedef SAFEARRAY* LPSAFEARRAY;
typedef _DUPLICATE_EXTENTS_DATA32 DUPLICATE_EXTENTS_DATA32;
typedef _DUPLICATE_EXTENTS_DATA32* PDUPLICATE_EXTENTS_DATA32;
typedef _SEC_WINNT_AUTH_IDENTITY_A SEC_WINNT_AUTH_IDENTITY_A;
typedef _DUPLICATE_EXTENTS_DATA_EX DUPLICATE_EXTENTS_DATA_EX;
typedef _WIM_PROVIDER_SUSPEND_OVERLAY_INPUT* PWIM_PROVIDER_SUSPEND_OVERLAY_INPUT;
typedef _DUPLICATE_EXTENTS_DATA_EX32 DUPLICATE_EXTENTS_DATA_EX32;
typedef _DUPLICATE_EXTENTS_DATA_EX32* PDUPLICATE_EXTENTS_DATA_EX32;
typedef tagCUSTDATAITEM CUSTDATAITEM;
typedef _DUPLICATE_EXTENTS_STATE DUPLICATE_EXTENTS_STATE;
typedef _FS_BPIO_INPUT* PFS_BPIO_INPUT;
typedef _MINIDUMP_THREAD_EX MINIDUMP_THREAD_EX;
typedef _DUPLICATE_EXTENTS_STATE* PDUPLICATE_EXTENTS_STATE;
typedef tagQUERYCONTEXT QUERYCONTEXT;
typedef _ASYNC_DUPLICATE_EXTENTS_STATUS ASYNC_DUPLICATE_EXTENTS_STATUS;
typedef _ASYNC_DUPLICATE_EXTENTS_STATUS* PASYNC_DUPLICATE_EXTENTS_STATUS;
typedef _FS_BPIO_RESULTS* PFS_BPIO_RESULTS;
typedef _REFS_SMR_VOLUME_GC_STATE REFS_SMR_VOLUME_GC_STATE;
typedef _REFS_SMR_VOLUME_GC_STATE* PREFS_SMR_VOLUME_GC_STATE;
typedef _CONTAINER_VOLUME_STATE* PCONTAINER_VOLUME_STATE;
typedef tagWNODE_EVENT_ITEM* PWNODE_EVENT_ITEM;
typedef _REFS_SMR_VOLUME_INFO_OUTPUT REFS_SMR_VOLUME_INFO_OUTPUT;
typedef _RPC_SYNTAX_IDENTIFIER RPC_SYNTAX_IDENTIFIER;
typedef tagBIND_OPTS BIND_OPTS;
typedef _REFS_SMR_VOLUME_INFO_OUTPUT* PREFS_SMR_VOLUME_INFO_OUTPUT;
typedef _XSTATE_CONFIG_FEATURE_MSC_INFO* PXSTATE_CONFIG_FEATURE_MSC_INFO;
typedef _MINIDUMP_MISC_INFO_2 MINIDUMP_MISC_INFO_2;
typedef tagDESCKIND DESCKIND;
typedef _WIM_PROVIDER_EXTERNAL_INFO* PWIM_PROVIDER_EXTERNAL_INFO;
typedef _REFS_SMR_VOLUME_GC_PARAMETERS* PREFS_SMR_VOLUME_GC_PARAMETERS;
typedef _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER
    STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER;
typedef _RPC_SECURITY_QOS* PRPC_SECURITY_QOS;
typedef _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER* PSTREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER;
typedef _WIM_PROVIDER_UPDATE_OVERLAY_INPUT WIM_PROVIDER_UPDATE_OVERLAY_INPUT;
typedef _STREAMS_ASSOCIATE_ID_INPUT_BUFFER* PSTREAMS_ASSOCIATE_ID_INPUT_BUFFER;
typedef _STREAMS_QUERY_ID_OUTPUT_BUFFER STREAMS_QUERY_ID_OUTPUT_BUFFER;
typedef IPersistStream* LPPERSISTSTREAM;
typedef _STREAMS_QUERY_ID_OUTPUT_BUFFER* PSTREAMS_QUERY_ID_OUTPUT_BUFFER;
typedef _QUERY_BAD_RANGES_INPUT_RANGE* PQUERY_BAD_RANGES_INPUT_RANGE;
typedef tagTLIBATTR* LPTLIBATTR;
typedef _QUERY_BAD_RANGES_INPUT QUERY_BAD_RANGES_INPUT;
typedef RPC_STATUS ( *I_RpcProxyGetClientSessionAndResourceUUID )( void*, int*, UUID*, int*, UUID* );
typedef _MINIDUMP_THREAD* PMINIDUMP_THREAD;
typedef _QUERY_BAD_RANGES_INPUT* PQUERY_BAD_RANGES_INPUT;
typedef AsyncIAdviseSink AsyncIAdviseSink;
typedef _QUERY_BAD_RANGES_OUTPUT_RANGE QUERY_BAD_RANGES_OUTPUT_RANGE;
typedef _IO_IRP_EXT_TRACK_OFFSET_HEADER* PIO_IRP_EXT_TRACK_OFFSET_HEADER;
typedef IEnumSTATSTG IEnumSTATSTG;
typedef _QUERY_BAD_RANGES_OUTPUT_RANGE* PQUERY_BAD_RANGES_OUTPUT_RANGE;
typedef _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT;
typedef RPC_STATUS ( *I_RpcProxyGetClientAddressFn )( void*, char*, unsigned long* );
typedef _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT* PSET_DAX_ALLOC_ALIGNMENT_HINT_INPUT;
typedef _RPC_SECURITY_QOS_V5_A RPC_SECURITY_QOS_V5_A;
typedef ILockBytes ILockBytes;
typedef _FS_BPIO_OUTPUT FS_BPIO_OUTPUT;
typedef _VIRTUAL_STORAGE_BEHAVIOR_CODE VIRTUAL_STORAGE_BEHAVIOR_CODE;
typedef _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT;
typedef _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT* PVIRTUAL_STORAGE_SET_BEHAVIOR_INPUT;
typedef _ENCRYPTION_KEY_CTRL_INPUT ENCRYPTION_KEY_CTRL_INPUT;
typedef _ENCRYPTION_KEY_CTRL_INPUT* PENCRYPTION_KEY_CTRL_INPUT;
typedef _VIRTUALIZATION_INSTANCE_INFO_INPUT_EX* PVIRTUALIZATION_INSTANCE_INFO_INPUT_EX;
typedef _WOF_EXTERNAL_INFO WOF_EXTERNAL_INFO;
typedef WORD CLIPFORMAT;
typedef CLIPFORMAT* LPCLIPFORMAT;
typedef _WOF_EXTERNAL_FILE_ID WOF_EXTERNAL_FILE_ID;
typedef _RPC_SECURITY_QOS_V2_A* PRPC_SECURITY_QOS_V2_A;
typedef _GET_FILTER_FILE_IDENTIFIER_INPUT GET_FILTER_FILE_IDENTIFIER_INPUT;
typedef _WIM_PROVIDER_EXTERNAL_INFO WIM_PROVIDER_EXTERNAL_INFO;
typedef RPC_IMPORT_CONTEXT_P* PRPC_IMPORT_CONTEXT_P;
typedef IInternetSecurityMgrSite IInternetSecurityMgrSite;
typedef _WIM_PROVIDER_REMOVE_OVERLAY_INPUT* PWIM_PROVIDER_REMOVE_OVERLAY_INPUT;
typedef IInternetHostSecurityManager IInternetHostSecurityManager;
typedef _WIM_PROVIDER_OVERLAY_ENTRY WIM_PROVIDER_OVERLAY_ENTRY;
typedef _WIM_PROVIDER_OVERLAY_ENTRY* PWIM_PROVIDER_OVERLAY_ENTRY;
typedef FILE_PROVIDER_EXTERNAL_INFO_V1 FILE_PROVIDER_EXTERNAL_INFO;
typedef _FULL_PTR_XLAT_TABLES* PFULL_PTR_XLAT_TABLES;
typedef _MINIDUMP_USER_STREAM MINIDUMP_USER_STREAM;
typedef PFILE_PROVIDER_EXTERNAL_INFO_V1 PFILE_PROVIDER_EXTERNAL_INFO;
typedef _MINIDUMP_FUNCTION_TABLE_STREAM* PMINIDUMP_FUNCTION_TABLE_STREAM;
typedef _CONTAINER_VOLUME_STATE CONTAINER_VOLUME_STATE;
typedef _CONTAINER_ROOT_INFO_INPUT* PCONTAINER_ROOT_INFO_INPUT;
typedef _MINIDUMP_UNLOADED_MODULE_LIST MINIDUMP_UNLOADED_MODULE_LIST;
typedef _MINIDUMP_VM_PRE_READ_CALLBACK MINIDUMP_VM_PRE_READ_CALLBACK;
typedef _CONTAINER_ROOT_INFO_OUTPUT* PCONTAINER_ROOT_INFO_OUTPUT;
typedef RPC_IMPORT_CONTEXT_P RPC_IMPORT_CONTEXT_P;
typedef _RPC_NOTIFICATIONS RPC_NOTIFICATIONS;
typedef _VIRTUALIZATION_INSTANCE_INFO_INPUT VIRTUALIZATION_INSTANCE_INFO_INPUT;
typedef LONG DISPID;
typedef DISPID MEMBERID;
typedef _VIRTUALIZATION_INSTANCE_INFO_INPUT_EX
    VIRTUALIZATION_INSTANCE_INFO_INPUT_EX;
typedef void RPC_SECURITY_CALLBACK_FN( void* );
typedef _MINIDUMP_SYSTEM_FILECACHE_INFORMATION* PMINIDUMP_SYSTEM_FILECACHE_INFORMATION;
typedef _SCONTEXT_QUEUE* PSCONTEXT_QUEUE;
typedef _FS_BPIO_INPUT FS_BPIO_INPUT;
typedef tagRpcCallType RpcCallType;
typedef _FS_BPIO_OUTFLAGS FS_BPIO_OUTFLAGS;
typedef _MINIDUMP_VM_PRE_READ_CALLBACK* PMINIDUMP_VM_PRE_READ_CALLBACK;
typedef _FS_BPIO_INFO FS_BPIO_INFO;
typedef _FS_BPIO_INFO* PFS_BPIO_INFO;
typedef _MIDL_SYNTAX_INFO MIDL_SYNTAX_INFO;
typedef _SMB_SHARE_FLUSH_AND_PURGE_INPUT SMB_SHARE_FLUSH_AND_PURGE_INPUT;
typedef _SMB_SHARE_FLUSH_AND_PURGE_INPUT* PSMB_SHARE_FLUSH_AND_PURGE_INPUT;
typedef _MIDL_SYNTAX_INFO* PMIDL_SYNTAX_INFO;
typedef _RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR;
typedef _SMB_SHARE_FLUSH_AND_PURGE_OUTPUT SMB_SHARE_FLUSH_AND_PURGE_OUTPUT;
typedef const _SMB_SHARE_FLUSH_AND_PURGE_OUTPUT* PCSMB_SHARE_FLUSH_AND_PURGE_OUTPUT;
typedef _DISK_EXTENT* PDISK_EXTENT;
typedef RPC_STATUS ( *I_RpcProxyIsValidMachineFn )( RPC_WSTR, RPC_WSTR, unsigned long );
typedef _RPC_ASYNC_STATE RPC_ASYNC_STATE;
typedef _VOLUME_DISK_EXTENTS VOLUME_DISK_EXTENTS;
typedef _VOLUME_DISK_EXTENTS* PVOLUME_DISK_EXTENTS;
typedef _MINIDUMP_THREAD_CALLBACK* PMINIDUMP_THREAD_CALLBACK;
typedef _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION* PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION;
typedef _IO_IRP_EXT_TRACK_OFFSET_HEADER IO_IRP_EXT_TRACK_OFFSET_HEADER;
typedef ARRAY_INFO ARRAY_INFO;
typedef ITypeLibRegistrationReader ITypeLibRegistrationReader;
typedef _RPC_SEC_CONTEXT_KEY_INFO* PRPC_SEC_CONTEXT_KEY_INFO;
typedef OFFSETINSTANCEDATAANDLENGTH* POFFSETINSTANCEDATAANDLENGTH;
typedef _RPC_SEC_CONTEXT_KEY_INFO RPC_SEC_CONTEXT_KEY_INFO;
typedef tagWNODE_ALL_DATA WNODE_ALL_DATA;
typedef _MINIDUMP_THREAD_NAME_LIST MINIDUMP_THREAD_NAME_LIST;
typedef tagWNODE_SINGLE_INSTANCE WNODE_SINGLE_INSTANCE;
typedef IWinInetHttpInfo IWinInetHttpInfo;
typedef tagWNODE_METHOD_ITEM WNODE_METHOD_ITEM;
typedef tagWNODE_EVENT_ITEM WNODE_EVENT_ITEM;
typedef void ( *USER_MARSHAL_FREEING_ROUTINE )( unsigned long*, void* );
typedef unsigned char* ( *USER_MARSHAL_UNMARSHALLING_ROUTINE )( unsigned long*,
    unsigned char*,
    void* );
typedef tagWNODE_EVENT_REFERENCE WNODE_EVENT_REFERENCE;
typedef tagRPC_CALL_ATTRIBUTES_V3_A RPC_CALL_ATTRIBUTES_V3_A;
typedef tagWNODE_EVENT_REFERENCE* PWNODE_EVENT_REFERENCE;
typedef _MINIDUMP_DIRECTORY MINIDUMP_DIRECTORY;
typedef _MINIDUMP_STRING* PMINIDUMP_STRING;
typedef _MINIDUMP_INCLUDE_THREAD_CALLBACK MINIDUMP_INCLUDE_THREAD_CALLBACK;
typedef _wireSAFEARRAY_UNION SAFEARRAYUNION;
typedef WMIREGINFOW WMIREGINFO;
typedef tagRPC_EXTENDED_ERROR_INFO RPC_EXTENDED_ERROR_INFO;
typedef tagI_RpcProxyCallbackInterface I_RpcProxyCallbackInterface;
typedef MINIDUMP_SYSTEM_MEMORY_INFO_N* PMINIDUMP_SYSTEM_MEMORY_INFO_N;
typedef IInternetThreadSwitch IInternetThreadSwitch;
typedef void ( *I_RpcProxyUpdatePerfCounterBackendServerFn )( unsigned short*,
    int );
typedef ETW_COMPRESSION_RESUMPTION_MODE ETW_COMPRESSION_RESUMPTION_MODE;
typedef RPC_ENDPOINT_TEMPLATEA RPC_ENDPOINT_TEMPLATEA;
typedef tagCAC CAC;
typedef _EVENT_INSTANCE_HEADER* PEVENT_INSTANCE_HEADER;
typedef _RPC_BINDING_HANDLE_TEMPLATE_V1_A RPC_BINDING_HANDLE_TEMPLATE_V1_A;
typedef _RPC_BINDING_HANDLE_SECURITY_V1_A* PRPC_BINDING_HANDLE_SECURITY_V1_A;
typedef tagSTATDATA STATDATA;
typedef _RPC_SECURITY_QOS_V3_A* PRPC_SECURITY_QOS_V3_A;
typedef _TRACE_LOGFILE_HEADER32* PTRACE_LOGFILE_HEADER32;
typedef tagCABSTR CABSTR;
typedef IRpcProxyBuffer IRpcProxyBuffer;
typedef _MINIDUMP_HANDLE_DESCRIPTOR* PMINIDUMP_HANDLE_DESCRIPTOR;
typedef EVENT_INSTANCE_INFO EVENT_INSTANCE_INFO;
typedef RPC_CLIENT_INFORMATION1* PRPC_CLIENT_INFORMATION1;
typedef EVENT_INSTANCE_INFO* PEVENT_INSTANCE_INFO;
typedef _userHMETAFILEPICT userHMETAFILEPICT;
typedef userHMETAFILEPICT* wireHMETAFILEPICT;
typedef IChannelHook IChannelHook;
typedef _MINIDUMP_MISC_INFO_5* PMINIDUMP_MISC_INFO_5;
typedef RPC_DISPATCH_TABLE* PRPC_DISPATCH_TABLE;
typedef _MINIDUMP_MEMORY_INFO MINIDUMP_MEMORY_INFO;
typedef _LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION
    LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION;
typedef _RPC_CLIENT_INTERFACE RPC_CLIENT_INTERFACE;
typedef _EVENT_TRACE_PROPERTIES_V2 EVENT_TRACE_PROPERTIES_V2;
typedef tagBLOB BLOB;
typedef _TRACE_GUID_PROPERTIES TRACE_GUID_PROPERTIES;
typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A
    RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A;
typedef _TRACE_GUID_PROPERTIES* PTRACE_GUID_PROPERTIES;
typedef _TRACE_ENABLE_INFO TRACE_ENABLE_INFO;
typedef _MINIDUMP_EXCEPTION_INFORMATION* PMINIDUMP_EXCEPTION_INFORMATION;
typedef _TRACE_ENABLE_INFO* PTRACE_ENABLE_INFO;
typedef _TRACE_PROVIDER_INSTANCE_INFO TRACE_PROVIDER_INSTANCE_INFO;
typedef RPC_DISPATCH_TABLE RPC_DISPATCH_TABLE;
typedef _TRACE_GUID_INFO TRACE_GUID_INFO;
typedef _TRACE_GUID_INFO* PTRACE_GUID_INFO;
typedef tagPROPSPEC PROPSPEC;
typedef _MINIDUMP_MISC_INFO_4 MINIDUMP_MISC_INFO_4;
typedef _PROFILE_SOURCE_INFO* PPROFILE_SOURCE_INFO;
typedef tagApplicationType ApplicationType;
typedef tagVARDESC* LPVARDESC;
typedef _ETW_PMC_COUNTER_OWNERSHIP_STATUS ETW_PMC_COUNTER_OWNERSHIP_STATUS;
typedef ETW_PMC_SESSION_INFO ETW_PMC_SESSION_INFO;
typedef _MINIDUMP_THREAD_LIST* PMINIDUMP_THREAD_LIST;
typedef _RPC_SECURITY_QOS_V5_W* PRPC_SECURITY_QOS_V5_W;
typedef _EVENT_RECORD EVENT_RECORD;
typedef _EVENT_TRACE_LOGFILEW EVENT_TRACE_LOGFILEW;
typedef _RPC_SECURITY_QOS_V5_W RPC_SECURITY_QOS_V5_W;
typedef _MINIDUMP_UNLOADED_MODULE_LIST* PMINIDUMP_UNLOADED_MODULE_LIST;
typedef ICreateTypeLib ICreateTypeLib;
typedef _EVENT_TRACE_LOGFILEA EVENT_TRACE_LOGFILEA;
typedef _MINIDUMP_STRING MINIDUMP_STRING;
typedef void* RPC_AUTHZ_HANDLE;
typedef void ( *PEVENT_CALLBACK )( PEVENT_TRACE );
typedef _TRACE_VERSION_INFO TRACE_VERSION_INFO;
typedef RPC_IF_ID_VECTOR RPC_IF_ID_VECTOR;
typedef _MINIDUMP_SYSTEM_INFO MINIDUMP_SYSTEM_INFO;
typedef ITypeLib2 ITypeLib2;
typedef _RPC_SECURITY_QOS_V4_W RPC_SECURITY_QOS_V4_W;
typedef IStorage IStorage;
typedef IStorage* LPSTORAGE;
typedef ETW_OPEN_TRACE_OPTIONS ETW_OPEN_TRACE_OPTIONS;
typedef tagSYSKIND SYSKIND;
typedef void ( *RPC_AUTH_KEY_RETRIEVAL_FN )( void*, RPC_WSTR, unsigned long, void**, RPC_STATUS* );
typedef _MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION* PMINIDUMP_SYSTEM_PERFORMANCE_INFORMATION;
typedef _COAUTHIDENTITY COAUTHIDENTITY;
typedef int ( *RPC_MGMT_AUTHORIZATION_FN )( RPC_BINDING_HANDLE, unsigned long, RPC_STATUS* );
typedef ISupportErrorInfo ISupportErrorInfo;
typedef _ENABLE_TRACE_PARAMETERS_V1 ENABLE_TRACE_PARAMETERS_V1;
typedef _ENABLE_TRACE_PARAMETERS_V1* PENABLE_TRACE_PARAMETERS_V1;
typedef MINIDUMP_EXCEPTION_STREAM* PMINIDUMP_EXCEPTION_STREAM;
typedef _ENABLE_TRACE_PARAMETERS ENABLE_TRACE_PARAMETERS;
typedef tagFORMATETC FORMATETC;
typedef _RPC_BINDING_HANDLE_TEMPLATE_V1_W* PRPC_BINDING_HANDLE_TEMPLATE_V1_W;
typedef _TRACE_QUERY_INFO_CLASS TRACE_QUERY_INFO_CLASS;
typedef _TRACE_STACK_CACHING_INFO TRACE_STACK_CACHING_INFO;
typedef _CPU_INFORMATION* PCPU_INFORMATION;
typedef byte cs_byte;
typedef _TRACE_VERSION_INFO* PTRACE_VERSION_INFO;
typedef void ( *NDR_RUNDOWN )( void* );
typedef _ETW_PROCESS_HANDLE_INFO_TYPE ETW_PROCESS_HANDLE_INFO_TYPE;
typedef _ETW_TRACE_PARTITION_INFORMATION ETW_TRACE_PARTITION_INFORMATION;
typedef _ETW_TRACE_PARTITION_INFORMATION_V2 ETW_TRACE_PARTITION_INFORMATION_V2;
typedef _RPC_CALL_LOCAL_ADDRESS_V1* PRPC_CALL_LOCAL_ADDRESS_V1;
typedef ULONG64 RVA64;
typedef IClassFactory IClassFactory;
typedef IClassFactory* LPCLASSFACTORY;
typedef void* HCONTEXT;
typedef _MINIDUMP_LOCATION_DESCRIPTOR64 MINIDUMP_LOCATION_DESCRIPTOR64;
typedef IAddrExclusionControl IAddrExclusionControl;
typedef _MINIDUMP_HEADER MINIDUMP_HEADER;
typedef WORD PROPVAR_PAD2;
typedef tagCAUB CAUB;
typedef _userHMETAFILE userHMETAFILE;
typedef IRpcChannelBuffer IRpcChannelBuffer;
typedef _MINIDUMP_SYSTEM_INFO* PMINIDUMP_SYSTEM_INFO;
typedef _MINIDUMP_THREAD_LIST MINIDUMP_THREAD_LIST;
typedef _MINIDUMP_THREAD_EX_LIST MINIDUMP_THREAD_EX_LIST;
typedef _MINIDUMP_THREAD_EX_LIST* PMINIDUMP_THREAD_EX_LIST;
typedef unsigned char* PFORMAT_STRING;
typedef _MINIDUMP_EXCEPTION* PMINIDUMP_EXCEPTION;
typedef MINIDUMP_EXCEPTION_STREAM MINIDUMP_EXCEPTION_STREAM;
typedef _MINIDUMP_MODULE MINIDUMP_MODULE;
typedef _lldiv_t lldiv_t;
typedef _MINIDUMP_MODULE_LIST* PMINIDUMP_MODULE_LIST;
typedef _MINIDUMP_MEMORY_LIST MINIDUMP_MEMORY_LIST;
typedef _MINIDUMP_MEMORY_LIST* PMINIDUMP_MEMORY_LIST;
typedef _RPC_ASYNC_NOTIFICATION_INFO* PRPC_ASYNC_NOTIFICATION_INFO;
typedef _MINIDUMP_MEMORY64_LIST MINIDUMP_MEMORY64_LIST;
typedef _CRT_FLOAT _CRT_FLOAT;
typedef _MINIDUMP_MEMORY64_LIST* PMINIDUMP_MEMORY64_LIST;
typedef _MINIDUMP_EXCEPTION_INFORMATION MINIDUMP_EXCEPTION_INFORMATION;
typedef void ( *EXPR_EVAL )( _MIDL_STUB_MESSAGE* );
typedef _MINIDUMP_HANDLE_OBJECT_INFORMATION MINIDUMP_HANDLE_OBJECT_INFORMATION;
typedef void ( *PRPC_RUNDOWN )( void* );
typedef MINIDUMP_HANDLE_DESCRIPTOR_N* PMINIDUMP_HANDLE_DESCRIPTOR_N;
typedef _RPC_TRANSFER_SYNTAX RPC_TRANSFER_SYNTAX;
typedef _MINIDUMP_HANDLE_OPERATION_LIST MINIDUMP_HANDLE_OPERATION_LIST;
typedef _MINIDUMP_FUNCTION_TABLE_DESCRIPTOR* PMINIDUMP_FUNCTION_TABLE_DESCRIPTOR;
typedef IPipeDouble IPipeDouble;
typedef ICreateTypeInfo* LPCREATETYPEINFO;
typedef _XSTATE_CONFIG_FEATURE_MSC_INFO XSTATE_CONFIG_FEATURE_MSC_INFO;
typedef tagRPC_EE_INFO_PARAM RPC_EE_INFO_PARAM;
typedef _MINIDUMP_MISC_INFO_3 MINIDUMP_MISC_INFO_3;
typedef _MINIDUMP_MISC_INFO_4* PMINIDUMP_MISC_INFO_4;
typedef _MINIDUMP_MEMORY_INFO* PMINIDUMP_MEMORY_INFO;
typedef void** PRPC_INTERFACE_GROUP;
typedef _MINIDUMP_MEMORY_INFO_LIST* PMINIDUMP_MEMORY_INFO_LIST;
typedef _MINIDUMP_THREAD_NAME_LIST* PMINIDUMP_THREAD_NAME_LIST;
typedef _MINIDUMP_THREAD_INFO MINIDUMP_THREAD_INFO;
typedef _MINIDUMP_THREAD_INFO_LIST MINIDUMP_THREAD_INFO_LIST;
typedef _RPC_BINDING_HANDLE_SECURITY_V1_W RPC_BINDING_HANDLE_SECURITY_V1_W;
typedef _MINIDUMP_TOKEN_INFO_HEADER MINIDUMP_TOKEN_INFO_HEADER;
typedef _MINIDUMP_TOKEN_INFO_LIST MINIDUMP_TOKEN_INFO_LIST;
typedef _MINIDUMP_TOKEN_INFO_LIST* PMINIDUMP_TOKEN_INFO_LIST;
typedef _userBITMAP userBITMAP;
typedef _RPC_SECURITY_QOS_V3_W RPC_SECURITY_QOS_V3_W;
typedef _MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION* PMINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION;
typedef void ( *RPC_HTTP_PROXY_FREE_STRING )( RPC_WSTR );
typedef _RPC_SERVER_INTERFACE RPC_SERVER_INTERFACE;
typedef void* I_RPC_MUTEX;
typedef _MINIDUMP_PROCESS_VM_COUNTERS_2* PMINIDUMP_PROCESS_VM_COUNTERS_2;
typedef _MIDL_INTERFACE_METHOD_PROPERTIES MIDL_INTERFACE_METHOD_PROPERTIES;
typedef _MINIDUMP_USER_RECORD MINIDUMP_USER_RECORD;
typedef _MINIDUMP_USER_STREAM_INFORMATION MINIDUMP_USER_STREAM_INFORMATION;
typedef _RPC_BINDING_HANDLE_OPTIONS_V1* PRPC_BINDING_HANDLE_OPTIONS_V1;
typedef _MINIDUMP_CALLBACK_TYPE MINIDUMP_CALLBACK_TYPE;
typedef _MINIDUMP_THREAD_EX_CALLBACK* PMINIDUMP_THREAD_EX_CALLBACK;
typedef _MINIDUMP_INCLUDE_THREAD_CALLBACK* PMINIDUMP_INCLUDE_THREAD_CALLBACK;
typedef _NDR_USER_MARSHAL_INFO_LEVEL1 NDR_USER_MARSHAL_INFO_LEVEL1;
typedef _RPC_PROTSEQ_ENDPOINT RPC_PROTSEQ_ENDPOINT;
typedef _MINIDUMP_INCLUDE_MODULE_CALLBACK* PMINIDUMP_INCLUDE_MODULE_CALLBACK;
typedef _SEC_WINNT_AUTH_IDENTITY_A* PSEC_WINNT_AUTH_IDENTITY_A;
typedef _RPC_HTTP_TRANSPORT_CREDENTIALS_W* PRPC_HTTP_TRANSPORT_CREDENTIALS_W;
typedef _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK* PMINIDUMP_READ_MEMORY_FAILURE_CALLBACK;
typedef _RPC_SECURITY_QOS_V4_A RPC_SECURITY_QOS_V4_A;
typedef _MINIDUMP_VM_QUERY_CALLBACK* PMINIDUMP_VM_QUERY_CALLBACK;
typedef void* RPC_AUTH_IDENTITY_HANDLE;
typedef void ( *CS_TYPE_TO_NETCS_ROUTINE )( RPC_BINDING_HANDLE, unsigned long, void*, unsigned long, byte*, unsigned long*, error_status_t* );
typedef IHttpNegotiate IHttpNegotiate;
typedef IMultiQI IMultiQI;
typedef IMultiQI* LPMULTIQI;
typedef _IDL_CS_CONVERT IDL_CS_CONVERT;
typedef void ( *CS_TYPE_LOCAL_SIZE_ROUTINE )( RPC_BINDING_HANDLE, unsigned long, unsigned long, IDL_CS_CONVERT*, unsigned long*, error_status_t* );
typedef _GENERIC_BINDING_ROUTINE_PAIR GENERIC_BINDING_ROUTINE_PAIR;
typedef _RPC_SECURITY_QOS_V5_A* PRPC_SECURITY_QOS_V5_A;
typedef _RPC_PROTSEQ_VECTORA RPC_PROTSEQ_VECTORA;
typedef _RPC_PROTSEQ_VECTORW RPC_PROTSEQ_VECTORW;
typedef _COMM_FAULT_OFFSETS COMM_FAULT_OFFSETS;
typedef void RPC_OBJECT_INQ_FN( UUID*, UUID*, RPC_STATUS* );
typedef _RPC_SECURITY_QOS_V2_A RPC_SECURITY_QOS_V2_A;
typedef RPC_STATUS RPC_IF_CALLBACK_FN( RPC_IF_HANDLE, void* );
typedef _SEC_WINNT_AUTH_IDENTITY_W* PSEC_WINNT_AUTH_IDENTITY_W;
typedef IDataAdviseHolder IDataAdviseHolder;
typedef _remoteMETAFILEPICT remoteMETAFILEPICT;
typedef tagCALLTYPE CALLTYPE;
typedef _RPC_SECURITY_QOS_V4_W* PRPC_SECURITY_QOS_V4_W;
typedef _userHPALETTE userHPALETTE;
typedef userHPALETTE* wireHPALETTE;
typedef _RPC_BINDING_HANDLE_TEMPLATE_V1_W RPC_BINDING_HANDLE_TEMPLATE_V1_W;
typedef ISynchronize ISynchronize;
typedef _RPC_BINDING_HANDLE_TEMPLATE_V1_A* PRPC_BINDING_HANDLE_TEMPLATE_V1_A;
typedef RPC_ENDPOINT_TEMPLATEW* PRPC_ENDPOINT_TEMPLATEW;
typedef RPC_INTERFACE_TEMPLATEA* PRPC_INTERFACE_TEMPLATEA;
typedef IBindCtx IBindCtx;
typedef IBindCtx* LPBC;
typedef _WORD_BLOB WORD_BLOB;
typedef WORD_BLOB* UP_WORD_BLOB;
typedef IUrlMon IUrlMon;
typedef _HYPER_SIZEDARR HYPER_SIZEDARR;
typedef tagRPCOLEMESSAGE RPCOLEMESSAGE;
typedef RPCOLEMESSAGE* PRPCOLEMESSAGE;
typedef void ( *RPC_SETFILTER_FUNC )( RPCLT_PDU_FILTER_FUNC );
typedef tagSOLE_AUTHENTICATION_INFO* PSOLE_AUTHENTICATION_INFO;
typedef _MIDL_STUB_DESC MIDL_STUB_DESC;
typedef const MIDL_STUB_DESC* PMIDL_STUB_DESC;
typedef tagRPCOPT_SERVER_LOCALITY_VALUES RPCOPT_SERVER_LOCALITY_VALUES;
typedef ISurrogate* LPSURROGATE;
typedef tagELEMDESC ELEMDESC;
typedef tagRPC_ERROR_ENUM_HANDLE RPC_ERROR_ENUM_HANDLE;
typedef tagRPC_CALL_ATTRIBUTES_V1_A RPC_CALL_ATTRIBUTES_V1_A;
typedef tagRPC_CALL_ATTRIBUTES_V2_A RPC_CALL_ATTRIBUTES_V2_A;
typedef IMarshal2* LPMARSHAL2;
typedef _LDBL12 _LDBL12;
typedef unsigned char* RPC_BUFPTR;
typedef _NDR_CS_SIZE_CONVERT_ROUTINES NDR_CS_SIZE_CONVERT_ROUTINES;
typedef _USER_MARSHAL_ROUTINE_QUADRUPLE USER_MARSHAL_ROUTINE_QUADRUPLE;
typedef tagLOCKTYPE LOCKTYPE;
typedef _MIDL_STUB_MESSAGE MIDL_STUB_MESSAGE;
typedef _MIDL_STUB_MESSAGE* PMIDL_STUB_MESSAGE;
typedef _MIDL_STUB_MESSAGE MIDL_STUB_MESSAGE;
typedef void* ( *GENERIC_BINDING_ROUTINE )( void* );
typedef tagARRAYDESC ARRAYDESC;
typedef _EVENT_TRACE_PERFORMANCE_INFORMATION
    EVENT_TRACE_PERFORMANCE_INFORMATION;
typedef _GENERIC_BINDING_ROUTINE_PAIR* PGENERIC_BINDING_ROUTINE_PAIR;
typedef _wireSAFEARRAY* wireSAFEARRAY;
typedef tagDVASPECT DVASPECT;
typedef __GENERIC_BINDING_INFO GENERIC_BINDING_INFO;
typedef __GENERIC_BINDING_INFO* PGENERIC_BINDING_INFO;
typedef void ( *XMIT_HELPER_ROUTINE )( PMIDL_STUB_MESSAGE );
typedef wireSAFEARRAY* wirePSAFEARRAY;
typedef _XMIT_ROUTINE_QUINTUPLE XMIT_ROUTINE_QUINTUPLE;
typedef _XMIT_ROUTINE_QUINTUPLE* PXMIT_ROUTINE_QUINTUPLE;
typedef _SYSTEM_POOLTAG_INFORMATION* PSYSTEM_POOLTAG_INFORMATION;
typedef STRING32 ANSI_STRING32;
typedef unsigned long ( *USER_MARSHAL_SIZING_ROUTINE )( unsigned long*,
    unsigned long,
    void* );
typedef IOplockStorage IOplockStorage;
typedef _wireBRECORD* wireBRECORD;
typedef _STRING32* PSTRING32;
typedef _SYSTEM_POOLTAG_INFORMATION SYSTEM_POOLTAG_INFORMATION;
typedef unsigned char* ( *USER_MARSHAL_MARSHALLING_ROUTINE )( unsigned long*,
    unsigned char*,
    void* );
typedef _SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION* PSYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION;
typedef tagCACLIPDATA CACLIPDATA;
typedef _SYSTEM_REF_TRACE_INFORMATION* PSYSTEM_REF_TRACE_INFORMATION;
typedef tagVARIANT VARIANT;
typedef VARIANT VARIANTARG;
typedef _userHGLOBAL userHGLOBAL;
typedef _USER_MARSHAL_CB_TYPE USER_MARSHAL_CB_TYPE;
typedef _ST_READ_LATENCY_STATS ST_READ_LATENCY_STATS;
typedef STRING64 ANSI_STRING64;
typedef _EVENT_TRACE_SYSTEM_EVENT_INFORMATION
    EVENT_TRACE_SYSTEM_EVENT_INFORMATION;
typedef EVENT_TRACE_SYSTEM_EVENT_INFORMATION* PEVENT_TRACE_PROFILE_EVENT_INFORMATION;
typedef IEncodingFilterFactory IEncodingFilterFactory;
typedef _USER_MARSHAL_CB USER_MARSHAL_CB;
typedef DWORD HREFTYPE;
typedef tagCAUH CAUH;
typedef _MALLOC_FREE_STRUCT MALLOC_FREE_STRUCT;
typedef tagEXCEPINFO* LPEXCEPINFO;
typedef _SMC_CACHE_PARAMETERS SMC_CACHE_PARAMETERS;
typedef void ( *CS_TYPE_NET_SIZE_ROUTINE )( RPC_BINDING_HANDLE, unsigned long, unsigned long, IDL_CS_CONVERT*, unsigned long*, error_status_t* );
typedef tagINVOKEKIND INVOKEKIND;
typedef tagDEC DECIMAL;
typedef IOleCacheControl IOleCacheControl;
typedef void ( *CS_TYPE_FROM_NETCS_ROUTINE )( RPC_BINDING_HANDLE, unsigned long, byte*, unsigned long, unsigned long, void*, unsigned long*, error_status_t* );
typedef void ( *CS_TAG_GETTING_ROUTINE )( RPC_BINDING_HANDLE, int, unsigned long*, unsigned long*, unsigned long*, error_status_t* );
typedef ITypeChangeEvents ITypeChangeEvents;
typedef _RTL_BITMAP* PRTL_BITMAP;
typedef unsigned short USHORT;
typedef USHORT LANGID;
typedef IZoneIdentifier2 IZoneIdentifier2;
typedef short SHORT;
typedef _NDR_EXPR_DESC NDR_EXPR_DESC;
typedef _userCLIPFORMAT userCLIPFORMAT;
typedef short VARIANT_BOOL;
typedef _userHBITMAP userHBITMAP;
typedef userHBITMAP* wireHBITMAP;
typedef _userHENHMETAFILE userHENHMETAFILE;
typedef tagEXCEPINFO EXCEPINFO;
typedef double DATE;
typedef _SYSTEM_PREFETCH_PATCH_INFORMATION* PSYSTEM_PREFETCH_PATCH_INFORMATION;
typedef _RTL_PROCESS_LOCK_INFORMATION* PRTL_PROCESS_LOCK_INFORMATION;
typedef void* PMIDL_XMIT_TYPE;
typedef _MIDL_FORMAT_STRING MIDL_FORMAT_STRING;
typedef long ( *SERVER_ROUTINE )();
typedef ISurrogateService ISurrogateService;
typedef IInternetProtocol IInternetProtocol;
typedef _MIDL_METHOD_PROPERTY MIDL_METHOD_PROPERTY;
typedef _MIDL_METHOD_PROPERTY* PMIDL_METHOD_PROPERTY;
typedef _SYSTEM_INTERRUPT_INFORMATION* PSYSTEM_INTERRUPT_INFORMATION;
typedef IRecordInfo IRecordInfo;
typedef _MIDL_METHOD_PROPERTY_MAP MIDL_METHOD_PROPERTY_MAP;
typedef tagPARAMDESC PARAMDESC;
typedef _MIDL_METHOD_PROPERTY_MAP* PMIDL_METHOD_PROPERTY_MAP;
typedef _SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT
    SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT;
typedef IDataObject IDataObject;
typedef RemotableHandle* wireHBRUSH;
typedef ICodeInstall ICodeInstall;
typedef IOleInPlaceUIWindow IOleInPlaceUIWindow;
typedef RemotableHandle* wireHRGN;
typedef _SYSTEM_HANDLE_INFORMATION* PSYSTEM_HANDLE_INFORMATION;
typedef IPropertyBag IPropertyBag;
typedef ICreateTypeInfo2 ICreateTypeInfo2;
typedef _MIDL_SERVER_INFO_ MIDL_SERVER_INFO;
typedef IPersist IPersist;
typedef _MIDL_SERVER_INFO_* PMIDL_SERVER_INFO;
typedef tagSTGOPTIONS STGOPTIONS;
typedef _SYSTEM_FLAGS_INFORMATION* PSYSTEM_FLAGS_INFORMATION;
typedef ICreateTypeLib2 ICreateTypeLib2;
typedef MIDL_STUBLESS_PROXY_INFO* PMIDL_STUBLESS_PROXY_INFO;
typedef tagCUSTDATA CUSTDATA;
typedef ITimeAndNoticeControl ITimeAndNoticeControl;
typedef _wireSAFEARR_BSTR SAFEARR_BSTR;
typedef IWinInetHttpTimeouts IWinInetHttpTimeouts;
typedef _SYSTEM_PROCESSOR_MICROCODE_UPDATE_INFORMATION
    SYSTEM_PROCESSOR_MICROCODE_UPDATE_INFORMATION;
typedef _MIDL_SYNTAX_INFO MIDL_SYNTAX_INFO;
typedef tagREGKIND REGKIND;
typedef _MIDL_SYNTAX_INFO* PMIDL_SYNTAX_INFO;
typedef unsigned short* PARAM_OFFSETTABLE;
typedef unsigned short* PPARAM_OFFSETTABLE;
typedef _SYSTEM_PROCESSOR_IDLE_INFORMATION SYSTEM_PROCESSOR_IDLE_INFORMATION;
typedef _SYSTEM_POOLTAG SYSTEM_POOLTAG;
typedef IForegroundTransfer IForegroundTransfer;
typedef _CLIENT_CALL_RETURN CLIENT_CALL_RETURN;
typedef XLAT_SIDE XLAT_SIDE;
typedef IDispatch* LPDISPATCH;
typedef VARIANT* LPVARIANT;
typedef _FULL_PTR_XLAT_TABLES FULL_PTR_XLAT_TABLES;
typedef tagMETHODDATA METHODDATA;
typedef ICreateTypeLib2* LPCREATETYPELIB2;
typedef _system_handle_t system_handle_t;
typedef tagINTERFACEDATA* LPINTERFACEDATA;
typedef EVENT_TRACE_SYSTEM_EVENT_INFORMATION
    EVENT_TRACE_PEBS_TRACING_INFORMATION;
typedef _MIDL_INTERCEPTION_INFO MIDL_INTERCEPTION_INFO;
typedef _MIDL_INTERCEPTION_INFO* PMIDL_INTERCEPTION_INFO;
typedef _wireSAFEARR_VARIANT SAFEARR_VARIANT;
typedef _MIDL_WINRT_TYPE_SERIALIZATION_INFO MIDL_WINRT_TYPE_SERIALIZATION_INFO;
typedef tagRemHMETAFILEPICT RemHMETAFILEPICT;
typedef _MIDL_WINRT_TYPE_SERIALIZATION_INFO* PMIDL_WINRT_TYPE_SERIALIZATION_INFO;
typedef STUB_PHASE STUB_PHASE;
typedef PROXY_PHASE PROXY_PHASE;
typedef void* RPC_SS_THREAD_HANDLE;
typedef IFillLockBytes IFillLockBytes;
typedef _NDR_USER_MARSHAL_INFO NDR_USER_MARSHAL_INFO;
typedef int ( *_CoreCrtSecureSearchSortCompareFunction )( void*, void*, void* );
typedef int ( *_CoreCrtNonSecureSearchSortCompareFunction )( void*, void* );
typedef _WORKER_FACTORY_BASIC_INFORMATION WORKER_FACTORY_BASIC_INFORMATION;
typedef void ( *_purecall_handler )();
typedef userSTGMEDIUM* wireSTGMEDIUM;
typedef _GDI_OBJECT GDI_OBJECT;
typedef _SYSTEM_FIRMWARE_TABLE_HANDLER SYSTEM_FIRMWARE_TABLE_HANDLER;
typedef void ( *_invalid_parameter_handler )( wchar_t*, wchar_t*, wchar_t*, unsigned int, uintptr_t );
typedef IGlobalInterfaceTable IGlobalInterfaceTable;
typedef IGlobalInterfaceTable* LPGLOBALINTERFACETABLE;
typedef _ldiv_t ldiv_t;
typedef _LDOUBLE _LDOUBLE;
typedef _CRT_DOUBLE _CRT_DOUBLE;
typedef _TIMER_SET_COALESCABLE_TIMER_INFO* PTIMER_SET_COALESCABLE_TIMER_INFO;
typedef tagSOLE_AUTHENTICATION_SERVICE SOLE_AUTHENTICATION_SERVICE;
typedef SOLE_AUTHENTICATION_SERVICE* PSOLE_AUTHENTICATION_SERVICE;
typedef _LONGDOUBLE _LONGDOUBLE;
typedef tagREGCLS REGCLS;
typedef IStdMarshalInfo IStdMarshalInfo;
typedef IRpcStubBuffer IRpcStubBuffer;
typedef _SYSTEM_NUMA_INFORMATION SYSTEM_NUMA_INFORMATION;
typedef IRpcChannelBuffer IRpcChannelBuffer;
typedef _LDR_RESOURCE_INFO* PLDR_RESOURCE_INFO;
typedef IExternalConnection IExternalConnection;
typedef tagCOINITBASE COINITBASE;
typedef tagEXTCONN EXTCONN;
typedef OLECHAR* LPOLESTR;
typedef IOleContainer IOleContainer;
typedef tagMKREDUCE MKRREDUCE;
typedef tagRPCOPT_PROPERTIES RPCOPT_PROPERTIES;
typedef const OLECHAR* LPCOLESTR;
typedef _SM_DELETE_REQUEST* PSM_DELETE_REQUEST;
typedef _WNF_TYPE_ID WNF_TYPE_ID;
typedef const WNF_TYPE_ID* PCWNF_TYPE_ID;
typedef _RTL_PROCESS_MODULE_INFORMATION_EX RTL_PROCESS_MODULE_INFORMATION_EX;
typedef _RTL_PROCESS_MODULES RTL_PROCESS_MODULES;
typedef userHGLOBAL* wireHGLOBAL;
typedef double DOUBLE;
typedef _RTL_PROCESS_MODULE_INFORMATION* PRTL_PROCESS_MODULE_INFORMATION;
typedef userHENHMETAFILE* wireHENHMETAFILE;
typedef tagGLOBALOPT_RPCTP_VALUES GLOBALOPT_RPCTP_VALUES;
typedef HRESULT ( *LPFNGETCLASSOBJECT )( const IID*, const IID*, LPVOID* );
typedef _COAUTHINFO COAUTHINFO;
typedef LONG SCODE;
typedef IPropertyStorage IPropertyStorage;
typedef SCODE* PSCODE;
typedef tagShutdownType ShutdownType;
typedef tagMEMCTX MEMCTX;
typedef tagCLSCTX CLSCTX;
typedef tagMSHLFLAGS MSHLFLAGS;
typedef __MIDL___MIDL_itf_wtypes_0000_0001_0001 uCLSSPEC;
typedef tagMSHCTX MSHCTX;
typedef _SYSTEM_BASIC_INFORMATION* PSYSTEM_BASIC_INFORMATION;
typedef _FLAG_STGMEDIUM FLAG_STGMEDIUM;
typedef IAddrExclusionControl* LPADDREXCLUSIONCONTROL;
typedef _BYTE_BLOB BYTE_BLOB;
typedef _SYSTEM_THREAD_CID_PRIORITY_INFORMATION* PSYSTEM_THREAD_CID_PRIORITY_INFORMATION;
typedef _SYSTEM_BASIC_INFORMATION SYSTEM_BASIC_INFORMATION;
typedef BYTE_BLOB* UP_BYTE_BLOB;
typedef IObjContext IObjContext;
typedef IAdviseSink2 IAdviseSink2;
typedef _DWORD_BLOB DWORD_BLOB;
typedef STATDATA* LPSTATDATA;
typedef DWORD_BLOB* UP_DWORD_BLOB;
typedef NTSTATUS ( *PSYSTEM_WATCHDOG_HANDLER )( WATCHDOG_HANDLER_ACTION, PVOID, PULONG, BOOLEAN );
typedef const WNF_STATE_NAME* PCWNF_STATE_NAME;
typedef tagSOLE_AUTHENTICATION_INFO SOLE_AUTHENTICATION_INFO;
typedef _FLAGGED_BYTE_BLOB FLAGGED_BYTE_BLOB;
typedef tagCADBL CADBL;
typedef FLAGGED_BYTE_BLOB* UP_FLAGGED_BYTE_BLOB;
typedef FLAGGED_WORD_BLOB* UP_FLAGGED_WORD_BLOB;
typedef tagCABOOL CABOOL;
typedef tagPROPVARIANT PROPVARIANT;
typedef _BYTE_SIZEDARR BYTE_SIZEDARR;
typedef _SYSTEM_PROCESS_ID_INFORMATION* PSYSTEM_PROCESS_ID_INFORMATION;
typedef tagCABSTRBLOB CABSTRBLOB;
typedef _LONG_SIZEDARR DWORD_SIZEDARR;
typedef tagTYPEFLAGS TYPEFLAGS;
typedef IPipeByte IPipeByte;
typedef _SYSTEM_CRASH_DUMP_STATE_INFORMATION* PSYSTEM_CRASH_DUMP_STATE_INFORMATION;
typedef tagBLOB* LPBLOB;
typedef IUnknown IUnknown;
typedef _FILE_OBJECT* PFILE_OBJECT;
typedef AsyncIUnknown AsyncIUnknown;
typedef tagRemSNB RemSNB;
typedef RemSNB* wireSNB;
typedef IUnknown* LPUNKNOWN;
typedef IEnumUnknown IEnumUnknown;
typedef _SYSTEM_HANDLE_INFORMATION_EX SYSTEM_HANDLE_INFORMATION_EX;
typedef IEnumString IEnumString;
typedef IPersistStorage IPersistStorage;
typedef IPersistStorage* LPPERSISTSTORAGE;
typedef IErrorInfo IErrorInfo;
typedef IErrorInfo* LPERRORINFO;
typedef _CLIENT_ID CLIENT_ID;
typedef INoMarshal INoMarshal;
typedef IStream IStream;
typedef IStream* LPSTREAM;
typedef IAgileObject IAgileObject;
typedef IActivationFilter IActivationFilter;
typedef _COSERVERINFO COSERVERINFO;
typedef IMalloc IMalloc;
typedef IMarshalingStream IMarshalingStream;
typedef tagServerInformation ServerInformation;
typedef tagBIND_OPTS3* LPBIND_OPTS3;
typedef tagCAI CAI;
typedef tagPENDINGTYPE PENDINGTYPE;
typedef tagBIND_OPTS3 BIND_OPTS3;
typedef tagBSTRBLOB BSTRBLOB;
typedef _EVENT_TRACE_COVERAGE_SAMPLER_INFORMATION* PEVENT_TRACE_COVERAGE_SAMPLER_INFORMATION;
typedef IInternalUnknown IInternalUnknown;
typedef IReleaseMarshalBuffers IReleaseMarshalBuffers;
typedef tagVARKIND VARKIND;
typedef _LDR_SOFTWARE_ENCLAVE* PLDR_SOFTWARE_ENCLAVE;
typedef ISequentialStream ISequentialStream;
typedef IAuthenticate IAuthenticate;
typedef tagMKSYS MKSYS;
typedef IRpcChannelBuffer2 IRpcChannelBuffer2;
typedef _KWAIT_REASON KWAIT_REASON;
typedef IExternalConnection* LPEXTERNALCONNECTION;
typedef IAsyncRpcChannelBuffer IAsyncRpcChannelBuffer;
typedef _SYSTEM_SYSTEM_DISK_INFORMATION SYSTEM_SYSTEM_DISK_INFORMATION;
typedef _EVENT_INFORMATION_CLASS EVENT_INFORMATION_CLASS;
typedef IRpcChannelBuffer3 IRpcChannelBuffer3;
typedef _EFI_DRIVER_ENTRY_LIST* PEFI_DRIVER_ENTRY_LIST;
typedef IRpcSyntaxNegotiate IRpcSyntaxNegotiate;
typedef IEnumSTATSTG* LPENUMSTATSTG;
typedef IRpcStubBuffer IRpcStubBuffer;
typedef IPSFactoryBuffer IPSFactoryBuffer;
typedef IWinInetFileStream IWinInetFileStream;
typedef IUri IUri;
typedef tagGLOBALOPT_EH_VALUES GLOBALOPT_EH_VALUES;
typedef IClientSecurity IClientSecurity;
typedef BOOLEAN LDR_INIT_ROUTINE( PVOID, ULONG, PVOID );
typedef IServerSecurity IServerSecurity;
typedef tagSTATSTG STATSTG;
typedef IErrorLog IErrorLog;
typedef IRpcOptions IRpcOptions;
typedef IGlobalOptions IGlobalOptions;
typedef _SYSTEM_BIGPOOL_INFORMATION* PSYSTEM_BIGPOOL_INFORMATION;
typedef IEnumFORMATETC IEnumFORMATETC;
typedef IEnumFORMATETC* LPENUMFORMATETC;
typedef tagVersionedStream VERSIONEDSTREAM;
typedef ULONG RPCOLEDATAREP;
typedef _SEMAPHORE_BASIC_INFORMATION SEMAPHORE_BASIC_INFORMATION;
typedef tagDVTARGETDEVICE DVTARGETDEVICE;
typedef IRunnableObject IRunnableObject;
typedef ISynchronizeHandle ISynchronizeHandle;
typedef tagVARDESC VARDESC;
typedef ISynchronizeEvent ISynchronizeEvent;
typedef _SYSTEM_SESSION_PROCESS_INFORMATION SYSTEM_SESSION_PROCESS_INFORMATION;
typedef IEnumMoniker* LPENUMMONIKER;
typedef ISynchronizeContainer ISynchronizeContainer;
typedef ISynchronizeMutex ISynchronizeMutex;
typedef tagACTIVATIONTYPE ACTIVATIONTYPE;
typedef _BOOT_OPTIONS* PBOOT_OPTIONS;
typedef ICancelMethodCalls ICancelMethodCalls;
typedef _DEVICE_OBJECT* PDEVICE_OBJECT;
typedef tagTYPEKIND TYPEKIND;
typedef ICallFactory ICallFactory;
typedef IRpcHelper IRpcHelper;
typedef IOleCache2 IOleCache2;
typedef IWaitMultiple IWaitMultiple;
typedef AsyncIPipeByte AsyncIPipeByte;
typedef IPipeLong IPipeLong;
typedef IZoneIdentifier IZoneIdentifier;
typedef IInternetSecurityManagerEx IInternetSecurityManagerEx;
typedef AsyncIPipeLong AsyncIPipeLong;
typedef XMLDOMDocumentEvents XMLDOMDocumentEvents;
typedef AsyncIPipeDouble AsyncIPipeDouble;
typedef _SYSTEM_POOLTAG* PSYSTEM_POOLTAG;
typedef IEnumContextProps IEnumContextProps;
typedef IXMLDOMEntity IXMLDOMEntity;
typedef IXTLRuntime IXTLRuntime;
typedef IContext IContext;
typedef _SYSTEM_TIMEOFDAY_INFORMATION* PSYSTEM_TIMEOFDAY_INFORMATION;
typedef IProcessInitControl IProcessInitControl;
typedef IXMLHttpRequest IXMLHttpRequest;
typedef IDataFilter IDataFilter;
typedef ISoftDistExt ISoftDistExt;
typedef IFastRundown IFastRundown;
typedef tagDATADIR DATADIR;
typedef _ST_STATS* PST_STATS;
typedef IAgileReference IAgileReference;
typedef _SMC_CACHE_CREATE_PARAMETERS SMC_CACHE_CREATE_PARAMETERS;
typedef ISupportAllowLowerTrustActivation ISupportAllowLowerTrustActivation;
typedef _EVENT_TRACE_PROFILE_ADD_INFORMATION_V2
    EVENT_TRACE_PROFILE_ADD_INFORMATION_V2;
typedef _SMC_CACHE_CREATE_PARAMETERS* PSMC_CACHE_CREATE_PARAMETERS;
typedef _SM_STORE_CACHE_BACKED_PARAMS SM_STORE_CACHE_BACKED_PARAMS;
typedef IMalloc* LPMALLOC;
typedef IStdMarshalInfo* LPSTDMARSHALINFO;
typedef _ST_STATS_SPACE_BITMAP ST_STATS_SPACE_BITMAP;
typedef tagMULTI_QI MULTI_QI;
typedef IEnumUnknown* LPENUMUNKNOWN;
typedef IEnumString* LPENUMSTRING;
typedef _SMC_CACHE_LIST_REQUEST SMC_CACHE_LIST_REQUEST;
typedef tagSTGTY STGTY;
typedef tagSTREAM_SEEK STREAM_SEEK;
typedef IViewObject2 IViewObject2;
typedef IContinue IContinue;
typedef _RTL_PROCESS_LOCKS RTL_PROCESS_LOCKS;
typedef SChannelHookCallInfo SChannelHookCallInfo;
typedef IPersistMoniker IPersistMoniker;
typedef _COVERAGE_MODULES* PCOVERAGE_MODULES;
typedef tagEOLE_AUTHENTICATION_CAPABILITIES EOLE_AUTHENTICATION_CAPABILITIES;
typedef _wireVARIANT* wireVARIANT;
typedef _SYSTEM_DPC_BEHAVIOR_INFORMATION* PSYSTEM_DPC_BEHAVIOR_INFORMATION;
typedef IInternetProtocolEx IInternetProtocolEx;
typedef tagSOLE_AUTHENTICATION_LIST SOLE_AUTHENTICATION_LIST;
typedef _STORE_INFORMATION_CLASS STORE_INFORMATION_CLASS;
typedef tagSOLE_AUTHENTICATION_LIST* PSOLE_AUTHENTICATION_LIST;
typedef ITypeMarshal ITypeMarshal;
typedef _SYSTEM_OBJECTTYPE_INFORMATION* PSYSTEM_OBJECTTYPE_INFORMATION;
typedef tagGLOBALOPT_PROPERTIES GLOBALOPT_PROPERTIES;
typedef tagGLOBALOPT_RO_FLAGS GLOBALOPT_RO_FLAGS;
typedef tagGLOBALOPT_UNMARSHALING_POLICY_VALUES
    GLOBALOPT_UNMARSHALING_POLICY_VALUES;
typedef IEnumSTATPROPSETSTG* LPENUMSTATPROPSETSTG;
typedef tagCOINIT COINIT;
typedef _COVERAGE_MODULE_INFO COVERAGE_MODULE_INFO;
typedef ICancelMethodCalls* LPCANCELMETHODCALLS;
typedef IAddrTrackingControl* LPADDRTRACKINGCONTROL;
typedef IWinInetCacheHints IWinInetCacheHints;
typedef _APTTYPEQUALIFIER APTTYPEQUALIFIER;
typedef _APTTYPE APTTYPE;
typedef tagOLECLOSE OLECLOSE;
typedef _SYSTEM_CODEINTEGRITY_INFORMATION SYSTEM_CODEINTEGRITY_INFORMATION;
typedef _THDTYPE THDTYPE;
typedef IBindHost IBindHost;
typedef IBindCtx* LPBINDCTX;
typedef CO_MARSHALING_CONTEXT_ATTRIBUTES CO_MARSHALING_CONTEXT_ATTRIBUTES;
typedef tagOBJECTDESCRIPTOR* PLINKSRCDESCRIPTOR;
typedef EVENT_TRACE_SYSTEM_EVENT_INFORMATION* PEVENT_TRACE_STACK_TRACING_INFORMATION;
typedef tagOBJECTDESCRIPTOR* POBJECTDESCRIPTOR;
typedef ICatalogFileInfo ICatalogFileInfo;
typedef tagServerInformation* PServerInformation;
typedef tagOBJECTDESCRIPTOR* LPLINKSRCDESCRIPTOR;
typedef _BOOT_ENTRY BOOT_ENTRY;
typedef CO_MTA_USAGE_COOKIE__* CO_MTA_USAGE_COOKIE;
typedef tagSTDMSHLFLAGS STDMSHLFLAGS;
typedef IInternetProtocolSinkStackable IInternetProtocolSinkStackable;
typedef tagCOWAIT_FLAGS COWAIT_FLAGS;
typedef CWMO_FLAGS CWMO_FLAGS;
typedef _SM_STATS_REQUEST SM_STATS_REQUEST;
typedef CY CURRENCY;
typedef IUriBuilder IUriBuilder;
typedef CO_DEVICE_CATALOG_COOKIE__* CO_DEVICE_CATALOG_COOKIE;
typedef IMallocSpy IMallocSpy;
typedef _SYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION_WIN8* PSYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION_WIN8;
typedef tagPROPVARIANT PROPVARIANT;
typedef userSTGMEDIUM* wireASYNC_STGMEDIUM;
typedef tagCALPWSTR CALPWSTR;
typedef IROTData IROTData;
typedef tagFORMATETC* LPFORMATETC;
typedef _COUNTED_REASON_CONTEXT* PCOUNTED_REASON_CONTEXT;
typedef IPersistFile IPersistFile;
typedef _SYSTEM_PROCESSOR_POWER_INFORMATION* PSYSTEM_PROCESSOR_POWER_INFORMATION;
typedef IInternetZoneManager* LPURLZONEMANAGER;
typedef _SYSTEM_PROCESSOR_POWER_INFORMATION SYSTEM_PROCESSOR_POWER_INFORMATION;
typedef IRootStorage IRootStorage;
typedef tagPARAMDESCEX* LPPARAMDESCEX;
typedef _EVENT_TRACE_SOFT_RESTART_INFORMATION
    EVENT_TRACE_SOFT_RESTART_INFORMATION;
typedef _tagCODEBASEHOLD CODEBASEHOLD;
typedef AsyncIAdviseSink2 AsyncIAdviseSink2;
typedef tagIDLDESC IDLDESC;
typedef _URLZONEREG URLZONEREG;
typedef IClassActivator IClassActivator;
typedef IProgressNotify IProgressNotify;
typedef ILayoutStorage ILayoutStorage;
typedef IBlockingLock IBlockingLock;
typedef _SYSTEM_ENVIRONMENT_INFORMATION_CLASS
    SYSTEM_ENVIRONMENT_INFORMATION_CLASS;
typedef tagCUSTDATAITEM* LPCUSTDATAITEM;
typedef IDirectWriterLock IDirectWriterLock;
typedef IAdviseSink2* LPADVISESINK2;
typedef IThumbnailExtractor IThumbnailExtractor;
typedef IDummyHICONIncluder IDummyHICONIncluder;
typedef tagCAFLT CAFLT;
typedef tagCAL CAL;
typedef IProcessLock IProcessLock;
typedef IApartmentShutdown IApartmentShutdown;
typedef tagRemHGLOBAL RemHGLOBAL;
typedef tagPENDINGMSG PENDINGMSG;
typedef tagCACLSID CACLSID;
typedef tagRemHENHMETAFILE RemHENHMETAFILE;
typedef tagRemHBITMAP RemHBITMAP;
typedef tagRemHPALETTE RemHPALETTE;
typedef tagFUNCFLAGS FUNCFLAGS;
typedef tagRemBRUSH RemHBRUSH;
typedef tagSTGC STGC;
typedef tagSTGMOVE STGMOVE;
typedef tagSTATFLAG STATFLAG;
typedef tagCLEANLOCALSTORAGE CLEANLOCALSTORAGE;
typedef DWORD LCID;
typedef ICreateErrorInfo ICreateErrorInfo;
typedef ICreateErrorInfo* LPCREATEERRORINFO;
typedef userCLIPFORMAT* wireCLIPFORMAT;
typedef IPersistFile* LPPERSISTFILE;
typedef _SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX* PSYSTEM_HANDLE_TABLE_ENTRY_INFO_EX;
typedef _GDI_NONREMOTE GDI_NONREMOTE;
typedef WORD PROPVAR_PAD1;
typedef _BOOT_ENTRY* PBOOT_ENTRY;
typedef _SYSTEM_RANGE_START_INFORMATION SYSTEM_RANGE_START_INFORMATION;
typedef ITypeComp* LPTYPECOMP;
typedef _EVENT_TRACE_PROFILE_REMOVE_INFORMATION* PEVENT_TRACE_PROFILE_REMOVE_INFORMATION;
typedef IMoniker* LPMONIKER;
typedef _REMSECURITY_ATTRIBUTES REMSECURITY_ATTRIBUTES;
typedef _SYSTEM_NUMA_INFORMATION* PSYSTEM_NUMA_INFORMATION;
typedef _SYSTEM_HANDLE_TABLE_ENTRY_INFO SYSTEM_HANDLE_TABLE_ENTRY_INFO;
typedef tagTLIBATTR TLIBATTR;
typedef RemotableHandle* wireHMENU;
typedef RemotableHandle* wireHACCEL;
typedef RemotableHandle* wireHDC;
typedef _SYSTEM_FIRMWARE_TABLE_ACTION SYSTEM_FIRMWARE_TABLE_ACTION;
typedef RemotableHandle* wireHICON;
typedef RemotableHandle* wireHMONITOR;
typedef tagRemFORMATETC RemFORMATETC;
typedef _TIMER_INFORMATION_CLASS TIMER_INFORMATION_CLASS;
typedef userHMETAFILE* wireHMETAFILE;
typedef tagVersionedStream* LPVERSIONEDSTREAM;
typedef void* HMETAFILEPICT;
typedef _SYSTEM_BIGPOOL_ENTRY SYSTEM_BIGPOOL_ENTRY;
typedef tagBINDPTR BINDPTR;
typedef _FILE_PATH* PFILE_PATH;
typedef _SYSTEM_VERIFIER_INFORMATION SYSTEM_VERIFIER_INFORMATION;
typedef DECIMAL* LPDECIMAL;
typedef ITypeInfo* LPTYPEINFO;
typedef __MIDL_IInternetSecurityManager_0001 PUAF;
typedef BSTR* LPBSTR;
typedef tagBSTRBLOB* LPBSTRBLOB;
typedef IOleCache IOleCache;
typedef IInternetProtocolRoot IInternetProtocolRoot;
typedef IInternetProtocolRoot* LPIINTERNETPROTOCOLROOT;
typedef _tagpropertykey PROPERTYKEY;
typedef tagCSPLATFORM CSPLATFORM;
typedef _UNICODE_STRING* PUNICODE_STRING;
typedef IInternetSecurityManagerEx2 IInternetSecurityManagerEx2;
typedef tagTYSPEC TYSPEC;
typedef _STRING64* PSTRING64;
typedef IWinInetFileStream* LPWININETFILESTREAM;
typedef _SYSTEM_MEMORY_LIST_COMMAND SYSTEM_MEMORY_LIST_COMMAND;
typedef IMallocSpy* LPMALLOCSPY;
typedef tagBIND_OPTS* LPBIND_OPTS;
typedef const OBJECT_ATTRIBUTES* PCOBJECT_ATTRIBUTES;
typedef tagBIND_OPTS2 BIND_OPTS2;
typedef _PS_MITIGATION_OPTIONS_MAP* PPS_MITIGATION_OPTIONS_MAP;
typedef _SYSTEM_REF_TRACE_INFORMATION SYSTEM_REF_TRACE_INFORMATION;
typedef IInternetPriority IInternetPriority;
typedef IInternetPriority* LPIINTERNETPRIORITY;
typedef tagBIND_OPTS2* LPBIND_OPTS2;
typedef tagBIND_FLAGS BIND_FLAGS;
typedef IRunnableObject* LPRUNNABLEOBJECT;
typedef _tagHIT_LOGGING_INFO* LPHIT_LOGGING_INFO;
typedef IDropSourceNotify IDropSourceNotify;
typedef IPersist* LPPERSIST;
typedef _LDR_DLL_NOTIFICATION_DATA* PLDR_DLL_NOTIFICATION_DATA;
typedef IInternetProtocolSink IInternetProtocolSink;
typedef LPOLESTR* SNB;
typedef IOleInPlaceFrame IOleInPlaceFrame;
typedef ILockBytes* LPLOCKBYTES;
typedef IViewObject IViewObject;
typedef tagCOMSD COMSD;
typedef _NLSTABLEINFO* PNLSTABLEINFO;
typedef tagADVF ADVF;
typedef __MIDL_IBindStatusCallback_0001 BINDVERB;
typedef IBinding* LPBINDING;
typedef IInternetBindInfoEx IInternetBindInfoEx;
typedef IRootStorage* LPROOTSTORAGE;
typedef tagTYMED TYMED;
typedef tagRemSTGMEDIUM RemSTGMEDIUM;
typedef IOleLink IOleLink;
typedef IEnumSTATPROPSTG* LPENUMSTATPROPSTG;
typedef IMonikerProp IMonikerProp;
typedef STGMEDIUM ASYNC_STGMEDIUM;
typedef userFLAG_STGMEDIUM* wireFLAG_STGMEDIUM;
typedef _SYSTEM_REGISTRY_QUOTA_INFORMATION SYSTEM_REGISTRY_QUOTA_INFORMATION;
typedef IDataObject* LPDATAOBJECT;
typedef IDataAdviseHolder* LPDATAADVISEHOLDER;
typedef IMessageFilter* LPMESSAGEFILTER;
typedef IInternetThreadSwitch* LPIINTERNETTHREADSWITCH;
typedef tagSERVERCALL SERVERCALL;
typedef _SYSTEM_LOOKASIDE_INFORMATION SYSTEM_LOOKASIDE_INFORMATION;
typedef IInternetSession IInternetSession;
typedef IInternetSession* LPIINTERNETSESSION;
typedef tagINTERFACEINFO INTERFACEINFO;
typedef _LDR_IMPORT_CALLBACK_INFO* PLDR_IMPORT_CALLBACK_INFO;
typedef tagINTERFACEINFO* LPINTERFACEINFO;
typedef IWinInetCacheHints* LPWININETCACHEHINTS;
typedef tagStorageLayout StorageLayout;
typedef IHttpSecurity* LPHTTPSECURITY;
typedef IUriContainer IUriContainer;
typedef IInitializeSpy* LPINITIALIZESPY;
typedef _LDR_SERVICE_TAG_RECORD* PLDR_SERVICE_TAG_RECORD;
typedef IAuthenticate* LPAUTHENTICATION;
typedef IBindStatusCallbackEx* LPBINDSTATUSCALLBACKEX;
typedef IXMLDOMDocumentType IXMLDOMDocumentType;
typedef tagCALPSTR CALPSTR;
typedef IEnumVARIANT IEnumVARIANT;
typedef _TIMER_TYPE TIMER_TYPE;
typedef tagOLEVERBATTRIB OLEVERBATTRIB;
typedef _SMKM_FILE_INFO SMKM_FILE_INFO;
typedef _QUAD_PTR QUAD_PTR;
typedef _SM_STORE_CACHE_BACKED_PARAMS* PSM_STORE_CACHE_BACKED_PARAMS;
typedef IOleInPlaceActiveObject* LPOLEINPLACEACTIVEOBJECT;
typedef _LDR_ENUM_RESOURCE_ENTRY* PLDR_ENUM_RESOURCE_ENTRY;
typedef ITypeLib* LPTYPELIB;
typedef tagCADATE CADATE;
typedef _SM_STORE_PARAMETERS* PSM_STORE_PARAMETERS;
typedef _UNICODE_STRING UNICODE_STRING;
typedef _SM_DELETE_REQUEST SM_DELETE_REQUEST;
typedef tagPROPVARIANT* LPPROPVARIANT;
typedef tagDOMNodeType DOMNodeType;
typedef ITypeLibRegistration ITypeLibRegistration;
typedef _SUITE_TYPE SUITE_TYPE;
typedef tagSTATPROPSTG STATPROPSTG;
typedef tagSAFEARRAYBOUND* LPSAFEARRAYBOUND;
typedef tagCUSTDATA* LPCUSTDATA;
typedef tagUSERCLASSTYPE USERCLASSTYPE;
typedef _wireSAFEARR_DISPATCH SAFEARR_DISPATCH;
typedef IXMLDOMDocument IXMLDOMDocument;
typedef tagCAUL CAUL;
typedef _STRING* PSTRING;
typedef _wireSAFEARR_BRECORD SAFEARR_BRECORD;
typedef _wireSAFEARR_HAVEIID SAFEARR_HAVEIID;
typedef tagCACY CACY;
typedef IXMLElement IXMLElement;
typedef tagVARFLAGS VARFLAGS;
typedef ITypeChangeEvents* LPTYPECHANGEEVENTS;
typedef short CSHORT;
typedef CSHORT* PCSHORT;
typedef tagOIFI OLEINPLACEFRAMEINFO;
typedef IEnumVARIANT* LPENUMVARIANT;
typedef VARIANT* LPVARIANTARG;
typedef tagFUNCDESC* LPFUNCDESC;
typedef tagTYPEDESC TYPEDESC;
typedef tagLIBFLAGS LIBFLAGS;
typedef _SYSTEM_SYSTEM_PARTITION_INFORMATION
    SYSTEM_SYSTEM_PARTITION_INFORMATION;
typedef LPCRECT LPCBORDERWIDTHS;
typedef tagPARAMDESC* LPPARAMDESC;
typedef tagIDLDESC* LPIDLDESC;
typedef tagELEMDESC* LPELEMDESC;
typedef ISupportErrorInfo* LPSUPPORTERRORINFO;
typedef tagTYPEATTR TYPEATTR;
typedef IErrorLog* LPERRORLOG;
typedef tagDISPPARAMS DISPPARAMS;
typedef IOleInPlaceSite IOleInPlaceSite;
typedef tagFUNCDESC FUNCDESC;
typedef _OLESTREAMVTBL OLESTREAMVTBL;
typedef OLESTREAMVTBL* LPOLESTREAMVTBL;
typedef tagBINDPTR* LPBINDPTR;
typedef tagOLELINKBIND OLELINKBIND;
typedef tagOLEUPDATE OLEUPDATE;
typedef _LDR_DLL_UNLOADED_NOTIFICATION_DATA LDR_DLL_UNLOADED_NOTIFICATION_DATA;
typedef _LDR_HOT_PATCH_STATE LDR_HOT_PATCH_STATE;
typedef _PORT_MESSAGE* PPORT_MESSAGE;
typedef IHttpNegotiate2 IHttpNegotiate2;
typedef ICreateTypeInfo2* LPCREATETYPEINFO2;
typedef ICreateTypeLib* LPCREATETYPELIB;
typedef IXMLDSOControl IXMLDSOControl;
typedef _SYSTEM_TIMEOFDAY_INFORMATION SYSTEM_TIMEOFDAY_INFORMATION;
typedef _PS_MITIGATION_AUDIT_OPTIONS_MAP* PPS_MITIGATION_AUDIT_OPTIONS_MAP;
typedef PVOID ( *PDELAYLOAD_FAILURE_SYSTEM_ROUTINE )( PCSTR, PCSTR );
typedef PVOID DELAYLOAD_FAILURE_SYSTEM_ROUTINE( PCSTR, PCSTR );
typedef ITypeLib2* LPTYPELIB2;
typedef _tagStartParam StartParam;
typedef void ( *PLDR_DLL_NOTIFICATION_FUNCTION )( ULONG,
    PLDR_DLL_NOTIFICATION_DATA,
    PVOID );
typedef tagCHANGEKIND CHANGEKIND;
typedef IRecordInfo* LPRECORDINFO;
typedef _tagSOFTDISTINFO* LPSOFTDISTINFO;
typedef IPropertyBag* LPPROPERTYBAG;
typedef _LDR_DLL_LOAD_REASON LDR_DLL_LOAD_REASON;
typedef tagCAH CAH;
typedef _KSYSTEM_TIME KSYSTEM_TIME;
typedef IHttpNegotiate2* LPHTTPNEGOTIATE2;
typedef tagSTATPROPSETSTG STATPROPSETSTG;
typedef _LDRP_CSLIST* PLDRP_CSLIST;
typedef IPropertyStorage* LPPROPERTYSTORAGE;
typedef DWORD STGFMT;
typedef IBindStatusCallback IBindStatusCallback;
typedef tagURLTEMPLATE URLTEMPLATE;
typedef LPRECT LPBORDERWIDTHS;
typedef _EVENT_TRACE_PROFILE_LIST_INFORMATION
    EVENT_TRACE_PROFILE_LIST_INFORMATION;
typedef IXMLDOMCharacterData IXMLDOMCharacterData;
typedef IUriBuilderFactory IUriBuilderFactory;
typedef _CLIENT_ID* PCLIENT_ID;
typedef _STRING ANSI_STRING;
typedef IInternetSecurityManager IInternetSecurityManager;
typedef tagSERIALIZEDPROPERTYVALUE SERIALIZEDPROPERTYVALUE;
typedef ULONG CLONG;
typedef IInternetZoneManagerEx IInternetZoneManagerEx;
typedef IInternetZoneManagerEx2 IInternetZoneManagerEx2;
typedef IOleCache2* LPOLECACHE2;
typedef IBindHttpSecurity IBindHttpSecurity;
typedef _tagPROTOCOL_ARGUMENT PROTOCOL_ARGUMENT;
typedef IGetBindHandle* LPGETBINDHANDLE;
typedef _RTL_PROCESS_BACKTRACES RTL_PROCESS_BACKTRACES;
typedef _QUAD_PTR* PQUAD_PTR;
typedef IOleClientSite IOleClientSite;
typedef __MIDL_IBindStatusCallback_0005 BINDINFO_OPTIONS;
typedef _STRING OEM_STRING;
typedef const OEM_STRING* PCOEM_STRING;
typedef USHORT RTL_ATOM;
typedef IEnterpriseDropTarget IEnterpriseDropTarget;
typedef _PS_MITIGATION_OPTIONS_MAP PS_MITIGATION_OPTIONS_MAP;
typedef IOleAdviseHolder* LPOLEADVISEHOLDER;
typedef IOleCache* LPOLECACHE;
typedef _SMKM_REGION_EXTENT* PSMKM_REGION_EXTENT;
typedef EVENT_TRACE_TAG_FILTER_INFORMATION
    EVENT_TRACE_OBJECT_TYPE_FILTER_INFORMATION;
typedef _RTL_SCPCFG_NTDLL_EXPORTS* PRTL_SCPCFG_NTDLL_EXPORTS;
typedef IOleCacheControl* LPOLECACHECONTROL;
typedef _LDR_SECTION_INFO LDR_SECTION_INFO;
typedef _ST_IO_STATS_PERIOD* PST_IO_STATS_PERIOD;
typedef IOleContainer* LPOLECONTAINER;
typedef _LDR_VERIFY_IMAGE_INFO* PLDR_VERIFY_IMAGE_INFO;
typedef IOleClientSite* LPOLECLIENTSITE;
typedef _LDR_DLL_LOADED_NOTIFICATION_DATA LDR_DLL_LOADED_NOTIFICATION_DATA;
typedef IOleObject* LPOLEOBJECT;
typedef _EVENT_TRACE_PERFORMANCE_INFORMATION* PEVENT_TRACE_PERFORMANCE_INFORMATION;
typedef tagOLEGETMONIKER OLEGETMONIKER;
typedef tagOLEMISC OLEMISC;
typedef OLERENDER* LPOLERENDER;
typedef _LDR_FAILURE_DATA* PLDR_FAILURE_DATA;
typedef tagOBJECTDESCRIPTOR OBJECTDESCRIPTOR;
typedef tagOBJECTDESCRIPTOR* LPOBJECTDESCRIPTOR;
typedef _SYSTEM_VERIFIER_CANCELLATION_INFORMATION* PSYSTEM_VERIFIER_CANCELLATION_INFORMATION;
typedef tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;
typedef _SYSTEM_VERIFIER_ISSUE* PSYSTEM_VERIFIER_ISSUE;
typedef IOleWindow* LPOLEWINDOW;
typedef _SYSTEM_SPECIAL_POOL_INFORMATION SYSTEM_SPECIAL_POOL_INFORMATION;
typedef IOleLink* LPOLELINK;
typedef EVENT_TRACE_SYSTEM_EVENT_INFORMATION* PEVENT_TRACE_PEBS_TRACING_INFORMATION;
typedef _DELAYLOAD_PROC_DESCRIPTOR DELAYLOAD_PROC_DESCRIPTOR;
typedef OLEUPDATE* LPOLEUPDATE;
typedef OLEUPDATE* POLEUPDATE;
typedef IOleItemContainer* LPOLEITEMCONTAINER;
typedef tagBINDSPEED BINDSPEED;
typedef _RTL_PROCESS_BACKTRACES* PRTL_PROCESS_BACKTRACES;
typedef tagOLECONTF OLECONTF;
typedef EVENT_TRACE_PROFILE_COUNTER_INFORMATION
    EVENT_TRACE_PROFILE_CONFIG_INFORMATION;
typedef IOleInPlaceUIWindow* LPOLEINPLACEUIWINDOW;
typedef RECT BORDERWIDTHS;
typedef EVENT_TRACE_PROFILE_COUNTER_INFORMATION* PEVENT_TRACE_PROFILE_CONFIG_INFORMATION;
typedef IOleInPlaceFrame* LPOLEINPLACEFRAME;
typedef _EVENT_TRACE_SESSION_SECURITY_INFORMATION
    EVENT_TRACE_SESSION_SECURITY_INFORMATION;
typedef _LDR_DLL_NOTIFICATION_DATA LDR_DLL_NOTIFICATION_DATA;
typedef tagOIFI* LPOLEINPLACEFRAMEINFO;
typedef tagOleMenuGroupWidths OLEMENUGROUPWIDTHS;
typedef _ST_STATS_REGION_INFO* PST_STATS_REGION_INFO;
typedef tagOleMenuGroupWidths* LPOLEMENUGROUPWIDTHS;
typedef HGLOBAL HOLEMENU;
typedef _EVENT_TRACE_SESSION_SECURITY_INFORMATION* PEVENT_TRACE_SESSION_SECURITY_INFORMATION;
typedef _SM_STORE_LIST_REQUEST* PSM_STORE_LIST_REQUEST;
typedef IOleInPlaceSite* LPOLEINPLACESITE;
typedef _EVENT_TRACE_PROFILE_ADD_INFORMATION_VERSIONS
    EVENT_TRACE_PROFILE_ADD_INFORMATION_VERSIONS;
typedef IViewObject* LPVIEWOBJECT;
typedef IViewObject2* LPVIEWOBJECT2;
typedef IDropSource* LPDROPSOURCE;
typedef _DELAYLOAD_PROC_DESCRIPTOR* PDELAYLOAD_PROC_DESCRIPTOR;
typedef _CPTABLEINFO* PCPTABLEINFO;
typedef IEnumOLEVERB* LPENUMOLEVERB;
typedef _NLSTABLEINFO NLSTABLEINFO;
typedef tagOLEVERB* LPOLEVERB;
typedef BOOLEAN ( *PLDR_INIT_ROUTINE )( PVOID, ULONG, PVOID );
typedef IServiceProvider* LPSERVICEPROVIDER;
typedef _SYSTEM_VA_LIST_INFORMATION* PSYSTEM_VA_LIST_INFORMATION;
typedef IXMLDOMImplementation IXMLDOMImplementation;
typedef IXMLDOMNode IXMLDOMNode;
typedef IXMLDOMDocumentFragment IXMLDOMDocumentFragment;
typedef _SYSTEM_QUERY_TIME_ADJUST_INFORMATION* PSYSTEM_QUERY_TIME_ADJUST_INFORMATION;
typedef IXMLDOMNodeList IXMLDOMNodeList;
typedef _EVENT_TRACE_STACK_CACHING_INFORMATION
    EVENT_TRACE_STACK_CACHING_INFORMATION;
typedef _RTL_PROCESS_MODULE_INFORMATION RTL_PROCESS_MODULE_INFORMATION;
typedef _RTL_PROCESS_MODULES* PRTL_PROCESS_MODULES;
typedef IXMLDOMAttribute IXMLDOMAttribute;
typedef IXMLDOMElement IXMLDOMElement;
typedef _SYSTEM_OBJECT_INFORMATION* PSYSTEM_OBJECT_INFORMATION;
typedef IXMLDOMText IXMLDOMText;
typedef _SYSTEM_FLAGS_INFORMATION SYSTEM_FLAGS_INFORMATION;
typedef _COVERAGE_MODULE_REQUEST COVERAGE_MODULE_REQUEST;
typedef IXMLDOMComment IXMLDOMComment;
typedef _CLIENT_ID64* PCLIENT_ID64;
typedef IXMLDOMCDATASection IXMLDOMCDATASection;
typedef _SYSTEM_REGISTRY_QUOTA_INFORMATION* PSYSTEM_REGISTRY_QUOTA_INFORMATION;
typedef _LDR_DEPENDENCY_RECORD* PLDR_DEPENDENCY_RECORD;
typedef IXMLDOMEntityReference IXMLDOMEntityReference;
typedef IXMLDOMParseError IXMLDOMParseError;
typedef _SYSTEM_LEGACY_DRIVER_INFORMATION SYSTEM_LEGACY_DRIVER_INFORMATION;
typedef DOMDocument DOMDocument;
typedef DOMFreeThreadedDocument DOMFreeThreadedDocument;
typedef _SYSTEM_LOOKASIDE_INFORMATION* PSYSTEM_LOOKASIDE_INFORMATION;
typedef _PS_MITIGATION_AUDIT_OPTIONS_MAP PS_MITIGATION_AUDIT_OPTIONS_MAP;
typedef XMLDSOControl XMLDSOControl;
typedef _SYSTEM_VERIFIER_INFORMATION_LEGACY SYSTEM_VERIFIER_INFORMATION_LEGACY;
typedef void ( *PLDR_IMPORT_MODULE_CALLBACK )( PVOID, PSTR );
typedef _SYSTEM_SET_TIME_ADJUST_INFORMATION* PSYSTEM_SET_TIME_ADJUST_INFORMATION;
typedef IXMLElementCollection IXMLElementCollection;
typedef IXMLDocument IXMLDocument;
typedef _SYSTEM_SET_TIME_ADJUST_INFORMATION SYSTEM_SET_TIME_ADJUST_INFORMATION;
typedef _OBJECT_ATTRIBUTES* POBJECT_ATTRIBUTES;
typedef IXMLDocument2 IXMLDocument2;
typedef _EVENT_TRACE_INFORMATION_CLASS EVENT_TRACE_INFORMATION_CLASS;
typedef _LDR_SECTION_INFO* PLDR_SECTION_INFO;
typedef _SYSTEM_VDM_INSTEMUL_INFO* PSYSTEM_VDM_INSTEMUL_INFO;
typedef IXMLAttribute IXMLAttribute;
typedef _LDR_DDAG_STATE LDR_DDAG_STATE;
typedef IXMLError IXMLError;
typedef _SYSTEM_VDM_INSTEMUL_INFO SYSTEM_VDM_INSTEMUL_INFO;
typedef XMLDocument XMLDocument;
typedef _SYSTEM_BASIC_WORKING_SET_INFORMATION
    SYSTEM_BASIC_WORKING_SET_INFORMATION;
typedef _SYSTEM_PROCESSOR_PERFORMANCE_DISTRIBUTION
    SYSTEM_PROCESSOR_PERFORMANCE_DISTRIBUTION;
typedef _xml_error XML_ERROR;
typedef _LDR_DDAG_NODE LDR_DDAG_NODE;
typedef NTSTATUS ( *PFNFTH )( PSYSTEM_FIRMWARE_TABLE_INFORMATION );
typedef IEObjectType IEObjectType;
typedef IPersistMoniker* LPPERSISTMONIKER;
typedef IMonikerProp* LPMONIKERPROP;
typedef _WORKER_FACTORY_BASIC_INFORMATION* PWORKER_FACTORY_BASIC_INFORMATION;
typedef __MIDL_IMonikerProp_0001 MONIKERPROPERTY;
typedef _SINGLE_LIST_ENTRY32* PSINGLE_LIST_ENTRY32;
typedef _ULARGE_INTEGER_128* PULARGE_INTEGER_128;
typedef _SYSTEM_POOL_INFORMATION SYSTEM_POOL_INFORMATION;
typedef IBindStatusCallback* LPBINDSTATUSCALLBACK;
typedef __MIDL_IBindStatusCallback_0002 BINDINFOF;
typedef _TIMER_SET_COALESCABLE_TIMER_INFO TIMER_SET_COALESCABLE_TIMER_INFO;
typedef __MIDL_IBindStatusCallback_0003 BINDF;
typedef _tagBINDINFO BINDINFO;
typedef _SM_STORE_PARAMETERS SM_STORE_PARAMETERS;
typedef _SM_CREATE_REQUEST* PSM_CREATE_REQUEST;
typedef tagRemFORMATETC* LPREMFORMATETC;
typedef _WNF_STATE_NAME_INFORMATION WNF_STATE_NAME_INFORMATION;
typedef ULONG* PWNF_CHANGE_STAMP;
typedef __MIDL_IBindStatusCallback_0006 BSCF;
typedef const UNICODE_STRING* PCUNICODE_STRING;
typedef _WNF_TYPE_ID* PWNF_TYPE_ID;
typedef _SYSTEM_BOOT_ENVIRONMENT_INFORMATION
    SYSTEM_BOOT_ENVIRONMENT_INFORMATION;
typedef _SYSTEM_CALL_COUNT_INFORMATION* PSYSTEM_CALL_COUNT_INFORMATION;
typedef __MIDL_IBindStatusCallbackEx_0001 BINDF2;
typedef IAuthenticateEx* LPAUTHENTICATIONEX;
typedef _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION
    SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION;
typedef __MIDL_IAuthenticateEx_0001 AUTHENTICATEF;
typedef _tagAUTHENTICATEINFO AUTHENTICATEINFO;
typedef IDispatch* LPDISPATCH;
typedef IHttpNegotiate* LPHTTPNEGOTIATE;
typedef IWindowForBindingUI* LPWINDOWFORBINDINGUI;
typedef ICodeInstall* LPCODEINSTALL;
typedef _WNF_STATE_NAME* PWNF_STATE_NAME;
typedef PVOID PT2_CANCEL_PARAMETERS;
typedef __MIDL_ICodeInstall_0001 CIP_STATUS;
typedef __MIDL_IUri_0001 Uri_PROPERTY;
typedef _SYSTEM_WATCHDOG_HANDLER_INFORMATION
    SYSTEM_WATCHDOG_HANDLER_INFORMATION;
typedef __MIDL_IUri_0002 Uri_HOST_TYPE;
typedef IWinInetInfo* LPWININETINFO;
typedef IWinInetHttpInfo* LPWININETHTTPINFO;
typedef _SYSTEM_HYPERVISOR_QUERY_INFORMATION
    SYSTEM_HYPERVISOR_QUERY_INFORMATION;
typedef IWinInetCacheHints2* LPWININETCACHEHINTS2;
typedef IBindHost* LPBINDHOST;
typedef IInternet* LPIINTERNET;
typedef IInternetBindInfo* LPIINTERNETBINDINFO;
typedef _IMAGE_EXPORT_DIRECTORY* PIMAGE_EXPORT_DIRECTORY;
typedef tagBINDSTRING BINDSTRING;
typedef UDATE UDATE;
typedef IInternetBindInfoEx* LPIINTERNETBINDINFOEX;
typedef LONG DISPID;
typedef DISPID MEMBERID;
typedef _tagPI_FLAGS PI_FLAGS;
typedef _MUTANT_BASIC_INFORMATION* PMUTANT_BASIC_INFORMATION;
typedef _tagPROTOCOLDATA PROTOCOLDATA;
typedef _MUTANT_BASIC_INFORMATION MUTANT_BASIC_INFORMATION;
typedef IInternetProtocol* LPIINTERNETPROTOCOL;
typedef void* PCVOID;
typedef IInternetProtocolSink* LPIINTERNETPROTOCOLSINK;
typedef _MUTANT_OWNER_INFORMATION* PMUTANT_OWNER_INFORMATION;
typedef IInternetProtocolSinkStackable* LPIINTERNETPROTOCOLSINKStackable;
typedef tagMETHODDATA* LPMETHODDATA;
typedef STRING64* PUNICODE_STRING64;
typedef _SYSTEM_PERFORMANCE_INFORMATION* PSYSTEM_PERFORMANCE_INFORMATION;
typedef _tagOIBDG_FLAGS OIBDG_FLAGS;
typedef _tagPARSEACTION PARSEACTION;
typedef __MIDL_IGetBindHandle_0001 BINDHANDLETYPES;
typedef _tagPSUACTION PSUACTION;
typedef _tagQUERYOPTION QUERYOPTION;
typedef _tagINTERNETFEATURELIST INTERNETFEATURELIST;
typedef __MIDL_IInternetSecurityManager_0002 PUAFOUT;
typedef _SYSTEM_SYSTEM_PARTITION_INFORMATION* PSYSTEM_SYSTEM_PARTITION_INFORMATION;
typedef _QUAD QUAD;
typedef _SYSTEM_NUMA_PROXIMITY_MAP SYSTEM_NUMA_PROXIMITY_MAP;
typedef ULONG LOGICAL;
typedef _EVENT_BASIC_INFORMATION* PEVENT_BASIC_INFORMATION;
typedef tagURLZONE URLZONE;
typedef _EVENT_BASIC_INFORMATION EVENT_BASIC_INFORMATION;
typedef __MIDL_IInternetZoneManager_0002 ZAFLAGS;
typedef _ZONEATTRIBUTES ZONEATTRIBUTES;
typedef _ZONEATTRIBUTES* LPZONEATTRIBUTES;
typedef _SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT* PSYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT;
typedef _WNF_DATA_SCOPE WNF_DATA_SCOPE;
typedef LONG* PKPRIORITY;
typedef _tagCODEBASEHOLD* LPCODEBASEHOLD;
typedef LARGE_INTEGER* PPHYSICAL_ADDRESS;
typedef _SEMAPHORE_BASIC_INFORMATION* PSEMAPHORE_BASIC_INFORMATION;
typedef _LARGE_INTEGER_128 LARGE_INTEGER_128;
typedef void TIMER_APC_ROUTINE( PVOID, ULONG, LONG );
typedef ICatalogFileInfo* LPCATALOGFILEINFO;
typedef IDataFilter* LPDATAFILTER;
typedef _TIMER_BASIC_INFORMATION* PTIMER_BASIC_INFORMATION;
typedef _tagPROTOCOLFILTERDATA PROTOCOLFILTERDATA;
typedef IEncodingFilterFactory* LPENCODINGFILTERFACTORY;
typedef _tagHIT_LOGGING_INFO HIT_LOGGING_INFO;
typedef const GUID* PCGUID;
typedef _EFI_DRIVER_ENTRY* PEFI_DRIVER_ENTRY;
typedef IWrappedProtocol* LPIWRAPPEDPROTOCOL;
typedef _EVENT_TRACE_TAG_FILTER_INFORMATION* PEVENT_TRACE_TAG_FILTER_INFORMATION;
typedef _tagPROTOCOL_ARGUMENT* LPPROTOCOL_ARGUMENT;
typedef IBindCallbackRedirect* LPBINDCALLBACKREDIRECT;
typedef _EVENT_TRACE_VERSION_INFORMATION EVENT_TRACE_VERSION_INFORMATION;
typedef _ST_IO_STATS ST_IO_STATS;
typedef NUMPARSE NUMPARSE;
typedef _EVENT_TRACE_GROUPMASK_INFORMATION* PEVENT_TRACE_GROUPMASK_INFORMATION;
typedef _ST_IO_STATS* PST_IO_STATS;
typedef ITypeInfo* LPTYPEINFO;
typedef ICreateTypeLib* LPCREATETYPELIB;
typedef tagPARAMDATA* LPPARAMDATA;
typedef _SYSTEM_PROCESSOR_MICROCODE_UPDATE_INFORMATION* PSYSTEM_PROCESSOR_MICROCODE_UPDATE_INFORMATION;
typedef _SYSTEM_INFORMATION_CLASS SYSTEM_INFORMATION_CLASS;
typedef tagINTERFACEDATA INTERFACEDATA;
typedef _SYSTEM_PROCESSOR_INFORMATION SYSTEM_PROCESSOR_INFORMATION;
typedef EVENT_TRACE_SYSTEM_EVENT_INFORMATION
    EVENT_TRACE_PROFILE_EVENT_INFORMATION;
typedef _ST_STATS ST_STATS;
typedef _EVENT_TRACE_PROFILE_ADD_INFORMATION
    EVENT_TRACE_PROFILE_ADD_INFORMATION;
typedef DOUBLE* PDOUBLE;
typedef _SMC_CACHE_CREATE_REQUEST SMC_CACHE_CREATE_REQUEST;
typedef GUID* PGUID;
typedef _QUAD* PQUAD;
typedef NTSTATUS* PNTSTATUS;
typedef _EVENT_TRACE_TIME_PROFILE_INFORMATION
    EVENT_TRACE_TIME_PROFILE_INFORMATION;
typedef CCHAR* PCCHAR;
typedef _ST_READ_LATENCY_BUCKET ST_READ_LATENCY_BUCKET;
typedef CLONG* PCLONG;
typedef PCSTR PCSZ;
typedef _ST_STATS_SPACE_BITMAP* PST_STATS_SPACE_BITMAP;
typedef PVOID* PPVOID;
typedef UCHAR KIRQL;
typedef UCHAR* PKIRQL;
typedef USHORT* PRTL_ATOM;
typedef _SM_STORE_LIST_REQUEST_EX SM_STORE_LIST_REQUEST_EX;
typedef LARGE_INTEGER PHYSICAL_ADDRESS;
typedef _LARGE_INTEGER_128* PLARGE_INTEGER_128;
typedef _SMC_CACHE_LIST_REQUEST* PSMC_CACHE_LIST_REQUEST;
typedef _SM_STORE_LIST_REQUEST_EX* PSM_STORE_LIST_REQUEST_EX;
typedef _ULARGE_INTEGER_128 ULARGE_INTEGER_128;
typedef _WAIT_TYPE WAIT_TYPE;
typedef _SYSTEM_VERIFIER_FAULTS_INFORMATION* PSYSTEM_VERIFIER_FAULTS_INFORMATION;
typedef _STRING* PANSI_STRING;
typedef _STRING* POEM_STRING;
typedef PSTRING PUTF8_STRING;
typedef const STRING* PCSTRING;
typedef const ANSI_STRING* PCANSI_STRING;
typedef _SYSTEM_STORE_INFORMATION* PSYSTEM_STORE_INFORMATION;
typedef _SYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION* PSYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION;
typedef _RTL_BALANCED_NODE* PRTL_BALANCED_NODE;
typedef _SYSTEM_CALL_TIME_INFORMATION SYSTEM_CALL_TIME_INFORMATION;
typedef _SINGLE_LIST_ENTRY32 SINGLE_LIST_ENTRY32;
typedef _SYSTEM_CODEINTEGRITY_INFORMATION* PSYSTEM_CODEINTEGRITY_INFORMATION;
typedef STRING32* PANSI_STRING32;
typedef _SYSTEM_VA_TYPE* PSYSTEM_VA_TYPE;
typedef _SYSTEM_VA_TYPE SYSTEM_VA_TYPE;
typedef _BOOT_ENTRY_LIST* PBOOT_ENTRY_LIST;
typedef _OBJECT_ATTRIBUTES64* POBJECT_ATTRIBUTES64;
typedef const OBJECT_ATTRIBUTES64* PCOBJECT_ATTRIBUTES64;
typedef _SM_STATS_REQUEST* PSM_STATS_REQUEST;
typedef _SYSTEM_SET_TIME_ADJUST_INFORMATION_PRECISE* PSYSTEM_SET_TIME_ADJUST_INFORMATION_PRECISE;
typedef _OBJECT_ATTRIBUTES32* POBJECT_ATTRIBUTES32;
typedef _ST_DATA_MGR_STATS* PST_DATA_MGR_STATS;
typedef _SYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION_WIN8
    SYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION_WIN8;
typedef _NT_PRODUCT_TYPE NT_PRODUCT_TYPE;
typedef _SYSTEM_FILECACHE_INFORMATION* PSYSTEM_FILECACHE_INFORMATION;
typedef _CLIENT_ID64 CLIENT_ID64;
typedef _WORKERFACTORYINFOCLASS* PWORKERFACTORYINFOCLASS;
typedef _SYSTEM_SESSION_POOLTAG_INFORMATION SYSTEM_SESSION_POOLTAG_INFORMATION;
typedef _KTHREAD_STATE* PKTHREAD_STATE;
typedef _SYSTEM_SESSION_POOLTAG_INFORMATION* PSYSTEM_SESSION_POOLTAG_INFORMATION;
typedef _KWAIT_REASON* PKWAIT_REASON;
typedef EVENT_TRACE_TAG_FILTER_INFORMATION* PEVENT_TRACE_OBJECT_TYPE_FILTER_INFORMATION;
typedef _WATCHDOG_INFORMATION_CLASS WATCHDOG_INFORMATION_CLASS;
typedef _SYSTEM_PROCESS_INFORMATION* PSYSTEM_PROCESS_INFORMATION;
typedef _SYSTEM_IMAGE_FILE_EXECUTION_OPTIONS_INFORMATION
    SYSTEM_IMAGE_FILE_EXECUTION_OPTIONS_INFORMATION;
typedef _SYSTEM_DEVICE_INFORMATION SYSTEM_DEVICE_INFORMATION;
typedef _SYSTEM_IMAGE_FILE_EXECUTION_OPTIONS_INFORMATION* PSYSTEM_IMAGE_FILE_EXECUTION_OPTIONS_INFORMATION;
typedef _LDR_DEPENDENCY_RECORD LDR_DEPENDENCY_RECORD;
typedef _SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION
    SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION;
typedef _LDR_DATA_TABLE_ENTRY LDR_DATA_TABLE_ENTRY;
typedef void LDR_IMPORT_MODULE_CALLBACK( PVOID, PSTR );
typedef _SYSTEM_SPECIAL_POOL_INFORMATION* PSYSTEM_SPECIAL_POOL_INFORMATION;
typedef _SYSTEM_EXTENDED_THREAD_INFORMATION SYSTEM_EXTENDED_THREAD_INFORMATION;
typedef _LDR_VERIFY_IMAGE_INFO LDR_VERIFY_IMAGE_INFO;
typedef _LDR_DLL_LOADED_NOTIFICATION_DATA* PLDR_DLL_LOADED_NOTIFICATION_DATA;
typedef _SYSTEM_KERNEL_DEBUGGER_INFORMATION* PSYSTEM_KERNEL_DEBUGGER_INFORMATION;
typedef _LDR_DLL_UNLOADED_NOTIFICATION_DATA* PLDR_DLL_UNLOADED_NOTIFICATION_DATA;
typedef _SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX;
typedef void LDR_DLL_NOTIFICATION_FUNCTION( ULONG, PLDR_DLL_NOTIFICATION_DATA, PVOID );
typedef _LDR_FAILURE_DATA LDR_FAILURE_DATA;
typedef _BOOT_ENTRY_LIST BOOT_ENTRY_LIST;
typedef _RTL_SCPCFG_NTDLL_EXPORTS RTL_SCPCFG_NTDLL_EXPORTS;
typedef _SYSTEM_EXCEPTION_INFORMATION* PSYSTEM_EXCEPTION_INFORMATION;
typedef _LDR_RESOURCE_INFO LDR_RESOURCE_INFO;
typedef _LDR_ENUM_RESOURCE_ENTRY LDR_ENUM_RESOURCE_ENTRY;
typedef _SYSTEM_OBJECTTYPE_INFORMATION SYSTEM_OBJECTTYPE_INFORMATION;
typedef _SYSTEM_FIRMWARE_TABLE_INFORMATION SYSTEM_FIRMWARE_TABLE_INFORMATION;
typedef _RTL_PROCESS_MODULE_INFORMATION_EX* PRTL_PROCESS_MODULE_INFORMATION_EX;
typedef void ( *PLDR_ENUM_CALLBACK )( PLDR_DATA_TABLE_ENTRY, PVOID, BOOLEAN* );
typedef _DELAYLOAD_INFO DELAYLOAD_INFO;
typedef _SYSTEM_VERIFIER_INFORMATION* PSYSTEM_VERIFIER_INFORMATION;
typedef PVOID DELAYLOAD_FAILURE_DLL_CALLBACK( ULONG, PDELAYLOAD_INFO );
typedef PVOID ( *PDELAYLOAD_FAILURE_DLL_CALLBACK )( ULONG, PDELAYLOAD_INFO );
typedef _TEB* PTEB;
typedef _SMKM_REGION_EXTENT SMKM_REGION_EXTENT;
typedef _FILE_IO_COMPLETION_INFORMATION* PFILE_IO_COMPLETION_INFORMATION;
typedef _VARIABLE_NAME VARIABLE_NAME;
typedef _VARIABLE_NAME_AND_VALUE VARIABLE_NAME_AND_VALUE;
typedef _VARIABLE_NAME_AND_VALUE* PVARIABLE_NAME_AND_VALUE;
typedef _SMC_CACHE_PARAMETERS* PSMC_CACHE_PARAMETERS;
typedef _FILE_PATH FILE_PATH;
typedef _FILTER_BOOT_OPTION_OPERATION FILTER_BOOT_OPTION_OPERATION;
typedef _MUTANT_INFORMATION_CLASS MUTANT_INFORMATION_CLASS;
typedef _ST_STATS_REGION_INFO ST_STATS_REGION_INFO;
typedef _MUTANT_OWNER_INFORMATION MUTANT_OWNER_INFORMATION;
typedef _SEMAPHORE_INFORMATION_CLASS SEMAPHORE_INFORMATION_CLASS;
typedef _SM_STORE_LIST_REQUEST SM_STORE_LIST_REQUEST;
typedef _SYSTEM_PREFETCH_PATCH_INFORMATION SYSTEM_PREFETCH_PATCH_INFORMATION;
typedef _SYSTEM_VA_LIST_INFORMATION SYSTEM_VA_LIST_INFORMATION;
typedef _T2_SET_PARAMETERS_V0* PT2_SET_PARAMETERS;
typedef _WNF_STATE_NAME_LIFETIME WNF_STATE_NAME_LIFETIME;
typedef _COVERAGE_MODULE_REQUEST* PCOVERAGE_MODULE_REQUEST;
typedef _WORKERFACTORYINFOCLASS WORKERFACTORYINFOCLASS;
typedef _SYSTEM_THREAD_INFORMATION* PSYSTEM_THREAD_INFORMATION;
typedef _SYSTEM_EXTENDED_THREAD_INFORMATION* PSYSTEM_EXTENDED_THREAD_INFORMATION;
typedef _SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT_WIN8* PSYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT_WIN8;
typedef _SYSTEM_PROCESS_INFORMATION SYSTEM_PROCESS_INFORMATION;
typedef _SYSTEM_PROCESSOR_PERFORMANCE_DISTRIBUTION* PSYSTEM_PROCESSOR_PERFORMANCE_DISTRIBUTION;
typedef _SYSTEM_DEVICE_INFORMATION* PSYSTEM_DEVICE_INFORMATION;
typedef _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION* PSYSTEM_PROCESSOR_PERFORMANCE_INFORMATION;
typedef _SYSTEM_FIRMWARE_TABLE_HANDLER* PSYSTEM_FIRMWARE_TABLE_HANDLER;
typedef _SYSTEM_MEMORY_LIST_INFORMATION SYSTEM_MEMORY_LIST_INFORMATION;
typedef _SYSTEM_CALL_TIME_INFORMATION* PSYSTEM_CALL_TIME_INFORMATION;
typedef _SYSTEM_POOL_INFORMATION* PSYSTEM_POOL_INFORMATION;
typedef _RTL_PROCESS_LOCKS* PRTL_PROCESS_LOCKS;
typedef _SYSTEM_SESSION_MAPPED_VIEW_INFORMATION
    SYSTEM_SESSION_MAPPED_VIEW_INFORMATION;
typedef _SYSTEM_PAGEFILE_INFORMATION* PSYSTEM_PAGEFILE_INFORMATION;
typedef _SYSTEM_BOOT_ENVIRONMENT_INFORMATION* PSYSTEM_BOOT_ENVIRONMENT_INFORMATION;
typedef _SYSTEM_FILECACHE_INFORMATION SYSTEM_FILECACHE_INFORMATION;
typedef _SYSTEM_THREAD_CID_PRIORITY_INFORMATION
    SYSTEM_THREAD_CID_PRIORITY_INFORMATION;
typedef _SYSTEM_INTERRUPT_INFORMATION SYSTEM_INTERRUPT_INFORMATION;
typedef NTSTATUS SYSTEM_WATCHDOG_HANDLER( WATCHDOG_HANDLER_ACTION, PVOID, PULONG, BOOLEAN );
typedef _SYSTEM_DPC_BEHAVIOR_INFORMATION SYSTEM_DPC_BEHAVIOR_INFORMATION;
typedef _SYSTEM_QUERY_TIME_ADJUST_INFORMATION
    SYSTEM_QUERY_TIME_ADJUST_INFORMATION;
typedef _SYSTEM_WATCHDOG_HANDLER_INFORMATION* PSYSTEM_WATCHDOG_HANDLER_INFORMATION;
typedef _SYSTEM_QUERY_TIME_ADJUST_INFORMATION_PRECISE
    SYSTEM_QUERY_TIME_ADJUST_INFORMATION_PRECISE;
typedef _SYSTEM_QUERY_TIME_ADJUST_INFORMATION_PRECISE* PSYSTEM_QUERY_TIME_ADJUST_INFORMATION_PRECISE;
typedef _SYSTEM_PROCESS_ID_INFORMATION SYSTEM_PROCESS_ID_INFORMATION;
typedef _SYSTEM_SET_TIME_ADJUST_INFORMATION_PRECISE
    SYSTEM_SET_TIME_ADJUST_INFORMATION_PRECISE;
typedef _SYSTEM_HYPERVISOR_QUERY_INFORMATION* PSYSTEM_HYPERVISOR_QUERY_INFORMATION;
typedef _SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS* PSYSTEM_CRASH_DUMP_CONFIGURATION_CLASS;
typedef _SYSTEM_CRASH_DUMP_STATE_INFORMATION
    SYSTEM_CRASH_DUMP_STATE_INFORMATION;
typedef _EVENT_TRACE_VERSION_INFORMATION* PEVENT_TRACE_VERSION_INFORMATION;
typedef _EVENT_TRACE_GROUPMASK_INFORMATION EVENT_TRACE_GROUPMASK_INFORMATION;
typedef _EVENT_TRACE_TIME_PROFILE_INFORMATION* PEVENT_TRACE_TIME_PROFILE_INFORMATION;
typedef _SYSTEM_HANDLE_INFORMATION_EX* PSYSTEM_HANDLE_INFORMATION_EX;
typedef _EVENT_TRACE_SPINLOCK_INFORMATION EVENT_TRACE_SPINLOCK_INFORMATION;
typedef _EVENT_TRACE_SPINLOCK_INFORMATION* PEVENT_TRACE_SPINLOCK_INFORMATION;
typedef EVENT_TRACE_SYSTEM_EVENT_INFORMATION
    EVENT_TRACE_STACK_TRACING_INFORMATION;
typedef _EVENT_TRACE_EXECUTIVE_RESOURCE_INFORMATION* PEVENT_TRACE_EXECUTIVE_RESOURCE_INFORMATION;
typedef _EVENT_TRACE_HEAP_TRACING_INFORMATION
    EVENT_TRACE_HEAP_TRACING_INFORMATION;
typedef _EVENT_TRACE_COVERAGE_SAMPLER_INFORMATION
    EVENT_TRACE_COVERAGE_SAMPLER_INFORMATION;
typedef EVENT_TRACE_TAG_FILTER_INFORMATION
    EVENT_TRACE_POOLTAG_FILTER_INFORMATION;
typedef _EVENT_TRACE_PROFILE_LIST_INFORMATION* PEVENT_TRACE_PROFILE_LIST_INFORMATION;
typedef _SYSTEM_WATCHDOG_TIMER_INFORMATION* PSYSTEM_WATCHDOG_TIMER_INFORMATION;
typedef _EVENT_TRACE_SOFT_RESTART_INFORMATION* PEVENT_TRACE_SOFT_RESTART_INFORMATION;
typedef _SYSTEM_BIGPOOL_INFORMATION SYSTEM_BIGPOOL_INFORMATION;
typedef _SYSTEM_POOL_ENTRY* PSYSTEM_POOL_ENTRY;
typedef _SYSTEM_SESSION_PROCESS_INFORMATION* PSYSTEM_SESSION_PROCESS_INFORMATION;
typedef _SYSTEM_GDI_DRIVER_INFORMATION SYSTEM_GDI_DRIVER_INFORMATION;
typedef _EVENT_TRACE_PROFILE_ADD_INFORMATION* PEVENT_TRACE_PROFILE_ADD_INFORMATION;
typedef _SYSTEM_STORE_INFORMATION SYSTEM_STORE_INFORMATION;
typedef _ST_STATS_LEVEL ST_STATS_LEVEL;
typedef _SMC_CACHE_CREATE_REQUEST* PSMC_CACHE_CREATE_REQUEST;
typedef _SMC_CACHE_DELETE_REQUEST SMC_CACHE_DELETE_REQUEST;
typedef _SMC_CACHE_DELETE_REQUEST* PSMC_CACHE_DELETE_REQUEST;
typedef _SM_STORE_MANAGER_TYPE SM_STORE_MANAGER_TYPE;
typedef _SMC_STORE_CREATE_REQUEST SMC_STORE_CREATE_REQUEST;
typedef _SMC_STORE_CREATE_REQUEST* PSMC_STORE_CREATE_REQUEST;
typedef _SMC_STORE_DELETE_REQUEST SMC_STORE_DELETE_REQUEST;
typedef _SMC_STORE_DELETE_REQUEST* PSMC_STORE_DELETE_REQUEST;
typedef _SMC_CACHE_STATS SMC_CACHE_STATS;
typedef _SMC_CACHE_STATS* PSMC_CACHE_STATS;
typedef _SMC_CACHE_STATS_REQUEST SMC_CACHE_STATS_REQUEST;
typedef _SMC_CACHE_STATS_REQUEST* PSMC_CACHE_STATS_REQUEST;
typedef _SM_REGISTRATION_INFO SM_REGISTRATION_INFO;
typedef _SM_REGISTRATION_INFO* PSM_REGISTRATION_INFO;
typedef _DBGKM_LOAD_DLL DBGKM_LOAD_DLL;
typedef _SM_REGISTRATION_REQUEST SM_REGISTRATION_REQUEST;
typedef _ALPC_PORT_ATTRIBUTES* PALPC_PORT_ATTRIBUTES;
typedef _SM_REGISTRATION_REQUEST* PSM_REGISTRATION_REQUEST;
typedef _USER_WORKSTATIONS_INFORMATION* PUSER_WORKSTATIONS_INFORMATION;
typedef _SM_STORE_RESIZE_REQUEST SM_STORE_RESIZE_REQUEST;
typedef _SM_STORE_RESIZE_REQUEST* PSM_STORE_RESIZE_REQUEST;
typedef _SMC_STORE_RESIZE_REQUEST SMC_STORE_RESIZE_REQUEST;
typedef _DBGKM_CREATE_PROCESS DBGKM_CREATE_PROCESS;
typedef _DBG_STATE* PDBG_STATE;
typedef _SMC_STORE_RESIZE_REQUEST* PSMC_STORE_RESIZE_REQUEST;
typedef _API_SET_HASH_ENTRY* PAPI_SET_HASH_ENTRY;
typedef _DBGKM_UNLOAD_DLL* PDBGKM_UNLOAD_DLL;
typedef _SM_CONFIG_TYPE SM_CONFIG_TYPE;
typedef _ALPC_COMPLETION_LIST_STATE ALPC_COMPLETION_LIST_STATE;
typedef _SM_CONFIG_REQUEST SM_CONFIG_REQUEST;
typedef _SM_CONFIG_REQUEST* PSM_CONFIG_REQUEST;
typedef _API_SET_VALUE_ENTRY API_SET_VALUE_ENTRY;
typedef _SM_STORE_HIGH_MEM_PRIORITY_REQUEST SM_STORE_HIGH_MEM_PRIORITY_REQUEST;
typedef _SM_STORE_HIGH_MEM_PRIORITY_REQUEST* PSM_STORE_HIGH_MEM_PRIORITY_REQUEST;
typedef _SM_SYSTEM_STORE_TRIM_REQUEST SM_SYSTEM_STORE_TRIM_REQUEST;
typedef _SM_SYSTEM_STORE_TRIM_REQUEST* PSM_SYSTEM_STORE_TRIM_REQUEST;
typedef _SM_MEM_COMPRESSION_INFO_REQUEST SM_MEM_COMPRESSION_INFO_REQUEST;
typedef _SM_MEM_COMPRESSION_INFO_REQUEST* PSM_MEM_COMPRESSION_INFO_REQUEST;
typedef _SYSTEM_REGISTRY_APPEND_STRING_PARAMETERS
    SYSTEM_REGISTRY_APPEND_STRING_PARAMETERS;
typedef _SYSTEM_REGISTRY_APPEND_STRING_PARAMETERS* PSYSTEM_REGISTRY_APPEND_STRING_PARAMETERS;
typedef _SYSTEM_VHD_BOOT_INFORMATION SYSTEM_VHD_BOOT_INFORMATION;
typedef _SYSTEM_VHD_BOOT_INFORMATION* PSYSTEM_VHD_BOOT_INFORMATION;
typedef _PS_CPU_QUOTA_QUERY_ENTRY PS_CPU_QUOTA_QUERY_ENTRY;
typedef _PS_CPU_QUOTA_QUERY_ENTRY* PPS_CPU_QUOTA_QUERY_ENTRY;
typedef _PS_CPU_QUOTA_QUERY_INFORMATION PS_CPU_QUOTA_QUERY_INFORMATION;
typedef _PS_CPU_QUOTA_QUERY_INFORMATION* PPS_CPU_QUOTA_QUERY_INFORMATION;
typedef _SYSTEM_ERROR_PORT_TIMEOUTS SYSTEM_ERROR_PORT_TIMEOUTS;
typedef _SYSTEM_ERROR_PORT_TIMEOUTS* PSYSTEM_ERROR_PORT_TIMEOUTS;
typedef _SYSTEM_LOW_PRIORITY_IO_INFORMATION SYSTEM_LOW_PRIORITY_IO_INFORMATION;
typedef _SYSTEM_LOW_PRIORITY_IO_INFORMATION* PSYSTEM_LOW_PRIORITY_IO_INFORMATION;
typedef _BOOT_ENTROPY_SOURCE_RESULT_CODE BOOT_ENTROPY_SOURCE_RESULT_CODE;
typedef _BOOT_ENTROPY_SOURCE_ID BOOT_ENTROPY_SOURCE_ID;
typedef _BOOT_ENTROPY_SOURCE_ID* PBOOT_ENTROPY_SOURCE_ID;
typedef _TPM_BOOT_ENTROPY_NT_RESULT TPM_BOOT_ENTROPY_NT_RESULT;
typedef _TPM_BOOT_ENTROPY_NT_RESULT* PTPM_BOOT_ENTROPY_NT_RESULT;
typedef _BOOT_ENTROPY_SOURCE_NT_RESULT BOOT_ENTROPY_SOURCE_NT_RESULT;
typedef _BOOT_ENTROPY_SOURCE_NT_RESULT* PBOOT_ENTROPY_SOURCE_NT_RESULT;
typedef _BOOT_ENTROPY_NT_RESULT BOOT_ENTROPY_NT_RESULT;
typedef _BOOT_ENTROPY_NT_RESULT* PBOOT_ENTROPY_NT_RESULT;
typedef _SYSTEM_VERIFIER_COUNTERS_INFORMATION
    SYSTEM_VERIFIER_COUNTERS_INFORMATION;
typedef _SYSTEM_VERIFIER_COUNTERS_INFORMATION* PSYSTEM_VERIFIER_COUNTERS_INFORMATION;
typedef _SYSTEM_ACPI_AUDIT_INFORMATION SYSTEM_ACPI_AUDIT_INFORMATION;
typedef _SYSTEM_ACPI_AUDIT_INFORMATION* PSYSTEM_ACPI_AUDIT_INFORMATION;
typedef _SYSTEM_BASIC_PERFORMANCE_INFORMATION
    SYSTEM_BASIC_PERFORMANCE_INFORMATION;
typedef _SYSTEM_BASIC_PERFORMANCE_INFORMATION* PSYSTEM_BASIC_PERFORMANCE_INFORMATION;
typedef _QUERY_PERFORMANCE_COUNTER_FLAGS QUERY_PERFORMANCE_COUNTER_FLAGS;
typedef _SYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION
    SYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION;
typedef _SYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION* PSYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION;
typedef _SYSTEM_PIXEL_FORMAT SYSTEM_PIXEL_FORMAT;
typedef _SYSTEM_BOOT_GRAPHICS_INFORMATION SYSTEM_BOOT_GRAPHICS_INFORMATION;
typedef _SYSTEM_BOOT_GRAPHICS_INFORMATION* PSYSTEM_BOOT_GRAPHICS_INFORMATION;
typedef _MEMORY_SCRUB_INFORMATION MEMORY_SCRUB_INFORMATION;
typedef _MEMORY_SCRUB_INFORMATION* PMEMORY_SCRUB_INFORMATION;
typedef _SYSTEM_BAD_PAGE_INFORMATION SYSTEM_BAD_PAGE_INFORMATION;
typedef _SYSTEM_BAD_PAGE_INFORMATION* PSYSTEM_BAD_PAGE_INFORMATION;
typedef _PEBS_DS_SAVE_AREA32 PEBS_DS_SAVE_AREA32;
typedef _PEBS_DS_SAVE_AREA32* PPEBS_DS_SAVE_AREA32;
typedef _ETW_HEAP_EVENT_REALLOC ETW_HEAP_EVENT_REALLOC;
typedef _PEBS_DS_SAVE_AREA64 PEBS_DS_SAVE_AREA64;
typedef _PEBS_DS_SAVE_AREA64* PPEBS_DS_SAVE_AREA64;
typedef _ACTIVATION_CONTEXT_GUID_SECTION_HEADER* PACTIVATION_CONTEXT_GUID_SECTION_HEADER;
typedef _PEBS_DS_SAVE_AREA PEBS_DS_SAVE_AREA;
typedef _PEBS_DS_SAVE_AREA* PPEBS_DS_SAVE_AREA;
typedef _ACTIVATION_CONTEXT_GUID_SECTION_HASH_TABLE
    ACTIVATION_CONTEXT_GUID_SECTION_HASH_TABLE;
typedef _PROCESSOR_PROFILE_CONTROL_AREA PROCESSOR_PROFILE_CONTROL_AREA;
typedef _JOBOBJECT_EXTENDED_LIMIT_INFORMATION_V2
    JOBOBJECT_EXTENDED_LIMIT_INFORMATION_V2;
typedef _DOMAIN_LOCALIZABLE_ACCOUNTS_INFORMATION
    DOMAIN_LOCALIZABLE_ACCOUNTS_INFORMATION;
typedef _PROCESSOR_PROFILE_CONTROL_AREA* PPROCESSOR_PROFILE_CONTROL_AREA;
typedef _DOMAIN_DISPLAY_OEM_GROUP DOMAIN_DISPLAY_OEM_GROUP;
typedef NTSTATUS ( *PUSER_THREAD_START_ROUTINE )( PVOID );
typedef _SYSTEM_PROCESSOR_PROFILE_CONTROL_AREA
    SYSTEM_PROCESSOR_PROFILE_CONTROL_AREA;
typedef _SYSTEM_PROCESSOR_PROFILE_CONTROL_AREA* PSYSTEM_PROCESSOR_PROFILE_CONTROL_AREA;
typedef _MUP_FSCTL_UNC_PROVIDER_INFORMATION MUP_FSCTL_UNC_PROVIDER_INFORMATION;
typedef _MEMORY_COMBINE_INFORMATION MEMORY_COMBINE_INFORMATION;
typedef _MUP_FSCTL_UNC_PROVIDER_ENTRY MUP_FSCTL_UNC_PROVIDER_ENTRY;
typedef _MEMORY_COMBINE_INFORMATION* PMEMORY_COMBINE_INFORMATION;
typedef _ACTIVATION_CONTEXT_GUID_SECTION_HASH_BUCKET* PACTIVATION_CONTEXT_GUID_SECTION_HASH_BUCKET;
typedef _MEMORY_COMBINE_INFORMATION_EX MEMORY_COMBINE_INFORMATION_EX;
typedef _MEMORY_COMBINE_INFORMATION_EX* PMEMORY_COMBINE_INFORMATION_EX;
typedef _MEMORY_COMBINE_INFORMATION_EX2 MEMORY_COMBINE_INFORMATION_EX2;
typedef _MEMORY_COMBINE_INFORMATION_EX2* PMEMORY_COMBINE_INFORMATION_EX2;
typedef _SYSTEM_ENTROPY_TIMING_INFORMATION SYSTEM_ENTROPY_TIMING_INFORMATION;
typedef _SYSTEM_ENTROPY_TIMING_INFORMATION* PSYSTEM_ENTROPY_TIMING_INFORMATION;
typedef _SYSTEM_CONSOLE_INFORMATION SYSTEM_CONSOLE_INFORMATION;
typedef _SYSTEM_CONSOLE_INFORMATION* PSYSTEM_CONSOLE_INFORMATION;
typedef _SYSTEM_PLATFORM_BINARY_INFORMATION SYSTEM_PLATFORM_BINARY_INFORMATION;
typedef _SYSTEM_PLATFORM_BINARY_INFORMATION* PSYSTEM_PLATFORM_BINARY_INFORMATION;
typedef _SYSTEM_POLICY_INFORMATION SYSTEM_POLICY_INFORMATION;
typedef _SYSTEM_POLICY_INFORMATION* PSYSTEM_POLICY_INFORMATION;
typedef _SYSTEM_HYPERVISOR_PROCESSOR_COUNT_INFORMATION
    SYSTEM_HYPERVISOR_PROCESSOR_COUNT_INFORMATION;
typedef _SYSTEM_HYPERVISOR_PROCESSOR_COUNT_INFORMATION* PSYSTEM_HYPERVISOR_PROCESSOR_COUNT_INFORMATION;
typedef _SYSTEM_DEVICE_DATA_INFORMATION SYSTEM_DEVICE_DATA_INFORMATION;
typedef _SYSTEM_DEVICE_DATA_INFORMATION* PSYSTEM_DEVICE_DATA_INFORMATION;
typedef _PHYSICAL_CHANNEL_RUN PHYSICAL_CHANNEL_RUN;
typedef _PHYSICAL_CHANNEL_RUN* PPHYSICAL_CHANNEL_RUN;
typedef _SYSTEM_MEMORY_TOPOLOGY_INFORMATION SYSTEM_MEMORY_TOPOLOGY_INFORMATION;
typedef _SYSTEM_MEMORY_TOPOLOGY_INFORMATION* PSYSTEM_MEMORY_TOPOLOGY_INFORMATION;
typedef _SYSTEM_MEMORY_CHANNEL_INFORMATION SYSTEM_MEMORY_CHANNEL_INFORMATION;
typedef _SYSTEM_MEMORY_CHANNEL_INFORMATION* PSYSTEM_MEMORY_CHANNEL_INFORMATION;
typedef _SYSTEM_BOOT_LOGO_INFORMATION SYSTEM_BOOT_LOGO_INFORMATION;
typedef _SYSTEM_BOOT_LOGO_INFORMATION* PSYSTEM_BOOT_LOGO_INFORMATION;
typedef _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION_EX
    SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION_EX;
typedef _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION_EX* PSYSTEM_PROCESSOR_PERFORMANCE_INFORMATION_EX;
typedef _FILE_MAILSLOT_QUERY_INFORMATION FILE_MAILSLOT_QUERY_INFORMATION;
typedef _CRITICAL_PROCESS_EXCEPTION_DATA CRITICAL_PROCESS_EXCEPTION_DATA;
typedef _PF_VIRTUAL_QUERY PF_VIRTUAL_QUERY;
typedef _CRITICAL_PROCESS_EXCEPTION_DATA* PCRITICAL_PROCESS_EXCEPTION_DATA;
typedef _SYSTEM_SECUREBOOT_POLICY_INFORMATION
    SYSTEM_SECUREBOOT_POLICY_INFORMATION;
typedef _PROCESS_LDT_SIZE* PPROCESS_LDT_SIZE;
typedef _PROCESS_LDT_INFORMATION PROCESS_LDT_INFORMATION;
typedef _SYSTEM_SECUREBOOT_POLICY_INFORMATION* PSYSTEM_SECUREBOOT_POLICY_INFORMATION;
typedef _PF_GPU_UTILIZATION_INFO PF_GPU_UTILIZATION_INFO;
typedef _SYSTEM_PAGEFILE_INFORMATION_EX SYSTEM_PAGEFILE_INFORMATION_EX;
typedef _PROCESS_WS_WATCH_INFORMATION PROCESS_WS_WATCH_INFORMATION;
typedef _SYSTEM_PAGEFILE_INFORMATION_EX* PSYSTEM_PAGEFILE_INFORMATION_EX;
typedef _FILE_LINK_ENTRY_INFORMATION FILE_LINK_ENTRY_INFORMATION;
typedef _SYSTEM_SECUREBOOT_INFORMATION SYSTEM_SECUREBOOT_INFORMATION;
typedef _SYSTEM_SECUREBOOT_INFORMATION* PSYSTEM_SECUREBOOT_INFORMATION;
typedef _PROCESS_PRIORITY_CLASS PROCESS_PRIORITY_CLASS;
typedef _PROCESS_DISK_COUNTERS PROCESS_DISK_COUNTERS;
typedef _PROCESS_DISK_COUNTERS* PPROCESS_DISK_COUNTERS;
typedef _ENERGY_STATE_DURATION ENERGY_STATE_DURATION;
typedef _ENERGY_STATE_DURATION* PENERGY_STATE_DURATION;
typedef _PROCESS_ENERGY_VALUES PROCESS_ENERGY_VALUES;
typedef _PROCESS_ENERGY_VALUES* PPROCESS_ENERGY_VALUES;
typedef _TIMELINE_BITMAP TIMELINE_BITMAP;
typedef _TIMELINE_BITMAP* PTIMELINE_BITMAP;
typedef _PROCESS_ENERGY_VALUES_EXTENSION PROCESS_ENERGY_VALUES_EXTENSION;
typedef _PROCESS_ENERGY_VALUES_EXTENSION* PPROCESS_ENERGY_VALUES_EXTENSION;
typedef _PROCESS_EXTENDED_ENERGY_VALUES PROCESS_EXTENDED_ENERGY_VALUES;
typedef _PROCESS_EXTENDED_ENERGY_VALUES* PPROCESS_EXTENDED_ENERGY_VALUES;
typedef _SYSTEM_PROCESS_CLASSIFICATION SYSTEM_PROCESS_CLASSIFICATION;
typedef _SYSTEM_PROCESS_INFORMATION_EXTENSION
    SYSTEM_PROCESS_INFORMATION_EXTENSION;
typedef _SYSTEM_PROCESS_INFORMATION_EXTENSION* PSYSTEM_PROCESS_INFORMATION_EXTENSION;
typedef _SYSTEM_PORTABLE_WORKSPACE_EFI_LAUNCHER_INFORMATION
    SYSTEM_PORTABLE_WORKSPACE_EFI_LAUNCHER_INFORMATION;
typedef _SYSTEM_PORTABLE_WORKSPACE_EFI_LAUNCHER_INFORMATION* PSYSTEM_PORTABLE_WORKSPACE_EFI_LAUNCHER_INFORMATION;
typedef _SYSTEM_KERNEL_DEBUGGER_INFORMATION_EX
    SYSTEM_KERNEL_DEBUGGER_INFORMATION_EX;
typedef _SYSTEM_KERNEL_DEBUGGER_INFORMATION_EX* PSYSTEM_KERNEL_DEBUGGER_INFORMATION_EX;
typedef _SYSTEM_ELAM_CERTIFICATE_INFORMATION
    SYSTEM_ELAM_CERTIFICATE_INFORMATION;
typedef _SYSTEM_ELAM_CERTIFICATE_INFORMATION* PSYSTEM_ELAM_CERTIFICATE_INFORMATION;
typedef _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2
    OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2;
typedef _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2* POFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2;
typedef _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V1
    OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V1;
typedef _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V1* POFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V1;
typedef _SYSTEM_PROCESSOR_FEATURES_INFORMATION
    SYSTEM_PROCESSOR_FEATURES_INFORMATION;
typedef _SYSTEM_PROCESSOR_FEATURES_INFORMATION* PSYSTEM_PROCESSOR_FEATURES_INFORMATION;
typedef _SYSTEM_EDID_INFORMATION SYSTEM_EDID_INFORMATION;
typedef _SYSTEM_EDID_INFORMATION* PSYSTEM_EDID_INFORMATION;
typedef _SYSTEM_MANUFACTURING_INFORMATION SYSTEM_MANUFACTURING_INFORMATION;
typedef _SYSTEM_MANUFACTURING_INFORMATION* PSYSTEM_MANUFACTURING_INFORMATION;
typedef _SYSTEM_ENERGY_ESTIMATION_CONFIG_INFORMATION
    SYSTEM_ENERGY_ESTIMATION_CONFIG_INFORMATION;
typedef _SYSTEM_ENERGY_ESTIMATION_CONFIG_INFORMATION* PSYSTEM_ENERGY_ESTIMATION_CONFIG_INFORMATION;
typedef _HV_DETAILS HV_DETAILS;
typedef _HV_DETAILS* PHV_DETAILS;
typedef _SYSTEM_HYPERVISOR_DETAIL_INFORMATION
    SYSTEM_HYPERVISOR_DETAIL_INFORMATION;
typedef _SYSTEM_HYPERVISOR_DETAIL_INFORMATION* PSYSTEM_HYPERVISOR_DETAIL_INFORMATION;
typedef _SYSTEM_PROCESSOR_CYCLE_STATS_INFORMATION
    SYSTEM_PROCESSOR_CYCLE_STATS_INFORMATION;
typedef _SYSTEM_PROCESSOR_CYCLE_STATS_INFORMATION* PSYSTEM_PROCESSOR_CYCLE_STATS_INFORMATION;
typedef _SYSTEM_TPM_INFORMATION SYSTEM_TPM_INFORMATION;
typedef _SYSTEM_TPM_INFORMATION* PSYSTEM_TPM_INFORMATION;
typedef _SYSTEM_VSM_PROTECTION_INFORMATION SYSTEM_VSM_PROTECTION_INFORMATION;
typedef _SYSTEM_VSM_PROTECTION_INFORMATION* PSYSTEM_VSM_PROTECTION_INFORMATION;
typedef _SYSTEM_KERNEL_DEBUGGER_FLAGS SYSTEM_KERNEL_DEBUGGER_FLAGS;
typedef _FILE_STANDARD_INFORMATION* PFILE_STANDARD_INFORMATION;
typedef _SYSTEM_KERNEL_DEBUGGER_FLAGS* PSYSTEM_KERNEL_DEBUGGER_FLAGS;
typedef _ETW_CLOCK_TIME_UPDATE ETW_CLOCK_TIME_UPDATE;
typedef _SYSTEM_CODEINTEGRITYPOLICY_INFORMATION
    SYSTEM_CODEINTEGRITYPOLICY_INFORMATION;
typedef _ALPC_MESSAGE_INFORMATION_CLASS ALPC_MESSAGE_INFORMATION_CLASS;
typedef _SYSTEM_CODEINTEGRITYPOLICY_INFORMATION* PSYSTEM_CODEINTEGRITYPOLICY_INFORMATION;
typedef _ASSEMBLY_STORAGE_MAP* PASSEMBLY_STORAGE_MAP;
typedef _SYSTEM_ISOLATED_USER_MODE_INFORMATION
    SYSTEM_ISOLATED_USER_MODE_INFORMATION;
typedef _TELEMETRY_COVERAGE_HEADER* PTELEMETRY_COVERAGE_HEADER;
typedef _SYSTEM_ISOLATED_USER_MODE_INFORMATION* PSYSTEM_ISOLATED_USER_MODE_INFORMATION;
typedef _USER_ALLOWED_TO_DELEGATE_TO_LIST USER_ALLOWED_TO_DELEGATE_TO_LIST;
typedef _USER_INTERNAL5_INFORMATION_NEW USER_INTERNAL5_INFORMATION_NEW;
typedef _SYSTEM_SINGLE_MODULE_INFORMATION SYSTEM_SINGLE_MODULE_INFORMATION;
typedef _SYSTEM_SINGLE_MODULE_INFORMATION* PSYSTEM_SINGLE_MODULE_INFORMATION;
typedef _PEB* PPEB;
typedef _FILE_EA_INFORMATION* PFILE_EA_INFORMATION;
typedef _SYSTEM_INTERRUPT_CPU_SET_INFORMATION
    SYSTEM_INTERRUPT_CPU_SET_INFORMATION;
typedef _PF_TRACE_LIMITS PF_TRACE_LIMITS;
typedef _SYSTEM_INTERRUPT_CPU_SET_INFORMATION* PSYSTEM_INTERRUPT_CPU_SET_INFORMATION;
typedef _FILE_INTERNAL_INFORMATION* PFILE_INTERNAL_INFORMATION;
typedef _SYSTEM_SECUREBOOT_POLICY_FULL_INFORMATION
    SYSTEM_SECUREBOOT_POLICY_FULL_INFORMATION;
typedef _SYSTEM_SECUREBOOT_POLICY_FULL_INFORMATION* PSYSTEM_SECUREBOOT_POLICY_FULL_INFORMATION;
typedef _KAFFINITY_EX KAFFINITY_EX;
typedef _KAFFINITY_EX* PKAFFINITY_EX;
typedef _SYSTEM_ROOT_SILO_INFORMATION SYSTEM_ROOT_SILO_INFORMATION;
typedef _SYSTEM_ROOT_SILO_INFORMATION* PSYSTEM_ROOT_SILO_INFORMATION;
typedef _SYSTEM_CPU_SET_TAG_INFORMATION SYSTEM_CPU_SET_TAG_INFORMATION;
typedef _SYSTEM_CPU_SET_TAG_INFORMATION* PSYSTEM_CPU_SET_TAG_INFORMATION;
typedef _SYSTEM_SECURE_KERNEL_HYPERGUARD_PROFILE_INFORMATION
    SYSTEM_SECURE_KERNEL_HYPERGUARD_PROFILE_INFORMATION;
typedef _SYSTEM_SECURE_KERNEL_HYPERGUARD_PROFILE_INFORMATION* PSYSTEM_SECURE_KERNEL_HYPERGUARD_PROFILE_INFORMATION;
typedef _SYSTEM_SECUREBOOT_PLATFORM_MANIFEST_INFORMATION
    SYSTEM_SECUREBOOT_PLATFORM_MANIFEST_INFORMATION;
typedef _SYSTEM_SECUREBOOT_PLATFORM_MANIFEST_INFORMATION* PSYSTEM_SECUREBOOT_PLATFORM_MANIFEST_INFORMATION;
typedef _SYSTEM_INTERRUPT_STEERING_INFORMATION_INPUT
    SYSTEM_INTERRUPT_STEERING_INFORMATION_INPUT;
typedef _SYSTEM_INTERRUPT_STEERING_INFORMATION_INPUT* PSYSTEM_INTERRUPT_STEERING_INFORMATION_INPUT;
typedef _SYSTEM_INTERRUPT_STEERING_INFORMATION_OUTPUT
    SYSTEM_INTERRUPT_STEERING_INFORMATION_OUTPUT;
typedef _SYSTEM_INTERRUPT_STEERING_INFORMATION_OUTPUT* PSYSTEM_INTERRUPT_STEERING_INFORMATION_OUTPUT;
typedef _SYSTEM_MEMORY_USAGE_INFORMATION SYSTEM_MEMORY_USAGE_INFORMATION;
typedef _SYSTEM_MEMORY_USAGE_INFORMATION* PSYSTEM_MEMORY_USAGE_INFORMATION;
typedef _SYSTEM_CODEINTEGRITY_CERTIFICATE_INFORMATION
    SYSTEM_CODEINTEGRITY_CERTIFICATE_INFORMATION;
typedef _SYSTEM_CODEINTEGRITY_CERTIFICATE_INFORMATION* PSYSTEM_CODEINTEGRITY_CERTIFICATE_INFORMATION;
typedef _SYSTEM_PHYSICAL_MEMORY_INFORMATION SYSTEM_PHYSICAL_MEMORY_INFORMATION;
typedef _SYSTEM_PHYSICAL_MEMORY_INFORMATION* PSYSTEM_PHYSICAL_MEMORY_INFORMATION;
typedef _SYSTEM_ACTIVITY_MODERATION_STATE SYSTEM_ACTIVITY_MODERATION_STATE;
typedef _SYSTEM_ACTIVITY_MODERATION_EXE_STATE
    SYSTEM_ACTIVITY_MODERATION_EXE_STATE;
typedef _SYSTEM_ACTIVITY_MODERATION_EXE_STATE* PSYSTEM_ACTIVITY_MODERATION_EXE_STATE;
typedef _WIN32K_SYSCALL_FILTER WIN32K_SYSCALL_FILTER;
typedef _SYSTEM_ACTIVITY_MODERATION_APP_TYPE
    SYSTEM_ACTIVITY_MODERATION_APP_TYPE;
typedef _POWER_THROTTLING_PROCESS_STATE* PPOWER_THROTTLING_PROCESS_STATE;
typedef _SYSTEM_ACTIVITY_MODERATION_INFO SYSTEM_ACTIVITY_MODERATION_INFO;
typedef _FILE_FULL_EA_INFORMATION* PFILE_FULL_EA_INFORMATION;
typedef _SYSTEM_ACTIVITY_MODERATION_INFO* PSYSTEM_ACTIVITY_MODERATION_INFO;
typedef _LSA_TRUST_INFORMATION LSA_TRUST_INFORMATION;
typedef _SYSTEM_ACTIVITY_MODERATION_APP_SETTINGS
    SYSTEM_ACTIVITY_MODERATION_APP_SETTINGS;
typedef _MEMORY_REGION_INFORMATION MEMORY_REGION_INFORMATION;
typedef _SYSTEM_ACTIVITY_MODERATION_APP_SETTINGS* PSYSTEM_ACTIVITY_MODERATION_APP_SETTINGS;
typedef _TRUSTED_PASSWORD_INFO TRUSTED_PASSWORD_INFO;
typedef _SYSTEM_ACTIVITY_MODERATION_USER_SETTINGS
    SYSTEM_ACTIVITY_MODERATION_USER_SETTINGS;
typedef _PROCESS_ENERGY_TRACKING_STATE PROCESS_ENERGY_TRACKING_STATE;
typedef _JOBOBJECT_WAKE_FILTER* PJOBOBJECT_WAKE_FILTER;
typedef _SYSTEM_ACTIVITY_MODERATION_USER_SETTINGS* PSYSTEM_ACTIVITY_MODERATION_USER_SETTINGS;
typedef _PROCESS_WAKE_INFORMATION* PPROCESS_WAKE_INFORMATION;
typedef _SYSTEM_CODEINTEGRITY_UNLOCK_INFORMATION
    SYSTEM_CODEINTEGRITY_UNLOCK_INFORMATION;
typedef _SYSTEM_CODEINTEGRITY_UNLOCK_INFORMATION* PSYSTEM_CODEINTEGRITY_UNLOCK_INFORMATION;
typedef _MEMORY_SHARED_COMMIT_INFORMATION MEMORY_SHARED_COMMIT_INFORMATION;
typedef _MEMORY_WORKING_SET_EX_BLOCK MEMORY_WORKING_SET_EX_BLOCK;
typedef _SYSTEM_FLUSH_INFORMATION SYSTEM_FLUSH_INFORMATION;
typedef _SYSTEM_FLUSH_INFORMATION* PSYSTEM_FLUSH_INFORMATION;
typedef _SYSTEM_WRITE_CONSTRAINT_INFORMATION
    SYSTEM_WRITE_CONSTRAINT_INFORMATION;
typedef _SYSTEM_WRITE_CONSTRAINT_INFORMATION* PSYSTEM_WRITE_CONSTRAINT_INFORMATION;
typedef _SYSTEM_KERNEL_VA_SHADOW_INFORMATION
    SYSTEM_KERNEL_VA_SHADOW_INFORMATION;
typedef _SYSTEM_KERNEL_VA_SHADOW_INFORMATION* PSYSTEM_KERNEL_VA_SHADOW_INFORMATION;
typedef _SYSTEM_CODEINTEGRITYVERIFICATION_INFORMATION
    SYSTEM_CODEINTEGRITYVERIFICATION_INFORMATION;
typedef _SYSTEM_CODEINTEGRITYVERIFICATION_INFORMATION* PSYSTEM_CODEINTEGRITYVERIFICATION_INFORMATION;
typedef _SYSTEM_HYPERVISOR_USER_SHARED_DATA SYSTEM_HYPERVISOR_USER_SHARED_DATA;
typedef _SYSTEM_HYPERVISOR_USER_SHARED_DATA* PSYSTEM_HYPERVISOR_USER_SHARED_DATA;
typedef _SYSTEM_HYPERVISOR_SHARED_PAGE_INFORMATION
    SYSTEM_HYPERVISOR_SHARED_PAGE_INFORMATION;
typedef _SYSTEM_HYPERVISOR_SHARED_PAGE_INFORMATION* PSYSTEM_HYPERVISOR_SHARED_PAGE_INFORMATION;
typedef _SYSTEM_FIRMWARE_PARTITION_INFORMATION
    SYSTEM_FIRMWARE_PARTITION_INFORMATION;
typedef _SYSTEM_FIRMWARE_PARTITION_INFORMATION* PSYSTEM_FIRMWARE_PARTITION_INFORMATION;
typedef _SYSTEM_SPECULATION_CONTROL_INFORMATION
    SYSTEM_SPECULATION_CONTROL_INFORMATION;
typedef _SYSTEM_SPECULATION_CONTROL_INFORMATION* PSYSTEM_SPECULATION_CONTROL_INFORMATION;
typedef _SYSTEM_DMA_GUARD_POLICY_INFORMATION
    SYSTEM_DMA_GUARD_POLICY_INFORMATION;
typedef _SYSTEM_DMA_GUARD_POLICY_INFORMATION* PSYSTEM_DMA_GUARD_POLICY_INFORMATION;
typedef _SYSTEM_ENCLAVE_LAUNCH_CONTROL_INFORMATION
    SYSTEM_ENCLAVE_LAUNCH_CONTROL_INFORMATION;
typedef _SYSTEM_ENCLAVE_LAUNCH_CONTROL_INFORMATION* PSYSTEM_ENCLAVE_LAUNCH_CONTROL_INFORMATION;
typedef _SYSTEM_WORKLOAD_ALLOWED_CPU_SET_INFORMATION
    SYSTEM_WORKLOAD_ALLOWED_CPU_SET_INFORMATION;
typedef _SYSTEM_WORKLOAD_ALLOWED_CPU_SET_INFORMATION* PSYSTEM_WORKLOAD_ALLOWED_CPU_SET_INFORMATION;
typedef _SYSTEM_SECURITY_MODEL_INFORMATION SYSTEM_SECURITY_MODEL_INFORMATION;
typedef _SYSTEM_SECURITY_MODEL_INFORMATION* PSYSTEM_SECURITY_MODEL_INFORMATION;
typedef _SECURE_SPECULATION_CONTROL_INFORMATION
    SECURE_SPECULATION_CONTROL_INFORMATION;
typedef _SECURE_SPECULATION_CONTROL_INFORMATION* PSECURE_SPECULATION_CONTROL_INFORMATION;
typedef _SYSTEM_FIRMWARE_RAMDISK_INFORMATION
    SYSTEM_FIRMWARE_RAMDISK_INFORMATION;
typedef _SYSTEM_FIRMWARE_RAMDISK_INFORMATION* PSYSTEM_FIRMWARE_RAMDISK_INFORMATION;
typedef _SYSTEM_SHADOW_STACK_INFORMATION SYSTEM_SHADOW_STACK_INFORMATION;
typedef _SYSTEM_SHADOW_STACK_INFORMATION* PSYSTEM_SHADOW_STACK_INFORMATION;
typedef _SYSTEM_BUILD_VERSION_INFORMATION_FLAGS
    SYSTEM_BUILD_VERSION_INFORMATION_FLAGS;
typedef _SYSTEM_BUILD_VERSION_INFORMATION_FLAGS* PSYSTEM_BUILD_VERSION_INFORMATION_FLAGS;
typedef _SYSTEM_BUILD_VERSION_INFORMATION SYSTEM_BUILD_VERSION_INFORMATION;
typedef _SYSTEM_BUILD_VERSION_INFORMATION* PSYSTEM_BUILD_VERSION_INFORMATION;
typedef _SYSTEM_POOL_LIMIT_MEM_INFO SYSTEM_POOL_LIMIT_MEM_INFO;
typedef _SYSTEM_POOL_LIMIT_MEM_INFO* PSYSTEM_POOL_LIMIT_MEM_INFO;
typedef _SYSTEM_POOL_LIMIT_INFO SYSTEM_POOL_LIMIT_INFO;
typedef _SYSTEM_POOL_LIMIT_INFO* PSYSTEM_POOL_LIMIT_INFO;
typedef _SYSTEM_POOL_LIMIT_INFORMATION SYSTEM_POOL_LIMIT_INFORMATION;
typedef _SYSTEM_POOL_LIMIT_INFORMATION* PSYSTEM_POOL_LIMIT_INFORMATION;
typedef _HV_MINROOT_NUMA_LPS HV_MINROOT_NUMA_LPS;
typedef _HV_MINROOT_NUMA_LPS* PHV_MINROOT_NUMA_LPS;
typedef _SYSTEM_XFG_FAILURE_INFORMATION SYSTEM_XFG_FAILURE_INFORMATION;
typedef _SYSTEM_XFG_FAILURE_INFORMATION* PSYSTEM_XFG_FAILURE_INFORMATION;
typedef _BCD_OBJECT_DESCRIPTION BCD_OBJECT_DESCRIPTION;
typedef _SYSTEM_IOMMU_STATE SYSTEM_IOMMU_STATE;
typedef _MESSAGE_TRACE MESSAGE_TRACE;
typedef _PROCESS_TLS_INFORMATION_TYPE PROCESS_TLS_INFORMATION_TYPE;
typedef _SYSTEM_IOMMU_STATE_INFORMATION SYSTEM_IOMMU_STATE_INFORMATION;
typedef _BCD_OBJECT* PBCD_OBJECT;
typedef _SYSTEM_IOMMU_STATE_INFORMATION* PSYSTEM_IOMMU_STATE_INFORMATION;
typedef _THREAD_TLS_INFORMATION THREAD_TLS_INFORMATION;
typedef UNICODE_STRING* PLSA_UNICODE_STRING;
typedef _SYSTEM_HYPERVISOR_MINROOT_INFORMATION
    SYSTEM_HYPERVISOR_MINROOT_INFORMATION;
typedef _SYSTEM_HYPERVISOR_MINROOT_INFORMATION* PSYSTEM_HYPERVISOR_MINROOT_INFORMATION;
typedef _PROCESS_STACK_ALLOCATION_INFORMATION* PPROCESS_STACK_ALLOCATION_INFORMATION;
typedef PVOID* PLSA_CLIENT_REQUEST;
typedef _SECURITY_LOGON_TYPE SECURITY_LOGON_TYPE;
typedef _LSA_TOKEN_INFORMATION_TYPE* PLSA_TOKEN_INFORMATION_TYPE;
typedef _SYSTEM_HYPERVISOR_BOOT_PAGES_INFORMATION
    SYSTEM_HYPERVISOR_BOOT_PAGES_INFORMATION;
typedef _SYSTEM_HYPERVISOR_BOOT_PAGES_INFORMATION* PSYSTEM_HYPERVISOR_BOOT_PAGES_INFORMATION;
typedef _BCD_ELEMENT_DATATYPE_CLASS BCD_ELEMENT_DATATYPE_CLASS;
typedef NTSTATUS ( *PLSA_AP_CALL_PACKAGE_PASSTHROUGH )( PLSA_CLIENT_REQUEST, PVOID, PVOID, ULONG, PVOID*, PULONG, PNTSTATUS );
typedef _FILE_ID_EXTD_DIR_INFORMATION* PFILE_ID_EXTD_DIR_INFORMATION;
typedef _FILE_ID_INFORMATION FILE_ID_INFORMATION;
typedef _SYSTEM_POINTER_AUTH_INFORMATION SYSTEM_POINTER_AUTH_INFORMATION;
typedef _SYSTEM_POINTER_AUTH_INFORMATION* PSYSTEM_POINTER_AUTH_INFORMATION;
typedef _BCD_ELEMENT_DATATYPE_FORMAT BCD_ELEMENT_DATATYPE_FORMAT;
typedef _SYSTEM_ORIGINAL_IMAGE_FEATURE_INFORMATION_INPUT
    SYSTEM_ORIGINAL_IMAGE_FEATURE_INFORMATION_INPUT;
typedef _SYSTEM_ORIGINAL_IMAGE_FEATURE_INFORMATION_INPUT* PSYSTEM_ORIGINAL_IMAGE_FEATURE_INFORMATION_INPUT;
typedef _SYSTEM_ORIGINAL_IMAGE_FEATURE_INFORMATION_OUTPUT
    SYSTEM_ORIGINAL_IMAGE_FEATURE_INFORMATION_OUTPUT;
typedef _SYSTEM_ORIGINAL_IMAGE_FEATURE_INFORMATION_OUTPUT* PSYSTEM_ORIGINAL_IMAGE_FEATURE_INFORMATION_OUTPUT;
typedef _SYSTEM_MEMORY_NUMA_INFORMATION_INPUT
    SYSTEM_MEMORY_NUMA_INFORMATION_INPUT;
typedef _SYSTEM_MEMORY_NUMA_INFORMATION_INPUT* PSYSTEM_MEMORY_NUMA_INFORMATION_INPUT;
typedef _SYSTEM_MEMORY_NUMA_INFORMATION_OUTPUT
    SYSTEM_MEMORY_NUMA_INFORMATION_OUTPUT;
typedef _SYSTEM_MEMORY_NUMA_INFORMATION_OUTPUT* PSYSTEM_MEMORY_NUMA_INFORMATION_OUTPUT;
typedef _SYSTEM_MEMORY_NUMA_PERFORMANCE_QUERY_DATA_TYPES
    SYSTEM_MEMORY_NUMA_PERFORMANCE_QUERY_DATA_TYPES;
typedef _SYSTEM_MEMORY_NUMA_PERFORMANCE_INFORMATION_INPUT
    SYSTEM_MEMORY_NUMA_PERFORMANCE_INFORMATION_INPUT;
typedef _SYSTEM_MEMORY_NUMA_PERFORMANCE_INFORMATION_INPUT* PSYSTEM_MEMORY_NUMA_PERFORMANCE_INFORMATION_INPUT;
typedef _SYSTEM_MEMORY_NUMA_PERFORMANCE_ENTRY
    SYSTEM_MEMORY_NUMA_PERFORMANCE_ENTRY;
typedef _SYSTEM_MEMORY_NUMA_PERFORMANCE_ENTRY* PSYSTEM_MEMORY_NUMA_PERFORMANCE_ENTRY;
typedef _SYSTEM_MEMORY_NUMA_PERFORMANCE_INFORMATION_OUTPUT
    SYSTEM_MEMORY_NUMA_PERFORMANCE_INFORMATION_OUTPUT;
typedef _SYSTEM_MEMORY_NUMA_PERFORMANCE_INFORMATION_OUTPUT* PSYSTEM_MEMORY_NUMA_PERFORMANCE_INFORMATION_OUTPUT;
typedef _SYSTEM_OSL_RAMDISK_ENTRY SYSTEM_OSL_RAMDISK_ENTRY;
typedef _SYSTEM_OSL_RAMDISK_ENTRY* PSYSTEM_OSL_RAMDISK_ENTRY;
typedef _SYSTEM_TRUSTEDAPPS_RUNTIME_INFORMATION
    SYSTEM_TRUSTEDAPPS_RUNTIME_INFORMATION;
typedef _SYSTEM_TRUSTEDAPPS_RUNTIME_INFORMATION* PSYSTEM_TRUSTEDAPPS_RUNTIME_INFORMATION;
typedef _SYSTEM_OSL_RAMDISK_INFORMATION SYSTEM_OSL_RAMDISK_INFORMATION;
typedef _SYSTEM_OSL_RAMDISK_INFORMATION* PSYSTEM_OSL_RAMDISK_INFORMATION;
typedef _SYSDBG_COMMAND SYSDBG_COMMAND;
typedef _SYSDBG_COMMAND* PSYSDBG_COMMAND;
typedef _SYSDBG_VIRTUAL SYSDBG_VIRTUAL;
typedef _SE_SAFE_OPEN_PROMPT_RESULTS* PSE_SAFE_OPEN_PROMPT_RESULTS;
typedef _ISOLATION_MANIFEST_PROPERTIES ISOLATION_MANIFEST_PROPERTIES;
typedef _SYSDBG_VIRTUAL* PSYSDBG_VIRTUAL;
typedef _DOMAIN_GENERAL_INFORMATION2 DOMAIN_GENERAL_INFORMATION2;
typedef _SYSDBG_PHYSICAL SYSDBG_PHYSICAL;
typedef _SYSDBG_PHYSICAL* PSYSDBG_PHYSICAL;
typedef _SYSDBG_CONTROL_SPACE SYSDBG_CONTROL_SPACE;
typedef _PS_ATTRIBUTE_LIST* PPS_ATTRIBUTE_LIST;
typedef _SYSDBG_CONTROL_SPACE* PSYSDBG_CONTROL_SPACE;
typedef _PS_ATTRIBUTE* PPS_ATTRIBUTE;
typedef _OBJECT_TYPE_INFORMATION* POBJECT_TYPE_INFORMATION;
typedef _SYSDBG_IO_SPACE SYSDBG_IO_SPACE;
typedef _MOUNTMGR_SET_AUTO_MOUNT MOUNTMGR_SET_AUTO_MOUNT;
typedef _SYSDBG_IO_SPACE* PSYSDBG_IO_SPACE;
typedef _OBJECT_DIRECTORY_INFORMATION* POBJECT_DIRECTORY_INFORMATION;
typedef _SYSDBG_MSR SYSDBG_MSR;
typedef _OBJECT_HANDLE_FLAG_INFORMATION OBJECT_HANDLE_FLAG_INFORMATION;
typedef _SYSDBG_MSR* PSYSDBG_MSR;
typedef _SYSDBG_BUS_DATA SYSDBG_BUS_DATA;
typedef _SYSDBG_BUS_DATA* PSYSDBG_BUS_DATA;
typedef _SYSDBG_TRIAGE_DUMP SYSDBG_TRIAGE_DUMP;
typedef _SYSDBG_TRIAGE_DUMP* PSYSDBG_TRIAGE_DUMP;
typedef _SYSDBG_LIVEDUMP_CONTROL_FLAGS SYSDBG_LIVEDUMP_CONTROL_FLAGS;
typedef _SYSDBG_LIVEDUMP_CONTROL_FLAGS* PSYSDBG_LIVEDUMP_CONTROL_FLAGS;
typedef _SYSDBG_LIVEDUMP_CONTROL_ADDPAGES SYSDBG_LIVEDUMP_CONTROL_ADDPAGES;
typedef _SYSDBG_LIVEDUMP_CONTROL_ADDPAGES* PSYSDBG_LIVEDUMP_CONTROL_ADDPAGES;
typedef _SYSDBG_LIVEDUMP_SELECTIVE_CONTROL SYSDBG_LIVEDUMP_SELECTIVE_CONTROL;
typedef _SYSDBG_LIVEDUMP_SELECTIVE_CONTROL* PSYSDBG_LIVEDUMP_SELECTIVE_CONTROL;
typedef _SYSDBG_LIVEDUMP_CONTROL_V1 SYSDBG_LIVEDUMP_CONTROL_V1;
typedef _SYSDBG_LIVEDUMP_CONTROL_V1* PSYSDBG_LIVEDUMP_CONTROL_V1;
typedef _SYSDBG_LIVEDUMP_CONTROL SYSDBG_LIVEDUMP_CONTROL;
typedef _SYSDBG_LIVEDUMP_CONTROL* PSYSDBG_LIVEDUMP_CONTROL;
typedef _SYSDBG_KD_PULL_REMOTE_FILE SYSDBG_KD_PULL_REMOTE_FILE;
typedef _SYSDBG_KD_PULL_REMOTE_FILE* PSYSDBG_KD_PULL_REMOTE_FILE;
typedef _HARDERROR_RESPONSE_OPTION HARDERROR_RESPONSE_OPTION;
typedef _HARDERROR_RESPONSE HARDERROR_RESPONSE;
typedef _ALTERNATIVE_ARCHITECTURE_TYPE ALTERNATIVE_ARCHITECTURE_TYPE;
typedef _KUSER_SHARED_DATA KUSER_SHARED_DATA;
typedef _KUSER_SHARED_DATA* PKUSER_SHARED_DATA;
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef _PROCESS_NETWORK_COUNTERS PROCESS_NETWORK_COUNTERS;
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef _PROCESS_MEMBERSHIP_INFORMATION* PPROCESS_MEMBERSHIP_INFORMATION;
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef _FILE_FS_FULL_SIZE_INFORMATION_EX* PFILE_FS_FULL_SIZE_INFORMATION_EX;
typedef char __C_ASSERT__[1];
typedef _FILE_FS_METADATA_SIZE_INFORMATION FILE_FS_METADATA_SIZE_INFORMATION;
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef _LSA_FOREST_TRUST_RECORD2* PLSA_FOREST_TRUST_RECORD2;
typedef char __C_ASSERT__[1];
typedef _RTL_KSCP_ROUTINES RTL_KSCP_ROUTINES;
typedef char __C_ASSERT__[1];
typedef _MEMORY_IMAGE_EXTENSION_INFORMATION MEMORY_IMAGE_EXTENSION_INFORMATION;
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef _THREAD_BASIC_INFORMATION* PTHREAD_BASIC_INFORMATION;
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef _FILEOFFSET_INFORMATION FILEOFFSET_INFORMATION;
typedef char __C_ASSERT__[1];
typedef _LSA_FOREST_TRUST_COLLISION_INFORMATION
    LSA_FOREST_TRUST_COLLISION_INFORMATION;
typedef char __C_ASSERT__[1];
typedef _THREAD_LAST_SYSCALL_INFORMATION THREAD_LAST_SYSCALL_INFORMATION;
typedef char __C_ASSERT__[1];
typedef _IO_COMPLETION_BASIC_INFORMATION IO_COMPLETION_BASIC_INFORMATION;
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef _ATOM_INFORMATION_CLASS ATOM_INFORMATION_CLASS;
typedef _ATOM_BASIC_INFORMATION ATOM_BASIC_INFORMATION;
typedef _ATOM_BASIC_INFORMATION* PATOM_BASIC_INFORMATION;
typedef _ATOM_TABLE_INFORMATION ATOM_TABLE_INFORMATION;
typedef _ATOM_TABLE_INFORMATION* PATOM_TABLE_INFORMATION;
typedef _SHUTDOWN_ACTION SHUTDOWN_ACTION;
typedef _BCD_MESSAGE_TYPE BCD_MESSAGE_TYPE;
typedef void ( *BCD_MESSAGE_CALLBACK )( BCD_MESSAGE_TYPE, PCWSTR );
typedef _BCD_IMPORT_FLAGS BCD_IMPORT_FLAGS;
typedef _BCD_OPEN_FLAGS BCD_OPEN_FLAGS;
typedef _BCD_OBJECT_TYPE BCD_OBJECT_TYPE;
typedef _BCD_APPLICATION_OBJECT_TYPE BCD_APPLICATION_OBJECT_TYPE;
typedef _BCD_APPLICATION_IMAGE_TYPE BCD_APPLICATION_IMAGE_TYPE;
typedef _BCD_INHERITED_CLASS_TYPE BCD_INHERITED_CLASS_TYPE;
typedef _BCD_OBJECT_DATATYPE BCD_OBJECT_DATATYPE;
typedef _DBGKM_LOAD_DLL* PDBGKM_LOAD_DLL;
typedef _BCD_OBJECT_DATATYPE* PBCD_OBJECT_DATATYPE;
typedef _BCD_OBJECT_DESCRIPTION* PBCD_OBJECT_DESCRIPTION;
typedef _ETW_UMS_EVENT_DIRECTED_SWITCH_START* PETW_UMS_EVENT_DIRECTED_SWITCH_START;
typedef _BCD_OBJECT BCD_OBJECT;
typedef _BCD_COPY_FLAGS BCD_COPY_FLAGS;
typedef _ALPC_COMPLETION_LIST_HEADER ALPC_COMPLETION_LIST_HEADER;
typedef _DBGUI_CREATE_THREAD* PDBGUI_CREATE_THREAD;
typedef _BCD_ELEMENT_DEVICE_TYPE BCD_ELEMENT_DEVICE_TYPE;
typedef _BCD_ELEMENT_DATATYPE BCD_ELEMENT_DATATYPE;
typedef _BCD_ELEMENT_DATATYPE* PBCD_ELEMENT_DATATYPE;
typedef _BCD_ELEMENT_DEVICE_QUALIFIED_PARTITION
    BCD_ELEMENT_DEVICE_QUALIFIED_PARTITION;
typedef _BCD_ELEMENT_DEVICE_QUALIFIED_PARTITION* PBCD_ELEMENT_DEVICE_QUALIFIED_PARTITION;
typedef _BCD_ELEMENT_DEVICE BCD_ELEMENT_DEVICE;
typedef _BCD_ELEMENT_DEVICE* PBCD_ELEMENT_DEVICE;
typedef _BCD_ELEMENT_STRING BCD_ELEMENT_STRING;
typedef _BCD_ELEMENT_STRING* PBCD_ELEMENT_STRING;
typedef _BCD_ELEMENT_OBJECT BCD_ELEMENT_OBJECT;
typedef _BCD_ELEMENT_OBJECT* PBCD_ELEMENT_OBJECT;
typedef _BCD_ELEMENT_OBJECT_LIST BCD_ELEMENT_OBJECT_LIST;
typedef _BCD_ELEMENT_OBJECT_LIST* PBCD_ELEMENT_OBJECT_LIST;
typedef _BCD_ELEMENT_INTEGER BCD_ELEMENT_INTEGER;
typedef _BCD_ELEMENT_INTEGER* PBCD_ELEMENT_INTEGER;
typedef _BCD_ELEMENT_INTEGER_LIST BCD_ELEMENT_INTEGER_LIST;
typedef _BCD_ELEMENT_INTEGER_LIST* PBCD_ELEMENT_INTEGER_LIST;
typedef _BCD_ELEMENT_BOOLEAN BCD_ELEMENT_BOOLEAN;
typedef _BCD_ELEMENT_BOOLEAN* PBCD_ELEMENT_BOOLEAN;
typedef BCD_ELEMENT_DESCRIPTION BCD_ELEMENT_DESCRIPTION;
typedef BCD_ELEMENT_DESCRIPTION* PBCD_ELEMENT_DESCRIPTION;
typedef _BCD_ELEMENT BCD_ELEMENT;
typedef _BCD_ELEMENT* PBCD_ELEMENT;
typedef _BCD_FLAGS BCD_FLAGS;
typedef _BcdBootMgrElementTypes BcdBootMgrElementTypes;
typedef _BcdLibrary_FirstMegabytePolicy BcdLibrary_FirstMegabytePolicy;
typedef _BcdLibrary_DebuggerType BcdLibrary_DebuggerType;
typedef _BcdLibrary_DebuggerStartPolicy BcdLibrary_DebuggerStartPolicy;
typedef _BcdLibrary_ConfigAccessPolicy BcdLibrary_ConfigAccessPolicy;
typedef _BcdLibrary_UxDisplayMessageType BcdLibrary_UxDisplayMessageType;
typedef BcdLibrary_SafeBoot BcdLibrary_SafeBoot;
typedef _BcdLibrary_BootUxPolicy BcdLibrary_BootUxPolicy;
typedef _BcdLibraryElementTypes BcdLibraryElementTypes;
typedef _BcdTemplateElementTypes BcdTemplateElementTypes;
typedef _BcdOSLoader_NxPolicy BcdOSLoader_NxPolicy;
typedef _BcdOSLoader_PAEPolicy BcdOSLoader_PAEPolicy;
typedef _BcdOSLoader_BootStatusPolicy BcdOSLoaderBootStatusPolicy;
typedef _BcdOSLoaderElementTypes BcdOSLoaderElementTypes;
typedef _MEMORY_INFORMATION_CLASS MEMORY_INFORMATION_CLASS;
typedef _MEMORY_WORKING_SET_BLOCK MEMORY_WORKING_SET_BLOCK;
typedef _MEMORY_WORKING_SET_BLOCK* PMEMORY_WORKING_SET_BLOCK;
typedef _MEMORY_WORKING_SET_INFORMATION MEMORY_WORKING_SET_INFORMATION;
typedef _DOMAIN_DISPLAY_GROUP DOMAIN_DISPLAY_GROUP;
typedef _MEMORY_WORKING_SET_INFORMATION* PMEMORY_WORKING_SET_INFORMATION;
typedef _MUP_FSCTL_UNC_CACHE_ENTRY* PMUP_FSCTL_UNC_CACHE_ENTRY;
typedef _MEMORY_REGION_INFORMATION* PMEMORY_REGION_INFORMATION;
typedef _FLT_ATTACH* PFLT_ATTACH;
typedef _MEMORY_WORKING_SET_EX_LOCATION MEMORY_WORKING_SET_EX_LOCATION;
typedef _ETW_HEAP_EVENT_CREATE ETW_HEAP_EVENT_CREATE;
typedef _ETW_HEAP_EVENT_CONTRACTION ETW_HEAP_EVENT_CONTRACTION;
typedef _MUP_FSCTL_UNC_PROVIDER_ENTRY* PMUP_FSCTL_UNC_PROVIDER_ENTRY;
typedef _MEMORY_WORKING_SET_EX_BLOCK* PMEMORY_WORKING_SET_EX_BLOCK;
typedef _MEMORY_WORKING_SET_EX_INFORMATION MEMORY_WORKING_SET_EX_INFORMATION;
typedef _JOBOBJECT_EXTENDED_LIMIT_INFORMATION_V2* PJOBOBJECT_EXTENDED_LIMIT_INFORMATION_V2;
typedef _MEMORY_WORKING_SET_EX_INFORMATION* PMEMORY_WORKING_SET_EX_INFORMATION;
typedef _MEMORY_SHARED_COMMIT_INFORMATION* PMEMORY_SHARED_COMMIT_INFORMATION;
typedef _MEMORY_IMAGE_INFORMATION MEMORY_IMAGE_INFORMATION;
typedef _MEMORY_IMAGE_INFORMATION* PMEMORY_IMAGE_INFORMATION;
typedef _MEMORY_ENCLAVE_IMAGE_INFORMATION MEMORY_ENCLAVE_IMAGE_INFORMATION;
typedef _MEMORY_ENCLAVE_IMAGE_INFORMATION* PMEMORY_ENCLAVE_IMAGE_INFORMATION;
typedef _MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE
    MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE;
typedef _MEMORY_PHYSICAL_CONTIGUITY_UNIT_INFORMATION
    MEMORY_PHYSICAL_CONTIGUITY_UNIT_INFORMATION;
typedef _MEMORY_PHYSICAL_CONTIGUITY_UNIT_INFORMATION* PMEMORY_PHYSICAL_CONTIGUITY_UNIT_INFORMATION;
typedef _MEMORY_PHYSICAL_CONTIGUITY_INFORMATION
    MEMORY_PHYSICAL_CONTIGUITY_INFORMATION;
typedef _MEMORY_PHYSICAL_CONTIGUITY_INFORMATION* PMEMORY_PHYSICAL_CONTIGUITY_INFORMATION;
typedef _RTL_SCP_CFG_ARM64_HEADER RTL_SCP_CFG_ARM64_HEADER;
typedef _RTL_SCP_CFG_ARM64_HEADER* PRTL_SCP_CFG_ARM64_HEADER;
typedef _RTL_SCP_CFG_PAGE_TYPE RTL_SCP_CFG_PAGE_TYPE;
typedef _RTL_SCP_CFG_COMMON_HEADER RTL_SCP_CFG_COMMON_HEADER;
typedef _RTL_SCP_CFG_COMMON_HEADER* PRTL_SCP_CFG_COMMON_HEADER;
typedef _RTL_SCP_CFG_HEADER RTL_SCP_CFG_HEADER;
typedef _RTL_SCP_CFG_HEADER* PRTL_SCP_CFG_HEADER;
typedef _RTL_SCP_CFG_REGION_BOUNDS RTL_SCP_CFG_REGION_BOUNDS;
typedef _RTL_SCP_CFG_REGION_BOUNDS* PRTL_SCP_CFG_REGION_BOUNDS;
typedef _RTL_SCP_CFG_NTDLL_EXPORTS RTL_SCP_CFG_NTDLL_EXPORTS;
typedef _RTL_SCP_CFG_NTDLL_EXPORTS* PRTL_SCP_CFG_NTDLL_EXPORTS;
typedef _FILE_REPARSE_POINT_INFORMATION FILE_REPARSE_POINT_INFORMATION;
typedef _RTL_SCP_CFG_NTDLL_EXPORTS_ARM64EC RTL_SCP_CFG_NTDLL_EXPORTS_ARM64EC;
typedef _PF_VIRTUAL_QUERY* PPF_VIRTUAL_QUERY;
typedef _PF_REPURPOSED_BY_PREFETCH_INFO* PPF_REPURPOSED_BY_PREFETCH_INFO;
typedef _RTL_SCP_CFG_NTDLL_EXPORTS_ARM64EC* PRTL_SCP_CFG_NTDLL_EXPORTS_ARM64EC;
typedef _PF_PHYSICAL_MEMORY_RANGE_INFO_V2* PPF_PHYSICAL_MEMORY_RANGE_INFO_V2;
typedef _RTL_RETPOLINE_ROUTINES RTL_RETPOLINE_ROUTINES;
typedef _RTL_RETPOLINE_ROUTINES* PRTL_RETPOLINE_ROUTINES;
typedef _PERFINFO_DRIVER_COMPLETIONROUTINE* PPERFINFO_DRIVER_COMPLETIONROUTINE;
typedef _RTL_KSCP_ROUTINES* PRTL_KSCP_ROUTINES;
typedef _FILE_NETWORK_PHYSICAL_NAME_INFORMATION
    FILE_NETWORK_PHYSICAL_NAME_INFORMATION;
typedef _MEMORY_IMAGE_EXTENSION_TYPE MEMORY_IMAGE_EXTENSION_TYPE;
typedef _MEMORY_IMAGE_EXTENSION_INFORMATION* PMEMORY_IMAGE_EXTENSION_INFORMATION;
typedef _MEMORY_FRAME_INFORMATION MEMORY_FRAME_INFORMATION;
typedef _PAGEDIR_INFORMATION PAGEDIR_INFORMATION;
typedef _UNIQUE_PROCESS_INFORMATION UNIQUE_PROCESS_INFORMATION;
typedef _UNIQUE_PROCESS_INFORMATION* PUNIQUE_PROCESS_INFORMATION;
typedef _MMPFN_IDENTITY MMPFN_IDENTITY;
typedef _MMPFN_IDENTITY* PMMPFN_IDENTITY;
typedef _MMPFN_MEMSNAP_INFORMATION MMPFN_MEMSNAP_INFORMATION;
typedef _MMPFN_MEMSNAP_INFORMATION* PMMPFN_MEMSNAP_INFORMATION;
typedef _SECTION_INFORMATION_CLASS SECTION_INFORMATION_CLASS;
typedef _SECTION_BASIC_INFORMATION SECTION_BASIC_INFORMATION;
typedef _SECTION_BASIC_INFORMATION* PSECTION_BASIC_INFORMATION;
typedef _SECTION_IMAGE_INFORMATION SECTION_IMAGE_INFORMATION;
typedef _SECTION_IMAGE_INFORMATION* PSECTION_IMAGE_INFORMATION;
typedef _SECTION_INTERNAL_IMAGE_INFORMATION SECTION_INTERNAL_IMAGE_INFORMATION;
typedef _SECTION_INTERNAL_IMAGE_INFORMATION* PSECTION_INTERNAL_IMAGE_INFORMATION;
typedef _SECTION_INHERIT SECTION_INHERIT;
typedef _IO_STATUS_BLOCK* PIO_STATUS_BLOCK;
typedef _VIRTUAL_MEMORY_INFORMATION_CLASS VIRTUAL_MEMORY_INFORMATION_CLASS;
typedef _MEMORY_RANGE_ENTRY MEMORY_RANGE_ENTRY;
typedef _MEMORY_RANGE_ENTRY* PMEMORY_RANGE_ENTRY;
typedef _MEMORY_PREFETCH_INFORMATION MEMORY_PREFETCH_INFORMATION;
typedef _MEMORY_PREFETCH_INFORMATION* PMEMORY_PREFETCH_INFORMATION;
typedef _CFG_CALL_TARGET_LIST_INFORMATION CFG_CALL_TARGET_LIST_INFORMATION;
typedef _CFG_CALL_TARGET_LIST_INFORMATION* PCFG_CALL_TARGET_LIST_INFORMATION;
typedef _PARTITION_INFORMATION_CLASS PARTITION_INFORMATION_CLASS;
typedef _PARTITION_INFORMATION_CLASS* PPARTITION_INFORMATION_CLASS;
typedef _MEMORY_PARTITION_CONFIGURATION_INFORMATION
    MEMORY_PARTITION_CONFIGURATION_INFORMATION;
typedef _MEMORY_PARTITION_CONFIGURATION_INFORMATION* PMEMORY_PARTITION_CONFIGURATION_INFORMATION;
typedef _MEMORY_PARTITION_TRANSFER_INFORMATION
    MEMORY_PARTITION_TRANSFER_INFORMATION;
typedef _MEMORY_PARTITION_TRANSFER_INFORMATION* PMEMORY_PARTITION_TRANSFER_INFORMATION;
typedef _MEMORY_PARTITION_PAGEFILE_INFORMATION
    MEMORY_PARTITION_PAGEFILE_INFORMATION;
typedef _MEMORY_PARTITION_PAGEFILE_INFORMATION* PMEMORY_PARTITION_PAGEFILE_INFORMATION;
typedef _MEMORY_PARTITION_PAGE_COMBINE_INFORMATION
    MEMORY_PARTITION_PAGE_COMBINE_INFORMATION;
typedef _MEMORY_PARTITION_PAGE_COMBINE_INFORMATION* PMEMORY_PARTITION_PAGE_COMBINE_INFORMATION;
typedef _MEMORY_PARTITION_PAGE_RANGE MEMORY_PARTITION_PAGE_RANGE;
typedef _MEMORY_PARTITION_PAGE_RANGE* PMEMORY_PARTITION_PAGE_RANGE;
typedef _MEMORY_PARTITION_INITIAL_ADD_INFORMATION
    MEMORY_PARTITION_INITIAL_ADD_INFORMATION;
typedef _MEMORY_PARTITION_INITIAL_ADD_INFORMATION* PMEMORY_PARTITION_INITIAL_ADD_INFORMATION;
typedef _MEMORY_PARTITION_MEMORY_EVENTS_INFORMATION
    MEMORY_PARTITION_MEMORY_EVENTS_INFORMATION;
typedef _MEMORY_PARTITION_MEMORY_EVENTS_INFORMATION* PMEMORY_PARTITION_MEMORY_EVENTS_INFORMATION;
typedef _OBJECT_INFORMATION_CLASS OBJECT_INFORMATION_CLASS;
typedef _OBJECT_BASIC_INFORMATION OBJECT_BASIC_INFORMATION;
typedef _ALPC_SERVER_SESSION_INFORMATION ALPC_SERVER_SESSION_INFORMATION;
typedef _OBJECT_BASIC_INFORMATION* POBJECT_BASIC_INFORMATION;
typedef _OBJECT_NAME_INFORMATION OBJECT_NAME_INFORMATION;
typedef _OBJECT_NAME_INFORMATION* POBJECT_NAME_INFORMATION;
typedef _FILE_BASIC_INFORMATION* PFILE_BASIC_INFORMATION;
typedef _OBJECT_TYPE_INFORMATION OBJECT_TYPE_INFORMATION;
typedef _OBJECT_TYPES_INFORMATION OBJECT_TYPES_INFORMATION;
typedef _OBJECT_TYPES_INFORMATION* POBJECT_TYPES_INFORMATION;
typedef _OBJECT_HANDLE_FLAG_INFORMATION* POBJECT_HANDLE_FLAG_INFORMATION;
typedef _PF_BOOT_PHASE_ID PF_BOOT_PHASE_ID;
typedef _OBJECT_DIRECTORY_INFORMATION OBJECT_DIRECTORY_INFORMATION;
typedef _BOUNDARY_ENTRY_TYPE BOUNDARY_ENTRY_TYPE;
typedef _OBJECT_BOUNDARY_ENTRY OBJECT_BOUNDARY_ENTRY;
typedef _OBJECT_BOUNDARY_ENTRY* POBJECT_BOUNDARY_ENTRY;
typedef _OBJECT_BOUNDARY_DESCRIPTOR OBJECT_BOUNDARY_DESCRIPTOR;
typedef _OBJECT_BOUNDARY_DESCRIPTOR* POBJECT_BOUNDARY_DESCRIPTOR;
typedef _SYMBOLIC_LINK_INFO_CLASS SYMBOLIC_LINK_INFO_CLASS;
typedef _ACTIVATION_CONTEXT_DATA ACTIVATION_CONTEXT_DATA;
typedef _ACTIVATION_CONTEXT_DATA* PACTIVATION_CONTEXT_DATA;
typedef _ACTIVATION_CONTEXT_DATA_TOC_HEADER ACTIVATION_CONTEXT_DATA_TOC_HEADER;
typedef _ACTIVATION_CONTEXT_DATA_TOC_HEADER* PACTIVATION_CONTEXT_DATA_TOC_HEADER;
typedef _ACTIVATION_CONTEXT_DATA_TOC_ENTRY ACTIVATION_CONTEXT_DATA_TOC_ENTRY;
typedef _ACTIVATION_CONTEXT_DATA_TOC_ENTRY* PACTIVATION_CONTEXT_DATA_TOC_ENTRY;
typedef _ACTIVATION_CONTEXT_DATA_EXTENDED_TOC_HEADER
    ACTIVATION_CONTEXT_DATA_EXTENDED_TOC_HEADER;
typedef _ACTIVATION_CONTEXT_DATA_EXTENDED_TOC_HEADER* PACTIVATION_CONTEXT_DATA_EXTENDED_TOC_HEADER;
typedef _ACTIVATION_CONTEXT_DATA_EXTENDED_TOC_ENTRY
    ACTIVATION_CONTEXT_DATA_EXTENDED_TOC_ENTRY;
typedef _ACTIVATION_CONTEXT_DATA_EXTENDED_TOC_ENTRY* PACTIVATION_CONTEXT_DATA_EXTENDED_TOC_ENTRY;
typedef _ACTIVATION_CONTEXT_DATA_ASSEMBLY_ROSTER_HEADER
    ACTIVATION_CONTEXT_DATA_ASSEMBLY_ROSTER_HEADER;
typedef _ACTIVATION_CONTEXT_DATA_ASSEMBLY_ROSTER_HEADER* PACTIVATION_CONTEXT_DATA_ASSEMBLY_ROSTER_HEADER;
typedef _ACTIVATION_CONTEXT_DATA_ASSEMBLY_ROSTER_ENTRY
    ACTIVATION_CONTEXT_DATA_ASSEMBLY_ROSTER_ENTRY;
typedef _ACTIVATION_CONTEXT_DATA_ASSEMBLY_ROSTER_ENTRY* PACTIVATION_CONTEXT_DATA_ASSEMBLY_ROSTER_ENTRY;
typedef _ACTIVATION_CONTEXT_STRING_SECTION_HEADER
    ACTIVATION_CONTEXT_STRING_SECTION_HEADER;
typedef _ACTIVATION_CONTEXT_STRING_SECTION_HEADER* PACTIVATION_CONTEXT_STRING_SECTION_HEADER;
typedef _ACTIVATION_CONTEXT_STRING_SECTION_ENTRY
    ACTIVATION_CONTEXT_STRING_SECTION_ENTRY;
typedef _ACTIVATION_CONTEXT_STRING_SECTION_ENTRY* PACTIVATION_CONTEXT_STRING_SECTION_ENTRY;
typedef _TRUSTED_DOMAIN_NAME_INFO TRUSTED_DOMAIN_NAME_INFO;
typedef _ACTIVATION_CONTEXT_STRING_SECTION_HASH_TABLE
    ACTIVATION_CONTEXT_STRING_SECTION_HASH_TABLE;
typedef _FILE_DIRECTORY_NEXT_INFORMATION* PFILE_DIRECTORY_NEXT_INFORMATION;
typedef _ACTIVATION_CONTEXT_STRING_SECTION_HASH_TABLE* PACTIVATION_CONTEXT_STRING_SECTION_HASH_TABLE;
typedef _FILE_OBJECTID_INFORMATION* PFILE_OBJECTID_INFORMATION;
typedef _ACTIVATION_CONTEXT_STRING_SECTION_HASH_BUCKET
    ACTIVATION_CONTEXT_STRING_SECTION_HASH_BUCKET;
typedef _ACTIVATION_CONTEXT_STRING_SECTION_HASH_BUCKET* PACTIVATION_CONTEXT_STRING_SECTION_HASH_BUCKET;
typedef _WMI_JOB_SEND_NOTIFICATION_INFORMATION* PWMI_JOB_SEND_NOTIFICATION_INFORMATION;
typedef _WMI_JOB_SET_QUERY_INFORMATION WMI_JOB_SET_QUERY_INFORMATION;
typedef _ACTIVATION_CONTEXT_GUID_SECTION_HEADER
    ACTIVATION_CONTEXT_GUID_SECTION_HEADER;
typedef _ACTIVATION_CONTEXT_GUID_SECTION_ENTRY
    ACTIVATION_CONTEXT_GUID_SECTION_ENTRY;
typedef _FSINFOCLASS FSINFOCLASS;
typedef _ACTIVATION_CONTEXT_GUID_SECTION_ENTRY* PACTIVATION_CONTEXT_GUID_SECTION_ENTRY;
typedef _FILE_QUOTA_INFORMATION* PFILE_QUOTA_INFORMATION;
typedef _ACTIVATION_CONTEXT_GUID_SECTION_HASH_TABLE* PACTIVATION_CONTEXT_GUID_SECTION_HASH_TABLE;
typedef _ACTIVATION_CONTEXT_GUID_SECTION_HASH_BUCKET
    ACTIVATION_CONTEXT_GUID_SECTION_HASH_BUCKET;
typedef _ACTIVATION_CONTEXT_DATA_ASSEMBLY_INFORMATION
    ACTIVATION_CONTEXT_DATA_ASSEMBLY_INFORMATION;
typedef _ACTIVATION_CONTEXT_DATA_ASSEMBLY_INFORMATION* PACTIVATION_CONTEXT_DATA_ASSEMBLY_INFORMATION;
typedef _ACTIVATION_CONTEXT_DATA_ASSEMBLY_GLOBAL_INFORMATION
    ACTIVATION_CONTEXT_DATA_ASSEMBLY_GLOBAL_INFORMATION;
typedef _ACTIVATION_CONTEXT_DATA_ASSEMBLY_GLOBAL_INFORMATION* PACTIVATION_CONTEXT_DATA_ASSEMBLY_GLOBAL_INFORMATION;
typedef _ACTIVATION_CONTEXT_DATA_DLL_REDIRECTION
    ACTIVATION_CONTEXT_DATA_DLL_REDIRECTION;
typedef _ACTIVATION_CONTEXT_DATA_DLL_REDIRECTION* PACTIVATION_CONTEXT_DATA_DLL_REDIRECTION;
typedef _ACTIVATION_CONTEXT_DATA_DLL_REDIRECTION_PATH_SEGMENT
    ACTIVATION_CONTEXT_DATA_DLL_REDIRECTION_PATH_SEGMENT;
typedef _ACTIVATION_CONTEXT_DATA_DLL_REDIRECTION_PATH_SEGMENT* PACTIVATION_CONTEXT_DATA_DLL_REDIRECTION_PATH_SEGMENT;
typedef _ACTIVATION_CONTEXT_DATA_WINDOW_CLASS_REDIRECTION
    ACTIVATION_CONTEXT_DATA_WINDOW_CLASS_REDIRECTION;
typedef _ACTIVATION_CONTEXT_DATA_WINDOW_CLASS_REDIRECTION* PACTIVATION_CONTEXT_DATA_WINDOW_CLASS_REDIRECTION;
typedef _ACTIVATION_CONTEXT_DATA_COM_SERVER_REDIRECTION
    ACTIVATION_CONTEXT_DATA_COM_SERVER_REDIRECTION;
typedef _ACTIVATION_CONTEXT_DATA_COM_SERVER_REDIRECTION* PACTIVATION_CONTEXT_DATA_COM_SERVER_REDIRECTION;
typedef _ACTIVATION_CONTEXT_DATA_COM_SERVER_REDIRECTION_SHIM
    ACTIVATION_CONTEXT_DATA_COM_SERVER_REDIRECTION_SHIM;
typedef _ACTIVATION_CONTEXT_DATA_COM_SERVER_REDIRECTION_SHIM* PACTIVATION_CONTEXT_DATA_COM_SERVER_REDIRECTION_SHIM;
typedef _ACTIVATION_CONTEXT_DATA_COM_INTERFACE_REDIRECTION
    ACTIVATION_CONTEXT_DATA_COM_INTERFACE_REDIRECTION;
typedef _ACTIVATION_CONTEXT_DATA_COM_INTERFACE_REDIRECTION* PACTIVATION_CONTEXT_DATA_COM_INTERFACE_REDIRECTION;
typedef _ACTIVATION_CONTEXT_DATA_TYPE_LIBRARY_VERSION
    ACTIVATION_CONTEXT_DATA_TYPE_LIBRARY_VERSION;
typedef _ACTIVATION_CONTEXT_DATA_TYPE_LIBRARY_VERSION* PACTIVATION_CONTEXT_DATA_TYPE_LIBRARY_VERSION;
typedef _ACTIVATION_CONTEXT_DATA_COM_TYPE_LIBRARY_REDIRECTION
    ACTIVATION_CONTEXT_DATA_COM_TYPE_LIBRARY_REDIRECTION;
typedef _ACTIVATION_CONTEXT_DATA_COM_TYPE_LIBRARY_REDIRECTION* PACTIVATION_CONTEXT_DATA_COM_TYPE_LIBRARY_REDIRECTION;
typedef _ACTIVATION_CONTEXT_DATA_COM_PROGID_REDIRECTION
    ACTIVATION_CONTEXT_DATA_COM_PROGID_REDIRECTION;
typedef _ACTIVATION_CONTEXT_DATA_COM_PROGID_REDIRECTION* PACTIVATION_CONTEXT_DATA_COM_PROGID_REDIRECTION;
typedef _ACTIVATION_CONTEXT_DATA_CLR_SURROGATE
    ACTIVATION_CONTEXT_DATA_CLR_SURROGATE;
typedef _ACTIVATION_CONTEXT_DATA_CLR_SURROGATE* PACTIVATION_CONTEXT_DATA_CLR_SURROGATE;
typedef _ACTIVATION_CONTEXT_DATA_APPLICATION_SETTINGS
    ACTIVATION_CONTEXT_DATA_APPLICATION_SETTINGS;
typedef _ACTIVATION_CONTEXT_DATA_APPLICATION_SETTINGS* PACTIVATION_CONTEXT_DATA_APPLICATION_SETTINGS;
typedef _COMPATIBILITY_CONTEXT_ELEMENT_LEGACY
    COMPATIBILITY_CONTEXT_ELEMENT_LEGACY;
typedef _COMPATIBILITY_CONTEXT_ELEMENT_LEGACY* PCOMPATIBILITY_CONTEXT_ELEMENT_LEGACY;
typedef _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION_LEGACY
    ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION_LEGACY;
typedef _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION_LEGACY* PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION_LEGACY;
typedef _ASSEMBLY_STORAGE_MAP_ENTRY ASSEMBLY_STORAGE_MAP_ENTRY;
typedef _ASSEMBLY_STORAGE_MAP_ENTRY* PASSEMBLY_STORAGE_MAP_ENTRY;
typedef _ASSEMBLY_STORAGE_MAP ASSEMBLY_STORAGE_MAP;
typedef _ACTIVATION_CONTEXT* PACTIVATION_CONTEXT;
typedef void ( *PACTIVATION_CONTEXT_NOTIFY_ROUTINE )( ULONG, PACTIVATION_CONTEXT, PACTIVATION_CONTEXT_DATA, PVOID, PVOID, PBOOLEAN );
typedef _ACTIVATION_CONTEXT ACTIVATION_CONTEXT;
typedef _ACTIVATION_CONTEXT* PACTIVATION_CONTEXT;
typedef _RTL_ACTIVATION_CONTEXT_STACK_FRAME RTL_ACTIVATION_CONTEXT_STACK_FRAME;
typedef _RTL_ACTIVATION_CONTEXT_STACK_FRAME* PRTL_ACTIVATION_CONTEXT_STACK_FRAME;
typedef _ACTIVATION_CONTEXT_STACK ACTIVATION_CONTEXT_STACK;
typedef _ACTIVATION_CONTEXT_STACK* PACTIVATION_CONTEXT_STACK;
typedef _RTL_USER_PROCESS_PARAMETERS* PRTL_USER_PROCESS_PARAMETERS;
typedef _RTL_CRITICAL_SECTION* PRTL_CRITICAL_SECTION;
typedef _SILO_USER_SHARED_DATA* PSILO_USER_SHARED_DATA;
typedef _LEAP_SECOND_DATA* PLEAP_SECOND_DATA;
typedef NTSTATUS ( *PLSA_COPY_FROM_CLIENT_BUFFER )( PLSA_CLIENT_REQUEST, ULONG, PVOID, PVOID );
typedef _PEB_LDR_DATA PEB_LDR_DATA;
typedef _PEB_LDR_DATA* PPEB_LDR_DATA;
typedef _API_SET_NAMESPACE API_SET_NAMESPACE;
typedef _FILE_INTEGRITY_STREAM_INFORMATION* PFILE_INTEGRITY_STREAM_INFORMATION;
typedef _API_SET_NAMESPACE* PAPI_SET_NAMESPACE;
typedef _FILE_REMOTE_PROTOCOL_INFORMATION* PFILE_REMOTE_PROTOCOL_INFORMATION;
typedef _API_SET_HASH_ENTRY API_SET_HASH_ENTRY;
typedef _FILE_ID_EXTD_DIR_INFORMATION FILE_ID_EXTD_DIR_INFORMATION;
typedef _ETW_BUFFER_STATE ETW_BUFFER_STATE;
typedef _API_SET_NAMESPACE_ENTRY API_SET_NAMESPACE_ENTRY;
typedef _ETW_REF_CLOCK ETW_REF_CLOCK;
typedef _API_SET_NAMESPACE_ENTRY* PAPI_SET_NAMESPACE_ENTRY;
typedef _FILE_ID_INFORMATION* PFILE_ID_INFORMATION;
typedef _API_SET_VALUE_ENTRY* PAPI_SET_VALUE_ENTRY;
typedef _PROCESS_STACK_ALLOCATION_INFORMATION
    PROCESS_STACK_ALLOCATION_INFORMATION;
typedef _PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION* PPROCESS_INSTRUMENTATION_CALLBACK_INFORMATION;
typedef _TELEMETRY_COVERAGE_HEADER TELEMETRY_COVERAGE_HEADER;
typedef _WER_RECOVERY_INFO WER_RECOVERY_INFO;
typedef _WER_RECOVERY_INFO* PWER_RECOVERY_INFO;
typedef _WER_FILE WER_FILE;
typedef _WER_FILE* PWER_FILE;
typedef _WER_MEMORY WER_MEMORY;
typedef _WER_MEMORY* PWER_MEMORY;
typedef _WER_GATHER WER_GATHER;
typedef _WER_GATHER* PWER_GATHER;
typedef _WER_METADATA WER_METADATA;
typedef _WER_METADATA* PWER_METADATA;
typedef _WER_RUNTIME_DLL WER_RUNTIME_DLL;
typedef _WER_RUNTIME_DLL* PWER_RUNTIME_DLL;
typedef _WER_DUMP_COLLECTION WER_DUMP_COLLECTION;
typedef _WER_DUMP_COLLECTION* PWER_DUMP_COLLECTION;
typedef _WER_HEAP_MAIN_HEADER WER_HEAP_MAIN_HEADER;
typedef _WER_HEAP_MAIN_HEADER* PWER_HEAP_MAIN_HEADER;
typedef _WER_PEB_HEADER_BLOCK WER_PEB_HEADER_BLOCK;
typedef _WER_PEB_HEADER_BLOCK* PWER_PEB_HEADER_BLOCK;
typedef ULONG GDI_HANDLE_BUFFER[60];
typedef ULONG GDI_HANDLE_BUFFER32[34];
typedef ULONG GDI_HANDLE_BUFFER64[60];
typedef void ( *PPS_POST_PROCESS_INIT_ROUTINE )();
typedef _DOMAIN_SERVER_ENABLE_STATE DOMAIN_SERVER_ENABLE_STATE;
typedef _ISOLATION_MANIFEST_PROPERTIES* PISOLATION_MANIFEST_PROPERTIES;
typedef _MOUNTMGR_TARGET_NAME MOUNTMGR_TARGET_NAME;
typedef _MOUNTMGR_CHANGE_NOTIFY_INFO* PMOUNTMGR_CHANGE_NOTIFY_INFO;
typedef _ETW_AUTOBOOST_CLEAR_PRIORITY_FLOOR_EVENT* PETW_AUTOBOOST_CLEAR_PRIORITY_FLOOR_EVENT;
typedef _MOUNTMGR_SET_AUTO_MOUNT* PMOUNTMGR_SET_AUTO_MOUNT;
typedef _MOUNTMGR_QUERY_AUTO_MOUNT MOUNTMGR_QUERY_AUTO_MOUNT;
typedef _PS_ATTRIBUTE_LIST PS_ATTRIBUTE_LIST;
typedef _PEB PEB;
typedef _GDI_TEB_BATCH GDI_TEB_BATCH;
typedef _GDI_TEB_BATCH* PGDI_TEB_BATCH;
typedef _TEB_ACTIVE_FRAME_CONTEXT TEB_ACTIVE_FRAME_CONTEXT;
typedef _TEB_ACTIVE_FRAME_CONTEXT* PTEB_ACTIVE_FRAME_CONTEXT;
typedef _TEB_ACTIVE_FRAME_CONTEXT_EX TEB_ACTIVE_FRAME_CONTEXT_EX;
typedef _TEB_ACTIVE_FRAME_CONTEXT_EX* PTEB_ACTIVE_FRAME_CONTEXT_EX;
typedef _TEB_ACTIVE_FRAME TEB_ACTIVE_FRAME;
typedef _TEB_ACTIVE_FRAME* PTEB_ACTIVE_FRAME;
typedef _TEB_ACTIVE_FRAME_EX TEB_ACTIVE_FRAME_EX;
typedef _TEB_ACTIVE_FRAME_EX* PTEB_ACTIVE_FRAME_EX;
typedef _TEB TEB;
typedef _TEB* PTEB;
typedef _PEB_LDR_DATA PEB_LDR_DATA;
typedef _PEB_LDR_DATA* PPEB_LDR_DATA;
typedef _INITIAL_TEB INITIAL_TEB;
typedef _INITIAL_TEB* PINITIAL_TEB;
typedef _PROCESSINFOCLASS PROCESSINFOCLASS;
typedef _THREADINFOCLASS THREADINFOCLASS;
typedef _PAGE_PRIORITY_INFORMATION PAGE_PRIORITY_INFORMATION;
typedef _PAGE_PRIORITY_INFORMATION* PPAGE_PRIORITY_INFORMATION;
typedef _PROCESS_BASIC_INFORMATION PROCESS_BASIC_INFORMATION;
typedef _PROCESS_BASIC_INFORMATION* PPROCESS_BASIC_INFORMATION;
typedef _PROCESS_EXTENDED_BASIC_INFORMATION PROCESS_EXTENDED_BASIC_INFORMATION;
typedef _PROCESS_EXTENDED_BASIC_INFORMATION* PPROCESS_EXTENDED_BASIC_INFORMATION;
typedef _VM_COUNTERS VM_COUNTERS;
typedef _VM_COUNTERS* PVM_COUNTERS;
typedef _VM_COUNTERS_EX VM_COUNTERS_EX;
typedef _VM_COUNTERS_EX* PVM_COUNTERS_EX;
typedef _VM_COUNTERS_EX2 VM_COUNTERS_EX2;
typedef _VM_COUNTERS_EX2* PVM_COUNTERS_EX2;
typedef _KERNEL_USER_TIMES KERNEL_USER_TIMES;
typedef _KERNEL_USER_TIMES* PKERNEL_USER_TIMES;
typedef _POOLED_USAGE_AND_LIMITS POOLED_USAGE_AND_LIMITS;
typedef _POOLED_USAGE_AND_LIMITS* PPOOLED_USAGE_AND_LIMITS;
typedef _PROCESS_EXCEPTION_PORT PROCESS_EXCEPTION_PORT;
typedef _PROCESS_EXCEPTION_PORT* PPROCESS_EXCEPTION_PORT;
typedef _FILE_FS_FULL_SIZE_INFORMATION_EX FILE_FS_FULL_SIZE_INFORMATION_EX;
typedef _PROCESS_ACCESS_TOKEN PROCESS_ACCESS_TOKEN;
typedef _LSA_FOREST_TRUST_RECORD2 LSA_FOREST_TRUST_RECORD2;
typedef _PROCESS_ACCESS_TOKEN* PPROCESS_ACCESS_TOKEN;
typedef _FILE_FS_METADATA_SIZE_INFORMATION* PFILE_FS_METADATA_SIZE_INFORMATION;
typedef _PROCESS_LDT_INFORMATION* PPROCESS_LDT_INFORMATION;
typedef _PROCESS_NETWORK_COUNTERS* PPROCESS_NETWORK_COUNTERS;
typedef _PROCESS_MEMBERSHIP_INFORMATION PROCESS_MEMBERSHIP_INFORMATION;
typedef _PROCESS_LDT_SIZE PROCESS_LDT_SIZE;
typedef _ETW_DISKIO_FLUSH_BUFFERS_V3* PWMI_DISKIO_FLUSH_BUFFERS;
typedef _PROCESS_WS_WATCH_INFORMATION* PPROCESS_WS_WATCH_INFORMATION;
typedef _PROCESS_WS_WATCH_INFORMATION_EX PROCESS_WS_WATCH_INFORMATION_EX;
typedef _THREAD_BASIC_INFORMATION THREAD_BASIC_INFORMATION;
typedef _PROCESS_WS_WATCH_INFORMATION_EX* PPROCESS_WS_WATCH_INFORMATION_EX;
typedef _DIRECTORY_NOTIFY_INFORMATION_CLASS* PDIRECTORY_NOTIFY_INFORMATION_CLASS;
typedef _PROCESS_PRIORITY_CLASS* PPROCESS_PRIORITY_CLASS;
typedef _PROCESS_PRIORITY_CLASS_EX PROCESS_PRIORITY_CLASS_EX;
typedef _PROCESS_PRIORITY_CLASS_EX* PPROCESS_PRIORITY_CLASS_EX;
typedef _PROCESS_FOREGROUND_BACKGROUND PROCESS_FOREGROUND_BACKGROUND;
typedef _PROCESS_FOREGROUND_BACKGROUND* PPROCESS_FOREGROUND_BACKGROUND;
typedef _PROCESS_DEVICEMAP_INFORMATION PROCESS_DEVICEMAP_INFORMATION;
typedef _PROCESS_DEVICEMAP_INFORMATION* PPROCESS_DEVICEMAP_INFORMATION;
typedef _PROCESS_DEVICEMAP_INFORMATION_EX PROCESS_DEVICEMAP_INFORMATION_EX;
typedef _PROCESS_DEVICEMAP_INFORMATION_EX* PPROCESS_DEVICEMAP_INFORMATION_EX;
typedef _PROCESS_SESSION_INFORMATION PROCESS_SESSION_INFORMATION;
typedef _PROCESS_SESSION_INFORMATION* PPROCESS_SESSION_INFORMATION;
typedef _PROCESS_HANDLE_TRACING_ENABLE PROCESS_HANDLE_TRACING_ENABLE;
typedef _PROCESS_HANDLE_TRACING_ENABLE* PPROCESS_HANDLE_TRACING_ENABLE;
typedef _PROCESS_HANDLE_TRACING_ENABLE_EX PROCESS_HANDLE_TRACING_ENABLE_EX;
typedef _PROCESS_HANDLE_TRACING_ENABLE_EX* PPROCESS_HANDLE_TRACING_ENABLE_EX;
typedef _PROCESS_HANDLE_TRACING_ENTRY PROCESS_HANDLE_TRACING_ENTRY;
typedef _PROCESS_HANDLE_TRACING_ENTRY* PPROCESS_HANDLE_TRACING_ENTRY;
typedef _PROCESS_HANDLE_TRACING_QUERY PROCESS_HANDLE_TRACING_QUERY;
typedef _PROCESS_HANDLE_TRACING_QUERY* PPROCESS_HANDLE_TRACING_QUERY;
typedef _LDR_DATA_TABLE_ENTRY32 LDR_DATA_TABLE_ENTRY32;
typedef _THREAD_TLS_INFORMATION* PTHREAD_TLS_INFORMATION;
typedef _REMOTE_PORT_VIEW64* PREMOTE_PORT_VIEW64;
typedef _PROCESS_TLS_INFORMATION_TYPE* PPROCESS_TLS_INFORMATION_TYPE;
typedef _RTL_USER_PROCESS_INFORMATION RTL_USER_PROCESS_INFORMATION;
typedef _PROCESS_TLS_INFORMATION PROCESS_TLS_INFORMATION;
typedef _PROCESS_TLS_INFORMATION* PPROCESS_TLS_INFORMATION;
typedef _RTL_USER_PROCESS_PARAMETERS* PRTL_USER_PROCESS_PARAMETERS;
typedef _PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION
    PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION;
typedef _ALPC_MESSAGE_ATTRIBUTES* PALPC_MESSAGE_ATTRIBUTES;
typedef _PROCESS_STACK_ALLOCATION_INFORMATION_EX
    PROCESS_STACK_ALLOCATION_INFORMATION_EX;
typedef _ALPC_COMPLETION_LIST_HEADER* PALPC_COMPLETION_LIST_HEADER;
typedef _PROCESS_STACK_ALLOCATION_INFORMATION_EX* PPROCESS_STACK_ALLOCATION_INFORMATION_EX;
typedef _PROCESS_AFFINITY_UPDATE_MODE PROCESS_AFFINITY_UPDATE_MODE;
typedef _PROCESS_AFFINITY_UPDATE_MODE* PPROCESS_AFFINITY_UPDATE_MODE;
typedef _PROCESS_MEMORY_ALLOCATION_MODE PROCESS_MEMORY_ALLOCATION_MODE;
typedef _PROCESS_MEMORY_ALLOCATION_MODE* PPROCESS_MEMORY_ALLOCATION_MODE;
typedef _PROCESS_HANDLE_INFORMATION PROCESS_HANDLE_INFORMATION;
typedef _PROCESS_HANDLE_INFORMATION* PPROCESS_HANDLE_INFORMATION;
typedef _PROCESS_CYCLE_TIME_INFORMATION PROCESS_CYCLE_TIME_INFORMATION;
typedef _PROCESS_CYCLE_TIME_INFORMATION* PPROCESS_CYCLE_TIME_INFORMATION;
typedef _PROCESS_WINDOW_INFORMATION PROCESS_WINDOW_INFORMATION;
typedef _PROCESS_WINDOW_INFORMATION* PPROCESS_WINDOW_INFORMATION;
typedef _PROCESS_HANDLE_TABLE_ENTRY_INFO PROCESS_HANDLE_TABLE_ENTRY_INFO;
typedef _PROCESS_HANDLE_TABLE_ENTRY_INFO* PPROCESS_HANDLE_TABLE_ENTRY_INFO;
typedef _PROCESS_HANDLE_SNAPSHOT_INFORMATION
    PROCESS_HANDLE_SNAPSHOT_INFORMATION;
typedef _PROCESS_HANDLE_SNAPSHOT_INFORMATION* PPROCESS_HANDLE_SNAPSHOT_INFORMATION;
typedef _PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY2
    PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY2;
typedef _PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY2* PPROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY2;
typedef _PROCESS_MITIGATION_POLICY_INFORMATION
    PROCESS_MITIGATION_POLICY_INFORMATION;
typedef _PROCESS_MITIGATION_POLICY_INFORMATION* PPROCESS_MITIGATION_POLICY_INFORMATION;
typedef _PROCESS_DYNAMIC_FUNCTION_TABLE_INFORMATION
    PROCESS_DYNAMIC_FUNCTION_TABLE_INFORMATION;
typedef _PROCESS_DYNAMIC_FUNCTION_TABLE_INFORMATION* PPROCESS_DYNAMIC_FUNCTION_TABLE_INFORMATION;
typedef _PROCESS_KEEPALIVE_COUNT_INFORMATION
    PROCESS_KEEPALIVE_COUNT_INFORMATION;
typedef _PROCESS_KEEPALIVE_COUNT_INFORMATION* PPROCESS_KEEPALIVE_COUNT_INFORMATION;
typedef _PROCESS_REVOKE_FILE_HANDLES_INFORMATION
    PROCESS_REVOKE_FILE_HANDLES_INFORMATION;
typedef _PROCESS_REVOKE_FILE_HANDLES_INFORMATION* PPROCESS_REVOKE_FILE_HANDLES_INFORMATION;
typedef _PROCESS_WORKING_SET_OPERATION PROCESS_WORKING_SET_OPERATION;
typedef _PROCESS_WORKING_SET_CONTROL PROCESS_WORKING_SET_CONTROL;
typedef _PROCESS_WORKING_SET_CONTROL* PPROCESS_WORKING_SET_CONTROL;
typedef _PS_PROTECTED_TYPE PS_PROTECTED_TYPE;
typedef _PS_PROTECTED_SIGNER PS_PROTECTED_SIGNER;
typedef _PS_PROTECTION PS_PROTECTION;
typedef _PS_PROTECTION* PPS_PROTECTION;
typedef _PROCESS_FAULT_INFORMATION PROCESS_FAULT_INFORMATION;
typedef _PROCESS_FAULT_INFORMATION* PPROCESS_FAULT_INFORMATION;
typedef _PROCESS_TELEMETRY_ID_INFORMATION PROCESS_TELEMETRY_ID_INFORMATION;
typedef _PROCESS_TELEMETRY_ID_INFORMATION* PPROCESS_TELEMETRY_ID_INFORMATION;
typedef _PROCESS_COMMIT_RELEASE_INFORMATION PROCESS_COMMIT_RELEASE_INFORMATION;
typedef _PROCESS_COMMIT_RELEASE_INFORMATION* PPROCESS_COMMIT_RELEASE_INFORMATION;
typedef _PROCESS_JOB_MEMORY_INFO PROCESS_JOB_MEMORY_INFO;
typedef _MUP_FSCTL_UNC_CACHE_ENTRY MUP_FSCTL_UNC_CACHE_ENTRY;
typedef _PROCESS_JOB_MEMORY_INFO* PPROCESS_JOB_MEMORY_INFO;
typedef _IMAGE_ARM64EC_CODE_RANGE_ENTRY_POINT
    IMAGE_ARM64EC_CODE_RANGE_ENTRY_POINT;
typedef _PROCESS_CHILD_PROCESS_INFORMATION PROCESS_CHILD_PROCESS_INFORMATION;
typedef _PROCESS_CHILD_PROCESS_INFORMATION* PPROCESS_CHILD_PROCESS_INFORMATION;
typedef _POWER_THROTTLING_PROCESS_STATE POWER_THROTTLING_PROCESS_STATE;
typedef _MUP_FSCTL_UNC_CACHE_INFORMATION MUP_FSCTL_UNC_CACHE_INFORMATION;
typedef _WIN32K_SYSCALL_FILTER* PWIN32K_SYSCALL_FILTER;
typedef _VR_LOAD_DIFFERENCING_HIVE_FOR_HOST* PVR_LOAD_DIFFERENCING_HIVE_FOR_HOST;
typedef _VR_GET_VIRTUAL_ROOT_RESULT* PVR_GET_VIRTUAL_ROOT_RESULT;
typedef _MUP_FSCTL_SURROGATE_PROVIDER_ENTRY MUP_FSCTL_SURROGATE_PROVIDER_ENTRY;
typedef _PROCESS_WAKE_INFORMATION PROCESS_WAKE_INFORMATION;
typedef _RTL_GENERIC_COMPARE_RESULTS RTL_GENERIC_COMPARE_RESULTS;
typedef _PROCESS_ENERGY_TRACKING_STATE* PPROCESS_ENERGY_TRACKING_STATE;
typedef _MANAGE_WRITES_TO_EXECUTABLE_MEMORY MANAGE_WRITES_TO_EXECUTABLE_MEMORY;
typedef _MANAGE_WRITES_TO_EXECUTABLE_MEMORY* PMANAGE_WRITES_TO_EXECUTABLE_MEMORY;
typedef _POWER_THROTTLING_THREAD_STATE POWER_THROTTLING_THREAD_STATE;
typedef _POWER_THROTTLING_THREAD_STATE* PPOWER_THROTTLING_THREAD_STATE;
typedef _PROCESS_READWRITEVM_LOGGING_INFORMATION
    PROCESS_READWRITEVM_LOGGING_INFORMATION;
typedef _PROCESS_READWRITEVM_LOGGING_INFORMATION* PPROCESS_READWRITEVM_LOGGING_INFORMATION;
typedef _PROCESS_UPTIME_INFORMATION PROCESS_UPTIME_INFORMATION;
typedef _PROCESS_UPTIME_INFORMATION* PPROCESS_UPTIME_INFORMATION;
typedef _PROCESS_SYSTEM_RESOURCE_MANAGEMENT PROCESS_SYSTEM_RESOURCE_MANAGEMENT;
typedef _PROCESS_SYSTEM_RESOURCE_MANAGEMENT* PPROCESS_SYSTEM_RESOURCE_MANAGEMENT;
typedef _PROCESS_SECURITY_DOMAIN_INFORMATION
    PROCESS_SECURITY_DOMAIN_INFORMATION;
typedef _PROCESS_SECURITY_DOMAIN_INFORMATION* PPROCESS_SECURITY_DOMAIN_INFORMATION;
typedef _PROCESS_COMBINE_SECURITY_DOMAINS_INFORMATION
    PROCESS_COMBINE_SECURITY_DOMAINS_INFORMATION;
typedef _PROCESS_COMBINE_SECURITY_DOMAINS_INFORMATION* PPROCESS_COMBINE_SECURITY_DOMAINS_INFORMATION;
typedef _PROCESS_LOGGING_INFORMATION PROCESS_LOGGING_INFORMATION;
typedef _PROCESS_LOGGING_INFORMATION* PPROCESS_LOGGING_INFORMATION;
typedef _PROCESS_LEAP_SECOND_INFORMATION PROCESS_LEAP_SECOND_INFORMATION;
typedef _PROCESS_LEAP_SECOND_INFORMATION* PPROCESS_LEAP_SECOND_INFORMATION;
typedef _PROCESS_FIBER_SHADOW_STACK_ALLOCATION_INFORMATION
    PROCESS_FIBER_SHADOW_STACK_ALLOCATION_INFORMATION;
typedef _PROCESS_FIBER_SHADOW_STACK_ALLOCATION_INFORMATION* PPROCESS_FIBER_SHADOW_STACK_ALLOCATION_INFORMATION;
typedef _PROCESS_FREE_FIBER_SHADOW_STACK_ALLOCATION_INFORMATION
    PROCESS_FREE_FIBER_SHADOW_STACK_ALLOCATION_INFORMATION;
typedef _PROCESS_FREE_FIBER_SHADOW_STACK_ALLOCATION_INFORMATION* PPROCESS_FREE_FIBER_SHADOW_STACK_ALLOCATION_INFORMATION;
typedef _PROCESS_SYSCALL_PROVIDER_INFORMATION
    PROCESS_SYSCALL_PROVIDER_INFORMATION;
typedef _PROCESS_SYSCALL_PROVIDER_INFORMATION* PPROCESS_SYSCALL_PROVIDER_INFORMATION;
typedef _PROCESS_TEB_VALUE_INFORMATION PROCESS_TEB_VALUE_INFORMATION;
typedef _PROCESS_TEB_VALUE_INFORMATION* PPROCESS_TEB_VALUE_INFORMATION;
typedef _SEGMENT_HEAP_PERFORMANCE_COUNTER_INFORMATION* PSEGMENT_HEAP_PERFORMANCE_COUNTER_INFORMATION;
typedef _PF_DEPRIORITIZE_OLD_PAGES PF_DEPRIORITIZE_OLD_PAGES;
typedef _PF_MIN_WS_AGE_RATE_CONTROL PF_MIN_WS_AGE_RATE_CONTROL;
typedef _THREAD_LAST_SYSCALL_INFORMATION* PTHREAD_LAST_SYSCALL_INFORMATION;
typedef _THREAD_CYCLE_TIME_INFORMATION THREAD_CYCLE_TIME_INFORMATION;
typedef _THREAD_CYCLE_TIME_INFORMATION* PTHREAD_CYCLE_TIME_INFORMATION;
typedef _THREAD_LOCK_OWNERSHIP THREAD_LOCK_OWNERSHIP;
typedef _THREAD_LOCK_OWNERSHIP* PTHREAD_LOCK_OWNERSHIP;
typedef _SCHEDULER_SHARED_DATA_SLOT_ACTION SCHEDULER_SHARED_DATA_SLOT_ACTION;
typedef _SCHEDULER_SHARED_DATA_SLOT_INFORMATION
    SCHEDULER_SHARED_DATA_SLOT_INFORMATION;
typedef _SCHEDULER_SHARED_DATA_SLOT_INFORMATION* PSCHEDULER_SHARED_DATA_SLOT_INFORMATION;
typedef _THREAD_TEB_INFORMATION THREAD_TEB_INFORMATION;
typedef _THREAD_TEB_INFORMATION* PTHREAD_TEB_INFORMATION;
typedef _COUNTER_READING COUNTER_READING;
typedef _COUNTER_READING* PCOUNTER_READING;
typedef _THREAD_PERFORMANCE_DATA THREAD_PERFORMANCE_DATA;
typedef _THREAD_PERFORMANCE_DATA* PTHREAD_PERFORMANCE_DATA;
typedef _THREAD_PROFILING_INFORMATION THREAD_PROFILING_INFORMATION;
typedef _THREAD_PROFILING_INFORMATION* PTHREAD_PROFILING_INFORMATION;
typedef _RTL_UMS_CONTEXT RTL_UMS_CONTEXT;
typedef _RTL_UMS_CONTEXT* PRTL_UMS_CONTEXT;
typedef _THREAD_UMS_INFORMATION_COMMAND THREAD_UMS_INFORMATION_COMMAND;
typedef _RTL_UMS_COMPLETION_LIST RTL_UMS_COMPLETION_LIST;
typedef _RTL_UMS_COMPLETION_LIST* PRTL_UMS_COMPLETION_LIST;
typedef _THREAD_UMS_INFORMATION THREAD_UMS_INFORMATION;
typedef _THREAD_UMS_INFORMATION* PTHREAD_UMS_INFORMATION;
typedef _THREAD_NAME_INFORMATION THREAD_NAME_INFORMATION;
typedef _THREAD_NAME_INFORMATION* PTHREAD_NAME_INFORMATION;
typedef _ALPC_WORK_ON_BEHALF_TICKET ALPC_WORK_ON_BEHALF_TICKET;
typedef _ALPC_WORK_ON_BEHALF_TICKET* PALPC_WORK_ON_BEHALF_TICKET;
typedef _RTL_WORK_ON_BEHALF_TICKET_EX RTL_WORK_ON_BEHALF_TICKET_EX;
typedef _RTL_WORK_ON_BEHALF_TICKET_EX* PRTL_WORK_ON_BEHALF_TICKET_EX;
typedef _SUBSYSTEM_INFORMATION_TYPE SUBSYSTEM_INFORMATION_TYPE;
typedef _THREAD_WORKLOAD_CLASS THREAD_WORKLOAD_CLASS;
typedef _THREAD_INDEX_INFORMATION THREAD_INDEX_INFORMATION;
typedef _THREAD_INDEX_INFORMATION* PTHREAD_INDEX_INFORMATION;
typedef _PROCESS_STATE_CHANGE_TYPE PROCESS_STATE_CHANGE_TYPE;
typedef _PROCESS_STATE_CHANGE_TYPE* PPROCESS_STATE_CHANGE_TYPE;
typedef _THREAD_STATE_CHANGE_TYPE THREAD_STATE_CHANGE_TYPE;
typedef _THREAD_STATE_CHANGE_TYPE* PTHREAD_STATE_CHANGE_TYPE;
typedef void ( *PPS_APC_ROUTINE )( PVOID, PVOID, PVOID );
typedef _APC_CALLBACK_DATA_CONTEXT APC_CALLBACK_DATA_CONTEXT;
typedef _APC_CALLBACK_DATA_CONTEXT* PAPC_CALLBACK_DATA_CONTEXT;
typedef _PROC_THREAD_ATTRIBUTE PROC_THREAD_ATTRIBUTE;
typedef _PROC_THREAD_ATTRIBUTE* PPROC_THREAD_ATTRIBUTE;
typedef _PROC_THREAD_ATTRIBUTE_LIST PROC_THREAD_ATTRIBUTE_LIST;
typedef _PROC_THREAD_ATTRIBUTE_LIST* PPROC_THREAD_ATTRIBUTE_LIST;
typedef _SE_SAFE_OPEN_PROMPT_EXPERIENCE_RESULTS
    SE_SAFE_OPEN_PROMPT_EXPERIENCE_RESULTS;
typedef _SE_SAFE_OPEN_PROMPT_RESULTS SE_SAFE_OPEN_PROMPT_RESULTS;
typedef _ALPC_SERVER_SESSION_INFORMATION* PALPC_SERVER_SESSION_INFORMATION;
typedef _PEB32 PEB32;
typedef _PROC_THREAD_BNOISOLATION_ATTRIBUTE PROC_THREAD_BNOISOLATION_ATTRIBUTE;
typedef _PROC_THREAD_BNOISOLATION_ATTRIBUTE* PPROC_THREAD_BNOISOLATION_ATTRIBUTE;
typedef _ALPC_MESSAGE_HANDLE_INFORMATION ALPC_MESSAGE_HANDLE_INFORMATION;
typedef _PS_ATTRIBUTE_NUM PS_ATTRIBUTE_NUM;
typedef _PF_ENABLE_STATUS PF_ENABLE_STATUS;
typedef _PS_ATTRIBUTE PS_ATTRIBUTE;
typedef _PS_MEMORY_RESERVE PS_MEMORY_RESERVE;
typedef _PS_MEMORY_RESERVE* PPS_MEMORY_RESERVE;
typedef _PS_STD_HANDLE_STATE PS_STD_HANDLE_STATE;
typedef _PS_STD_HANDLE_INFO PS_STD_HANDLE_INFO;
typedef _PS_STD_HANDLE_INFO* PPS_STD_HANDLE_INFO;
typedef _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS;
typedef _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS* PPS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS;
typedef _PS_TRUSTLET_ATTRIBUTE_TYPE PS_TRUSTLET_ATTRIBUTE_TYPE;
typedef _PS_TRUSTLET_ATTRIBUTE_TYPE* PPS_TRUSTLET_ATTRIBUTE_TYPE;
typedef _PS_TRUSTLET_ATTRIBUTE_HEADER PS_TRUSTLET_ATTRIBUTE_HEADER;
typedef _PS_TRUSTLET_ATTRIBUTE_HEADER* PPS_TRUSTLET_ATTRIBUTE_HEADER;
typedef _PS_TRUSTLET_ATTRIBUTE_DATA PS_TRUSTLET_ATTRIBUTE_DATA;
typedef _PS_TRUSTLET_ATTRIBUTE_DATA* PPS_TRUSTLET_ATTRIBUTE_DATA;
typedef _PS_TRUSTLET_CREATE_ATTRIBUTES PS_TRUSTLET_CREATE_ATTRIBUTES;
typedef _PS_TRUSTLET_CREATE_ATTRIBUTES* PPS_TRUSTLET_CREATE_ATTRIBUTES;
typedef _PS_BNO_ISOLATION_PARAMETERS PS_BNO_ISOLATION_PARAMETERS;
typedef _PS_BNO_ISOLATION_PARAMETERS* PPS_BNO_ISOLATION_PARAMETERS;
typedef _PS_PROCESS_CREATION_SVE_VECTOR_LENGTH
    PS_PROCESS_CREATION_SVE_VECTOR_LENGTH;
typedef _PS_PROCESS_CREATION_SVE_VECTOR_LENGTH* PPS_PROCESS_CREATION_SVE_VECTOR_LENGTH;
typedef _PS_MITIGATION_OPTION PS_MITIGATION_OPTION;
typedef _PS_CREATE_STATE PS_CREATE_STATE;
typedef _PS_CREATE_INFO PS_CREATE_INFO;
typedef _PS_CREATE_INFO* PPS_CREATE_INFO;
typedef _FILE_GET_EA_INFORMATION* PFILE_GET_EA_INFORMATION;
typedef _JOBOBJECT_EXTENDED_ACCOUNTING_INFORMATION
    JOBOBJECT_EXTENDED_ACCOUNTING_INFORMATION;
typedef _FSINFOCLASS* PFSINFOCLASS;
typedef _FILE_QUOTA_INFORMATION FILE_QUOTA_INFORMATION;
typedef _JOBOBJECT_EXTENDED_ACCOUNTING_INFORMATION* PJOBOBJECT_EXTENDED_ACCOUNTING_INFORMATION;
typedef _JOBOBJECT_WAKE_INFORMATION JOBOBJECT_WAKE_INFORMATION;
typedef _JOBOBJECT_WAKE_INFORMATION* PJOBOBJECT_WAKE_INFORMATION;
typedef _JOBOBJECT_WAKE_INFORMATION_V1 JOBOBJECT_WAKE_INFORMATION_V1;
typedef _JOBOBJECT_WAKE_INFORMATION_V1* PJOBOBJECT_WAKE_INFORMATION_V1;
typedef _JOBOBJECT_INTERFERENCE_INFORMATION JOBOBJECT_INTERFERENCE_INFORMATION;
typedef _JOBOBJECT_INTERFERENCE_INFORMATION* PJOBOBJECT_INTERFERENCE_INFORMATION;
typedef _JOBOBJECT_WAKE_FILTER JOBOBJECT_WAKE_FILTER;
typedef _JOBOBJECT_WAKE_FILTER* PJOBOBJECT_WAKE_FILTER;
typedef _JOBOBJECT_FREEZE_INFORMATION JOBOBJECT_FREEZE_INFORMATION;
typedef _JOBOBJECT_FREEZE_INFORMATION* PJOBOBJECT_FREEZE_INFORMATION;
typedef _JOBOBJECT_CONTAINER_IDENTIFIER_V2 JOBOBJECT_CONTAINER_IDENTIFIER_V2;
typedef _JOBOBJECT_CONTAINER_IDENTIFIER_V2* PJOBOBJECT_CONTAINER_IDENTIFIER_V2;
typedef _JOBOBJECT_MEMORY_USAGE_INFORMATION JOBOBJECT_MEMORY_USAGE_INFORMATION;
typedef _JOBOBJECT_MEMORY_USAGE_INFORMATION* PJOBOBJECT_MEMORY_USAGE_INFORMATION;
typedef _JOBOBJECT_MEMORY_USAGE_INFORMATION_V2
    JOBOBJECT_MEMORY_USAGE_INFORMATION_V2;
typedef _JOBOBJECT_MEMORY_USAGE_INFORMATION_V2* PJOBOBJECT_MEMORY_USAGE_INFORMATION_V2;
typedef _SILO_USER_SHARED_DATA SILO_USER_SHARED_DATA;
typedef _SILO_USER_SHARED_DATA* PSILO_USER_SHARED_DATA;
typedef _SILOOBJECT_ROOT_DIRECTORY SILOOBJECT_ROOT_DIRECTORY;
typedef _SILOOBJECT_ROOT_DIRECTORY* PSILOOBJECT_ROOT_DIRECTORY;
typedef _SERVERSILO_INIT_INFORMATION SERVERSILO_INIT_INFORMATION;
typedef _SERVERSILO_INIT_INFORMATION* PSERVERSILO_INIT_INFORMATION;
typedef _JOBOBJECT_ENERGY_TRACKING_STATE JOBOBJECT_ENERGY_TRACKING_STATE;
typedef _JOBOBJECT_ENERGY_TRACKING_STATE* PJOBOBJECT_ENERGY_TRACKING_STATE;
typedef _JOBOBJECT_IO_PRIORITY_LIMIT_FLAGS JOBOBJECT_IO_PRIORITY_LIMIT_FLAGS;
typedef _JOBOBJECT_IO_PRIORITY_LIMIT JOBOBJECT_IO_PRIORITY_LIMIT;
typedef _JOBOBJECT_IO_PRIORITY_LIMIT* PJOBOBJECT_IO_PRIORITY_LIMIT;
typedef _JOBOBJECT_PAGE_PRIORITY_LIMIT_FLAGS
    JOBOBJECT_PAGE_PRIORITY_LIMIT_FLAGS;
typedef _JOBOBJECT_PAGE_PRIORITY_LIMIT JOBOBJECT_PAGE_PRIORITY_LIMIT;
typedef _JOBOBJECT_PAGE_PRIORITY_LIMIT* PJOBOBJECT_PAGE_PRIORITY_LIMIT;
typedef _SERVERSILO_DIAGNOSTIC_INFORMATION SERVERSILO_DIAGNOSTIC_INFORMATION;
typedef _SERVERSILO_DIAGNOSTIC_INFORMATION* PSERVERSILO_DIAGNOSTIC_INFORMATION;
typedef _JOBOBJECT_NETWORK_ACCOUNTING_INFORMATION
    JOBOBJECT_NETWORK_ACCOUNTING_INFORMATION;
typedef _JOBOBJECT_NETWORK_ACCOUNTING_INFORMATION* PJOBOBJECT_NETWORK_ACCOUNTING_INFORMATION;
typedef _MEMORY_RESERVE_TYPE MEMORY_RESERVE_TYPE;
typedef _PSSNT_CAPTURE_FLAGS PSSNT_CAPTURE_FLAGS;
typedef _PSSNT_DUPLICATE_FLAGS PSSNT_DUPLICATE_FLAGS;
typedef _PSSNT_QUERY_INFORMATION_CLASS PSSNT_QUERY_INFORMATION_CLASS;
typedef _NTPSS_MEMORY_BULK_INFORMATION NTPSS_MEMORY_BULK_INFORMATION;
typedef _NTPSS_MEMORY_BULK_INFORMATION* PNTPSS_MEMORY_BULK_INFORMATION;
typedef _DBGKM_EXCEPTION DBGKM_EXCEPTION;
typedef _DBGKM_EXCEPTION* PDBGKM_EXCEPTION;
typedef _DBGKM_CREATE_THREAD DBGKM_CREATE_THREAD;
typedef _DBGKM_CREATE_THREAD* PDBGKM_CREATE_THREAD;
typedef _DBGKM_CREATE_PROCESS* PDBGKM_CREATE_PROCESS;
typedef _FILE_INTEGRITY_STREAM_INFORMATION FILE_INTEGRITY_STREAM_INFORMATION;
typedef _DBGKM_EXIT_THREAD DBGKM_EXIT_THREAD;
typedef _DBGKM_EXIT_THREAD* PDBGKM_EXIT_THREAD;
typedef _DBGKM_EXIT_PROCESS DBGKM_EXIT_PROCESS;
typedef _DBGKM_EXIT_PROCESS* PDBGKM_EXIT_PROCESS;
typedef _FILE_VOLUME_NAME_INFORMATION* PFILE_VOLUME_NAME_INFORMATION;
typedef _DBGKM_UNLOAD_DLL DBGKM_UNLOAD_DLL;
typedef _DBG_STATE DBG_STATE;
typedef _FILE_LINK_ENTRY_FULL_ID_INFORMATION* PFILE_LINK_ENTRY_FULL_ID_INFORMATION;
typedef _DBGUI_CREATE_THREAD DBGUI_CREATE_THREAD;
typedef _DBGUI_CREATE_PROCESS DBGUI_CREATE_PROCESS;
typedef _DBGUI_CREATE_PROCESS* PDBGUI_CREATE_PROCESS;
typedef _DBGUI_WAIT_STATE_CHANGE DBGUI_WAIT_STATE_CHANGE;
typedef _DBGUI_WAIT_STATE_CHANGE* PDBGUI_WAIT_STATE_CHANGE;
typedef _DEBUGOBJECTINFOCLASS DEBUGOBJECTINFOCLASS;
typedef _DEBUGOBJECTINFOCLASS* PDEBUGOBJECTINFOCLASS;
typedef _EVENT_FILTER_DESCRIPTOR* PEVENT_FILTER_DESCRIPTOR;
typedef void ( *PENABLECALLBACK )( LPCGUID, ULONG, UCHAR, ULONGLONG, ULONGLONG, PEVENT_FILTER_DESCRIPTOR, PVOID );
typedef ULONGLONG REGHANDLE;
typedef ULONGLONG* PREGHANDLE;
typedef _EXTENDED_CREATE_DUAL_OPLOCK_KEYS EXTENDED_CREATE_DUAL_OPLOCK_KEYS;
typedef _EXTENDED_CREATE_DUAL_OPLOCK_KEYS* PEXTENDED_CREATE_DUAL_OPLOCK_KEYS;
typedef _EXTENDED_CREATE_INFORMATION EXTENDED_CREATE_INFORMATION;
typedef _EXTENDED_CREATE_INFORMATION* PEXTENDED_CREATE_INFORMATION;
typedef _EXTENDED_CREATE_INFORMATION_32 EXTENDED_CREATE_INFORMATION_32;
typedef _EXTENDED_CREATE_INFORMATION_32* PEXTENDED_CREATE_INFORMATION_32;
typedef _IO_STATUS_BLOCK IO_STATUS_BLOCK;
typedef _IO_STATUS_BLOCK* PIO_STATUS_BLOCK;
typedef void IO_APC_ROUTINE( PVOID, PIO_STATUS_BLOCK, ULONG );
typedef void ( *PIO_APC_ROUTINE )( PVOID, PIO_STATUS_BLOCK, ULONG );
typedef _FILE_INFORMATION_CLASS FILE_INFORMATION_CLASS;
typedef _FILE_INFORMATION_CLASS* PFILE_INFORMATION_CLASS;
typedef _FILE_BASIC_INFORMATION FILE_BASIC_INFORMATION;
typedef _SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION_ENTRY* PSYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION_ENTRY;
typedef _FILE_STANDARD_INFORMATION FILE_STANDARD_INFORMATION;
typedef _MOUNTMGR_DRIVE_LETTER_INFORMATION* PMOUNTMGR_DRIVE_LETTER_INFORMATION;
typedef _FILE_STANDARD_INFORMATION_EX FILE_STANDARD_INFORMATION_EX;
typedef _KEY_VALUE_PARTIAL_INFORMATION* PKEY_VALUE_PARTIAL_INFORMATION;
typedef _FILE_STANDARD_INFORMATION_EX* PFILE_STANDARD_INFORMATION_EX;
typedef _MOUNTMGR_TARGET_NAME* PMOUNTMGR_TARGET_NAME;
typedef _MOUNTMGR_CHANGE_NOTIFY_INFO MOUNTMGR_CHANGE_NOTIFY_INFO;
typedef _FILE_INTERNAL_INFORMATION FILE_INTERNAL_INFORMATION;
typedef _FILE_EA_INFORMATION FILE_EA_INFORMATION;
typedef _FILE_ACCESS_INFORMATION FILE_ACCESS_INFORMATION;
typedef _FILE_ACCESS_INFORMATION* PFILE_ACCESS_INFORMATION;
typedef _MOUNTMGR_QUERY_AUTO_MOUNT* PMOUNTMGR_QUERY_AUTO_MOUNT;
typedef _FILE_POSITION_INFORMATION FILE_POSITION_INFORMATION;
typedef _FILE_POSITION_INFORMATION* PFILE_POSITION_INFORMATION;
typedef _FILE_MODE_INFORMATION FILE_MODE_INFORMATION;
typedef _FILE_MODE_INFORMATION* PFILE_MODE_INFORMATION;
typedef _FILE_ALIGNMENT_INFORMATION FILE_ALIGNMENT_INFORMATION;
typedef _FILE_ALIGNMENT_INFORMATION* PFILE_ALIGNMENT_INFORMATION;
typedef _FILE_NAME_INFORMATION FILE_NAME_INFORMATION;
typedef _FILE_NAME_INFORMATION* PFILE_NAME_INFORMATION;
typedef _FILE_ALL_INFORMATION FILE_ALL_INFORMATION;
typedef _FILE_ALL_INFORMATION* PFILE_ALL_INFORMATION;
typedef _FILE_NETWORK_OPEN_INFORMATION FILE_NETWORK_OPEN_INFORMATION;
typedef _FILE_NETWORK_OPEN_INFORMATION* PFILE_NETWORK_OPEN_INFORMATION;
typedef _FILE_ATTRIBUTE_TAG_INFORMATION FILE_ATTRIBUTE_TAG_INFORMATION;
typedef _FILE_ATTRIBUTE_TAG_INFORMATION* PFILE_ATTRIBUTE_TAG_INFORMATION;
typedef _FILE_ALLOCATION_INFORMATION FILE_ALLOCATION_INFORMATION;
typedef _FILE_ALLOCATION_INFORMATION* PFILE_ALLOCATION_INFORMATION;
typedef _FILE_COMPRESSION_INFORMATION FILE_COMPRESSION_INFORMATION;
typedef _FILE_COMPRESSION_INFORMATION* PFILE_COMPRESSION_INFORMATION;
typedef _FILE_DISPOSITION_INFORMATION FILE_DISPOSITION_INFORMATION;
typedef _FILE_DISPOSITION_INFORMATION* PFILE_DISPOSITION_INFORMATION;
typedef _FILE_END_OF_FILE_INFORMATION FILE_END_OF_FILE_INFORMATION;
typedef _FILE_END_OF_FILE_INFORMATION* PFILE_END_OF_FILE_INFORMATION;
typedef _FILE_END_OF_FILE_INFORMATION_EX FILE_END_OF_FILE_INFORMATION_EX;
typedef _FILE_END_OF_FILE_INFORMATION_EX* PFILE_END_OF_FILE_INFORMATION_EX;
typedef _FILE_VALID_DATA_LENGTH_INFORMATION FILE_VALID_DATA_LENGTH_INFORMATION;
typedef _FILE_VALID_DATA_LENGTH_INFORMATION* PFILE_VALID_DATA_LENGTH_INFORMATION;
typedef _FILE_LINK_INFORMATION FILE_LINK_INFORMATION;
typedef _FILE_LINK_INFORMATION* PFILE_LINK_INFORMATION;
typedef _FILE_LINK_INFORMATION_EX FILE_LINK_INFORMATION_EX;
typedef _FILE_LINK_INFORMATION_EX* PFILE_LINK_INFORMATION_EX;
typedef _FILE_MOVE_CLUSTER_INFORMATION FILE_MOVE_CLUSTER_INFORMATION;
typedef _FILE_MOVE_CLUSTER_INFORMATION* PFILE_MOVE_CLUSTER_INFORMATION;
typedef _FILE_RENAME_INFORMATION FILE_RENAME_INFORMATION;
typedef _FILE_RENAME_INFORMATION* PFILE_RENAME_INFORMATION;
typedef _FILE_RENAME_INFORMATION_EX FILE_RENAME_INFORMATION_EX;
typedef _FILE_RENAME_INFORMATION_EX* PFILE_RENAME_INFORMATION_EX;
typedef _FILE_STREAM_INFORMATION FILE_STREAM_INFORMATION;
typedef _FILE_STREAM_INFORMATION* PFILE_STREAM_INFORMATION;
typedef _FILE_TRACKING_INFORMATION FILE_TRACKING_INFORMATION;
typedef _FILE_TRACKING_INFORMATION* PFILE_TRACKING_INFORMATION;
typedef _FILE_COMPLETION_INFORMATION FILE_COMPLETION_INFORMATION;
typedef _FILE_COMPLETION_INFORMATION* PFILE_COMPLETION_INFORMATION;
typedef _FILE_PIPE_INFORMATION FILE_PIPE_INFORMATION;
typedef _FILE_PIPE_INFORMATION* PFILE_PIPE_INFORMATION;
typedef _FILE_PIPE_LOCAL_INFORMATION FILE_PIPE_LOCAL_INFORMATION;
typedef _FILE_PIPE_LOCAL_INFORMATION* PFILE_PIPE_LOCAL_INFORMATION;
typedef _FILE_PIPE_REMOTE_INFORMATION FILE_PIPE_REMOTE_INFORMATION;
typedef _FILE_PIPE_REMOTE_INFORMATION* PFILE_PIPE_REMOTE_INFORMATION;
typedef _STATE_LOCATION_TYPE STATE_LOCATION_TYPE;
typedef _FILE_MAILSLOT_QUERY_INFORMATION* PFILE_MAILSLOT_QUERY_INFORMATION;
typedef _FILE_MAILSLOT_SET_INFORMATION FILE_MAILSLOT_SET_INFORMATION;
typedef _FILE_FS_GUID_INFORMATION* PFILE_FS_GUID_INFORMATION;
typedef _FILE_MAILSLOT_SET_INFORMATION* PFILE_MAILSLOT_SET_INFORMATION;
typedef _POWER_USER_ABSENCE_PREDICTION_CAPABILITY
    POWER_USER_ABSENCE_PREDICTION_CAPABILITY;
typedef _FILE_REPARSE_POINT_INFORMATION* PFILE_REPARSE_POINT_INFORMATION;
typedef _IO_COMPLETION_INFORMATION_CLASS IO_COMPLETION_INFORMATION_CLASS;
typedef _FILE_LINK_ENTRY_INFORMATION* PFILE_LINK_ENTRY_INFORMATION;
typedef _FILE_LINKS_INFORMATION FILE_LINKS_INFORMATION;
typedef _FILE_IO_COMPLETION_INFORMATION FILE_IO_COMPLETION_INFORMATION;
typedef _FILE_LINKS_INFORMATION* PFILE_LINKS_INFORMATION;
typedef _FILE_NETWORK_PHYSICAL_NAME_INFORMATION* PFILE_NETWORK_PHYSICAL_NAME_INFORMATION;
typedef _FILE_STANDARD_LINK_INFORMATION FILE_STANDARD_LINK_INFORMATION;
typedef _FILE_STANDARD_LINK_INFORMATION* PFILE_STANDARD_LINK_INFORMATION;
typedef _FILE_SFIO_RESERVE_INFORMATION FILE_SFIO_RESERVE_INFORMATION;
typedef _FILE_SFIO_RESERVE_INFORMATION* PFILE_SFIO_RESERVE_INFORMATION;
typedef _FILE_SFIO_VOLUME_INFORMATION FILE_SFIO_VOLUME_INFORMATION;
typedef _FILE_SFIO_VOLUME_INFORMATION* PFILE_SFIO_VOLUME_INFORMATION;
typedef _IO_PRIORITY_HINT IO_PRIORITY_HINT;
typedef _FILE_IO_PRIORITY_HINT_INFORMATION FILE_IO_PRIORITY_HINT_INFORMATION;
typedef _FILE_IO_PRIORITY_HINT_INFORMATION* PFILE_IO_PRIORITY_HINT_INFORMATION;
typedef _FILE_IO_PRIORITY_HINT_INFORMATION_EX
    FILE_IO_PRIORITY_HINT_INFORMATION_EX;
typedef _FILE_IO_PRIORITY_HINT_INFORMATION_EX* PFILE_IO_PRIORITY_HINT_INFORMATION_EX;
typedef _FILE_IO_COMPLETION_NOTIFICATION_INFORMATION
    FILE_IO_COMPLETION_NOTIFICATION_INFORMATION;
typedef _FILE_IO_COMPLETION_NOTIFICATION_INFORMATION* PFILE_IO_COMPLETION_NOTIFICATION_INFORMATION;
typedef _FILE_PROCESS_IDS_USING_FILE_INFORMATION
    FILE_PROCESS_IDS_USING_FILE_INFORMATION;
typedef _FILE_PROCESS_IDS_USING_FILE_INFORMATION* PFILE_PROCESS_IDS_USING_FILE_INFORMATION;
typedef _FILE_IS_REMOTE_DEVICE_INFORMATION FILE_IS_REMOTE_DEVICE_INFORMATION;
typedef _FILE_IS_REMOTE_DEVICE_INFORMATION* PFILE_IS_REMOTE_DEVICE_INFORMATION;
typedef _FILE_NUMA_NODE_INFORMATION FILE_NUMA_NODE_INFORMATION;
typedef _FILE_NUMA_NODE_INFORMATION* PFILE_NUMA_NODE_INFORMATION;
typedef _FILE_IOSTATUSBLOCK_RANGE_INFORMATION
    FILE_IOSTATUSBLOCK_RANGE_INFORMATION;
typedef _FILE_IOSTATUSBLOCK_RANGE_INFORMATION* PFILE_IOSTATUSBLOCK_RANGE_INFORMATION;
typedef _CURDIR CURDIR;
typedef _FILE_REMOTE_PROTOCOL_INFORMATION FILE_REMOTE_PROTOCOL_INFORMATION;
typedef _RTL_USER_PROCESS_PARAMETERS32 RTL_USER_PROCESS_PARAMETERS32;
typedef _FILE_VOLUME_NAME_INFORMATION FILE_VOLUME_NAME_INFORMATION;
typedef _RTL_DRIVE_LETTER_CURDIR32 RTL_DRIVE_LETTER_CURDIR32;
typedef _FILE_LINK_ENTRY_FULL_ID_INFORMATION
    FILE_LINK_ENTRY_FULL_ID_INFORMATION;
typedef _FILE_LINKS_FULL_ID_INFORMATION FILE_LINKS_FULL_ID_INFORMATION;
typedef _FILE_LINKS_FULL_ID_INFORMATION* PFILE_LINKS_FULL_ID_INFORMATION;
typedef _FILE_ID_EXTD_BOTH_DIR_INFORMATION FILE_ID_EXTD_BOTH_DIR_INFORMATION;
typedef _FILE_ID_EXTD_BOTH_DIR_INFORMATION* PFILE_ID_EXTD_BOTH_DIR_INFORMATION;
typedef _FILE_ID_64_EXTD_DIR_INFORMATION FILE_ID_64_EXTD_DIR_INFORMATION;
typedef _FILE_ID_64_EXTD_DIR_INFORMATION* PFILE_ID_64_EXTD_DIR_INFORMATION;
typedef _FILE_ID_64_EXTD_BOTH_DIR_INFORMATION
    FILE_ID_64_EXTD_BOTH_DIR_INFORMATION;
typedef _FILE_ID_64_EXTD_BOTH_DIR_INFORMATION* PFILE_ID_64_EXTD_BOTH_DIR_INFORMATION;
typedef _FILE_ID_ALL_EXTD_DIR_INFORMATION FILE_ID_ALL_EXTD_DIR_INFORMATION;
typedef _FILE_ID_ALL_EXTD_DIR_INFORMATION* PFILE_ID_ALL_EXTD_DIR_INFORMATION;
typedef _FILE_ID_ALL_EXTD_BOTH_DIR_INFORMATION
    FILE_ID_ALL_EXTD_BOTH_DIR_INFORMATION;
typedef _FILE_ID_ALL_EXTD_BOTH_DIR_INFORMATION* PFILE_ID_ALL_EXTD_BOTH_DIR_INFORMATION;
typedef _FILE_STAT_INFORMATION FILE_STAT_INFORMATION;
typedef _FILE_STAT_INFORMATION* PFILE_STAT_INFORMATION;
typedef _FILE_STAT_BASIC_INFORMATION FILE_STAT_BASIC_INFORMATION;
typedef _FILE_STAT_BASIC_INFORMATION* PFILE_STAT_BASIC_INFORMATION;
typedef _FILE_MEMORY_PARTITION_INFORMATION FILE_MEMORY_PARTITION_INFORMATION;
typedef _FILE_MEMORY_PARTITION_INFORMATION* PFILE_MEMORY_PARTITION_INFORMATION;
typedef _FILE_STAT_LX_INFORMATION FILE_STAT_LX_INFORMATION;
typedef _FILE_STAT_LX_INFORMATION* PFILE_STAT_LX_INFORMATION;
typedef _FILE_STORAGE_RESERVE_ID_INFORMATION
    FILE_STORAGE_RESERVE_ID_INFORMATION;
typedef _FILE_STORAGE_RESERVE_ID_INFORMATION* PFILE_STORAGE_RESERVE_ID_INFORMATION;
typedef _FILE_CASE_SENSITIVE_INFORMATION FILE_CASE_SENSITIVE_INFORMATION;
typedef _FILE_CASE_SENSITIVE_INFORMATION* PFILE_CASE_SENSITIVE_INFORMATION;
typedef _FILE_KNOWN_FOLDER_TYPE FILE_KNOWN_FOLDER_TYPE;
typedef _FILE_KNOWN_FOLDER_INFORMATION FILE_KNOWN_FOLDER_INFORMATION;
typedef _FILE_KNOWN_FOLDER_INFORMATION* PFILE_KNOWN_FOLDER_INFORMATION;
typedef _FILE_STREAM_RESERVATION_INFORMATION
    FILE_STREAM_RESERVATION_INFORMATION;
typedef _FILE_STREAM_RESERVATION_INFORMATION* PFILE_STREAM_RESERVATION_INFORMATION;
typedef _MUP_PROVIDER_INFORMATION MUP_PROVIDER_INFORMATION;
typedef _MUP_PROVIDER_INFORMATION* PMUP_PROVIDER_INFORMATION;
typedef _FILE_INFORMATION_DEFINITION FILE_INFORMATION_DEFINITION;
typedef _FILE_INFORMATION_DEFINITION* PFILE_INFORMATION_DEFINITION;
typedef _FILE_DIRECTORY_INFORMATION FILE_DIRECTORY_INFORMATION;
typedef _FILE_DIRECTORY_INFORMATION* PFILE_DIRECTORY_INFORMATION;
typedef _FILE_FULL_DIR_INFORMATION FILE_FULL_DIR_INFORMATION;
typedef _FILE_FULL_DIR_INFORMATION* PFILE_FULL_DIR_INFORMATION;
typedef _FILE_ID_FULL_DIR_INFORMATION FILE_ID_FULL_DIR_INFORMATION;
typedef _FILE_ID_FULL_DIR_INFORMATION* PFILE_ID_FULL_DIR_INFORMATION;
typedef _FILE_BOTH_DIR_INFORMATION FILE_BOTH_DIR_INFORMATION;
typedef _FILE_BOTH_DIR_INFORMATION* PFILE_BOTH_DIR_INFORMATION;
typedef _FILE_ID_BOTH_DIR_INFORMATION FILE_ID_BOTH_DIR_INFORMATION;
typedef _FILE_ID_BOTH_DIR_INFORMATION* PFILE_ID_BOTH_DIR_INFORMATION;
typedef _FILE_NAMES_INFORMATION FILE_NAMES_INFORMATION;
typedef _FILE_NAMES_INFORMATION* PFILE_NAMES_INFORMATION;
typedef _FILE_ID_GLOBAL_TX_DIR_INFORMATION FILE_ID_GLOBAL_TX_DIR_INFORMATION;
typedef _FILE_ID_GLOBAL_TX_DIR_INFORMATION* PFILE_ID_GLOBAL_TX_DIR_INFORMATION;
typedef _FILE_OBJECTID_INFORMATION FILE_OBJECTID_INFORMATION;
typedef _VR_UNLOAD_DYNAMICALLY_LOADED_HIVES* PVR_UNLOAD_DYNAMICALLY_LOADED_HIVES;
typedef _FILE_DIRECTORY_NEXT_INFORMATION FILE_DIRECTORY_NEXT_INFORMATION;
typedef _FILE_FULL_EA_INFORMATION FILE_FULL_EA_INFORMATION;
typedef _FILE_GET_EA_INFORMATION FILE_GET_EA_INFORMATION;
typedef _FILE_GET_QUOTA_INFORMATION FILE_GET_QUOTA_INFORMATION;
typedef _IMAGE_DVRT_ARM64X_DELTA_FIXUP_RECORD
    IMAGE_DVRT_ARM64X_DELTA_FIXUP_RECORD;
typedef _FILE_GET_QUOTA_INFORMATION* PFILE_GET_QUOTA_INFORMATION;
typedef _TOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
    TOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
typedef _FSINFOCLASS FS_INFORMATION_CLASS;
typedef _FILE_FS_VOLUME_INFORMATION FILE_FS_VOLUME_INFORMATION;
typedef _FILE_FS_VOLUME_INFORMATION* PFILE_FS_VOLUME_INFORMATION;
typedef _FILE_FS_LABEL_INFORMATION FILE_FS_LABEL_INFORMATION;
typedef _FILE_FS_LABEL_INFORMATION* PFILE_FS_LABEL_INFORMATION;
typedef _FILE_FS_SIZE_INFORMATION FILE_FS_SIZE_INFORMATION;
typedef _FILE_FS_SIZE_INFORMATION* PFILE_FS_SIZE_INFORMATION;
typedef _FILE_FS_CONTROL_INFORMATION FILE_FS_CONTROL_INFORMATION;
typedef _FILE_FS_CONTROL_INFORMATION* PFILE_FS_CONTROL_INFORMATION;
typedef _FILE_FS_FULL_SIZE_INFORMATION FILE_FS_FULL_SIZE_INFORMATION;
typedef _FILE_FS_FULL_SIZE_INFORMATION* PFILE_FS_FULL_SIZE_INFORMATION;
typedef _FILE_FS_OBJECTID_INFORMATION FILE_FS_OBJECTID_INFORMATION;
typedef _FILE_FS_OBJECTID_INFORMATION* PFILE_FS_OBJECTID_INFORMATION;
typedef _FILE_FS_DEVICE_INFORMATION FILE_FS_DEVICE_INFORMATION;
typedef _FILE_FS_DEVICE_INFORMATION* PFILE_FS_DEVICE_INFORMATION;
typedef _FILE_FS_ATTRIBUTE_INFORMATION FILE_FS_ATTRIBUTE_INFORMATION;
typedef _FILE_FS_ATTRIBUTE_INFORMATION* PFILE_FS_ATTRIBUTE_INFORMATION;
typedef _FILE_FS_DRIVER_PATH_INFORMATION FILE_FS_DRIVER_PATH_INFORMATION;
typedef _FILE_FS_DRIVER_PATH_INFORMATION* PFILE_FS_DRIVER_PATH_INFORMATION;
typedef _FILE_FS_VOLUME_FLAGS_INFORMATION FILE_FS_VOLUME_FLAGS_INFORMATION;
typedef _FILE_FS_VOLUME_FLAGS_INFORMATION* PFILE_FS_VOLUME_FLAGS_INFORMATION;
typedef _FILE_FS_SECTOR_SIZE_INFORMATION FILE_FS_SECTOR_SIZE_INFORMATION;
typedef _FILE_FS_SECTOR_SIZE_INFORMATION* PFILE_FS_SECTOR_SIZE_INFORMATION;
typedef _FILE_FS_DATA_COPY_INFORMATION FILE_FS_DATA_COPY_INFORMATION;
typedef _FILE_FS_DATA_COPY_INFORMATION* PFILE_FS_DATA_COPY_INFORMATION;
typedef _HEAP_RANGE_INFORMATION* PHEAP_RANGE_INFORMATION;
typedef _LSA_TOKEN_INFORMATION_NULL* PLSA_TOKEN_INFORMATION_NULL;
typedef _LSA_TOKEN_INFORMATION_TYPE LSA_TOKEN_INFORMATION_TYPE;
typedef _FILE_FS_GUID_INFORMATION FILE_FS_GUID_INFORMATION;
typedef _DIRECTORY_NOTIFY_INFORMATION_CLASS DIRECTORY_NOTIFY_INFORMATION_CLASS;
typedef _IO_COMPLETION_BASIC_INFORMATION* PIO_COMPLETION_BASIC_INFORMATION;
typedef _FILE_IO_COMPLETION_INFORMATION* PFILE_IO_COMPLETION_INFORMATION;
typedef _IO_SESSION_EVENT IO_SESSION_EVENT;
typedef _IO_SESSION_STATE IO_SESSION_STATE;
typedef _INTERFACE_TYPE INTERFACE_TYPE;
typedef _INTERFACE_TYPE* PINTERFACE_TYPE;
typedef _DMA_WIDTH DMA_WIDTH;
typedef _DMA_WIDTH* PDMA_WIDTH;
typedef _DMA_SPEED DMA_SPEED;
typedef _DMA_SPEED* PDMA_SPEED;
typedef _BUS_DATA_TYPE BUS_DATA_TYPE;
typedef _BUS_DATA_TYPE* PBUS_DATA_TYPE;
typedef _REPARSE_DATA_BUFFER REPARSE_DATA_BUFFER;
typedef _REPARSE_DATA_BUFFER* PREPARSE_DATA_BUFFER;
typedef _REPARSE_DATA_BUFFER_EX REPARSE_DATA_BUFFER_EX;
typedef _REPARSE_DATA_BUFFER_EX* PREPARSE_DATA_BUFFER_EX;
typedef _FILE_PIPE_ASSIGN_EVENT_BUFFER FILE_PIPE_ASSIGN_EVENT_BUFFER;
typedef _FILE_PIPE_ASSIGN_EVENT_BUFFER* PFILE_PIPE_ASSIGN_EVENT_BUFFER;
typedef _FILE_PIPE_PEEK_BUFFER FILE_PIPE_PEEK_BUFFER;
typedef _FILE_PIPE_PEEK_BUFFER* PFILE_PIPE_PEEK_BUFFER;
typedef _FILE_PIPE_EVENT_BUFFER FILE_PIPE_EVENT_BUFFER;
typedef _FILE_PIPE_EVENT_BUFFER* PFILE_PIPE_EVENT_BUFFER;
typedef _FILE_PIPE_WAIT_FOR_BUFFER FILE_PIPE_WAIT_FOR_BUFFER;
typedef _FILE_PIPE_WAIT_FOR_BUFFER* PFILE_PIPE_WAIT_FOR_BUFFER;
typedef _FILE_PIPE_CLIENT_PROCESS_BUFFER FILE_PIPE_CLIENT_PROCESS_BUFFER;
typedef _FILE_PIPE_CLIENT_PROCESS_BUFFER* PFILE_PIPE_CLIENT_PROCESS_BUFFER;
typedef _FILE_PIPE_CLIENT_PROCESS_BUFFER_V2 FILE_PIPE_CLIENT_PROCESS_BUFFER_V2;
typedef _FILE_PIPE_CLIENT_PROCESS_BUFFER_V2* PFILE_PIPE_CLIENT_PROCESS_BUFFER_V2;
typedef _FILE_PIPE_CLIENT_PROCESS_BUFFER_EX FILE_PIPE_CLIENT_PROCESS_BUFFER_EX;
typedef _FILE_PIPE_CLIENT_PROCESS_BUFFER_EX* PFILE_PIPE_CLIENT_PROCESS_BUFFER_EX;
typedef _FILE_PIPE_SILO_ARRIVAL_INPUT FILE_PIPE_SILO_ARRIVAL_INPUT;
typedef _FILE_PIPE_SILO_ARRIVAL_INPUT* PFILE_PIPE_SILO_ARRIVAL_INPUT;
typedef _FILE_PIPE_CREATE_SYMLINK_INPUT FILE_PIPE_CREATE_SYMLINK_INPUT;
typedef _FILE_PIPE_CREATE_SYMLINK_INPUT* PFILE_PIPE_CREATE_SYMLINK_INPUT;
typedef _FILE_PIPE_DELETE_SYMLINK_INPUT FILE_PIPE_DELETE_SYMLINK_INPUT;
typedef _FILE_PIPE_DELETE_SYMLINK_INPUT* PFILE_PIPE_DELETE_SYMLINK_INPUT;
typedef _FILE_MAILSLOT_PEEK_BUFFER FILE_MAILSLOT_PEEK_BUFFER;
typedef _FILE_MAILSLOT_PEEK_BUFFER* PFILE_MAILSLOT_PEEK_BUFFER;
typedef _MOUNTMGR_CREATE_POINT_INPUT MOUNTMGR_CREATE_POINT_INPUT;
typedef _MOUNTMGR_CREATE_POINT_INPUT* PMOUNTMGR_CREATE_POINT_INPUT;
typedef _MOUNTMGR_MOUNT_POINT MOUNTMGR_MOUNT_POINT;
typedef _MOUNTMGR_MOUNT_POINT* PMOUNTMGR_MOUNT_POINT;
typedef _MOUNTMGR_MOUNT_POINTS MOUNTMGR_MOUNT_POINTS;
typedef _MOUNTMGR_MOUNT_POINTS* PMOUNTMGR_MOUNT_POINTS;
typedef _MOUNTMGR_DRIVE_LETTER_TARGET MOUNTMGR_DRIVE_LETTER_TARGET;
typedef _MOUNTMGR_DRIVE_LETTER_TARGET* PMOUNTMGR_DRIVE_LETTER_TARGET;
typedef _MOUNTMGR_DRIVE_LETTER_INFORMATION MOUNTMGR_DRIVE_LETTER_INFORMATION;
typedef _MOUNTMGR_VOLUME_MOUNT_POINT MOUNTMGR_VOLUME_MOUNT_POINT;
typedef _MOUNTMGR_VOLUME_MOUNT_POINT* PMOUNTMGR_VOLUME_MOUNT_POINT;
typedef STRING* PLSA_STRING;
typedef _MOUNTMGR_AUTO_MOUNT_STATE MOUNTMGR_AUTO_MOUNT_STATE;
typedef _LSA_TRANSLATED_SID2 LSA_TRANSLATED_SID2;
typedef _MOUNTMGR_SILO_ARRIVAL_INPUT MOUNTMGR_SILO_ARRIVAL_INPUT;
typedef _MOUNTMGR_SILO_ARRIVAL_INPUT* PMOUNTMGR_SILO_ARRIVAL_INPUT;
typedef _MOUNTDEV_NAME MOUNTDEV_NAME;
typedef _MOUNTDEV_NAME* PMOUNTDEV_NAME;
typedef _MOUNTMGR_VOLUME_PATHS MOUNTMGR_VOLUME_PATHS;
typedef _MOUNTMGR_VOLUME_PATHS* PMOUNTMGR_VOLUME_PATHS;
typedef _FLT_CONNECT_CONTEXT FLT_CONNECT_CONTEXT;
typedef _FLT_CONNECT_CONTEXT* PFLT_CONNECT_CONTEXT;
typedef _FLT_PORT_FULL_EA FLT_PORT_FULL_EA;
typedef _FLT_PORT_FULL_EA* PFLT_PORT_FULL_EA;
typedef _FLT_LOAD_PARAMETERS FLT_LOAD_PARAMETERS;
typedef _FLT_LOAD_PARAMETERS* PFLT_LOAD_PARAMETERS;
typedef _FLT_LINK_TYPE FLT_LINK_TYPE;
typedef _FLT_LINK_TYPE* PFLT_LINK_TYPE;
typedef _FLT_LINK FLT_LINK;
typedef _FLT_LINK* PFLT_LINK;
typedef _FLT_FILTER_PARAMETERS FLT_FILTER_PARAMETERS;
typedef _FLT_FILTER_PARAMETERS* PFLT_FILTER_PARAMETERS;
typedef _FLT_INSTANCE_PARAMETERS FLT_INSTANCE_PARAMETERS;
typedef _FLT_INSTANCE_PARAMETERS* PFLT_INSTANCE_PARAMETERS;
typedef _FLT_VOLUME_PARAMETERS FLT_VOLUME_PARAMETERS;
typedef _FLT_VOLUME_PARAMETERS* PFLT_VOLUME_PARAMETERS;
typedef _ATTACH_TYPE ATTACH_TYPE;
typedef _ATTACH_TYPE* PATTACH_TYPE;
typedef _PO_WAKE_SOURCE_HEADER PO_WAKE_SOURCE_HEADER;
typedef _FLT_ATTACH FLT_ATTACH;
typedef _RTL_IMAGE_MITIGATION_STRICT_HANDLE_CHECK_POLICY* PRTL_IMAGE_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
typedef _RTL_IMAGE_MITIGATION_DYNAMIC_CODE_POLICY
    RTL_IMAGE_MITIGATION_DYNAMIC_CODE_POLICY;
typedef _MUP_FSCTL_UNC_CACHE_INFORMATION* PMUP_FSCTL_UNC_CACHE_INFORMATION;
typedef _MUP_FSCTL_UNC_PROVIDER_INFORMATION* PMUP_FSCTL_UNC_PROVIDER_INFORMATION;
typedef _MUP_FSCTL_SURROGATE_PROVIDER_ENTRY* PMUP_FSCTL_SURROGATE_PROVIDER_ENTRY;
typedef _MUP_FSCTL_SURROGATE_PROVIDER_INFORMATION
    MUP_FSCTL_SURROGATE_PROVIDER_INFORMATION;
typedef _MUP_FSCTL_SURROGATE_PROVIDER_INFORMATION* PMUP_FSCTL_SURROGATE_PROVIDER_INFORMATION;
typedef _MUP_FSCTL_UNC_HARDENING_PREFIX_TABLE_ENTRY
    MUP_FSCTL_UNC_HARDENING_PREFIX_TABLE_ENTRY;
typedef _MUP_FSCTL_UNC_HARDENING_PREFIX_TABLE_ENTRY* PMUP_FSCTL_UNC_HARDENING_PREFIX_TABLE_ENTRY;
typedef _MUP_FSCTL_QUERY_UNC_HARDENING_CONFIGURATION_IN
    MUP_FSCTL_QUERY_UNC_HARDENING_CONFIGURATION_IN;
typedef _MUP_FSCTL_QUERY_UNC_HARDENING_CONFIGURATION_IN* PMUP_FSCTL_QUERY_UNC_HARDENING_CONFIGURATION_IN;
typedef _MUP_FSCTL_QUERY_UNC_HARDENING_CONFIGURATION_OUT
    MUP_FSCTL_QUERY_UNC_HARDENING_CONFIGURATION_OUT;
typedef _MUP_FSCTL_QUERY_UNC_HARDENING_CONFIGURATION_OUT* PMUP_FSCTL_QUERY_UNC_HARDENING_CONFIGURATION_OUT;
typedef _FS_FILTER_SECTION_SYNC_TYPE FS_FILTER_SECTION_SYNC_TYPE;
typedef _FS_FILTER_SECTION_SYNC_TYPE* PFS_FILTER_SECTION_SYNC_TYPE;
typedef _CREATE_FILE_TYPE CREATE_FILE_TYPE;
typedef _NAMED_PIPE_CREATE_PARAMETERS NAMED_PIPE_CREATE_PARAMETERS;
typedef _NAMED_PIPE_CREATE_PARAMETERS* PNAMED_PIPE_CREATE_PARAMETERS;
typedef _MAILSLOT_CREATE_PARAMETERS MAILSLOT_CREATE_PARAMETERS;
typedef _MAILSLOT_CREATE_PARAMETERS* PMAILSLOT_CREATE_PARAMETERS;
typedef _OPLOCK_KEY_ECP_CONTEXT OPLOCK_KEY_ECP_CONTEXT;
typedef _OPLOCK_KEY_ECP_CONTEXT* POPLOCK_KEY_ECP_CONTEXT;
typedef _OPLOCK_KEY_CONTEXT OPLOCK_KEY_CONTEXT;
typedef _OPLOCK_KEY_CONTEXT* POPLOCK_KEY_CONTEXT;
typedef _PORT_MESSAGE PORT_MESSAGE;
typedef _PORT_MESSAGE* PPORT_MESSAGE;
typedef _PORT_DATA_ENTRY PORT_DATA_ENTRY;
typedef _PORT_DATA_ENTRY* PPORT_DATA_ENTRY;
typedef _PORT_DATA_INFORMATION PORT_DATA_INFORMATION;
typedef _PORT_DATA_INFORMATION* PPORT_DATA_INFORMATION;
typedef _LPC_CLIENT_DIED_MSG LPC_CLIENT_DIED_MSG;
typedef _LPC_CLIENT_DIED_MSG* PLPC_CLIENT_DIED_MSG;
typedef _PORT_VIEW PORT_VIEW;
typedef _PORT_VIEW* PPORT_VIEW;
typedef _REMOTE_PORT_VIEW REMOTE_PORT_VIEW;
typedef _REMOTE_PORT_VIEW* PREMOTE_PORT_VIEW;
typedef _PORT_MESSAGE64 PORT_MESSAGE64;
typedef _PORT_MESSAGE64* PPORT_MESSAGE64;
typedef _LPC_CLIENT_DIED_MSG64 LPC_CLIENT_DIED_MSG64;
typedef _LPC_CLIENT_DIED_MSG64* PLPC_CLIENT_DIED_MSG64;
typedef _PORT_VIEW64 PORT_VIEW64;
typedef _PORT_VIEW64* PPORT_VIEW64;
typedef _REMOTE_PORT_VIEW64 REMOTE_PORT_VIEW64;
typedef _PORT_INFORMATION_CLASS PORT_INFORMATION_CLASS;
typedef HANDLE ALPC_HANDLE;
typedef HANDLE* PALPC_HANDLE;
typedef _ALPC_PORT_ATTRIBUTES ALPC_PORT_ATTRIBUTES;
typedef _RTL_MEMORY_ZONE* PRTL_MEMORY_ZONE;
typedef _ALPC_MESSAGE_ATTRIBUTES ALPC_MESSAGE_ATTRIBUTES;
typedef _ALPC_COMPLETION_LIST_STATE* PALPC_COMPLETION_LIST_STATE;
typedef _ALPC_CONTEXT_ATTR ALPC_CONTEXT_ATTR;
typedef _ALPC_CONTEXT_ATTR* PALPC_CONTEXT_ATTR;
typedef _ALPC_HANDLE_ATTR32 ALPC_HANDLE_ATTR32;
typedef _ALPC_HANDLE_ATTR32* PALPC_HANDLE_ATTR32;
typedef _ALPC_HANDLE_ATTR ALPC_HANDLE_ATTR;
typedef _ALPC_HANDLE_ATTR* PALPC_HANDLE_ATTR;
typedef _ALPC_SECURITY_ATTR ALPC_SECURITY_ATTR;
typedef _ALPC_SECURITY_ATTR* PALPC_SECURITY_ATTR;
typedef _ALPC_DATA_VIEW_ATTR ALPC_DATA_VIEW_ATTR;
typedef _ALPC_DATA_VIEW_ATTR* PALPC_DATA_VIEW_ATTR;
typedef _ALPC_PORT_INFORMATION_CLASS ALPC_PORT_INFORMATION_CLASS;
typedef _ALPC_BASIC_INFORMATION ALPC_BASIC_INFORMATION;
typedef _ALPC_BASIC_INFORMATION* PALPC_BASIC_INFORMATION;
typedef _ALPC_PORT_ASSOCIATE_COMPLETION_PORT
    ALPC_PORT_ASSOCIATE_COMPLETION_PORT;
typedef _ALPC_PORT_ASSOCIATE_COMPLETION_PORT* PALPC_PORT_ASSOCIATE_COMPLETION_PORT;
typedef _ALPC_SERVER_INFORMATION ALPC_SERVER_INFORMATION;
typedef _ALPC_SERVER_INFORMATION* PALPC_SERVER_INFORMATION;
typedef _ALPC_PORT_MESSAGE_ZONE_INFORMATION ALPC_PORT_MESSAGE_ZONE_INFORMATION;
typedef _ALPC_PORT_MESSAGE_ZONE_INFORMATION* PALPC_PORT_MESSAGE_ZONE_INFORMATION;
typedef _ALPC_PORT_COMPLETION_LIST_INFORMATION
    ALPC_PORT_COMPLETION_LIST_INFORMATION;
typedef _ALPC_PORT_COMPLETION_LIST_INFORMATION* PALPC_PORT_COMPLETION_LIST_INFORMATION;
typedef _ALPC_REGISTER_CALLBACK ALPC_REGISTER_CALLBACK;
typedef _ALPC_REGISTER_CALLBACK* PALPC_REGISTER_CALLBACK;
typedef _ALPC_MESSAGE_INFORMATION_CLASS* PALPC_MESSAGE_INFORMATION_CLASS;
typedef _SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION_ENTRY
    SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION_ENTRY;
typedef _ALPC_MESSAGE_HANDLE_INFORMATION* PALPC_MESSAGE_HANDLE_INFORMATION;
typedef _PF_TRACE_LIMITS* PPF_TRACE_LIMITS;
typedef _PF_SYSTEM_PREFETCH_PARAMETERS PF_SYSTEM_PREFETCH_PARAMETERS;
typedef _PF_SYSTEM_PREFETCH_PARAMETERS* PPF_SYSTEM_PREFETCH_PARAMETERS;
typedef _PF_BOOT_CONTROL PF_BOOT_CONTROL;
typedef _PF_BOOT_CONTROL* PPF_BOOT_CONTROL;
typedef _PREFETCHER_INFORMATION_CLASS PREFETCHER_INFORMATION_CLASS;
typedef _PREFETCHER_INFORMATION PREFETCHER_INFORMATION;
typedef _PREFETCHER_INFORMATION* PPREFETCHER_INFORMATION;
typedef _PF_SYSTEM_SUPERFETCH_PARAMETERS PF_SYSTEM_SUPERFETCH_PARAMETERS;
typedef _PF_SYSTEM_SUPERFETCH_PARAMETERS* PPF_SYSTEM_SUPERFETCH_PARAMETERS;
typedef _PF_EVENT_TYPE PF_EVENT_TYPE;
typedef _PF_LOG_EVENT_DATA PF_LOG_EVENT_DATA;
typedef _PF_LOG_EVENT_DATA* PPF_LOG_EVENT_DATA;
typedef _PF_PFN_PRIO_REQUEST PF_PFN_PRIO_REQUEST;
typedef _PF_PFN_PRIO_REQUEST* PPF_PFN_PRIO_REQUEST;
typedef _PFS_PRIVATE_PAGE_SOURCE_TYPE PFS_PRIVATE_PAGE_SOURCE_TYPE;
typedef _PFS_PRIVATE_PAGE_SOURCE PFS_PRIVATE_PAGE_SOURCE;
typedef _PFS_PRIVATE_PAGE_SOURCE* PPFS_PRIVATE_PAGE_SOURCE;
typedef _PF_PRIVSOURCE_INFO PF_PRIVSOURCE_INFO;
typedef _PF_PRIVSOURCE_INFO* PPF_PRIVSOURCE_INFO;
typedef _PF_PRIVSOURCE_QUERY_REQUEST PF_PRIVSOURCE_QUERY_REQUEST;
typedef _PF_PRIVSOURCE_QUERY_REQUEST* PPF_PRIVSOURCE_QUERY_REQUEST;
typedef _PF_PHASED_SCENARIO_TYPE PF_PHASED_SCENARIO_TYPE;
typedef _PF_SCENARIO_PHASE_INFO PF_SCENARIO_PHASE_INFO;
typedef _PF_SCENARIO_PHASE_INFO* PPF_SCENARIO_PHASE_INFO;
typedef _PF_MEMORY_LIST_NODE PF_MEMORY_LIST_NODE;
typedef _PF_MEMORY_LIST_NODE* PPF_MEMORY_LIST_NODE;
typedef _PF_ROBUST_PROCESS_ENTRY PF_ROBUST_PROCESS_ENTRY;
typedef _PF_ROBUST_PROCESS_ENTRY* PPF_ROBUST_PROCESS_ENTRY;
typedef _PF_ROBUST_FILE_ENTRY PF_ROBUST_FILE_ENTRY;
typedef _PF_ROBUST_FILE_ENTRY* PPF_ROBUST_FILE_ENTRY;
typedef _PF_ROBUSTNESS_CONTROL_COMMAND PF_ROBUSTNESS_CONTROL_COMMAND;
typedef _PF_ROBUSTNESS_CONTROL PF_ROBUSTNESS_CONTROL;
typedef _PF_ROBUSTNESS_CONTROL* PPF_ROBUSTNESS_CONTROL;
typedef _PF_TIME_CONTROL PF_TIME_CONTROL;
typedef _PF_TIME_CONTROL* PPF_TIME_CONTROL;
typedef _PF_MEMORY_LIST_INFO PF_MEMORY_LIST_INFO;
typedef _PF_MEMORY_LIST_INFO* PPF_MEMORY_LIST_INFO;
typedef _PF_PHYSICAL_MEMORY_RANGE PF_PHYSICAL_MEMORY_RANGE;
typedef _PF_PHYSICAL_MEMORY_RANGE* PPF_PHYSICAL_MEMORY_RANGE;
typedef _PF_PHYSICAL_MEMORY_RANGE_INFO_V1 PF_PHYSICAL_MEMORY_RANGE_INFO_V1;
typedef _PF_PHYSICAL_MEMORY_RANGE_INFO_V1* PPF_PHYSICAL_MEMORY_RANGE_INFO_V1;
typedef _PF_PHYSICAL_MEMORY_RANGE_INFO_V2 PF_PHYSICAL_MEMORY_RANGE_INFO_V2;
typedef _POWER_INFORMATION_INTERNAL_HEADER POWER_INFORMATION_INTERNAL_HEADER;
typedef _PF_REPURPOSED_BY_PREFETCH_INFO PF_REPURPOSED_BY_PREFETCH_INFO;
typedef _RTL_BSD_DATA_POWER_TRANSITION* PRTL_BSD_DATA_POWER_TRANSITION;
typedef _PF_MIN_WS_AGE_RATE_CONTROL* PPF_MIN_WS_AGE_RATE_CONTROL;
typedef _PF_DEPRIORITIZE_OLD_PAGES* PPF_DEPRIORITIZE_OLD_PAGES;
typedef _PF_GPU_UTILIZATION_INFO* PPF_GPU_UTILIZATION_INFO;
typedef _SUPERFETCH_INFORMATION_CLASS SUPERFETCH_INFORMATION_CLASS;
typedef _SUPERFETCH_INFORMATION SUPERFETCH_INFORMATION;
typedef _SUPERFETCH_INFORMATION* PSUPERFETCH_INFORMATION;
typedef _PNP_VETO_TYPE PNP_VETO_TYPE;
typedef _PNP_VETO_TYPE* PPNP_VETO_TYPE;
typedef _PLUGPLAY_EVENT_CATEGORY PLUGPLAY_EVENT_CATEGORY;
typedef _PLUGPLAY_EVENT_CATEGORY* PPLUGPLAY_EVENT_CATEGORY;
typedef _PLUGPLAY_EVENT_BLOCK PLUGPLAY_EVENT_BLOCK;
typedef _PLUGPLAY_EVENT_BLOCK* PPLUGPLAY_EVENT_BLOCK;
typedef _PLUGPLAY_CONTROL_CLASS PLUGPLAY_CONTROL_CLASS;
typedef _PLUGPLAY_CONTROL_CLASS* PPLUGPLAY_CONTROL_CLASS;
typedef _DEVICE_RELATION_TYPE DEVICE_RELATION_TYPE;
typedef _DEVICE_RELATION_TYPE* PDEVICE_RELATION_TYPE;
typedef _BUS_QUERY_ID_TYPE BUS_QUERY_ID_TYPE;
typedef _BUS_QUERY_ID_TYPE* PBUS_QUERY_ID_TYPE;
typedef _DEVICE_TEXT_TYPE DEVICE_TEXT_TYPE;
typedef _DEVICE_TEXT_TYPE* PDEVICE_TEXT_TYPE;
typedef _ETW_UMS_EVENT_DIRECTED_SWITCH_START
    ETW_UMS_EVENT_DIRECTED_SWITCH_START;
typedef _DEVICE_USAGE_NOTIFICATION_TYPE DEVICE_USAGE_NOTIFICATION_TYPE;
typedef _DEVICE_USAGE_NOTIFICATION_TYPE* PDEVICE_USAGE_NOTIFICATION_TYPE;
typedef _PROCESSOR_POWER_INFORMATION PROCESSOR_POWER_INFORMATION;
typedef _PROCESSOR_POWER_INFORMATION* PPROCESSOR_POWER_INFORMATION;
typedef _RTL_DRIVE_LETTER_CURDIR32* PRTL_DRIVE_LETTER_CURDIR32;
typedef _SYSTEM_POWER_INFORMATION SYSTEM_POWER_INFORMATION;
typedef _CURDIR32 CURDIR32;
typedef _SYSTEM_POWER_INFORMATION* PSYSTEM_POWER_INFORMATION;
typedef _SYSTEM_HIBERFILE_INFORMATION SYSTEM_HIBERFILE_INFORMATION;
typedef _USER_EXPIRES_INFORMATION* PUSER_EXPIRES_INFORMATION;
typedef _USER_CONTROL_INFORMATION USER_CONTROL_INFORMATION;
typedef _SYSTEM_HIBERFILE_INFORMATION* PSYSTEM_HIBERFILE_INFORMATION;
typedef _RTL_USER_PROCESS_PARAMETERS32* PRTL_USER_PROCESS_PARAMETERS32;
typedef _USER_SET_PASSWORD_INFORMATION USER_SET_PASSWORD_INFORMATION;
typedef _SYSTEM_POWER_LOGGING_ENTRY SYSTEM_POWER_LOGGING_ENTRY;
typedef _ETW_UMS_EVENT_DISASSOCIATE ETW_UMS_EVENT_DISASSOCIATE;
typedef _SYSTEM_POWER_LOGGING_ENTRY* PSYSTEM_POWER_LOGGING_ENTRY;
typedef _POWER_STATE_DISABLED_TYPE POWER_STATE_DISABLED_TYPE;
typedef _POWER_STATE_DISABLED_TYPE* PPOWER_STATE_DISABLED_TYPE;
typedef _SYSTEM_POWER_STATE_DISABLE_REASON SYSTEM_POWER_STATE_DISABLE_REASON;
typedef _SYSTEM_POWER_STATE_DISABLE_REASON* PSYSTEM_POWER_STATE_DISABLE_REASON;
typedef _COUNTED_REASON_CONTEXT COUNTED_REASON_CONTEXT;
typedef _COUNTED_REASON_CONTEXT* PCOUNTED_REASON_CONTEXT;
typedef _POWER_REQUEST_TYPE_INTERNAL POWER_REQUEST_TYPE_INTERNAL;
typedef _POWER_REQUEST_ACTION POWER_REQUEST_ACTION;
typedef _POWER_REQUEST_ACTION* PPOWER_REQUEST_ACTION;
typedef _POWER_STATE POWER_STATE;
typedef _POWER_STATE* PPOWER_STATE;
typedef _POWER_STATE_TYPE POWER_STATE_TYPE;
typedef _POWER_STATE_TYPE* PPOWER_STATE_TYPE;
typedef _SYSTEM_POWER_STATE_CONTEXT SYSTEM_POWER_STATE_CONTEXT;
typedef _SYSTEM_POWER_STATE_CONTEXT* PSYSTEM_POWER_STATE_CONTEXT;
typedef _REQUESTER_TYPE REQUESTER_TYPE;
typedef _COUNTED_REASON_CONTEXT_RELATIVE COUNTED_REASON_CONTEXT_RELATIVE;
typedef _COUNTED_REASON_CONTEXT_RELATIVE* PCOUNTED_REASON_CONTEXT_RELATIVE;
typedef _DIAGNOSTIC_BUFFER DIAGNOSTIC_BUFFER;
typedef _DIAGNOSTIC_BUFFER* PDIAGNOSTIC_BUFFER;
typedef _WAKE_TIMER_INFO WAKE_TIMER_INFO;
typedef _WAKE_TIMER_INFO* PWAKE_TIMER_INFO;
typedef _PROCESSOR_PERF_CAP_HV PROCESSOR_PERF_CAP_HV;
typedef _PROCESSOR_PERF_CAP_HV* PPROCESSOR_PERF_CAP_HV;
typedef PROCESSOR_IDLE_TIMES PROCESSOR_IDLE_TIMES;
typedef PROCESSOR_IDLE_TIMES* PPROCESSOR_IDLE_TIMES;
typedef NTSTATUS PROCESSOR_IDLE_HANDLER( ULONG_PTR, PPROCESSOR_IDLE_TIMES );
typedef PROCESSOR_IDLE_HANDLER* PPROCESSOR_IDLE_HANDLER;
typedef _PROCESSOR_IDLE_STATE PROCESSOR_IDLE_STATE;
typedef _PROCESSOR_IDLE_STATE* PPROCESSOR_IDLE_STATE;
typedef _PROCESSOR_IDLE_STATES PROCESSOR_IDLE_STATES;
typedef _PROCESSOR_IDLE_STATES* PPROCESSOR_IDLE_STATES;
typedef _PROCESSOR_LOAD PROCESSOR_LOAD;
typedef _PROCESSOR_LOAD* PPROCESSOR_LOAD;
typedef _PROCESSOR_CAP PROCESSOR_CAP;
typedef _PROCESSOR_CAP* PPROCESSOR_CAP;
typedef _PO_WAKE_SOURCE_INFO PO_WAKE_SOURCE_INFO;
typedef _PO_WAKE_SOURCE_INFO* PPO_WAKE_SOURCE_INFO;
typedef _PO_WAKE_SOURCE_HISTORY PO_WAKE_SOURCE_HISTORY;
typedef _PO_WAKE_SOURCE_HISTORY* PPO_WAKE_SOURCE_HISTORY;
typedef _PO_WAKE_SOURCE_TYPE PO_WAKE_SOURCE_TYPE;
typedef _PO_WAKE_SOURCE_TYPE* PPO_WAKE_SOURCE_TYPE;
typedef _PO_INTERNAL_WAKE_SOURCE_TYPE PO_INTERNAL_WAKE_SOURCE_TYPE;
typedef _PO_FIXED_WAKE_SOURCE_TYPE PO_FIXED_WAKE_SOURCE_TYPE;
typedef _PO_FIXED_WAKE_SOURCE_TYPE* PPO_FIXED_WAKE_SOURCE_TYPE;
typedef _IMAGE_DVRT_ARM64X_FIXUP_RECORD IMAGE_DVRT_ARM64X_FIXUP_RECORD;
typedef _PO_WAKE_SOURCE_HEADER* PPO_WAKE_SOURCE_HEADER;
typedef _PO_WAKE_SOURCE_DEVICE PO_WAKE_SOURCE_DEVICE;
typedef _PO_WAKE_SOURCE_DEVICE* PPO_WAKE_SOURCE_DEVICE;
typedef _DOMAIN_DISPLAY_OEM_USER* PDOMAIN_DISPLAY_OEM_USER;
typedef _PO_WAKE_SOURCE_FIXED PO_WAKE_SOURCE_FIXED;
typedef _DOMAIN_DISPLAY_GROUP* PDOMAIN_DISPLAY_GROUP;
typedef _PO_WAKE_SOURCE_FIXED* PPO_WAKE_SOURCE_FIXED;
typedef _IMAGE_DVRT_ARM64X_DELTA_FIXUP_RECORD* PIMAGE_DVRT_ARM64X_DELTA_FIXUP_RECORD;
typedef _IMAGE_THUNK_DATA64 IMAGE_THUNK_DATA64;
typedef _DOMAIN_LOCALIZABLE_ACCOUNTS_ENTRY* PDOMAIN_LOCALIZABLE_ACCOUNT_ENTRY;
typedef _PO_WAKE_SOURCE_INTERNAL PO_WAKE_SOURCE_INTERNAL;
typedef _PO_WAKE_SOURCE_INTERNAL* PPO_WAKE_SOURCE_INTERNAL;
typedef _PO_WAKE_SOURCE_TIMER PO_WAKE_SOURCE_TIMER;
typedef _PO_WAKE_SOURCE_TIMER* PPO_WAKE_SOURCE_TIMER;
typedef _HEAP_EVENT_COMMIT_DECOMMIT HEAP_EVENT_COMMIT_DECOMMIT;
typedef _ETW_HEAP_EVENT_CREATE* PETW_HEAP_EVENT_CREATE;
typedef _POWER_REQUEST POWER_REQUEST;
typedef _POWER_REQUEST* PPOWER_REQUEST;
typedef _POWER_REQUEST_LIST POWER_REQUEST_LIST;
typedef _POWER_REQUEST_LIST* PPOWER_REQUEST_LIST;
typedef _POWER_STATE_HANDLER_TYPE POWER_STATE_HANDLER_TYPE;
typedef _POWER_STATE_HANDLER_TYPE* PPOWER_STATE_HANDLER_TYPE;
typedef NTSTATUS ( *PENTER_STATE_SYSTEM_HANDLER )( PVOID );
typedef NTSTATUS ( *PENTER_STATE_HANDLER )( PVOID, PENTER_STATE_SYSTEM_HANDLER, PVOID, LONG, volatile LONG* );
typedef _POWER_STATE_HANDLER POWER_STATE_HANDLER;
typedef _POWER_STATE_HANDLER* PPOWER_STATE_HANDLER;
typedef NTSTATUS ( *PENTER_STATE_NOTIFY_HANDLER )( POWER_STATE_HANDLER_TYPE, PVOID, BOOLEAN );
typedef _POWER_STATE_NOTIFY_HANDLER POWER_STATE_NOTIFY_HANDLER;
typedef _POWER_STATE_NOTIFY_HANDLER* PPOWER_STATE_NOTIFY_HANDLER;
typedef _POWER_REQUEST_ACTION_INTERNAL POWER_REQUEST_ACTION_INTERNAL;
typedef _POWER_REQUEST_ACTION_INTERNAL* PPOWER_REQUEST_ACTION_INTERNAL;
typedef _POWER_INFORMATION_LEVEL_INTERNAL POWER_INFORMATION_LEVEL_INTERNAL;
typedef _POWER_S0_DISCONNECTED_REASON POWER_S0_DISCONNECTED_REASON;
typedef _POWER_S0_LOW_POWER_IDLE_INFO POWER_S0_LOW_POWER_IDLE_INFO;
typedef _POWER_S0_LOW_POWER_IDLE_INFO* PPOWER_S0_LOW_POWER_IDLE_INFO;
typedef _PERFINFO_DRIVER_COMPLETIONROUTINE PERFINFO_DRIVER_COMPLETIONROUTINE;
typedef _SAM_GENERIC_OPERATION_INPUT* PSAM_GENERIC_OPERATION_INPUT;
typedef _POWER_INFORMATION_INTERNAL_HEADER* PPOWER_INFORMATION_INTERNAL_HEADER;
typedef _LSA_AUTH_CALLBACKS LSA_AUTH_CALLBACKS;
typedef NTSTATUS ( *PFN_LSA_LOGON_USER )( HANDLE, PLSA_STRING, SECURITY_LOGON_TYPE, ULONG, PVOID, ULONG, PTOKEN_GROUPS, PTOKEN_SOURCE, PVOID*, PULONG, PLUID, PHANDLE, PQUOTA_LIMITS, PNTSTATUS );
typedef _POWER_USER_ABSENCE_PREDICTION POWER_USER_ABSENCE_PREDICTION;
typedef _POWER_USER_ABSENCE_PREDICTION* PPOWER_USER_ABSENCE_PREDICTION;
typedef _POWER_USER_ABSENCE_PREDICTION_CAPABILITY* PPOWER_USER_ABSENCE_PREDICTION_CAPABILITY;
typedef _POWER_PROCESSOR_LATENCY_HINT POWER_PROCESSOR_LATENCY_HINT;
typedef _SECURE_SETTING_VALUE_TYPE* PSECURE_SETTING_VALUE_TYPE;
typedef _POWER_PROCESSOR_LATENCY_HINT* PPOWER_PROCESSOR_LATENCY_HINT;
typedef _VDMSERVICECLASS VDMSERVICECLASS;
typedef _POWER_STANDBY_NETWORK_REQUEST POWER_STANDBY_NETWORK_REQUEST;
typedef _SAM_GENERIC_OPERATION_OUTPUT SAM_GENERIC_OPERATION_OUTPUT;
typedef _POWER_STANDBY_NETWORK_REQUEST* PPOWER_STANDBY_NETWORK_REQUEST;
typedef _PERFINFO_SET_POWER_ACTION PERFINFO_SET_POWER_ACTION;
typedef _POWER_SET_BACKGROUND_TASK_STATE POWER_SET_BACKGROUND_TASK_STATE;
typedef _LSA_TOKEN_INFORMATION_V1 LSA_TOKEN_INFORMATION_V1;
typedef LSA_TOKEN_INFORMATION_V1 LSA_TOKEN_INFORMATION_V2;
typedef _POWER_SET_BACKGROUND_TASK_STATE* PPOWER_SET_BACKGROUND_TASK_STATE;
typedef _POWER_BOOT_SESSION_STANDBY_ACTIVATION_INFO
    POWER_BOOT_SESSION_STANDBY_ACTIVATION_INFO;
typedef _POWER_BOOT_SESSION_STANDBY_ACTIVATION_INFO* PPOWER_BOOT_SESSION_STANDBY_ACTIVATION_INFO;
typedef _POWER_SESSION_POWER_STATE POWER_SESSION_POWER_STATE;
typedef _POWER_SESSION_POWER_STATE* PPOWER_SESSION_POWER_STATE;
typedef _POWER_INTERNAL_PROCESSOR_QOS_SUPPORT
    POWER_INTERNAL_PROCESSOR_QOS_SUPPORT;
typedef _POWER_INTERNAL_PROCESSOR_QOS_SUPPORT* PPOWER_INTERNAL_PROCESSOR_QOS_SUPPORT;
typedef _POWER_INTERNAL_HOST_ENERGY_SAVER_STATE
    POWER_INTERNAL_HOST_ENERGY_SAVER_STATE;
typedef _POWER_INTERNAL_HOST_ENERGY_SAVER_STATE* PPOWER_INTERNAL_HOST_ENERGY_SAVER_STATE;
typedef _POWER_INTERNAL_PROCESSOR_BRANDED_FREQUENCY_INPUT
    POWER_INTERNAL_PROCESSOR_BRANDED_FREQUENCY_INPUT;
typedef _POWER_INTERNAL_PROCESSOR_BRANDED_FREQUENCY_INPUT* PPOWER_INTERNAL_PROCESSOR_BRANDED_FREQUENCY_INPUT;
typedef _POWER_INTERNAL_PROCESSOR_BRANDED_FREQUENCY_OUTPUT
    POWER_INTERNAL_PROCESSOR_BRANDED_FREQUENCY_OUTPUT;
typedef _POWER_INTERNAL_PROCESSOR_BRANDED_FREQUENCY_OUTPUT* PPOWER_INTERNAL_PROCESSOR_BRANDED_FREQUENCY_OUTPUT;
typedef _PROCESSOR_IDLE_VETO PROCESSOR_IDLE_VETO;
typedef _PROCESSOR_IDLE_VETO* PPROCESSOR_IDLE_VETO;
typedef _PLATFORM_IDLE_VETO PLATFORM_IDLE_VETO;
typedef _PLATFORM_IDLE_VETO* PPLATFORM_IDLE_VETO;
typedef _POWER_INTERNAL_BOOTAPP_DIAGNOSTIC POWER_INTERNAL_BOOTAPP_DIAGNOSTIC;
typedef _POWER_INTERNAL_BOOTAPP_DIAGNOSTIC* PPOWER_INTERNAL_BOOTAPP_DIAGNOSTIC;
typedef _KEY_INFORMATION_CLASS KEY_INFORMATION_CLASS;
typedef _KEY_BASIC_INFORMATION KEY_BASIC_INFORMATION;
typedef _KEY_BASIC_INFORMATION* PKEY_BASIC_INFORMATION;
typedef _KEY_NODE_INFORMATION KEY_NODE_INFORMATION;
typedef _KEY_NODE_INFORMATION* PKEY_NODE_INFORMATION;
typedef _KEY_FULL_INFORMATION KEY_FULL_INFORMATION;
typedef _KEY_FULL_INFORMATION* PKEY_FULL_INFORMATION;
typedef _KEY_NAME_INFORMATION KEY_NAME_INFORMATION;
typedef _KEY_NAME_INFORMATION* PKEY_NAME_INFORMATION;
typedef _KEY_CACHED_INFORMATION KEY_CACHED_INFORMATION;
typedef _KEY_CACHED_INFORMATION* PKEY_CACHED_INFORMATION;
typedef _KEY_FLAGS_INFORMATION KEY_FLAGS_INFORMATION;
typedef _KEY_FLAGS_INFORMATION* PKEY_FLAGS_INFORMATION;
typedef _KEY_VIRTUALIZATION_INFORMATION KEY_VIRTUALIZATION_INFORMATION;
typedef _KEY_VIRTUALIZATION_INFORMATION* PKEY_VIRTUALIZATION_INFORMATION;
typedef _KEY_TRUST_INFORMATION KEY_TRUST_INFORMATION;
typedef _KEY_TRUST_INFORMATION* PKEY_TRUST_INFORMATION;
typedef _KEY_LAYER_INFORMATION KEY_LAYER_INFORMATION;
typedef _KEY_LAYER_INFORMATION* PKEY_LAYER_INFORMATION;
typedef _KEY_SET_INFORMATION_CLASS KEY_SET_INFORMATION_CLASS;
typedef _KEY_WRITE_TIME_INFORMATION KEY_WRITE_TIME_INFORMATION;
typedef _KEY_WRITE_TIME_INFORMATION* PKEY_WRITE_TIME_INFORMATION;
typedef _KEY_WOW64_FLAGS_INFORMATION KEY_WOW64_FLAGS_INFORMATION;
typedef _KEY_WOW64_FLAGS_INFORMATION* PKEY_WOW64_FLAGS_INFORMATION;
typedef _KEY_HANDLE_TAGS_INFORMATION KEY_HANDLE_TAGS_INFORMATION;
typedef _KEY_HANDLE_TAGS_INFORMATION* PKEY_HANDLE_TAGS_INFORMATION;
typedef _KEY_SET_LAYER_INFORMATION KEY_SET_LAYER_INFORMATION;
typedef _KEY_SET_LAYER_INFORMATION* PKEY_SET_LAYER_INFORMATION;
typedef _KEY_CONTROL_FLAGS_INFORMATION KEY_CONTROL_FLAGS_INFORMATION;
typedef _KEY_CONTROL_FLAGS_INFORMATION* PKEY_CONTROL_FLAGS_INFORMATION;
typedef _KEY_SET_VIRTUALIZATION_INFORMATION KEY_SET_VIRTUALIZATION_INFORMATION;
typedef _KEY_SET_VIRTUALIZATION_INFORMATION* PKEY_SET_VIRTUALIZATION_INFORMATION;
typedef _KEY_VALUE_INFORMATION_CLASS KEY_VALUE_INFORMATION_CLASS;
typedef _PEB32_WITH_WOW64INFO* PPEB32_WITH_WOW64INFO;
typedef _KEY_VALUE_BASIC_INFORMATION KEY_VALUE_BASIC_INFORMATION;
typedef _KEY_VALUE_BASIC_INFORMATION* PKEY_VALUE_BASIC_INFORMATION;
typedef _ENCRYPTED_USER_PASSWORD_NEW ENCRYPTED_USER_PASSWORD_NEW;
typedef _KEY_VALUE_FULL_INFORMATION KEY_VALUE_FULL_INFORMATION;
typedef _KEY_VALUE_FULL_INFORMATION* PKEY_VALUE_FULL_INFORMATION;
typedef _USER_INTERNAL4_INFORMATION_NEW* PUSER_INTERNAL4_INFORMATION_NEW;
typedef _KEY_VALUE_PARTIAL_INFORMATION KEY_VALUE_PARTIAL_INFORMATION;
typedef OBJECT_ATTRIBUTES LSA_OBJECT_ATTRIBUTES;
typedef _KEY_VALUE_PARTIAL_INFORMATION_ALIGN64
    KEY_VALUE_PARTIAL_INFORMATION_ALIGN64;
typedef _KEY_VALUE_PARTIAL_INFORMATION_ALIGN64* PKEY_VALUE_PARTIAL_INFORMATION_ALIGN64;
typedef _USER_ALLOWED_TO_DELEGATE_TO_LIST* PUSER_ALLOWED_TO_DELEGATE_TO_LIST;
typedef _KEY_VALUE_LAYER_INFORMATION KEY_VALUE_LAYER_INFORMATION;
typedef _LSA_TRUST_INFORMATION* PLSA_TRUST_INFORMATION;
typedef _KEY_VALUE_LAYER_INFORMATION* PKEY_VALUE_LAYER_INFORMATION;
typedef _USER_INTERNAL6_INFORMATION* PUSER_INTERNAL6_INFORMATION;
typedef _ETW_DFSS_RELEASE_THREAD_ON_IDLE ETW_DFSS_RELEASE_THREAD_ON_IDLE;
typedef _CM_EXTENDED_PARAMETER_TYPE CM_EXTENDED_PARAMETER_TYPE;
typedef _ETW_PER_SESSION_QUOTA ETW_PER_SESSION_QUOTA;
typedef _CM_EXTENDED_PARAMETER CM_EXTENDED_PARAMETER;
typedef _CM_EXTENDED_PARAMETER* PCM_EXTENDED_PARAMETER;
typedef _KEY_VALUE_ENTRY KEY_VALUE_ENTRY;
typedef _KEY_VALUE_ENTRY* PKEY_VALUE_ENTRY;
typedef _REG_ACTION REG_ACTION;
typedef _REG_NOTIFY_INFORMATION REG_NOTIFY_INFORMATION;
typedef _REG_NOTIFY_INFORMATION* PREG_NOTIFY_INFORMATION;
typedef _KEY_PID_ARRAY KEY_PID_ARRAY;
typedef _KEY_PID_ARRAY* PKEY_PID_ARRAY;
typedef _KEY_OPEN_SUBKEYS_INFORMATION KEY_OPEN_SUBKEYS_INFORMATION;
typedef _KEY_OPEN_SUBKEYS_INFORMATION* PKEY_OPEN_SUBKEYS_INFORMATION;
typedef _VR_INITIALIZE_JOB_FOR_VREG VR_INITIALIZE_JOB_FOR_VREG;
typedef _VR_INITIALIZE_JOB_FOR_VREG* PVR_INITIALIZE_JOB_FOR_VREG;
typedef _VR_LOAD_DIFFERENCING_HIVE VR_LOAD_DIFFERENCING_HIVE;
typedef _VR_LOAD_DIFFERENCING_HIVE* PVR_LOAD_DIFFERENCING_HIVE;
typedef _VR_CREATE_NAMESPACE_NODE VR_CREATE_NAMESPACE_NODE;
typedef _VR_CREATE_NAMESPACE_NODE* PVR_CREATE_NAMESPACE_NODE;
typedef _VR_MODIFY_FLAGS VR_MODIFY_FLAGS;
typedef _VR_MODIFY_FLAGS* PVR_MODIFY_FLAGS;
typedef _NAMESPACE_NODE_DATA NAMESPACE_NODE_DATA;
typedef _NAMESPACE_NODE_DATA* PNAMESPACE_NODE_DATA;
typedef _VR_CREATE_MULTIPLE_NAMESPACE_NODES VR_CREATE_MULTIPLE_NAMESPACE_NODES;
typedef _VR_CREATE_MULTIPLE_NAMESPACE_NODES* PVR_CREATE_MULTIPLE_NAMESPACE_NODES;
typedef _VR_UNLOAD_DYNAMICALLY_LOADED_HIVES VR_UNLOAD_DYNAMICALLY_LOADED_HIVES;
typedef _TRUSTED_POSIX_OFFSET_INFO TRUSTED_POSIX_OFFSET_INFO;
typedef _VR_GET_VIRTUAL_ROOT VR_GET_VIRTUAL_ROOT;
typedef _RTL_IMAGE_MITIGATION_POLICY* PRTL_IMAGE_MITIGATION_POLICY;
typedef _VR_GET_VIRTUAL_ROOT* PVR_GET_VIRTUAL_ROOT;
typedef _TRUSTED_CONTROLLERS_INFO* PTRUSTED_CONTROLLERS_INFO;
typedef _WMI_JOB_SET_QUERY_NET_RATE* PWMI_JOB_SET_QUERY_NET_RATE;
typedef _VR_GET_VIRTUAL_ROOT_RESULT VR_GET_VIRTUAL_ROOT_RESULT;
typedef _VR_LOAD_DIFFERENCING_HIVE_FOR_HOST VR_LOAD_DIFFERENCING_HIVE_FOR_HOST;
typedef _VR_UNLOAD_DIFFERENCING_HIVE_FOR_HOST
    VR_UNLOAD_DIFFERENCING_HIVE_FOR_HOST;
typedef LSA_TRUST_INFORMATION TRUSTED_DOMAIN_INFORMATION_BASIC;
typedef _VR_UNLOAD_DIFFERENCING_HIVE_FOR_HOST* PVR_UNLOAD_DIFFERENCING_HIVE_FOR_HOST;
typedef _RTL_IMAGE_MITIGATION_DYNAMIC_CODE_POLICY* PRTL_IMAGE_MITIGATION_DYNAMIC_CODE_POLICY;
typedef _LIST_ENTRY LIST_ENTRY;
typedef _LIST_ENTRY* PLIST_ENTRY;
typedef _TRUSTED_DOMAIN_INFORMATION_EX TRUSTED_DOMAIN_INFORMATION_EX;
typedef _TABLE_SEARCH_RESULT TABLE_SEARCH_RESULT;
typedef _RTL_IMAGE_MITIGATION_EXTENSION_POINT_DISABLE_POLICY* PRTL_IMAGE_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
typedef _RTL_IMAGE_MITIGATION_SYSTEM_CALL_DISABLE_POLICY
    RTL_IMAGE_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
typedef RTL_GENERIC_COMPARE_RESULTS ( *PRTL_AVL_COMPARE_ROUTINE )(
    _RTL_AVL_TABLE*, PVOID, PVOID );
typedef PVOID ( *PRTL_AVL_ALLOCATE_ROUTINE )( _RTL_AVL_TABLE*, CLONG );
typedef void ( *PRTL_AVL_FREE_ROUTINE )( _RTL_AVL_TABLE*, PVOID );
typedef NTSTATUS ( *PRTL_AVL_MATCH_FUNCTION )( _RTL_AVL_TABLE*, PVOID, PVOID );
typedef _RTL_BALANCED_LINKS RTL_BALANCED_LINKS;
typedef _RTL_BALANCED_LINKS* PRTL_BALANCED_LINKS;
typedef _RTL_AVL_TABLE RTL_AVL_TABLE;
typedef _RTL_AVL_TABLE* PRTL_AVL_TABLE;
typedef _RTL_SPLAY_LINKS RTL_SPLAY_LINKS;
typedef _RTL_SPLAY_LINKS* PRTL_SPLAY_LINKS;
typedef RTL_GENERIC_COMPARE_RESULTS ( *PRTL_GENERIC_COMPARE_ROUTINE )(
    _RTL_GENERIC_TABLE*, PVOID, PVOID );
typedef PVOID ( *PRTL_GENERIC_ALLOCATE_ROUTINE )( _RTL_GENERIC_TABLE*, CLONG );
typedef void ( *PRTL_GENERIC_FREE_ROUTINE )( _RTL_GENERIC_TABLE*, PVOID );
typedef _RTL_GENERIC_TABLE RTL_GENERIC_TABLE;
typedef _RTL_GENERIC_TABLE* PRTL_GENERIC_TABLE;
typedef _RTL_RB_TREE RTL_RB_TREE;
typedef _RTL_RB_TREE* PRTL_RB_TREE;
typedef _RTL_DYNAMIC_HASH_TABLE_ENTRY RTL_DYNAMIC_HASH_TABLE_ENTRY;
typedef _RTL_DYNAMIC_HASH_TABLE_ENTRY* PRTL_DYNAMIC_HASH_TABLE_ENTRY;
typedef _RTL_DYNAMIC_HASH_TABLE_CONTEXT RTL_DYNAMIC_HASH_TABLE_CONTEXT;
typedef _RTL_DYNAMIC_HASH_TABLE_CONTEXT* PRTL_DYNAMIC_HASH_TABLE_CONTEXT;
typedef _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR RTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
typedef _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR* PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
typedef _RTL_DYNAMIC_HASH_TABLE RTL_DYNAMIC_HASH_TABLE;
typedef _RTL_DYNAMIC_HASH_TABLE* PRTL_DYNAMIC_HASH_TABLE;
typedef _RTL_RESOURCE RTL_RESOURCE;
typedef _RTL_RESOURCE* PRTL_RESOURCE;
typedef _RTL_NORM_FORM RTL_NORM_FORM;
typedef _PREFIX_TABLE_ENTRY PREFIX_TABLE_ENTRY;
typedef _PREFIX_TABLE_ENTRY* PPREFIX_TABLE_ENTRY;
typedef _PREFIX_TABLE PREFIX_TABLE;
typedef _PREFIX_TABLE* PPREFIX_TABLE;
typedef _UNICODE_PREFIX_TABLE_ENTRY UNICODE_PREFIX_TABLE_ENTRY;
typedef _UNICODE_PREFIX_TABLE_ENTRY* PUNICODE_PREFIX_TABLE_ENTRY;
typedef _UNICODE_PREFIX_TABLE UNICODE_PREFIX_TABLE;
typedef _UNICODE_PREFIX_TABLE* PUNICODE_PREFIX_TABLE;
typedef _COMPRESSED_DATA_INFO COMPRESSED_DATA_INFO;
typedef _COMPRESSED_DATA_INFO* PCOMPRESSED_DATA_INFO;
typedef _CURDIR* PCURDIR;
typedef _RTL_MEMORY_ZONE_SEGMENT* PRTL_MEMORY_ZONE_SEGMENT;
typedef _RTL_DRIVE_LETTER_CURDIR RTL_DRIVE_LETTER_CURDIR;
typedef _LSA_DISPATCH_TABLE* PLSA_DISPATCH_TABLE;
typedef _RTL_DRIVE_LETTER_CURDIR* PRTL_DRIVE_LETTER_CURDIR;
typedef _LSA_DISPATCH_TABLE LSA_DISPATCH_TABLE;
typedef _RTL_USER_PROCESS_PARAMETERS RTL_USER_PROCESS_PARAMETERS;
typedef NTSTATUS ( *PLSA_AP_INITIALIZE_PACKAGE )( ULONG, PLSA_DISPATCH_TABLE, PLSA_STRING, PLSA_STRING, PLSA_STRING* );
typedef _RTL_PROCESS_BACKTRACES* PRTL_PROCESS_BACKTRACES;
typedef _RTL_USER_PROCESS_INFORMATION* PRTL_USER_PROCESS_INFORMATION;
typedef _RTL_USER_PROCESS_EXTENDED_PARAMETERS
    RTL_USER_PROCESS_EXTENDED_PARAMETERS;
typedef _ETW_BUFFER_STATE* PETW_BUFFER_STATE;
typedef _RTL_USER_PROCESS_EXTENDED_PARAMETERS* PRTL_USER_PROCESS_EXTENDED_PARAMETERS;
typedef NTSTATUS LSA_AP_CALL_PACKAGE( PLSA_CLIENT_REQUEST, PVOID, PVOID, ULONG, PVOID*, PULONG, PNTSTATUS );
typedef _RTL_PROCESS_VERIFIER_OPTIONS* PRTL_PROCESS_VERIFIER_OPTIONS;
typedef _RTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION
    RTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION;
typedef _RTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION* PRTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION;
typedef RTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION
    PROCESS_REFLECTION_INFORMATION;
typedef RTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION* PPROCESS_REFLECTION_INFORMATION;
typedef NTSTATUS ( *PUSER_THREAD_START_ROUTINE )( PVOID );
typedef _CONTEXT_CHUNK CONTEXT_CHUNK;
typedef _CONTEXT_CHUNK* PCONTEXT_CHUNK;
typedef _CONTEXT_EX CONTEXT_EX;
typedef _CONTEXT_EX* PCONTEXT_EX;
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef ULONG ( *PRTLP_UNHANDLED_EXCEPTION_FILTER )( PEXCEPTION_POINTERS );
typedef _FUNCTION_TABLE_TYPE FUNCTION_TABLE_TYPE;
typedef _DYNAMIC_FUNCTION_TABLE DYNAMIC_FUNCTION_TABLE;
typedef _DYNAMIC_FUNCTION_TABLE* PDYNAMIC_FUNCTION_TABLE;
typedef _RTLP_CURDIR_REF RTLP_CURDIR_REF;
typedef _RTLP_CURDIR_REF* PRTLP_CURDIR_REF;
typedef _RTL_RELATIVE_NAME_U RTL_RELATIVE_NAME_U;
typedef _RTL_RELATIVE_NAME_U* PRTL_RELATIVE_NAME_U;
typedef _RTL_PATH_TYPE RTL_PATH_TYPE;
typedef _RTL_BUFFER RTL_BUFFER;
typedef _RTL_BUFFER* PRTL_BUFFER;
typedef _RTL_UNICODE_STRING_BUFFER RTL_UNICODE_STRING_BUFFER;
typedef _RTL_UNICODE_STRING_BUFFER* PRTL_UNICODE_STRING_BUFFER;
typedef _GENERATE_NAME_CONTEXT GENERATE_NAME_CONTEXT;
typedef _GENERATE_NAME_CONTEXT* PGENERATE_NAME_CONTEXT;
typedef _ETW_AUTOBOOST_CLEAR_PRIORITY_FLOOR_EVENT
    ETW_AUTOBOOST_CLEAR_PRIORITY_FLOOR_EVENT;
typedef _DOMAIN_SERVER_ROLE DOMAIN_SERVER_ROLE;
typedef _RTL_HEAP_ENTRY RTL_HEAP_ENTRY;
typedef _DOMAIN_SERVER_ROLE* PDOMAIN_SERVER_ROLE;
typedef _RTL_HEAP_ENTRY* PRTL_HEAP_ENTRY;
typedef _RTL_HEAP_TAG RTL_HEAP_TAG;
typedef ULONGLONG RTL_FEATURE_CHANGE_STAMP;
typedef _RTL_HEAP_TAG* PRTL_HEAP_TAG;
typedef _DOMAIN_PASSWORD_INFORMATION DOMAIN_PASSWORD_INFORMATION;
typedef _RTL_HEAP_INFORMATION_V1 RTL_HEAP_INFORMATION_V1;
typedef _RTL_HEAP_INFORMATION_V1* PRTL_HEAP_INFORMATION_V1;
typedef _DOMAIN_GENERAL_INFORMATION* PDOMAIN_GENERAL_INFORMATION;
typedef _DOMAIN_UAS_INFORMATION DOMAIN_UAS_INFORMATION;
typedef _ETW_THREAD_AFFINITY_EVENT ETW_THREAD_AFFINITY_EVENT;
typedef _RTL_HEAP_INFORMATION_V2 RTL_HEAP_INFORMATION_V2;
typedef _RTL_HEAP_INFORMATION_V2* PRTL_HEAP_INFORMATION_V2;
typedef _SYSTEM_FEATURE_USAGE_SUBSCRIPTION_UPDATE_ENTRY
    SYSTEM_FEATURE_USAGE_SUBSCRIPTION_UPDATE_ENTRY;
typedef _SYSTEM_FEATURE_USAGE_SUBSCRIPTION_DETAILS* PSYSTEM_FEATURE_USAGE_SUBSCRIPTION_DETAILS;
typedef _RTL_PROCESS_HEAPS_V1 RTL_PROCESS_HEAPS_V1;
typedef _RTL_PROCESS_HEAPS_V1* PRTL_PROCESS_HEAPS_V1;
typedef _RTL_PROCESS_HEAPS_V2 RTL_PROCESS_HEAPS_V2;
typedef _RTL_PROCESS_HEAPS_V2* PRTL_PROCESS_HEAPS_V2;
typedef _RTL_MEMORY_TYPE RTL_MEMORY_TYPE;
typedef _RTL_MEMORY_TYPE* PRTL_MEMORY_TYPE;
typedef _HEAP_MEMORY_INFO_CLASS HEAP_MEMORY_INFO_CLASS;
typedef NTSTATUS ALLOCATE_VIRTUAL_MEMORY_EX_CALLBACK( HANDLE, HANDLE, PVOID*, PSIZE_T, ULONG, ULONG, PMEM_EXTENDED_PARAMETER, ULONG );
typedef ALLOCATE_VIRTUAL_MEMORY_EX_CALLBACK* PALLOCATE_VIRTUAL_MEMORY_EX_CALLBACK;
typedef NTSTATUS FREE_VIRTUAL_MEMORY_EX_CALLBACK( HANDLE, HANDLE, PVOID*, PSIZE_T, ULONG );
typedef FREE_VIRTUAL_MEMORY_EX_CALLBACK* PFREE_VIRTUAL_MEMORY_EX_CALLBACK;
typedef NTSTATUS QUERY_VIRTUAL_MEMORY_CALLBACK( HANDLE, HANDLE, PVOID, HEAP_MEMORY_INFO_CLASS, PVOID, SIZE_T, PSIZE_T );
typedef QUERY_VIRTUAL_MEMORY_CALLBACK* PQUERY_VIRTUAL_MEMORY_CALLBACK;
typedef _RTL_SEGMENT_HEAP_VA_CALLBACKS RTL_SEGMENT_HEAP_VA_CALLBACKS;
typedef _RTL_SEGMENT_HEAP_VA_CALLBACKS* PRTL_SEGMENT_HEAP_VA_CALLBACKS;
typedef _RTL_SEGMENT_HEAP_MEMORY_SOURCE RTL_SEGMENT_HEAP_MEMORY_SOURCE;
typedef _RTL_SEGMENT_HEAP_MEMORY_SOURCE* PRTL_SEGMENT_HEAP_MEMORY_SOURCE;
typedef _RTL_SEGMENT_HEAP_PARAMETERS RTL_SEGMENT_HEAP_PARAMETERS;
typedef _RTL_SEGMENT_HEAP_PARAMETERS* PRTL_SEGMENT_HEAP_PARAMETERS;
typedef NTSTATUS RTL_HEAP_COMMIT_ROUTINE( PVOID, PVOID*, PSIZE_T );
typedef NTSTATUS ( *PRTL_HEAP_COMMIT_ROUTINE )( PVOID, PVOID*, PSIZE_T );
typedef _RTL_HEAP_PARAMETERS RTL_HEAP_PARAMETERS;
typedef _RTL_HEAP_PARAMETERS* PRTL_HEAP_PARAMETERS;
typedef _RTL_HEAP_TAG_INFO RTL_HEAP_TAG_INFO;
typedef _RTL_HEAP_TAG_INFO* PRTL_HEAP_TAG_INFO;
typedef NTSTATUS RTL_ENUM_HEAPS_ROUTINE( PVOID, PVOID );
typedef NTSTATUS ( *PRTL_ENUM_HEAPS_ROUTINE )( PVOID, PVOID );
typedef _RTL_HEAP_USAGE_ENTRY RTL_HEAP_USAGE_ENTRY;
typedef _RTL_HEAP_USAGE_ENTRY* PRTL_HEAP_USAGE_ENTRY;
typedef _RTL_HEAP_USAGE RTL_HEAP_USAGE;
typedef _RTL_HEAP_USAGE* PRTL_HEAP_USAGE;
typedef _RTL_HEAP_WALK_ENTRY RTL_HEAP_WALK_ENTRY;
typedef _RTL_HEAP_WALK_ENTRY* PRTL_HEAP_WALK_ENTRY;
typedef _HEAP_COMPATIBILITY_MODE HEAP_COMPATIBILITY_MODE;
typedef _RTLP_TAG_INFO RTLP_TAG_INFO;
typedef _RTLP_TAG_INFO* PRTLP_TAG_INFO;
typedef _RTLP_HEAP_TAGGING_INFO RTLP_HEAP_TAGGING_INFO;
typedef _RTLP_HEAP_TAGGING_INFO* PRTLP_HEAP_TAGGING_INFO;
typedef _PROCESS_HEAP_INFORMATION PROCESS_HEAP_INFORMATION;
typedef _PROCESS_HEAP_INFORMATION* PPROCESS_HEAP_INFORMATION;
typedef _HEAP_REGION_INFORMATION HEAP_REGION_INFORMATION;
typedef _HEAP_REGION_INFORMATION* PHEAP_REGION_INFORMATION;
typedef _PS_PKG_CLAIM* PPS_PKG_CLAIM;
typedef _HEAP_RANGE_INFORMATION HEAP_RANGE_INFORMATION;
typedef _HEAP_BLOCK_INFORMATION HEAP_BLOCK_INFORMATION;
typedef _RTL_BSD_DATA_POWER_TRANSITION RTL_BSD_DATA_POWER_TRANSITION;
typedef _HEAP_BLOCK_INFORMATION* PHEAP_BLOCK_INFORMATION;
typedef _LSA_FOREST_TRUST_INFORMATION LSA_FOREST_TRUST_INFORMATION;
typedef _HEAP_INFORMATION HEAP_INFORMATION;
typedef _ETW_DISKIO_FLUSH_BUFFERS_V3 ETW_DISKIO_FLUSH_BUFFERS_V3;
typedef _HEAP_INFORMATION* PHEAP_INFORMATION;
typedef _SEGMENT_HEAP_PERFORMANCE_COUNTER_INFORMATION
    SEGMENT_HEAP_PERFORMANCE_COUNTER_INFORMATION;
typedef LSA_FOREST_TRUST_COLLISION_RECORD_TYPE
    LSA_FOREST_TRUST_COLLISION_RECORD_TYPE;
typedef _HEAP_PERFORMANCE_COUNTERS_INFORMATION
    HEAP_PERFORMANCE_COUNTERS_INFORMATION;
typedef _RTL_BSD_DATA_ERROR_INFO* PRTL_BSD_DATA_ERROR_INFO;
typedef _RTL_BSD_ITEM_TYPE RTL_BSD_ITEM_TYPE;
typedef _HEAP_PERFORMANCE_COUNTERS_INFORMATION* PHEAP_PERFORMANCE_COUNTERS_INFORMATION;
typedef _LSA_FOREST_TRUST_COLLISION_RECORD LSA_FOREST_TRUST_COLLISION_RECORD;
typedef _ETW_OPTICALIO_READWRITE ETW_OPTICALIO_READWRITE;
typedef _HEAP_INFORMATION_ITEM HEAP_INFORMATION_ITEM;
typedef _HEAP_INFORMATION_ITEM* PHEAP_INFORMATION_ITEM;
typedef NTSTATUS ( *PRTL_HEAP_EXTENDED_ENUMERATION_ROUTINE )(
    PHEAP_INFORMATION_ITEM, PVOID );
typedef _HEAP_EXTENDED_INFORMATION HEAP_EXTENDED_INFORMATION;
typedef _HEAP_EXTENDED_INFORMATION* PHEAP_EXTENDED_INFORMATION;
typedef NTSTATUS ( *RTL_HEAP_STACK_WRITE_ROUTINE )( PVOID, ULONG, PVOID );
typedef _RTLP_HEAP_STACK_TRACE_SERIALIZATION_INIT
    RTLP_HEAP_STACK_TRACE_SERIALIZATION_INIT;
typedef _RTLP_HEAP_STACK_TRACE_SERIALIZATION_INIT* PRTLP_HEAP_STACK_TRACE_SERIALIZATION_INIT;
typedef _RTLP_HEAP_STACK_TRACE_SERIALIZATION_HEADER
    RTLP_HEAP_STACK_TRACE_SERIALIZATION_HEADER;
typedef _RTLP_HEAP_STACK_TRACE_SERIALIZATION_HEADER* PRTLP_HEAP_STACK_TRACE_SERIALIZATION_HEADER;
typedef _RTLP_HEAP_STACK_TRACE_SERIALIZATION_ALLOCATION
    RTLP_HEAP_STACK_TRACE_SERIALIZATION_ALLOCATION;
typedef _RTLP_HEAP_STACK_TRACE_SERIALIZATION_ALLOCATION* PRTLP_HEAP_STACK_TRACE_SERIALIZATION_ALLOCATION;
typedef _RTLP_HEAP_STACK_TRACE_SERIALIZATION_STACKFRAME
    RTLP_HEAP_STACK_TRACE_SERIALIZATION_STACKFRAME;
typedef _RTLP_HEAP_STACK_TRACE_SERIALIZATION_STACKFRAME* PRTLP_HEAP_STACK_TRACE_SERIALIZATION_STACKFRAME;
typedef _RTL_HEAP_STACK_QUERY RTL_HEAP_STACK_QUERY;
typedef _RTL_HEAP_STACK_QUERY* PRTL_HEAP_STACK_QUERY;
typedef _RTL_HEAP_STACK_CONTROL RTL_HEAP_STACK_CONTROL;
typedef _RTL_HEAP_STACK_CONTROL* PRTL_HEAP_STACK_CONTROL;
typedef NTSTATUS ( *PRTL_HEAP_DEBUGGING_INTERCEPTOR_ROUTINE )( PVOID, ULONG, ULONG, PVOID* );
typedef NTSTATUS ( *PRTL_HEAP_LEAK_ENUMERATION_ROUTINE )( LONG, PVOID, PVOID, SIZE_T, ULONG, PVOID* );
typedef _HEAP_DEBUGGING_INFORMATION HEAP_DEBUGGING_INFORMATION;
typedef _HEAP_DEBUGGING_INFORMATION* PHEAP_DEBUGGING_INFORMATION;
typedef _USER_WORKSTATIONS_INFORMATION USER_WORKSTATIONS_INFORMATION;
typedef _RTL_MEMORY_ZONE_SEGMENT RTL_MEMORY_ZONE_SEGMENT;
typedef _RTL_MEMORY_ZONE RTL_MEMORY_ZONE;
typedef _RTL_PROCESS_MODULES* PRTL_PROCESS_MODULES;
typedef _RTL_PROCESS_MODULE_INFORMATION_EX* PRTL_PROCESS_MODULE_INFORMATION_EX;
typedef _ETW_UMS_EVENT_DISASSOCIATE* PETW_UMS_EVENT_DISASSOCIATE;
typedef _ETW_UMS_EVENT_PARK ETW_UMS_EVENT_PARK;
typedef _ETW_UMS_EVENT_DIRECTED_SWITCH_END ETW_UMS_EVENT_DIRECTED_SWITCH_END;
typedef _RTL_PROCESS_LOCKS* PRTL_PROCESS_LOCKS;
typedef _USER_EXPIRES_INFORMATION USER_EXPIRES_INFORMATION;
typedef _RTL_PROCESS_VERIFIER_OPTIONS RTL_PROCESS_VERIFIER_OPTIONS;
typedef _RTL_DEBUG_INFORMATION RTL_DEBUG_INFORMATION;
typedef _RTL_DEBUG_INFORMATION* PRTL_DEBUG_INFORMATION;
typedef _PARSE_MESSAGE_CONTEXT PARSE_MESSAGE_CONTEXT;
typedef _PARSE_MESSAGE_CONTEXT* PPARSE_MESSAGE_CONTEXT;
typedef in_addr IN_ADDR;
typedef in_addr* PIN_ADDR;
typedef in6_addr IN6_ADDR;
typedef in6_addr* PIN6_ADDR;
typedef const IN_ADDR* PCIN_ADDR;
typedef const IN6_ADDR* PCIN6_ADDR;
typedef _TIME_FIELDS TIME_FIELDS;
typedef _TIME_FIELDS* PTIME_FIELDS;
typedef _RTL_TIME_ZONE_INFORMATION RTL_TIME_ZONE_INFORMATION;
typedef _RTL_TIME_ZONE_INFORMATION* PRTL_TIME_ZONE_INFORMATION;
typedef _RTL_BITMAP RTL_BITMAP;
typedef _RTL_BITMAP* PRTL_BITMAP;
typedef _RTL_BITMAP_RUN RTL_BITMAP_RUN;
typedef _RTL_BITMAP_RUN* PRTL_BITMAP_RUN;
typedef _RTL_BITMAP_EX RTL_BITMAP_EX;
typedef _RTL_BITMAP_EX* PRTL_BITMAP_EX;
typedef _RTL_HANDLE_TABLE_ENTRY RTL_HANDLE_TABLE_ENTRY;
typedef _RTL_HANDLE_TABLE_ENTRY* PRTL_HANDLE_TABLE_ENTRY;
typedef _RTL_HANDLE_TABLE RTL_HANDLE_TABLE;
typedef _RTL_HANDLE_TABLE* PRTL_HANDLE_TABLE;
typedef _COMPOUND_ACCESS_ALLOWED_ACE COMPOUND_ACCESS_ALLOWED_ACE;
typedef _COMPOUND_ACCESS_ALLOWED_ACE* PCOMPOUND_ACCESS_ALLOWED_ACE;
typedef _RTL_ACE_DATA RTL_ACE_DATA;
typedef _RTL_ACE_DATA* PRTL_ACE_DATA;
typedef NTSTATUS RTL_START_POOL_THREAD( PTHREAD_START_ROUTINE, PVOID, PHANDLE );
typedef NTSTATUS ( *PRTL_START_POOL_THREAD )( PTHREAD_START_ROUTINE, PVOID, PHANDLE );
typedef NTSTATUS RTL_EXIT_POOL_THREAD( NTSTATUS );
typedef NTSTATUS ( *PRTL_EXIT_POOL_THREAD )( NTSTATUS );
typedef NTSTATUS RTL_QUERY_REGISTRY_ROUTINE( PCWSTR, ULONG, PVOID, ULONG, PVOID, PVOID );
typedef NTSTATUS ( *PRTL_QUERY_REGISTRY_ROUTINE )( PCWSTR, ULONG, PVOID, ULONG, PVOID, PVOID );
typedef _RTL_QUERY_REGISTRY_TABLE RTL_QUERY_REGISTRY_TABLE;
typedef _RTL_QUERY_REGISTRY_TABLE* PRTL_QUERY_REGISTRY_TABLE;
typedef _RTL_ELEVATION_FLAGS RTL_ELEVATION_FLAGS;
typedef _RTL_ELEVATION_FLAGS* PRTL_ELEVATION_FLAGS;
typedef _RTL_UNLOAD_EVENT_TRACE RTL_UNLOAD_EVENT_TRACE;
typedef _RTL_UNLOAD_EVENT_TRACE* PRTL_UNLOAD_EVENT_TRACE;
typedef _RTL_UNLOAD_EVENT_TRACE32 RTL_UNLOAD_EVENT_TRACE32;
typedef _RTL_UNLOAD_EVENT_TRACE32* PRTL_UNLOAD_EVENT_TRACE32;
typedef _IMAGE_MITIGATION_POLICY IMAGE_MITIGATION_POLICY;
typedef _RTL_IMAGE_MITIGATION_POLICY RTL_IMAGE_MITIGATION_POLICY;
typedef _RTL_IMAGE_MITIGATION_DEP_POLICY RTL_IMAGE_MITIGATION_DEP_POLICY;
typedef _RTL_IMAGE_MITIGATION_DEP_POLICY* PRTL_IMAGE_MITIGATION_DEP_POLICY;
typedef _RTL_IMAGE_MITIGATION_ASLR_POLICY RTL_IMAGE_MITIGATION_ASLR_POLICY;
typedef _ETW_HEAP_EVENT_EXPANSION* PETW_HEAP_EVENT_EXPANSION;
typedef _RTL_IMAGE_MITIGATION_ASLR_POLICY* PRTL_IMAGE_MITIGATION_ASLR_POLICY;
typedef _ETW_HEAP_EVENT_REALLOC* PETW_HEAP_EVENT_REALLOC;
typedef _HEAP_EVENT_COMMIT_DECOMMIT* PHEAP_EVENT_COMMIT_DECOMMIT;
typedef _RTL_IMAGE_MITIGATION_STRICT_HANDLE_CHECK_POLICY
    RTL_IMAGE_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
typedef _RTL_IMAGE_MITIGATION_SYSTEM_CALL_DISABLE_POLICY* PRTL_IMAGE_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
typedef _DOMAIN_LOCALIZABLE_ACCOUNTS_ENTRY DOMAIN_LOCALIZABLE_ACCOUNT_ENTRY;
typedef _DOMAIN_LOCALIZABLE_ACCOUNTS_INFORMATION* PDOMAIN_LOCALIZABLE_ACCOUNTS_INFORMATION;
typedef _RTL_IMAGE_MITIGATION_EXTENSION_POINT_DISABLE_POLICY
    RTL_IMAGE_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
typedef _RTL_IMAGE_MITIGATION_CONTROL_FLOW_GUARD_POLICY
    RTL_IMAGE_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
typedef _RTL_IMAGE_MITIGATION_CONTROL_FLOW_GUARD_POLICY* PRTL_IMAGE_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
typedef _RTL_IMAGE_MITIGATION_BINARY_SIGNATURE_POLICY
    RTL_IMAGE_MITIGATION_BINARY_SIGNATURE_POLICY;
typedef _RTL_IMAGE_MITIGATION_BINARY_SIGNATURE_POLICY* PRTL_IMAGE_MITIGATION_BINARY_SIGNATURE_POLICY;
typedef _RTL_IMAGE_MITIGATION_FONT_DISABLE_POLICY
    RTL_IMAGE_MITIGATION_FONT_DISABLE_POLICY;
typedef _RTL_IMAGE_MITIGATION_FONT_DISABLE_POLICY* PRTL_IMAGE_MITIGATION_FONT_DISABLE_POLICY;
typedef _RTL_IMAGE_MITIGATION_IMAGE_LOAD_POLICY
    RTL_IMAGE_MITIGATION_IMAGE_LOAD_POLICY;
typedef _RTL_IMAGE_MITIGATION_IMAGE_LOAD_POLICY* PRTL_IMAGE_MITIGATION_IMAGE_LOAD_POLICY;
typedef _RTL_IMAGE_MITIGATION_PAYLOAD_RESTRICTION_POLICY
    RTL_IMAGE_MITIGATION_PAYLOAD_RESTRICTION_POLICY;
typedef _RTL_IMAGE_MITIGATION_PAYLOAD_RESTRICTION_POLICY* PRTL_IMAGE_MITIGATION_PAYLOAD_RESTRICTION_POLICY;
typedef _RTL_IMAGE_MITIGATION_CHILD_PROCESS_POLICY
    RTL_IMAGE_MITIGATION_CHILD_PROCESS_POLICY;
typedef _RTL_IMAGE_MITIGATION_CHILD_PROCESS_POLICY* PRTL_IMAGE_MITIGATION_CHILD_PROCESS_POLICY;
typedef _RTL_IMAGE_MITIGATION_SEHOP_POLICY RTL_IMAGE_MITIGATION_SEHOP_POLICY;
typedef _RTL_IMAGE_MITIGATION_SEHOP_POLICY* PRTL_IMAGE_MITIGATION_SEHOP_POLICY;
typedef _RTL_IMAGE_MITIGATION_HEAP_POLICY RTL_IMAGE_MITIGATION_HEAP_POLICY;
typedef _RTL_IMAGE_MITIGATION_HEAP_POLICY* PRTL_IMAGE_MITIGATION_HEAP_POLICY;
typedef _RTL_IMAGE_MITIGATION_USER_SHADOW_STACK_POLICY
    RTL_IMAGE_MITIGATION_USER_SHADOW_STACK_POLICY;
typedef _RTL_IMAGE_MITIGATION_USER_SHADOW_STACK_POLICY* PRTL_IMAGE_MITIGATION_USER_SHADOW_STACK_POLICY;
typedef _RTL_IMAGE_MITIGATION_REDIRECTION_TRUST_POLICY
    RTL_IMAGE_MITIGATION_REDIRECTION_TRUST_POLICY;
typedef _RTL_IMAGE_MITIGATION_REDIRECTION_TRUST_POLICY* PRTL_IMAGE_MITIGATION_REDIRECTION_TRUST_POLICY;
typedef _RTL_IMAGE_MITIGATION_USER_POINTER_AUTH_POLICY
    RTL_IMAGE_MITIGATION_USER_POINTER_AUTH_POLICY;
typedef _RTL_IMAGE_MITIGATION_USER_POINTER_AUTH_POLICY* PRTL_IMAGE_MITIGATION_USER_POINTER_AUTH_POLICY;
typedef _RTL_IMAGE_MITIGATION_OPTION_STATE RTL_IMAGE_MITIGATION_OPTION_STATE;
typedef _APPCONTAINER_SID_TYPE APPCONTAINER_SID_TYPE;
typedef _APPCONTAINER_SID_TYPE* PAPPCONTAINER_SID_TYPE;
typedef _PS_PKG_CLAIM PS_PKG_CLAIM;
typedef _SAM_GENERIC_OPERATION_INPUT SAM_GENERIC_OPERATION_INPUT;
typedef _PERFINFO_SET_POWER_ACTION* PPERFINFO_SET_POWER_ACTION;
typedef _RTL_BSD_DATA_ERROR_INFO RTL_BSD_DATA_ERROR_INFO;
typedef _PERFINFO_IDLE_STATE_CHANGE PERFINFO_IDLE_STATE_CHANGE;
typedef _PERFINFO_BATTERY_LIFE_INFO PERFINFO_BATTERY_LIFE_INFO;
typedef _SECURE_SETTING_VALUE_TYPE SECURE_SETTING_VALUE_TYPE;
typedef _RTL_BSD_POWER_BUTTON_PRESS_INFO RTL_BSD_POWER_BUTTON_PRESS_INFO;
typedef _RTL_BSD_POWER_BUTTON_PRESS_INFO* PRTL_BSD_POWER_BUTTON_PRESS_INFO;
typedef _RTL_BSD_ITEM RTL_BSD_ITEM;
typedef _RTL_BSD_ITEM* PRTL_BSD_ITEM;
typedef NTSTATUS RTL_SECURE_MEMORY_CACHE_CALLBACK( PVOID, SIZE_T );
typedef NTSTATUS ( *PRTL_SECURE_MEMORY_CACHE_CALLBACK )( PVOID, SIZE_T );
typedef ULONG RTL_FEATURE_ID;
typedef ULONGLONG* PRTL_FEATURE_CHANGE_STAMP;
typedef UCHAR RTL_FEATURE_VARIANT;
typedef ULONG RTL_FEATURE_VARIANT_PAYLOAD;
typedef PVOID RTL_FEATURE_CONFIGURATION_CHANGE_REGISTRATION;
typedef PVOID* PRTL_FEATURE_CONFIGURATION_CHANGE_REGISTRATION;
typedef _RTL_FEATURE_USAGE_REPORT RTL_FEATURE_USAGE_REPORT;
typedef _RTL_FEATURE_USAGE_REPORT* PRTL_FEATURE_USAGE_REPORT;
typedef _RTL_FEATURE_CONFIGURATION_TYPE RTL_FEATURE_CONFIGURATION_TYPE;
typedef _RTL_FEATURE_CONFIGURATION RTL_FEATURE_CONFIGURATION;
typedef _RTL_FEATURE_CONFIGURATION* PRTL_FEATURE_CONFIGURATION;
typedef _RTL_FEATURE_CONFIGURATION_TABLE RTL_FEATURE_CONFIGURATION_TABLE;
typedef _RTL_FEATURE_CONFIGURATION_TABLE* PRTL_FEATURE_CONFIGURATION_TABLE;
typedef _RTL_FEATURE_CONFIGURATION_PRIORITY RTL_FEATURE_CONFIGURATION_PRIORITY;
typedef _RTL_FEATURE_CONFIGURATION_PRIORITY* PRTL_FEATURE_CONFIGURATION_PRIORITY;
typedef _RTL_FEATURE_ENABLED_STATE RTL_FEATURE_ENABLED_STATE;
typedef _RTL_FEATURE_ENABLED_STATE_OPTIONS RTL_FEATURE_ENABLED_STATE_OPTIONS;
typedef _RTL_FEATURE_ENABLED_STATE_OPTIONS* PRTL_FEATURE_ENABLED_STATE_OPTIONS;
typedef _RTL_FEATURE_VARIANT_PAYLOAD_KIND RTL_FEATURE_VARIANT_PAYLOAD_KIND;
typedef _RTL_FEATURE_VARIANT_PAYLOAD_KIND* PRTL_FEATURE_VARIANT_PAYLOAD_KIND;
typedef _RTL_FEATURE_CONFIGURATION_OPERATION
    RTL_FEATURE_CONFIGURATION_OPERATION;
typedef _RTL_FEATURE_CONFIGURATION_OPERATION* PRTL_FEATURE_CONFIGURATION_OPERATION;
typedef _RTL_FEATURE_CONFIGURATION_UPDATE RTL_FEATURE_CONFIGURATION_UPDATE;
typedef _RTL_FEATURE_CONFIGURATION_UPDATE* PRTL_FEATURE_CONFIGURATION_UPDATE;
typedef _RTL_FEATURE_USAGE_SUBSCRIPTION_TARGET
    RTL_FEATURE_USAGE_SUBSCRIPTION_TARGET;
typedef _RTL_FEATURE_USAGE_SUBSCRIPTION_TARGET* PRTL_FEATURE_USAGE_SUBSCRIPTION_TARGET;
typedef _RTL_FEATURE_USAGE_DATA RTL_FEATURE_USAGE_DATA;
typedef _RTL_FEATURE_USAGE_DATA* PRTL_FEATURE_USAGE_DATA;
typedef _RTL_FEATURE_USAGE_SUBSCRIPTION_DETAILS
    RTL_FEATURE_USAGE_SUBSCRIPTION_DETAILS;
typedef _RTL_FEATURE_USAGE_SUBSCRIPTION_DETAILS* PRTL_FEATURE_USAGE_SUBSCRIPTION_DETAILS;
typedef _RTL_FEATURE_USAGE_SUBSCRIPTION_TABLE
    RTL_FEATURE_USAGE_SUBSCRIPTION_TABLE;
typedef _RTL_FEATURE_USAGE_SUBSCRIPTION_TABLE* PRTL_FEATURE_USAGE_SUBSCRIPTION_TABLE;
typedef void ( *PRTL_FEATURE_CONFIGURATION_CHANGE_CALLBACK )( PVOID );
typedef _SYSTEM_FEATURE_CONFIGURATION_QUERY SYSTEM_FEATURE_CONFIGURATION_QUERY;
typedef _SYSTEM_FEATURE_CONFIGURATION_QUERY* PSYSTEM_FEATURE_CONFIGURATION_QUERY;
typedef _SYSTEM_FEATURE_CONFIGURATION_INFORMATION
    SYSTEM_FEATURE_CONFIGURATION_INFORMATION;
typedef _SYSTEM_FEATURE_CONFIGURATION_INFORMATION* PSYSTEM_FEATURE_CONFIGURATION_INFORMATION;
typedef _SYSTEM_FEATURE_CONFIGURATION_UPDATE_TYPE
    SYSTEM_FEATURE_CONFIGURATION_UPDATE_TYPE;
typedef _SYSTEM_FEATURE_CONFIGURATION_UPDATE_TYPE* PSYSTEM_FEATURE_CONFIGURATION_UPDATE_TYPE;
typedef _SYSTEM_FEATURE_CONFIGURATION_UPDATE
    SYSTEM_FEATURE_CONFIGURATION_UPDATE;
typedef _SYSTEM_FEATURE_CONFIGURATION_UPDATE* PSYSTEM_FEATURE_CONFIGURATION_UPDATE;
typedef _SYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE
    SYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE;
typedef _ETW_CLOCK_STATE_CHANGE_EVENT ETW_CLOCK_STATE_CHANGE_EVENT;
typedef _SYSTEM_FEATURE_CONFIGURATION_SECTIONS_REQUEST
    SYSTEM_FEATURE_CONFIGURATION_SECTIONS_REQUEST;
typedef _ENCRYPTED_USER_PASSWORD_NEW* PENCRYPTED_USER_PASSWORD_NEW;
typedef _SYSTEM_FEATURE_CONFIGURATION_SECTIONS_REQUEST* PSYSTEM_FEATURE_CONFIGURATION_SECTIONS_REQUEST;
typedef _ETW_CLOCK_TIME_UPDATE* PETW_CLOCK_TIME_UPDATE;
typedef _SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION
    SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION;
typedef _SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION* PSYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION;
typedef _ETW_DFSS_START_NEW_INTERVAL ETW_DFSS_START_NEW_INTERVAL;
typedef _SYSTEM_FEATURE_USAGE_SUBSCRIPTION_DETAILS
    SYSTEM_FEATURE_USAGE_SUBSCRIPTION_DETAILS;
typedef _SAM_BYTE_ARRAY_32K SAM_BYTE_ARRAY_32K;
typedef SAM_BYTE_ARRAY_32K SAM_USER_TILE;
typedef _SYSTEM_FEATURE_USAGE_SUBSCRIPTION_UPDATE_ENTRY* PSYSTEM_FEATURE_USAGE_SUBSCRIPTION_UPDATE_ENTRY;
typedef _SYSTEM_FEATURE_USAGE_SUBSCRIPTION_UPDATE
    SYSTEM_FEATURE_USAGE_SUBSCRIPTION_UPDATE;
typedef _SYSTEM_FEATURE_USAGE_SUBSCRIPTION_UPDATE* PSYSTEM_FEATURE_USAGE_SUBSCRIPTION_UPDATE;
typedef LOGICAL RTL_RUN_ONCE_INIT_FN( PRTL_RUN_ONCE, PVOID, PVOID* );
typedef LOGICAL ( *PRTL_RUN_ONCE_INIT_FN )( PRTL_RUN_ONCE, PVOID, PVOID* );
typedef NTSTATUS WNF_USER_CALLBACK( WNF_STATE_NAME, WNF_CHANGE_STAMP, PWNF_TYPE_ID, PVOID, void*, ULONG );
typedef NTSTATUS ( *PWNF_USER_CALLBACK )( WNF_STATE_NAME, WNF_CHANGE_STAMP, PWNF_TYPE_ID, PVOID, void*, ULONG );
typedef _THREAD_STATE_CHANGE_TYPE THREAD_STATE_CHANGE_TYPE;
typedef _THREAD_STATE_CHANGE_TYPE* PTHREAD_STATE_CHANGE_TYPE;
typedef _IMAGE_DEBUG_POGO_ENTRY IMAGE_DEBUG_POGO_ENTRY;
typedef _IMAGE_DEBUG_POGO_ENTRY* PIMAGE_DEBUG_POGO_ENTRY;
typedef _IMAGE_DEBUG_POGO_SIGNATURE IMAGE_DEBUG_POGO_SIGNATURE;
typedef _IMAGE_DEBUG_POGO_SIGNATURE* PIMAGE_DEBUG_POGO_SIGNATURE;
typedef _IMAGE_RELOCATION_RECORD IMAGE_RELOCATION_RECORD;
typedef _IMAGE_RELOCATION_RECORD* PIMAGE_RELOCATION_RECORD;
typedef _IMAGE_CHPE_METADATA_X86 IMAGE_CHPE_METADATA_X86;
typedef _IMAGE_CHPE_METADATA_X86* PIMAGE_CHPE_METADATA_X86;
typedef _IMAGE_CHPE_RANGE_ENTRY IMAGE_CHPE_RANGE_ENTRY;
typedef _IMAGE_CHPE_RANGE_ENTRY* PIMAGE_CHPE_RANGE_ENTRY;
typedef _IMAGE_ARM64EC_METADATA IMAGE_ARM64EC_METADATA;
typedef _IMAGE_ARM64EC_METADATA* PIMAGE_ARM64EC_METADATA;
typedef _IMAGE_ARM64EC_CODE_MAP_ENTRY IMAGE_ARM64EC_CODE_MAP_ENTRY;
typedef _IMAGE_ARM64EC_CODE_MAP_ENTRY* PIMAGE_ARM64EC_CODE_MAP_ENTRY;
typedef _IMAGE_ARM64EC_REDIRECTION_ENTRY IMAGE_ARM64EC_REDIRECTION_ENTRY;
typedef _IMAGE_ARM64EC_REDIRECTION_ENTRY* PIMAGE_ARM64EC_REDIRECTION_ENTRY;
typedef _IMAGE_ARM64EC_CODE_RANGE_ENTRY_POINT* PIMAGE_ARM64EC_CODE_RANGE_ENTRY_POINT;
typedef _WMI_JOB_SET_QUERY_CPU_RATE* PWMI_JOB_SET_QUERY_CPU_RATE;
typedef _WMI_JOB_REMOVE_PROCESS* PWMI_JOB_REMOVE_PROCESS;
typedef _IMAGE_DVRT_ARM64X_FIXUP_RECORD* PIMAGE_DVRT_ARM64X_FIXUP_RECORD;
typedef _IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA32;
typedef _TRUSTED_DOMAIN_INFORMATION_EX* PTRUSTED_DOMAIN_INFORMATION_EX;
typedef _WMI_PROCESS_INFORMATION64 WMI_PROCESS_INFORMATION64;
typedef IMAGE_THUNK_DATA32* UNALIGNED_PIMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA64* UNALIGNED_PIMAGE_THUNK_DATA64;
typedef _WMI_PROCESS_INFORMATION* PWMI_PROCESS_INFORMATION;
typedef _TOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE
    TOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE;
typedef _TOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE* PTOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE;
typedef _TOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE* PTOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
typedef _TOKEN_SECURITY_ATTRIBUTE_V1 TOKEN_SECURITY_ATTRIBUTE_V1;
typedef _TOKEN_SECURITY_ATTRIBUTE_V1* PTOKEN_SECURITY_ATTRIBUTE_V1;
typedef _TOKEN_SECURITY_ATTRIBUTE_RELATIVE_V1
    TOKEN_SECURITY_ATTRIBUTE_RELATIVE_V1;
typedef _TOKEN_SECURITY_ATTRIBUTE_RELATIVE_V1* PTOKEN_SECURITY_ATTRIBUTE_RELATIVE_V1;
typedef _TOKEN_SECURITY_ATTRIBUTES_INFORMATION
    TOKEN_SECURITY_ATTRIBUTES_INFORMATION;
typedef _TOKEN_SECURITY_ATTRIBUTES_INFORMATION* PTOKEN_SECURITY_ATTRIBUTES_INFORMATION;
typedef _TOKEN_SECURITY_ATTRIBUTE_OPERATION TOKEN_SECURITY_ATTRIBUTE_OPERATION;
typedef _TOKEN_SECURITY_ATTRIBUTE_OPERATION* PTOKEN_SECURITY_ATTRIBUTE_OPERATION;
typedef _TOKEN_SECURITY_ATTRIBUTES_AND_OPERATION_INFORMATION
    TOKEN_SECURITY_ATTRIBUTES_AND_OPERATION_INFORMATION;
typedef _TOKEN_SECURITY_ATTRIBUTES_AND_OPERATION_INFORMATION* PTOKEN_SECURITY_ATTRIBUTES_AND_OPERATION_INFORMATION;
typedef _TOKEN_PROCESS_TRUST_LEVEL TOKEN_PROCESS_TRUST_LEVEL;
typedef _TOKEN_PROCESS_TRUST_LEVEL* PTOKEN_PROCESS_TRUST_LEVEL;
typedef _TOKEN_LOGGING_INFORMATION TOKEN_LOGGING_INFORMATION;
typedef _TOKEN_LOGGING_INFORMATION* PTOKEN_LOGGING_INFORMATION;
typedef _SE_FILE_CACHE_CLAIM_INFORMATION SE_FILE_CACHE_CLAIM_INFORMATION;
typedef _SE_FILE_CACHE_CLAIM_INFORMATION* PSE_FILE_CACHE_CLAIM_INFORMATION;
typedef _SE_SET_FILE_CACHE_INFORMATION SE_SET_FILE_CACHE_INFORMATION;
typedef _SE_SET_FILE_CACHE_INFORMATION* PSE_SET_FILE_CACHE_INFORMATION;
typedef _TP_ALPC TP_ALPC;
typedef _TP_ALPC* PTP_ALPC;
typedef void ( *PTP_ALPC_CALLBACK )( PTP_CALLBACK_INSTANCE, PVOID, PTP_ALPC );
typedef void ( *PTP_ALPC_CALLBACK_EX )( PTP_CALLBACK_INSTANCE, PVOID, PTP_ALPC, PVOID );
typedef void ( *PTP_IO_CALLBACK )( PTP_CALLBACK_INSTANCE, PVOID, PVOID, PIO_STATUS_BLOCK, PTP_IO );
typedef _TP_TRACE_TYPE TP_TRACE_TYPE;
typedef _KCONTINUE_TYPE KCONTINUE_TYPE;
typedef _KCONTINUE_ARGUMENT KCONTINUE_ARGUMENT;
typedef _KCONTINUE_ARGUMENT* PKCONTINUE_ARGUMENT;
typedef _WOW64_SHARED_INFORMATION WOW64_SHARED_INFORMATION;
typedef _RTL_BALANCED_NODE32 RTL_BALANCED_NODE32;
typedef _RTL_BALANCED_NODE32* PRTL_BALANCED_NODE32;
typedef _RTL_RB_TREE32 RTL_RB_TREE32;
typedef _RTL_RB_TREE32* PRTL_RB_TREE32;
typedef _PEB_LDR_DATA32 PEB_LDR_DATA32;
typedef _PEB_LDR_DATA32* PPEB_LDR_DATA32;
typedef _LDR_SERVICE_TAG_RECORD32 LDR_SERVICE_TAG_RECORD32;
typedef _LDR_SERVICE_TAG_RECORD32* PLDR_SERVICE_TAG_RECORD32;
typedef _LDRP_CSLIST32 LDRP_CSLIST32;
typedef _LDRP_CSLIST32* PLDRP_CSLIST32;
typedef _LDR_DDAG_NODE32 LDR_DDAG_NODE32;
typedef _LDR_DDAG_NODE32* PLDR_DDAG_NODE32;
typedef _LDR_DATA_TABLE_ENTRY32* PLDR_DATA_TABLE_ENTRY32;
typedef _MESSAGE_TRACE_USER* PMESSAGE_TRACE_USER;
typedef _CURDIR32* PCURDIR32;
typedef NTSTATUS LSA_AP_INITIALIZE_PACKAGE( ULONG, PLSA_DISPATCH_TABLE, PLSA_STRING, PLSA_STRING, PLSA_STRING* );
typedef _MESSAGE_TRACE* PMESSAGE_TRACE;
typedef _ETW_RT_EVENT_LOSS* PETW_RT_EVENT_LOSS;
typedef _LEAP_SECOND_DATA* PLEAP_SECOND_DATA;
typedef NTSTATUS ( *PLSA_AP_LOGON_USER )( PLSA_CLIENT_REQUEST, SECURITY_LOGON_TYPE, PVOID, PVOID, ULONG, PVOID*, PULONG, PLUID, PNTSTATUS, PLSA_TOKEN_INFORMATION_TYPE, PVOID*, PLSA_UNICODE_STRING*, PLSA_UNICODE_STRING* );
typedef _PEB32* PPEB32;
typedef char __C_ASSERT__[1];
typedef _GDI_TEB_BATCH32 GDI_TEB_BATCH32;
typedef _GDI_TEB_BATCH32* PGDI_TEB_BATCH32;
typedef _TEB32 TEB32;
typedef _TEB32* PTEB32;
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef _WOW64_EXECUTE_OPTIONS WOW64_EXECUTE_OPTIONS;
typedef _WOW64_EXECUTE_OPTIONS* PWOW64_EXECUTE_OPTIONS;
typedef _WOW64INFO WOW64INFO;
typedef _WOW64INFO* PWOW64INFO;
typedef _PEB32_WITH_WOW64INFO PEB32_WITH_WOW64INFO;
typedef UNICODE_STRING LSA_UNICODE_STRING;
typedef STRING LSA_STRING;
typedef OBJECT_ATTRIBUTES* PLSA_OBJECT_ATTRIBUTES;
typedef _ETW_THREAD_AFFINITY_EVENT* PETW_THREAD_AFFINITY_EVENT;
typedef _ETW_PRIORITY_EVENT ETW_PRIORITY_EVENT;
typedef _ETW_AUTOBOOST_NO_ENTRIES_EVENT ETW_AUTOBOOST_NO_ENTRIES_EVENT;
typedef _LSA_REFERENCED_DOMAIN_LIST LSA_REFERENCED_DOMAIN_LIST;
typedef _LSA_REFERENCED_DOMAIN_LIST* PLSA_REFERENCED_DOMAIN_LIST;
typedef _LSA_TRANSLATED_SID2* PLSA_TRANSLATED_SID2;
typedef _LSA_TRANSLATED_NAME LSA_TRANSLATED_NAME;
typedef _LSA_TRANSLATED_NAME* PLSA_TRANSLATED_NAME;
typedef _POLICY_ACCOUNT_DOMAIN_INFO POLICY_ACCOUNT_DOMAIN_INFO;
typedef _POLICY_ACCOUNT_DOMAIN_INFO* PPOLICY_ACCOUNT_DOMAIN_INFO;
typedef _POLICY_DNS_DOMAIN_INFO POLICY_DNS_DOMAIN_INFO;
typedef _POLICY_DNS_DOMAIN_INFO* PPOLICY_DNS_DOMAIN_INFO;
typedef _LSA_LOOKUP_DOMAIN_INFO_CLASS LSA_LOOKUP_DOMAIN_INFO_CLASS;
typedef _LSA_LOOKUP_DOMAIN_INFO_CLASS* PLSA_LOOKUP_DOMAIN_INFO_CLASS;
typedef PVOID LSA_LOOKUP_HANDLE;
typedef PVOID* PLSA_LOOKUP_HANDLE;
typedef ULONG LSA_OPERATIONAL_MODE;
typedef ULONG* PLSA_OPERATIONAL_MODE;
typedef _SECURITY_LOGON_TYPE* PSECURITY_LOGON_TYPE;
typedef _SE_ADT_PARAMETER_TYPE SE_ADT_PARAMETER_TYPE;
typedef _SE_ADT_PARAMETER_TYPE* PSE_ADT_PARAMETER_TYPE;
typedef _SE_ADT_OBJECT_TYPE SE_ADT_OBJECT_TYPE;
typedef _SE_ADT_OBJECT_TYPE* PSE_ADT_OBJECT_TYPE;
typedef _SE_ADT_PARAMETER_ARRAY_ENTRY SE_ADT_PARAMETER_ARRAY_ENTRY;
typedef _SE_ADT_PARAMETER_ARRAY_ENTRY* PSE_ADT_PARAMETER_ARRAY_ENTRY;
typedef _SE_ADT_ACCESS_REASON SE_ADT_ACCESS_REASON;
typedef _SE_ADT_ACCESS_REASON* PSE_ADT_ACCESS_REASON;
typedef _SE_ADT_CLAIMS SE_ADT_CLAIMS;
typedef _SE_ADT_CLAIMS* PSE_ADT_CLAIMS;
typedef _SE_ADT_PARAMETER_ARRAY SE_ADT_PARAMETER_ARRAY;
typedef _SE_ADT_PARAMETER_ARRAY* PSE_ADT_PARAMETER_ARRAY;
typedef _SE_ADT_PARAMETER_ARRAY_EX SE_ADT_PARAMETER_ARRAY_EX;
typedef _SE_ADT_PARAMETER_ARRAY_EX* PSE_ADT_PARAMETER_ARRAY_EX;
typedef _LSA_ADT_STRING_LIST_ENTRY LSA_ADT_STRING_LIST_ENTRY;
typedef _LSA_ADT_STRING_LIST_ENTRY* PLSA_ADT_STRING_LIST_ENTRY;
typedef _LSA_ADT_STRING_LIST LSA_ADT_STRING_LIST;
typedef _LSA_ADT_STRING_LIST* PLSA_ADT_STRING_LIST;
typedef _LSA_ADT_SID_LIST_ENTRY LSA_ADT_SID_LIST_ENTRY;
typedef _LSA_ADT_SID_LIST_ENTRY* PLSA_ADT_SID_LIST_ENTRY;
typedef _LSA_ADT_SID_LIST LSA_ADT_SID_LIST;
typedef _LSA_ADT_SID_LIST* PLSA_ADT_SID_LIST;
typedef _POLICY_AUDIT_EVENT_TYPE_EX POLICY_AUDIT_EVENT_TYPE_EX;
typedef _POLICY_AUDIT_EVENT_TYPE_EX* PPOLICY_AUDIT_EVENT_TYPE_EX;
typedef _POLICY_AUDIT_EVENT_TYPE POLICY_AUDIT_EVENT_TYPE;
typedef _POLICY_AUDIT_EVENT_TYPE* PPOLICY_AUDIT_EVENT_TYPE;
typedef NTSTATUS ( *PFN_LSA_CALL_AUTH_PKG )( HANDLE, ULONG, PVOID, ULONG, PVOID*, PULONG, PNTSTATUS );
typedef NTSTATUS ( *PFN_LSA_DEREGISTER_PROC )( HANDLE );
typedef NTSTATUS ( *PFN_LSA_FREE_BUFFER )( PVOID );
typedef NTSTATUS ( *PFN_LOOKUP_AUTH_PKG )( HANDLE, PLSA_STRING, PULONG );
typedef NTSTATUS ( *PFN_LSA_REGISTER_PROC )( PLSA_STRING, PHANDLE, PLSA_OPERATIONAL_MODE );
typedef _ETW_DISKIO_FLUSH_BUFFERS_V3* PETW_DISKIO_FLUSH_BUFFERS_V3;
typedef _LSA_AUTH_CALLBACKS* PLSA_AUTH_CALLBACKS;
typedef _ETW_DISKIO_READWRITE_V3* PWMI_DISKIO_READWRITE;
typedef const LSA_AUTH_CALLBACKS* PCLSA_AUTH_CALLBACKS;
typedef _LSA_TOKEN_INFORMATION_NULL LSA_TOKEN_INFORMATION_NULL;
typedef _WMI_DISKIO_IO_REDIRECTED_INIT WMI_DISKIO_IO_REDIRECTED_INIT;
typedef _LSA_TOKEN_INFORMATION_V1* PLSA_TOKEN_INFORMATION_V1;
typedef LSA_TOKEN_INFORMATION_V1* PLSA_TOKEN_INFORMATION_V2;
typedef _LSA_TOKEN_INFORMATION_V3 LSA_TOKEN_INFORMATION_V3;
typedef _LSA_TOKEN_INFORMATION_V3* PLSA_TOKEN_INFORMATION_V3;
typedef NTSTATUS LSA_CREATE_LOGON_SESSION( PLUID );
typedef NTSTATUS LSA_ADD_CREDENTIAL( PLUID, ULONG, PLSA_STRING, PLSA_STRING );
typedef NTSTATUS LSA_GET_CREDENTIALS( PLUID, ULONG, PULONG, BOOLEAN, PLSA_STRING, PULONG, PLSA_STRING );
typedef NTSTATUS LSA_DELETE_CREDENTIAL( PLUID, ULONG, PLSA_STRING );
typedef PVOID LSA_ALLOCATE_LSA_HEAP( ULONG );
typedef PVOID LSA_ALLOCATE_PRIVATE_HEAP( SIZE_T );
typedef NTSTATUS LSA_ALLOCATE_CLIENT_BUFFER( PLSA_CLIENT_REQUEST, ULONG, PVOID* );
typedef NTSTATUS LSA_FREE_CLIENT_BUFFER( PLSA_CLIENT_REQUEST, PVOID );
typedef NTSTATUS LSA_COPY_TO_CLIENT_BUFFER( PLSA_CLIENT_REQUEST, ULONG, PVOID, PVOID );
typedef NTSTATUS ( *PLSA_CREATE_LOGON_SESSION )( PLUID );
typedef NTSTATUS ( *PLSA_DELETE_LOGON_SESSION )( PLUID );
typedef NTSTATUS ( *PLSA_ADD_CREDENTIAL )( PLUID, ULONG, PLSA_STRING, PLSA_STRING );
typedef NTSTATUS ( *PLSA_GET_CREDENTIALS )( PLUID, ULONG, PULONG, BOOLEAN, PLSA_STRING, PULONG, PLSA_STRING );
typedef NTSTATUS ( *PLSA_DELETE_CREDENTIAL )( PLUID, ULONG, PLSA_STRING );
typedef PVOID ( *PLSA_ALLOCATE_LSA_HEAP )( ULONG );
typedef void ( *PLSA_FREE_LSA_HEAP )( PVOID );
typedef PVOID ( *PLSA_ALLOCATE_PRIVATE_HEAP )( SIZE_T );
typedef void ( *PLSA_FREE_PRIVATE_HEAP )( PVOID );
typedef NTSTATUS ( *PLSA_ALLOCATE_CLIENT_BUFFER )( PLSA_CLIENT_REQUEST, ULONG, PVOID* );
typedef NTSTATUS ( *PLSA_FREE_CLIENT_BUFFER )( PLSA_CLIENT_REQUEST, PVOID );
typedef NTSTATUS ( *PLSA_COPY_TO_CLIENT_BUFFER )( PLSA_CLIENT_REQUEST, ULONG, PVOID, PVOID );
typedef _CI_LOG_MMCSS_STOP CI_LOG_MMCSS_STOP;
typedef NTSTATUS LSA_AP_LOGON_USER( PLSA_CLIENT_REQUEST, SECURITY_LOGON_TYPE, PVOID, PVOID, ULONG, PVOID*, PULONG, PLUID, PNTSTATUS, PLSA_TOKEN_INFORMATION_TYPE, PVOID*, PLSA_UNICODE_STRING*, PLSA_UNICODE_STRING* );
typedef NTSTATUS LSA_AP_LOGON_USER_EX( PLSA_CLIENT_REQUEST, SECURITY_LOGON_TYPE, PVOID, PVOID, ULONG, PVOID*, PULONG, PLUID, PNTSTATUS, PLSA_TOKEN_INFORMATION_TYPE, PVOID*, PUNICODE_STRING*, PUNICODE_STRING*, PUNICODE_STRING* );
typedef void LSA_AP_LOGON_TERMINATED( PLUID );
typedef NTSTATUS ( *PLSA_AP_LOGON_USER_EX )(
    PLSA_CLIENT_REQUEST, SECURITY_LOGON_TYPE, PVOID, PVOID, ULONG, PVOID*, PULONG, PLUID, PNTSTATUS, PLSA_TOKEN_INFORMATION_TYPE, PVOID*, PUNICODE_STRING*, PUNICODE_STRING*, PUNICODE_STRING* );
typedef NTSTATUS ( *PLSA_AP_CALL_PACKAGE )( PLSA_CLIENT_REQUEST, PVOID, PVOID, ULONG, PVOID*, PULONG, PNTSTATUS );
typedef _ETW_UMS_EVENT_PARK* PETW_UMS_EVENT_PARK;
typedef void ( *PLSA_AP_LOGON_TERMINATED )( PLUID );
typedef NTSTATUS ( *PLSA_AP_CALL_PACKAGE_UNTRUSTED )( PLSA_CLIENT_REQUEST, PVOID, PVOID, ULONG, PVOID*, PULONG, PNTSTATUS );
typedef _LSA_TRANSLATED_SID LSA_TRANSLATED_SID;
typedef _LSA_TRANSLATED_SID* PLSA_TRANSLATED_SID;
typedef ULONG POLICY_SYSTEM_ACCESS_MODE;
typedef ULONG* PPOLICY_SYSTEM_ACCESS_MODE;
typedef _POLICY_LSA_SERVER_ROLE POLICY_LSA_SERVER_ROLE;
typedef _POLICY_LSA_SERVER_ROLE* PPOLICY_LSA_SERVER_ROLE;
typedef ULONG POLICY_AUDIT_EVENT_OPTIONS;
typedef ULONG* PPOLICY_AUDIT_EVENT_OPTIONS;
typedef _POLICY_PRIVILEGE_DEFINITION POLICY_PRIVILEGE_DEFINITION;
typedef _POLICY_PRIVILEGE_DEFINITION* PPOLICY_PRIVILEGE_DEFINITION;
typedef _POLICY_INFORMATION_CLASS POLICY_INFORMATION_CLASS;
typedef _POLICY_INFORMATION_CLASS* PPOLICY_INFORMATION_CLASS;
typedef _POLICY_AUDIT_LOG_INFO POLICY_AUDIT_LOG_INFO;
typedef _POLICY_AUDIT_LOG_INFO* PPOLICY_AUDIT_LOG_INFO;
typedef _POLICY_AUDIT_EVENTS_INFO POLICY_AUDIT_EVENTS_INFO;
typedef _POLICY_AUDIT_EVENTS_INFO* PPOLICY_AUDIT_EVENTS_INFO;
typedef _POLICY_AUDIT_SUBCATEGORIES_INFO POLICY_AUDIT_SUBCATEGORIES_INFO;
typedef _POLICY_AUDIT_SUBCATEGORIES_INFO* PPOLICY_AUDIT_SUBCATEGORIES_INFO;
typedef _POLICY_AUDIT_CATEGORIES_INFO POLICY_AUDIT_CATEGORIES_INFO;
typedef _POLICY_AUDIT_CATEGORIES_INFO* PPOLICY_AUDIT_CATEGORIES_INFO;
typedef _POLICY_PRIMARY_DOMAIN_INFO POLICY_PRIMARY_DOMAIN_INFO;
typedef _POLICY_PRIMARY_DOMAIN_INFO* PPOLICY_PRIMARY_DOMAIN_INFO;
typedef _POLICY_PD_ACCOUNT_INFO POLICY_PD_ACCOUNT_INFO;
typedef _POLICY_PD_ACCOUNT_INFO* PPOLICY_PD_ACCOUNT_INFO;
typedef _POLICY_LSA_SERVER_ROLE_INFO POLICY_LSA_SERVER_ROLE_INFO;
typedef _POLICY_LSA_SERVER_ROLE_INFO* PPOLICY_LSA_SERVER_ROLE_INFO;
typedef _POLICY_REPLICA_SOURCE_INFO POLICY_REPLICA_SOURCE_INFO;
typedef _POLICY_REPLICA_SOURCE_INFO* PPOLICY_REPLICA_SOURCE_INFO;
typedef _POLICY_DEFAULT_QUOTA_INFO POLICY_DEFAULT_QUOTA_INFO;
typedef _POLICY_DEFAULT_QUOTA_INFO* PPOLICY_DEFAULT_QUOTA_INFO;
typedef _POLICY_MODIFICATION_INFO POLICY_MODIFICATION_INFO;
typedef _POLICY_MODIFICATION_INFO* PPOLICY_MODIFICATION_INFO;
typedef _POLICY_AUDIT_FULL_SET_INFO POLICY_AUDIT_FULL_SET_INFO;
typedef _POLICY_AUDIT_FULL_SET_INFO* PPOLICY_AUDIT_FULL_SET_INFO;
typedef _POLICY_AUDIT_FULL_QUERY_INFO POLICY_AUDIT_FULL_QUERY_INFO;
typedef _POLICY_AUDIT_FULL_QUERY_INFO* PPOLICY_AUDIT_FULL_QUERY_INFO;
typedef _POLICY_DOMAIN_INFORMATION_CLASS POLICY_DOMAIN_INFORMATION_CLASS;
typedef _POLICY_DOMAIN_INFORMATION_CLASS* PPOLICY_DOMAIN_INFORMATION_CLASS;
typedef _POLICY_DOMAIN_EFS_INFO POLICY_DOMAIN_EFS_INFO;
typedef _POLICY_DOMAIN_EFS_INFO* PPOLICY_DOMAIN_EFS_INFO;
typedef _POLICY_DOMAIN_KERBEROS_TICKET_INFO POLICY_DOMAIN_KERBEROS_TICKET_INFO;
typedef _POLICY_DOMAIN_KERBEROS_TICKET_INFO* PPOLICY_DOMAIN_KERBEROS_TICKET_INFO;
typedef _POLICY_MACHINE_ACCT_INFO POLICY_MACHINE_ACCT_INFO;
typedef _POLICY_MACHINE_ACCT_INFO* PPOLICY_MACHINE_ACCT_INFO;
typedef _POLICY_MACHINE_ACCT_INFO2 POLICY_MACHINE_ACCT_INFO2;
typedef _POLICY_MACHINE_ACCT_INFO2* PPOLICY_MACHINE_ACCT_INFO2;
typedef _POLICY_NOTIFICATION_INFORMATION_CLASS
    POLICY_NOTIFICATION_INFORMATION_CLASS;
typedef _POLICY_NOTIFICATION_INFORMATION_CLASS* PPOLICY_NOTIFICATION_INFORMATION_CLASS;
typedef PVOID LSA_HANDLE;
typedef PVOID* PLSA_HANDLE;
typedef _TRUSTED_INFORMATION_CLASS TRUSTED_INFORMATION_CLASS;
typedef _ETW_HEAP_EVENT_EXPANSION ETW_HEAP_EVENT_EXPANSION;
typedef _TRUSTED_INFORMATION_CLASS* PTRUSTED_INFORMATION_CLASS;
typedef _TRUSTED_DOMAIN_NAME_INFO* PTRUSTED_DOMAIN_NAME_INFO;
typedef _TRUSTED_CONTROLLERS_INFO TRUSTED_CONTROLLERS_INFO;
typedef _ETW_HEAP_EVENT_CONTRACTION* PETW_HEAP_EVENT_CONTRACTION;
typedef _TRUSTED_POSIX_OFFSET_INFO* PTRUSTED_POSIX_OFFSET_INFO;
typedef _TRUSTED_PASSWORD_INFO* PTRUSTED_PASSWORD_INFO;
typedef PLSA_TRUST_INFORMATION PTRUSTED_DOMAIN_INFORMATION_BASIC;
typedef _HEAP_COMMIT_DECOMMIT* PHEAP_COMMIT_DECOMMIT;
typedef _TRUSTED_DOMAIN_INFORMATION_EX2 TRUSTED_DOMAIN_INFORMATION_EX2;
typedef _TRUSTED_DOMAIN_INFORMATION_EX2* PTRUSTED_DOMAIN_INFORMATION_EX2;
typedef _LSA_AUTH_INFORMATION LSA_AUTH_INFORMATION;
typedef _LSA_AUTH_INFORMATION* PLSA_AUTH_INFORMATION;
typedef _TRUSTED_DOMAIN_AUTH_INFORMATION TRUSTED_DOMAIN_AUTH_INFORMATION;
typedef _TRUSTED_DOMAIN_AUTH_INFORMATION* PTRUSTED_DOMAIN_AUTH_INFORMATION;
typedef _TRUSTED_DOMAIN_FULL_INFORMATION TRUSTED_DOMAIN_FULL_INFORMATION;
typedef _TRUSTED_DOMAIN_FULL_INFORMATION* PTRUSTED_DOMAIN_FULL_INFORMATION;
typedef _TRUSTED_DOMAIN_FULL_INFORMATION2 TRUSTED_DOMAIN_FULL_INFORMATION2;
typedef _TRUSTED_DOMAIN_FULL_INFORMATION2* PTRUSTED_DOMAIN_FULL_INFORMATION2;
typedef _TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES
    TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES;
typedef _TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES* PTRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES;
typedef LSA_FOREST_TRUST_RECORD_TYPE LSA_FOREST_TRUST_RECORD_TYPE;
typedef _LSA_FOREST_TRUST_DOMAIN_INFO LSA_FOREST_TRUST_DOMAIN_INFO;
typedef _LSA_FOREST_TRUST_DOMAIN_INFO* PLSA_FOREST_TRUST_DOMAIN_INFO;
typedef _LSA_FOREST_TRUST_SCANNER_INFO LSA_FOREST_TRUST_SCANNER_INFO;
typedef _LSA_FOREST_TRUST_SCANNER_INFO* PLSA_FOREST_TRUST_SCANNER_INFO;
typedef _LSA_FOREST_TRUST_BINARY_DATA LSA_FOREST_TRUST_BINARY_DATA;
typedef _LSA_FOREST_TRUST_BINARY_DATA* PLSA_FOREST_TRUST_BINARY_DATA;
typedef _LSA_FOREST_TRUST_RECORD LSA_FOREST_TRUST_RECORD;
typedef _LSA_FOREST_TRUST_RECORD* PLSA_FOREST_TRUST_RECORD;
typedef _PERFINFO_DRIVER_COMPLETE_REQUEST_RET
    PERFINFO_DRIVER_COMPLETE_REQUEST_RET;
typedef _LSA_FOREST_TRUST_INFORMATION* PLSA_FOREST_TRUST_INFORMATION;
typedef _LSA_FOREST_TRUST_INFORMATION2 LSA_FOREST_TRUST_INFORMATION2;
typedef _LSA_FOREST_TRUST_INFORMATION2* PLSA_FOREST_TRUST_INFORMATION2;
typedef _LSA_FOREST_TRUST_COLLISION_RECORD* PLSA_FOREST_TRUST_COLLISION_RECORD;
typedef _PERFINFO_IDLE_STATE_CHANGE* PPERFINFO_IDLE_STATE_CHANGE;
typedef _LSA_FOREST_TRUST_COLLISION_INFORMATION* PLSA_FOREST_TRUST_COLLISION_INFORMATION;
typedef ULONG LSA_ENUMERATION_HANDLE;
typedef ULONG* PLSA_ENUMERATION_HANDLE;
typedef _LSA_ENUMERATION_INFORMATION LSA_ENUMERATION_INFORMATION;
typedef _LSA_ENUMERATION_INFORMATION* PLSA_ENUMERATION_INFORMATION;
typedef _LSA_LAST_INTER_LOGON_INFO LSA_LAST_INTER_LOGON_INFO;
typedef _LSA_LAST_INTER_LOGON_INFO* PLSA_LAST_INTER_LOGON_INFO;
typedef _SECURITY_LOGON_SESSION_DATA SECURITY_LOGON_SESSION_DATA;
typedef _SECURITY_LOGON_SESSION_DATA* PSECURITY_LOGON_SESSION_DATA;
typedef _CENTRAL_ACCESS_POLICY_ENTRY CENTRAL_ACCESS_POLICY_ENTRY;
typedef _CENTRAL_ACCESS_POLICY_ENTRY* PCENTRAL_ACCESS_POLICY_ENTRY;
typedef const CENTRAL_ACCESS_POLICY_ENTRY* PCCENTRAL_ACCESS_POLICY_ENTRY;
typedef _CENTRAL_ACCESS_POLICY CENTRAL_ACCESS_POLICY;
typedef _CENTRAL_ACCESS_POLICY* PCENTRAL_ACCESS_POLICY;
typedef const CENTRAL_ACCESS_POLICY* PCCENTRAL_ACCESS_POLICY;
typedef _NEGOTIATE_PACKAGE_PREFIX NEGOTIATE_PACKAGE_PREFIX;
typedef _NEGOTIATE_PACKAGE_PREFIX* PNEGOTIATE_PACKAGE_PREFIX;
typedef _NEGOTIATE_PACKAGE_PREFIXES NEGOTIATE_PACKAGE_PREFIXES;
typedef _NEGOTIATE_PACKAGE_PREFIXES* PNEGOTIATE_PACKAGE_PREFIXES;
typedef _NEGOTIATE_CALLER_NAME_REQUEST NEGOTIATE_CALLER_NAME_REQUEST;
typedef _NEGOTIATE_CALLER_NAME_REQUEST* PNEGOTIATE_CALLER_NAME_REQUEST;
typedef _NEGOTIATE_CALLER_NAME_RESPONSE NEGOTIATE_CALLER_NAME_RESPONSE;
typedef _NEGOTIATE_CALLER_NAME_RESPONSE* PNEGOTIATE_CALLER_NAME_RESPONSE;
typedef _NEGOTIATE_PACKAGE_NAMES NEGOTIATE_PACKAGE_NAMES;
typedef _NEGOTIATE_PACKAGE_NAMES* PNEGOTIATE_PACKAGE_NAMES;
typedef _NEGOTIATE_PACKAGE_PREFIX_WOW NEGOTIATE_PACKAGE_PREFIX_WOW;
typedef _NEGOTIATE_PACKAGE_PREFIX_WOW* PNEGOTIATE_PACKAGE_PREFIX_WOW;
typedef _NEGOTIATE_CALLER_NAME_RESPONSE_WOW NEGOTIATE_CALLER_NAME_RESPONSE_WOW;
typedef _NEGOTIATE_CALLER_NAME_RESPONSE_WOW* PNEGOTIATE_CALLER_NAME_RESPONSE_WOW;
typedef _LSA_USER_REGISTRATION_INFO LSA_USER_REGISTRATION_INFO;
typedef _LSA_USER_REGISTRATION_INFO* PLSA_USER_REGISTRATION_INFO;
typedef _LSA_REGISTRATION_INFO LSA_REGISTRATION_INFO;
typedef _LSA_REGISTRATION_INFO* PLSA_REGISTRATION_INFO;
typedef _LSA_CREDENTIAL_KEY_SOURCE_TYPE LSA_CREDENTIAL_KEY_SOURCE_TYPE;
typedef _LSA_CREDENTIAL_KEY_SOURCE_TYPE* PLSA_CREDENTIAL_KEY_SOURCE_TYPE;
typedef PVOID SAM_HANDLE;
typedef PVOID* PSAM_HANDLE;
typedef ULONG SAM_ENUMERATE_HANDLE;
typedef ULONG* PSAM_ENUMERATE_HANDLE;
typedef _SAM_RID_ENUMERATION SAM_RID_ENUMERATION;
typedef _SAM_RID_ENUMERATION* PSAM_RID_ENUMERATION;
typedef _SAM_SID_ENUMERATION SAM_SID_ENUMERATION;
typedef _SAM_SID_ENUMERATION* PSAM_SID_ENUMERATION;
typedef _SAM_BYTE_ARRAY SAM_BYTE_ARRAY;
typedef _SAM_BYTE_ARRAY* PSAM_BYTE_ARRAY;
typedef _SAM_BYTE_ARRAY_32K* PSAM_BYTE_ARRAY_32K;
typedef SAM_BYTE_ARRAY_32K SAM_SHELL_OBJECT_PROPERTIES;
typedef SAM_BYTE_ARRAY_32K* PSAM_SHELL_OBJECT_PROPERTIES;
typedef _RPC_AUTH_IDENTITY_HANDLE* PRPC_AUTH_IDENTITY_HANDLE;
typedef _DOMAIN_INFORMATION_CLASS DOMAIN_INFORMATION_CLASS;
typedef _DOMAIN_SERVER_ENABLE_STATE* PDOMAIN_SERVER_ENABLE_STATE;
typedef _DOMAIN_GENERAL_INFORMATION DOMAIN_GENERAL_INFORMATION;
typedef _ETW_DFSS_START_NEW_INTERVAL* PETW_DFSS_START_NEW_INTERVAL;
typedef _DOMAIN_GENERAL_INFORMATION2* PDOMAIN_GENERAL_INFORMATION2;
typedef _ETW_CPU_CACHE_FLUSH_EVENT ETW_CPU_CACHE_FLUSH_EVENT;
typedef _DOMAIN_PASSWORD_INFORMATION* PDOMAIN_PASSWORD_INFORMATION;
typedef _DOMAIN_PASSWORD_CONSTRUCTION DOMAIN_PASSWORD_CONSTRUCTION;
typedef _DOMAIN_LOGOFF_INFORMATION DOMAIN_LOGOFF_INFORMATION;
typedef _DOMAIN_LOGOFF_INFORMATION* PDOMAIN_LOGOFF_INFORMATION;
typedef _DOMAIN_OEM_INFORMATION DOMAIN_OEM_INFORMATION;
typedef _DOMAIN_OEM_INFORMATION* PDOMAIN_OEM_INFORMATION;
typedef _DOMAIN_NAME_INFORMATION DOMAIN_NAME_INFORMATION;
typedef _DOMAIN_NAME_INFORMATION* PDOMAIN_NAME_INFORMATION;
typedef _DOMAIN_SERVER_ROLE_INFORMATION DOMAIN_SERVER_ROLE_INFORMATION;
typedef _DOMAIN_SERVER_ROLE_INFORMATION* PDOMAIN_SERVER_ROLE_INFORMATION;
typedef _DOMAIN_REPLICATION_INFORMATION DOMAIN_REPLICATION_INFORMATION;
typedef _DOMAIN_REPLICATION_INFORMATION* PDOMAIN_REPLICATION_INFORMATION;
typedef _DOMAIN_MODIFIED_INFORMATION DOMAIN_MODIFIED_INFORMATION;
typedef _DOMAIN_MODIFIED_INFORMATION* PDOMAIN_MODIFIED_INFORMATION;
typedef _DOMAIN_MODIFIED_INFORMATION2 DOMAIN_MODIFIED_INFORMATION2;
typedef _DOMAIN_MODIFIED_INFORMATION2* PDOMAIN_MODIFIED_INFORMATION2;
typedef _DOMAIN_STATE_INFORMATION DOMAIN_STATE_INFORMATION;
typedef _DOMAIN_STATE_INFORMATION* PDOMAIN_STATE_INFORMATION;
typedef _DOMAIN_LOCKOUT_INFORMATION DOMAIN_LOCKOUT_INFORMATION;
typedef _DOMAIN_LOCKOUT_INFORMATION* PDOMAIN_LOCKOUT_INFORMATION;
typedef _DOMAIN_DISPLAY_INFORMATION DOMAIN_DISPLAY_INFORMATION;
typedef _DOMAIN_DISPLAY_INFORMATION* PDOMAIN_DISPLAY_INFORMATION;
typedef _DOMAIN_DISPLAY_USER DOMAIN_DISPLAY_USER;
typedef _DOMAIN_DISPLAY_USER* PDOMAIN_DISPLAY_USER;
typedef _DOMAIN_DISPLAY_MACHINE DOMAIN_DISPLAY_MACHINE;
typedef _DOMAIN_DISPLAY_MACHINE* PDOMAIN_DISPLAY_MACHINE;
typedef _DOMAIN_DISPLAY_OEM_USER DOMAIN_DISPLAY_OEM_USER;
typedef _DOMAIN_DISPLAY_OEM_GROUP* PDOMAIN_DISPLAY_OEM_GROUP;
typedef _WMI_JOB_SET_QUERY_INFORMATION* PWMI_JOB_SET_QUERY_INFORMATION;
typedef _DOMAIN_LOCALIZABLE_ACCOUNTS DOMAIN_LOCALIZABLE_ACCOUNTS_BASIC;
typedef _WMI_PROCESS_INFORMATION64* PWMI_PROCESS_INFORMATION64;
typedef _WMI_PROCESS_INFORMATION WMI_PROCESS_INFORMATION;
typedef _DOMAIN_LOCALIZABLE_ACCOUNTS* PDOMAIN_LOCALIZABLE_ACCOUNTS_BASIC;
typedef _DOMAIN_LOCALIZABLE_INFO_BUFFER DOMAIN_LOCALIZABLE_ACCOUNTS_INFO_BUFFER;
typedef _DOMAIN_LOCALIZABLE_INFO_BUFFER* PDOMAIN_LOCALIZABLE_ACCOUNTS_INFO_BUFFER;
typedef _GROUP_MEMBERSHIP GROUP_MEMBERSHIP;
typedef _GROUP_MEMBERSHIP* PGROUP_MEMBERSHIP;
typedef _GROUP_INFORMATION_CLASS GROUP_INFORMATION_CLASS;
typedef _GROUP_GENERAL_INFORMATION GROUP_GENERAL_INFORMATION;
typedef _GROUP_GENERAL_INFORMATION* PGROUP_GENERAL_INFORMATION;
typedef _GROUP_NAME_INFORMATION GROUP_NAME_INFORMATION;
typedef _GROUP_NAME_INFORMATION* PGROUP_NAME_INFORMATION;
typedef _GROUP_ATTRIBUTE_INFORMATION GROUP_ATTRIBUTE_INFORMATION;
typedef _GROUP_ATTRIBUTE_INFORMATION* PGROUP_ATTRIBUTE_INFORMATION;
typedef _GROUP_ADM_COMMENT_INFORMATION GROUP_ADM_COMMENT_INFORMATION;
typedef _GROUP_ADM_COMMENT_INFORMATION* PGROUP_ADM_COMMENT_INFORMATION;
typedef _ALIAS_INFORMATION_CLASS ALIAS_INFORMATION_CLASS;
typedef _ALIAS_GENERAL_INFORMATION ALIAS_GENERAL_INFORMATION;
typedef _ALIAS_GENERAL_INFORMATION* PALIAS_GENERAL_INFORMATION;
typedef _ALIAS_NAME_INFORMATION ALIAS_NAME_INFORMATION;
typedef _ALIAS_NAME_INFORMATION* PALIAS_NAME_INFORMATION;
typedef _ALIAS_ADM_COMMENT_INFORMATION ALIAS_ADM_COMMENT_INFORMATION;
typedef _ALIAS_ADM_COMMENT_INFORMATION* PALIAS_ADM_COMMENT_INFORMATION;
typedef _ALIAS_EXTENDED_INFORMATION ALIAS_EXTENDED_INFORMATION;
typedef _ALIAS_EXTENDED_INFORMATION* PALIAS_EXTENDED_INFORMATION;
typedef _LOGON_HOURS LOGON_HOURS;
typedef _LOGON_HOURS* PLOGON_HOURS;
typedef _SR_SECURITY_DESCRIPTOR SR_SECURITY_DESCRIPTOR;
typedef _SR_SECURITY_DESCRIPTOR* PSR_SECURITY_DESCRIPTOR;
typedef _USER_INFORMATION_CLASS USER_INFORMATION_CLASS;
typedef _USER_INFORMATION_CLASS* PUSER_INFORMATION_CLASS;
typedef _USER_GENERAL_INFORMATION USER_GENERAL_INFORMATION;
typedef _USER_GENERAL_INFORMATION* PUSER_GENERAL_INFORMATION;
typedef _USER_PREFERENCES_INFORMATION USER_PREFERENCES_INFORMATION;
typedef _USER_PREFERENCES_INFORMATION* PUSER_PREFERENCES_INFORMATION;
typedef _USER_LOGON_INFORMATION USER_LOGON_INFORMATION;
typedef _USER_LOGON_INFORMATION* PUSER_LOGON_INFORMATION;
typedef _USER_LOGON_HOURS_INFORMATION USER_LOGON_HOURS_INFORMATION;
typedef _USER_LOGON_HOURS_INFORMATION* PUSER_LOGON_HOURS_INFORMATION;
typedef _USER_ACCOUNT_INFORMATION USER_ACCOUNT_INFORMATION;
typedef _USER_ACCOUNT_INFORMATION* PUSER_ACCOUNT_INFORMATION;
typedef _USER_NAME_INFORMATION USER_NAME_INFORMATION;
typedef _USER_NAME_INFORMATION* PUSER_NAME_INFORMATION;
typedef _USER_ACCOUNT_NAME_INFORMATION USER_ACCOUNT_NAME_INFORMATION;
typedef _USER_ACCOUNT_NAME_INFORMATION* PUSER_ACCOUNT_NAME_INFORMATION;
typedef _USER_FULL_NAME_INFORMATION USER_FULL_NAME_INFORMATION;
typedef _USER_FULL_NAME_INFORMATION* PUSER_FULL_NAME_INFORMATION;
typedef _USER_PRIMARY_GROUP_INFORMATION USER_PRIMARY_GROUP_INFORMATION;
typedef _USER_PRIMARY_GROUP_INFORMATION* PUSER_PRIMARY_GROUP_INFORMATION;
typedef _USER_HOME_INFORMATION USER_HOME_INFORMATION;
typedef _USER_HOME_INFORMATION* PUSER_HOME_INFORMATION;
typedef _USER_SCRIPT_INFORMATION USER_SCRIPT_INFORMATION;
typedef _USER_SCRIPT_INFORMATION* PUSER_SCRIPT_INFORMATION;
typedef _MESSAGE_TRACE_USER MESSAGE_TRACE_USER;
typedef _USER_PROFILE_INFORMATION USER_PROFILE_INFORMATION;
typedef _USER_PROFILE_INFORMATION* PUSER_PROFILE_INFORMATION;
typedef _USER_ADMIN_COMMENT_INFORMATION USER_ADMIN_COMMENT_INFORMATION;
typedef _USER_ADMIN_COMMENT_INFORMATION* PUSER_ADMIN_COMMENT_INFORMATION;
typedef _ETW_REF_CLOCK* PETW_REF_CLOCK;
typedef _USER_SET_PASSWORD_INFORMATION* PUSER_SET_PASSWORD_INFORMATION;
typedef _ETW_RT_EVENT_LOSS ETW_RT_EVENT_LOSS;
typedef _WMI_BUFFER_HEADER* PWMI_BUFFER_HEADER;
typedef _USER_CONTROL_INFORMATION* PUSER_CONTROL_INFORMATION;
typedef _CYPHER_BLOCK CYPHER_BLOCK;
typedef _CYPHER_BLOCK* PCYPHER_BLOCK;
typedef _ENCRYPTED_NT_OWF_PASSWORD ENCRYPTED_NT_OWF_PASSWORD;
typedef _ENCRYPTED_NT_OWF_PASSWORD* PENCRYPTED_NT_OWF_PASSWORD;
typedef _ENCRYPTED_LM_OWF_PASSWORD ENCRYPTED_LM_OWF_PASSWORD;
typedef _ENCRYPTED_LM_OWF_PASSWORD* PENCRYPTED_LM_OWF_PASSWORD;
typedef _USER_INTERNAL1_INFORMATION USER_INTERNAL1_INFORMATION;
typedef _USER_INTERNAL1_INFORMATION* PUSER_INTERNAL1_INFORMATION;
typedef _USER_INTERNAL2_INFORMATION USER_INTERNAL2_INFORMATION;
typedef _USER_INTERNAL2_INFORMATION* PUSER_INTERNAL2_INFORMATION;
typedef _USER_PARAMETERS_INFORMATION USER_PARAMETERS_INFORMATION;
typedef _USER_PARAMETERS_INFORMATION* PUSER_PARAMETERS_INFORMATION;
typedef _USER_ALL_INFORMATION USER_ALL_INFORMATION;
typedef _USER_ALL_INFORMATION* PUSER_ALL_INFORMATION;
typedef _USER_INTERNAL3_INFORMATION USER_INTERNAL3_INFORMATION;
typedef _USER_INTERNAL3_INFORMATION* PUSER_INTERNAL3_INFORMATION;
typedef _ENCRYPTED_USER_PASSWORD ENCRYPTED_USER_PASSWORD;
typedef _ENCRYPTED_USER_PASSWORD* PENCRYPTED_USER_PASSWORD;
typedef _USER_INTERNAL4_INFORMATION USER_INTERNAL4_INFORMATION;
typedef _USER_INTERNAL4_INFORMATION* PUSER_INTERNAL4_INFORMATION;
typedef _USER_INTERNAL5_INFORMATION USER_INTERNAL5_INFORMATION;
typedef _USER_INTERNAL5_INFORMATION* PUSER_INTERNAL5_INFORMATION;
typedef _ETW_AUTOBOOST_SET_PRIORITY_FLOOR_EVENT* PETW_AUTOBOOST_SET_PRIORITY_FLOOR_EVENT;
typedef _USER_INTERNAL4_INFORMATION_NEW USER_INTERNAL4_INFORMATION_NEW;
typedef _USER_INTERNAL5_INFORMATION_NEW* PUSER_INTERNAL5_INFORMATION_NEW;
typedef _USER_INTERNAL6_INFORMATION USER_INTERNAL6_INFORMATION;
typedef SAM_BYTE_ARRAY_32K* PSAM_USER_TILE;
typedef _ETW_PRIORITY_EVENT* PETW_PRIORITY_EVENT;
typedef _USER_EXTENDED_INFORMATION USER_EXTENDED_INFORMATION;
typedef _USER_EXTENDED_INFORMATION* PUSER_EXTENDED_INFORMATION;
typedef _USER_LOGON_UI_INFORMATION USER_LOGON_UI_INFORMATION;
typedef _USER_LOGON_UI_INFORMATION* PUSER_LOGON_UI_INFORMATION;
typedef _ENCRYPTED_PASSWORD_AES ENCRYPTED_PASSWORD_AES;
typedef _ENCRYPTED_PASSWORD_AES* PENCRYPTED_PASSWORD_AES;
typedef _USER_INTERNAL7_INFORMATION USER_INTERNAL7_INFORMATION;
typedef _USER_INTERNAL7_INFORMATION* PUSER_INTERNAL7_INFORMATION;
typedef _USER_INTERNAL8_INFORMATION USER_INTERNAL8_INFORMATION;
typedef _USER_INTERNAL8_INFORMATION* PUSER_INTERNAL8_INFORMATION;
typedef _USER_PWD_CHANGE_FAILURE_INFORMATION
    USER_PWD_CHANGE_FAILURE_INFORMATION;
typedef _USER_PWD_CHANGE_FAILURE_INFORMATION* PUSER_PWD_CHANGE_FAILURE_INFORMATION;
typedef _SECURITY_DB_DELTA_TYPE SECURITY_DB_DELTA_TYPE;
typedef _SECURITY_DB_DELTA_TYPE* PSECURITY_DB_DELTA_TYPE;
typedef _SECURITY_DB_OBJECT_TYPE SECURITY_DB_OBJECT_TYPE;
typedef _SECURITY_DB_OBJECT_TYPE* PSECURITY_DB_OBJECT_TYPE;
typedef _SAM_ACCOUNT_TYPE SAM_ACCOUNT_TYPE;
typedef _SAM_ACCOUNT_TYPE* PSAM_ACCOUNT_TYPE;
typedef _SAM_GROUP_MEMBER_ID SAM_GROUP_MEMBER_ID;
typedef _SAM_GROUP_MEMBER_ID* PSAM_GROUP_MEMBER_ID;
typedef _SAM_ALIAS_MEMBER_ID SAM_ALIAS_MEMBER_ID;
typedef _SAM_ALIAS_MEMBER_ID* PSAM_ALIAS_MEMBER_ID;
typedef _SAM_DELTA_DATA SAM_DELTA_DATA;
typedef _SAM_DELTA_DATA* PSAM_DELTA_DATA;
typedef NTSTATUS ( *PSAM_DELTA_NOTIFICATION_ROUTINE )(
    PSID, SECURITY_DB_DELTA_TYPE, SECURITY_DB_OBJECT_TYPE, ULONG, PUNICODE_STRING, PLARGE_INTEGER, PSAM_DELTA_DATA );
typedef _PASSWORD_POLICY_VALIDATION_TYPE PASSWORD_POLICY_VALIDATION_TYPE;
typedef _SAM_VALIDATE_PASSWORD_HASH SAM_VALIDATE_PASSWORD_HASH;
typedef _SAM_VALIDATE_PASSWORD_HASH* PSAM_VALIDATE_PASSWORD_HASH;
typedef _SAM_VALIDATE_PERSISTED_FIELDS SAM_VALIDATE_PERSISTED_FIELDS;
typedef _SAM_VALIDATE_PERSISTED_FIELDS* PSAM_VALIDATE_PERSISTED_FIELDS;
typedef _SAM_VALIDATE_VALIDATION_STATUS SAM_VALIDATE_VALIDATION_STATUS;
typedef _SAM_VALIDATE_VALIDATION_STATUS* PSAM_VALIDATE_VALIDATION_STATUS;
typedef _SAM_VALIDATE_STANDARD_OUTPUT_ARG SAM_VALIDATE_STANDARD_OUTPUT_ARG;
typedef _SAM_VALIDATE_STANDARD_OUTPUT_ARG* PSAM_VALIDATE_STANDARD_OUTPUT_ARG;
typedef _SAM_VALIDATE_AUTHENTICATION_INPUT_ARG
    SAM_VALIDATE_AUTHENTICATION_INPUT_ARG;
typedef _SAM_VALIDATE_AUTHENTICATION_INPUT_ARG* PSAM_VALIDATE_AUTHENTICATION_INPUT_ARG;
typedef _SAM_VALIDATE_PASSWORD_CHANGE_INPUT_ARG
    SAM_VALIDATE_PASSWORD_CHANGE_INPUT_ARG;
typedef _SAM_VALIDATE_PASSWORD_CHANGE_INPUT_ARG* PSAM_VALIDATE_PASSWORD_CHANGE_INPUT_ARG;
typedef _SAM_VALIDATE_PASSWORD_RESET_INPUT_ARG
    SAM_VALIDATE_PASSWORD_RESET_INPUT_ARG;
typedef _SAM_VALIDATE_PASSWORD_RESET_INPUT_ARG* PSAM_VALIDATE_PASSWORD_RESET_INPUT_ARG;
typedef _SAM_VALIDATE_INPUT_ARG SAM_VALIDATE_INPUT_ARG;
typedef _SAM_VALIDATE_INPUT_ARG* PSAM_VALIDATE_INPUT_ARG;
typedef _SAM_VALIDATE_OUTPUT_ARG SAM_VALIDATE_OUTPUT_ARG;
typedef _SAM_VALIDATE_OUTPUT_ARG* PSAM_VALIDATE_OUTPUT_ARG;
typedef _SAM_GENERIC_OPERATION_TYPE SAM_GENERIC_OPERATION_TYPE;
typedef _SAM_GENERIC_OPERATION_TYPE* PSAM_GENERIC_OPERATION_TYPE;
typedef _ETW_DISKIO_READWRITE_V3 WMI_DISKIO_READWRITE;
typedef _SAM_OPERATION_OBJCHG_INPUT SAM_OPERATION_OBJCHG_INPUT;
typedef _SAM_OPERATION_OBJCHG_INPUT* PSAM_OPERATION_OBJCHG_INPUT;
typedef _SAM_OPERATION_OBJCHG_OUTPUT SAM_OPERATION_OBJCHG_OUTPUT;
typedef _SAM_OPERATION_OBJCHG_OUTPUT* PSAM_OPERATION_OBJCHG_OUTPUT;
typedef _WMI_DISKIO_IO_REDIRECTED_INIT* PWMI_DISKIO_IO_REDIRECTED_INIT;
typedef _SAM_GENERIC_OPERATION_OUTPUT* PSAM_GENERIC_OPERATION_OUTPUT;
typedef _ETW_OPTICALIO_FLUSH_BUFFERS ETW_OPTICALIO_FLUSH_BUFFERS;
typedef _VDMSERVICECLASS* PVDMSERVICECLASS;
typedef _PROCESS_ACTIVITY_TYPE PROCESS_ACTIVITY_TYPE;
typedef ULONG64 PROCESSTRACE_HANDLE;
typedef ULONG64 CONTROLTRACE_ID;
typedef _WMI_TRACE_PACKET WMI_TRACE_PACKET;
typedef _WMI_TRACE_PACKET* PWMI_TRACE_PACKET;
typedef _EVENT_INSTANCE_GUID_HEADER EVENT_INSTANCE_GUID_HEADER;
typedef _EVENT_INSTANCE_GUID_HEADER* PEVENT_INSTANCE_GUID_HEADER;
typedef ULONGLONG PERFINFO_TIMESTAMP;
typedef _PERFINFO_TRACE_HEADER PERFINFO_TRACE_ENTRY;
typedef _PERFINFO_TRACE_HEADER* PPERFINFO_TRACE_ENTRY;
typedef _PERFINFO_TRACE_HEADER PERFINFO_TRACE_HEADER;
typedef _PERFINFO_TRACE_HEADER* PPERFINFO_TRACE_HEADER;
typedef _SYSTEM_TRACE_HEADER SYSTEM_TRACE_HEADER;
typedef _SYSTEM_TRACE_HEADER* PSYSTEM_TRACE_HEADER;
typedef _WMI_TRACE_MESSAGE_PACKET WMI_TRACE_MESSAGE_PACKET;
typedef _WMI_TRACE_MESSAGE_PACKET* PWMI_TRACE_MESSAGE_PACKET;
typedef _MESSAGE_TRACE_HEADER MESSAGE_TRACE_HEADER;
typedef _MESSAGE_TRACE_HEADER* PMESSAGE_TRACE_HEADER;
typedef _WMI_BUFFER_HEADER WMI_BUFFER_HEADER;
typedef _WMI_BUFFER_HEADER* PWMI_BUFFER_HEADER;
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef _TRACE_ENABLE_FLAG_EXTENSION TRACE_ENABLE_FLAG_EXTENSION;
typedef _TRACE_ENABLE_FLAG_EXTENSION* PTRACE_ENABLE_FLAG_EXTENSION;
typedef _TRACE_ENABLE_FLAG_EXT_HEADER TRACE_ENABLE_FLAG_EXT_HEADER;
typedef _TRACE_ENABLE_FLAG_EXT_HEADER* PTRACE_ENABLE_FLAG_EXT_HEADER;
typedef _TRACE_ENABLE_FLAG_EXT_ITEM TRACE_ENABLE_FLAG_EXT_ITEM;
typedef _TRACE_ENABLE_FLAG_EXT_ITEM* PTRACE_ENABLE_FLAG_EXT_ITEM;
typedef _ETW_STACK_CACHING_CONFIG ETW_STACK_CACHING_CONFIG;
typedef _ETW_STACK_CACHING_CONFIG* PETW_STACK_CACHING_CONFIG;
typedef ULONG PERFINFO_MASK;
typedef _PERFINFO_GROUPMASK PERFINFO_GROUPMASK;
typedef _PERFINFO_GROUPMASK* PPERFINFO_GROUPMASK;
typedef _CPU_CONFIG_RECORD CPU_CONFIG_RECORD;
typedef _CPU_CONFIG_RECORD* PCPU_CONFIG_RECORD;
typedef _PHYSICAL_DISK_RECORD PHYSICAL_DISK_RECORD;
typedef _PHYSICAL_DISK_RECORD* PPHYSICAL_DISK_RECORD;
typedef _LOGICAL_DISK_EXTENTS LOGICAL_DISK_EXTENTS;
typedef _LOGICAL_DISK_EXTENTS* PLOGICAL_DISK_EXTENTS;
typedef _OPTICAL_MEDIA_RECORD OPTICAL_MEDIA_RECORD;
typedef _OPTICAL_MEDIA_RECORD* POPTICAL_MEDIA_RECORD;
typedef _NIC_RECORD NIC_RECORD;
typedef _NIC_RECORD* PNIC_RECORD;
typedef _VIDEO_RECORD VIDEO_RECORD;
typedef _VIDEO_RECORD* PVIDEO_RECORD;
typedef _WMI_DPI_RECORD WMI_DPI_RECORD;
typedef _WMI_DPI_RECORD* PWMI_DPI_RECORD;
typedef _WMI_POWER_RECORD WMI_POWER_RECORD;
typedef _WMI_POWER_RECORD* PWMI_POWER_RECORD;
typedef _WMI_IRQ_RECORD WMI_IRQ_RECORD;
typedef _WMI_IRQ_RECORD* PWMI_IRQ_RECORD;
typedef _WMI_PNP_RECORD_V3 WMI_PNP_RECORD_V3;
typedef _WMI_PNP_RECORD_V3* PWMI_PNP_RECORD_V3;
typedef _WMI_PNP_RECORD_V4 WMI_PNP_RECORD_V4;
typedef _WMI_PNP_RECORD_V4* PWMI_PNP_RECORD_V4;
typedef _WMI_PNP_RECORD_V5 WMI_PNP_RECORD_V5;
typedef _WMI_PNP_RECORD_V5* PWMI_PNP_RECORD_V5;
typedef WMI_PNP_RECORD_V5 WMI_PNP_RECORD;
typedef WMI_PNP_RECORD_V5* PWMI_PNP_RECORD;
typedef _WMI_IDE_CHANNEL_RECORD WMI_IDE_CHANNEL_RECORD;
typedef _WMI_IDE_CHANNEL_RECORD* PWMI_IDE_CHANNEL_RECORD;
typedef _WMI_JOB_INFORMATION WMI_JOB_INFORMATION;
typedef _WMI_JOB_INFORMATION* PWMI_JOB_INFORMATION;
typedef _WMI_JOB_ASSIGN_PROCESS WMI_JOB_ASSIGN_PROCESS;
typedef _WMI_JOB_ASSIGN_PROCESS* PWMI_JOB_ASSIGN_PROCESS;
typedef _WMI_JOB_REMOVE_PROCESS WMI_JOB_REMOVE_PROCESS;
typedef _WMI_JOB_SET_QUERY_CPU_RATE WMI_JOB_SET_QUERY_CPU_RATE;
typedef _WMI_JOB_SET_QUERY_NET_RATE WMI_JOB_SET_QUERY_NET_RATE;
typedef _WMI_JOB_SEND_NOTIFICATION_INFORMATION
    WMI_JOB_SEND_NOTIFICATION_INFORMATION;
typedef _WMI_THREAD_INFORMATION WMI_THREAD_INFORMATION;
typedef _WMI_THREAD_INFORMATION* PWMI_THREAD_INFORMATION;
typedef signed char SCHAR;
typedef _WMI_EXTENDED_THREAD_INFORMATION WMI_EXTENDED_THREAD_INFORMATION;
typedef _WMI_EXTENDED_THREAD_INFORMATION* PWMI_EXTENDED_THREAD_INFORMATION;
typedef _WMI_EXTENDED_THREAD_INFORMATION64 WMI_EXTENDED_THREAD_INFORMATION64;
typedef _WMI_EXTENDED_THREAD_INFORMATION64* PWMI_EXTENDED_THREAD_INFORMATION64;
typedef _WMI_IMAGELOAD_INFORMATION WMI_IMAGELOAD_INFORMATION;
typedef _WMI_IMAGELOAD_INFORMATION* PWMI_IMAGELOAD_INFORMATION;
typedef _WMI_IMAGELOAD_INFORMATION32 WMI_IMAGELOAD_INFORMATION32;
typedef _WMI_IMAGELOAD_INFORMATION32* PWMI_IMAGELOAD_INFORMATION32;
typedef _WMI_IMAGELOAD_INFORMATION64 WMI_IMAGELOAD_INFORMATION64;
typedef _WMI_IMAGELOAD_INFORMATION64* PWMI_IMAGELOAD_INFORMATION64;
typedef _WMI_IMAGEID_INFORMATION WMI_IMAGEID_INFORMATION;
typedef _WMI_IMAGEID_INFORMATION* PWMI_IMAGEID_INFORMATION;
typedef _WMI_IMAGEID_INFORMATION32 WMI_IMAGEID_INFORMATION32;
typedef _WMI_IMAGEID_INFORMATION32* PWMI_IMAGEID_INFORMATION32;
typedef _WMI_IMAGEID_INFORMATION64 WMI_IMAGEID_INFORMATION64;
typedef _WMI_IMAGEID_INFORMATION64* PWMI_IMAGEID_INFORMATION64;
typedef _ETW_DISKIO_READWRITE_V2 ETW_DISKIO_READWRITE_V2;
typedef _ETW_DISKIO_READWRITE_V2* PETW_DISKIO_READWRITE_V2;
typedef _ETW_DISKIO_READWRITE_V3 ETW_DISKIO_READWRITE_V3;
typedef _ETW_DISKIO_READWRITE_V3* PETW_DISKIO_READWRITE_V3;
typedef _ETW_DISKIO_FLUSH_BUFFERS_V2 ETW_DISKIO_FLUSH_BUFFERS_V2;
typedef _ETW_DISKIO_FLUSH_BUFFERS_V2* PETW_DISKIO_FLUSH_BUFFERS_V2;
typedef _ETW_DISKIO_FLUSH_BUFFERS_V3 WMI_DISKIO_FLUSH_BUFFERS;
typedef _WMI_DISKIO_READWRITE_INIT WMI_DISKIO_READWRITE_INIT;
typedef _WMI_DISKIO_READWRITE_INIT* PWMI_DISKIO_READWRITE_INIT;
typedef _ETW_OPTICALIO_READWRITE* PETW_OPTICALIO_READWRITE;
typedef _ETW_OPTICALIO_FLUSH_BUFFERS* PETW_OPTICALIO_FLUSH_BUFFERS;
typedef _ETW_OPTICALIO_INIT ETW_OPTICALIO_INIT;
typedef _ETW_OPTICALIO_INIT* PETW_OPTICALIO_INIT;
typedef _WMI_REGISTRY WMI_REGISTRY;
typedef _WMI_REGISTRY* PWMI_REGISTRY;
typedef _WMI_TXR WMI_TXR;
typedef _WMI_TXR* PWMI_TXR;
typedef _ETW_REGNOTIF_REGISTER ETW_REGNOTIF_REGISTER;
typedef _ETW_REGNOTIF_REGISTER* PETW_REGNOTIF_REGISTER;
typedef _WMI_FILE_IO WMI_FILE_IO;
typedef _WMI_FILE_IO* PWMI_FILE_IO;
typedef _WMI_TCPIP_V4 WMI_TCPIP_V4;
typedef _WMI_TCPIP_V4* PWMI_TCPIP_V4;
typedef _WMI_TCPIP_V6 WMI_TCPIP_V6;
typedef _WMI_TCPIP_V6* PWMI_TCPIP_V6;
typedef _WMI_UDP_V4 WMI_UDP_V4;
typedef _WMI_UDP_V4* PWMI_UDP_V4;
typedef _WMI_UDP_V6 WMI_UDP_V6;
typedef _WMI_UDP_V6* PWMI_UDP_V6;
typedef _WMI_PAGE_FAULT WMI_PAGE_FAULT;
typedef _WMI_PAGE_FAULT* PWMI_PAGE_FAULT;
typedef _WMI_CONTEXTSWAP WMI_CONTEXTSWAP;
typedef _WMI_CONTEXTSWAP* PWMI_CONTEXTSWAP;
typedef _WMI_SPINLOCK WMI_SPINLOCK;
typedef _WMI_SPINLOCK* PWMI_SPINLOCK;
typedef _WMI_RESOURCE WMI_RESOURCE;
typedef _WMI_RESOURCE* PWMI_RESOURCE;
typedef _WMI_QUEUE WMI_QUEUE;
typedef _WMI_QUEUE* PWMI_QUEUE;
typedef _WMI_PUSHLOCK WMI_PUSHLOCK;
typedef _WMI_PUSHLOCK* PWMI_PUSHLOCK;
typedef _WMI_WAIT_SINGLE WMI_WAIT_SINGLE;
typedef _WMI_WAIT_SINGLE* PWMI_WAIT_SINGLE;
typedef _WMI_WAIT_OBJECT_RECORD WMI_WAIT_OBJECT_RECORD;
typedef _WMI_WAIT_OBJECT_RECORD* PWMI_WAIT_OBJECT_RECORD;
typedef _WMI_WAIT_MULTIPLE WMI_WAIT_MULTIPLE;
typedef _WMI_WAIT_MULTIPLE* PWMI_WAIT_MULTIPLE;
typedef _WMI_DELAY_EXECUTION WMI_DELAY_EXECUTION;
typedef _WMI_DELAY_EXECUTION* PWMI_DELAY_EXECUTION;
typedef _ETW_READY_THREAD_EVENT ETW_READY_THREAD_EVENT;
typedef _ETW_READY_THREAD_EVENT* PETW_READY_THREAD_EVENT;
typedef _ETW_KQUEUE_ENQUEUE_EVENT ETW_KQUEUE_ENQUEUE_EVENT;
typedef _ETW_KQUEUE_ENQUEUE_EVENT* PETW_KQUEUE_ENQUEUE_EVENT;
typedef _ETW_KQUEUE_DEQUEUE_EVENT ETW_KQUEUE_DEQUEUE_EVENT;
typedef _ETW_KQUEUE_DEQUEUE_EVENT* PETW_KQUEUE_DEQUEUE_EVENT;
typedef _ETW_ANTI_STARVATION_BOOST_EVENT ETW_ANTI_STARVATION_BOOST_EVENT;
typedef _ETW_ANTI_STARVATION_BOOST_EVENT* PETW_ANTI_STARVATION_BOOST_EVENT;
typedef _ETW_AUTOBOOST_SET_PRIORITY_FLOOR_EVENT
    ETW_AUTOBOOST_SET_PRIORITY_FLOOR_EVENT;
typedef _ETW_AUTOBOOST_NO_ENTRIES_EVENT* PETW_AUTOBOOST_NO_ENTRIES_EVENT;
typedef _ETW_DEBUG_PRINT_EVENT ETW_DEBUG_PRINT_EVENT;
typedef _ETW_DEBUG_PRINT_EVENT* PETW_DEBUG_PRINT_EVENT;
typedef _ETW_POOL_EVENT ETW_POOL_EVENT;
typedef _ETW_POOL_EVENT* PETW_POOL_EVENT;
typedef _ETW_CREATE_HANDLE_EVENT ETW_CREATE_HANDLE_EVENT;
typedef _ETW_CREATE_HANDLE_EVENT* PETW_CREATE_HANDLE_EVENT;
typedef ETW_CREATE_HANDLE_EVENT ETW_CLOSE_HANDLE_EVENT;
typedef ETW_CREATE_HANDLE_EVENT* PETW_CLOSE_HANDLE_EVENT;
typedef _ETW_DUPLICATE_HANDLE_EVENT ETW_DUPLICATE_HANDLE_EVENT;
typedef _ETW_DUPLICATE_HANDLE_EVENT* PETW_DUPLICATE_HANDLE_EVENT;
typedef _ETW_OBJECT_TYPE_EVENT ETW_OBJECT_TYPE_EVENT;
typedef _ETW_OBJECT_TYPE_EVENT* PETW_OBJECT_TYPE_EVENT;
typedef _ETW_OBJECT_HANDLE_EVENT ETW_OBJECT_HANDLE_EVENT;
typedef _ETW_OBJECT_HANDLE_EVENT* PETW_OBJECT_HANDLE_EVENT;
typedef _ETW_REFDEREF_OBJECT_EVENT ETW_REFDEREF_OBJECT_EVENT;
typedef _ETW_REFDEREF_OBJECT_EVENT* PETW_REFDEREF_OBJECT_EVENT;
typedef _ETW_CREATEDELETE_OBJECT_EVENT ETW_CREATEDELETE_OBJECT_EVENT;
typedef _ETW_CREATEDELETE_OBJECT_EVENT* PETW_CREATEDELETE_OBJECT_EVENT;
typedef _ETW_WAKE_COUNTER_EVENT ETW_WAKE_COUNTER_EVENT;
typedef _ETW_WAKE_COUNTER_EVENT* PETW_WAKE_COUNTER_EVENT;
typedef _ETW_HEAP_EVENT_COMMON ETW_HEAP_EVENT_COMMON;
typedef _ETW_HEAP_EVENT_COMMON* PETW_HEAP_EVENT_COMMON;
typedef _ETW_HEAP_EVENT_ALLOC ETW_HEAP_EVENT_ALLOC;
typedef _ETW_HEAP_EVENT_ALLOC* PETW_HEAP_EVENT_ALLOC;
typedef _ETW_HEAP_EVENT_FREE ETW_HEAP_EVENT_FREE;
typedef _ETW_HEAP_EVENT_FREE* PETW_HEAP_EVENT_FREE;
typedef _HEAP_COMMIT_DECOMMIT HEAP_COMMIT_DECOMMIT;
typedef _HEAP_EVENT_SUBSEGMENT_ALLOC_FREE HEAP_EVENT_SUBSEGMENT_ALLOC_FREE;
typedef _HEAP_EVENT_SUBSEGMENT_ALLOC_FREE* PHEAP_EVENT_SUBSEGMENT_ALLOC_FREE;
typedef _HEAP_SUBSEGMENT_FREE HEAP_SUBSEGMENT_FREE;
typedef _HEAP_SUBSEGMENT_FREE* PHEAP_SUBSEGMENT_FREE;
typedef _HEAP_SUBSEGMENT_ALLOC HEAP_SUBSEGMENT_ALLOC;
typedef _HEAP_SUBSEGMENT_ALLOC* PHEAP_SUBSEGMENT_ALLOC;
typedef _HEAP_SUBSEGMENT_INIT HEAP_SUBSEGMENT_INIT;
typedef _HEAP_SUBSEGMENT_INIT* PHEAP_SUBSEGMENT_INIT;
typedef _HEAP_AFFINITY_MANAGER_ENABLE HEAP_AFFINITY_MANAGER_ENABLE;
typedef _HEAP_AFFINITY_MANAGER_ENABLE* PHEAP_AFFINITY_MANAGER_ENABLE;
typedef _HEAP_AFFINITY_SLOT_ASSIGN HEAP_AFFINITY_SLOT_ASSIGN;
typedef _HEAP_AFFINITY_SLOT_ASSIGN* PHEAP_AFFINITY_SLOT_ASSIGN;
typedef _HEAP_REUSE_THRESHOLD_ACTIVATED HEAP_REUSE_THRESHOLD_ACTIVATED;
typedef _HEAP_REUSE_THRESHOLD_ACTIVATED* PHEAP_REUSE_THRESHOLD_ACTIVATED;
typedef _HEAP_SUBSEGMENT_ACTIVATED HEAP_SUBSEGMENT_ACTIVATED;
typedef _HEAP_SUBSEGMENT_ACTIVATED* PHEAP_SUBSEGMENT_ACTIVATED;
typedef _ETW_HEAP_EVENT_SNAPSHOT ETW_HEAP_EVENT_SNAPSHOT;
typedef _ETW_HEAP_EVENT_SNAPSHOT* PETW_HEAP_EVENT_SNAPSHOT;
typedef _ETW_HEAP_EVENT_RUNDOWN_RANGE ETW_HEAP_EVENT_RUNDOWN_RANGE;
typedef _ETW_HEAP_EVENT_RUNDOWN_RANGE* PETW_HEAP_EVENT_RUNDOWN_RANGE;
typedef _ETW_HEAP_EVENT_RUNDOWN ETW_HEAP_EVENT_RUNDOWN;
typedef _ETW_HEAP_EVENT_RUNDOWN* PETW_HEAP_EVENT_RUNDOWN;
typedef _HEAP_EVENT_RANGE_CREATE HEAP_EVENT_RANGE_CREATE;
typedef _HEAP_EVENT_RANGE_CREATE* PHEAP_EVENT_RANGE_CREATE;
typedef _HEAP_EVENT_RANGE HEAP_EVENT_RANGE;
typedef _HEAP_EVENT_RANGE* PHEAP_EVENT_RANGE;
typedef _HEAP_RANGE_CREATE HEAP_RANGE_CREATE;
typedef _HEAP_RANGE_CREATE* PHEAP_RANGE_CREATE;
typedef _HEAP_RANGE_DESTROY HEAP_RANGE_DESTROY;
typedef _HEAP_RANGE_DESTROY* PHEAP_RANGE_DESTROY;
typedef _HEAP_RANGE_LOG HEAP_RANGE_LOG;
typedef _HEAP_RANGE_LOG* PHEAP_RANGE_LOG;
typedef _ETW_CRITSEC_EVENT_COLLISION ETW_CRITSEC_EVENT_COLLISION;
typedef _ETW_CRITSEC_EVENT_COLLISION* PETW_CRITSEC_EVENT_COLLISION;
typedef _ETW_CRITSEC_EVENT_INIT ETW_CRITSEC_EVENT_INIT;
typedef _ETW_CRITSEC_EVENT_INIT* PETW_CRITSEC_EVENT_INIT;
typedef _STACK_WALK_EVENT_DATA STACK_WALK_EVENT_DATA;
typedef _STACK_WALK_EVENT_DATA* PSTACK_WALK_EVENT_DATA;
typedef _LOAD_DLL_EVENT_DATA LOAD_DLL_EVENT_DATA;
typedef _LOAD_DLL_EVENT_DATA* PLOAD_DLL_EVENT_DATA;
typedef _CM_PERF_COUNTERS CM_PERF_COUNTERS;
typedef _CM_PERF_COUNTERS* PCM_PERF_COUNTERS;
typedef _CI_LOG_SCHEDULER_EVENT CI_LOG_SCHEDULER_EVENT;
typedef _CI_LOG_SCHEDULER_EVENT* PCI_LOG_SCHEDULER_EVENT;
typedef _CI_LOG_SCHEDULER_WAKEUP CI_LOG_SCHEDULER_WAKEUP;
typedef _CI_LOG_SCHEDULER_WAKEUP* PCI_LOG_SCHEDULER_WAKEUP;
typedef _CI_LOG_SCHEDULER_SLEEP CI_LOG_SCHEDULER_SLEEP;
typedef _CI_LOG_SCHEDULER_SLEEP* PCI_LOG_SCHEDULER_SLEEP;
typedef _CI_LOG_SCHEDULER_SLEEP_RESPONSE CI_LOG_SCHEDULER_SLEEP_RESPONSE;
typedef _CI_LOG_SCHEDULER_SLEEP_RESPONSE* PCI_LOG_SCHEDULER_SLEEP_RESPONSE;
typedef _CI_LOG_MMCSS_START CI_LOG_MMCSS_START;
typedef _CI_LOG_MMCSS_START* PCI_LOG_MMCSS_START;
typedef _CI_LOG_MMCSS_STOP* PCI_LOG_MMCSS_STOP;
typedef _ETW_UMS_EVENT_DIRECTED_SWITCH_END* PETW_UMS_EVENT_DIRECTED_SWITCH_END;
typedef _ETW_UMS_EVENT_CONTEXT_SWITCH ETW_UMS_EVENT_CONTEXT_SWITCH;
typedef _ETW_UMS_EVENT_CONTEXT_SWITCH* PETW_UMS_EVENT_CONTEXT_SWITCH;
typedef _ETW_SET_TIMER_EVENT ETW_SET_TIMER_EVENT;
typedef _ETW_SET_TIMER_EVENT* PETW_SET_TIMER_EVENT;
typedef _ETW_CANCEL_TIMER_EVENT ETW_CANCEL_TIMER_EVENT;
typedef _ETW_CANCEL_TIMER_EVENT* PETW_CANCEL_TIMER_EVENT;
typedef _ETW_TIMER_EXPIRATION_EVENT ETW_TIMER_EXPIRATION_EVENT;
typedef _ETW_TIMER_EXPIRATION_EVENT* PETW_TIMER_EXPIRATION_EVENT;
typedef _ETW_TIMER_EXPIRATION_START_EVENT ETW_TIMER_EXPIRATION_START_EVENT;
typedef _ETW_TIMER_EXPIRATION_START_EVENT* PETW_TIMER_EXPIRATION_START_EVENT;
typedef _ETW_SET_KTIMER2_EVENT ETW_SET_KTIMER2_EVENT;
typedef _ETW_SET_KTIMER2_EVENT* PETW_SET_KTIMER2_EVENT;
typedef ETW_SET_KTIMER2_EVENT ETW_KTIMER2_EXPIRATION_EVENT;
typedef ETW_SET_KTIMER2_EVENT* PETW_KTIMER2_EXPIRATION_EVENT;
typedef _ETW_CANCEL_KTIMER2_EVENT ETW_CANCEL_KTIMER2_EVENT;
typedef _ETW_CANCEL_KTIMER2_EVENT* PETW_CANCEL_KTIMER2_EVENT;
typedef _ETW_DISABLE_KTIMER2_EVENT ETW_DISABLE_KTIMER2_EVENT;
typedef _ETW_DISABLE_KTIMER2_EVENT* PETW_DISABLE_KTIMER2_EVENT;
typedef _ETW_FINALIZE_KTIMER2_EVENT ETW_FINALIZE_KTIMER2_EVENT;
typedef _ETW_FINALIZE_KTIMER2_EVENT* PETW_FINALIZE_KTIMER2_EVENT;
typedef _PERFINFO_DYNAMIC_TICK_VETO_REASON PERFINFO_DYNAMIC_TICK_VETO_REASON;
typedef _PERFINFO_DYNAMIC_TICK_VETO_REASON* PPERFINFO_DYNAMIC_TICK_VETO_REASON;
typedef _PERFINFO_DYNAMIC_TICK_DISABLE_REASON
    PERFINFO_DYNAMIC_TICK_DISABLE_REASON;
typedef _PERFINFO_DYNAMIC_TICK_DISABLE_REASON* PPERFINFO_DYNAMIC_TICK_DISABLE_REASON;
typedef _ETW_CLOCK_CONFIGURATION_EVENT ETW_CLOCK_CONFIGURATION_EVENT;
typedef _ETW_CLOCK_CONFIGURATION_EVENT* PETW_CLOCK_CONFIGURATION_EVENT;
typedef _ETW_CLOCK_STATE_CHANGE_EVENT* PETW_CLOCK_STATE_CHANGE_EVENT;
typedef _ETW_PER_SESSION_QUOTA* PETW_PER_SESSION_QUOTA;
typedef _ETW_DFSS_RELEASE_THREAD_ON_IDLE* PETW_DFSS_RELEASE_THREAD_ON_IDLE;
typedef _ETW_CPU_CACHE_FLUSH_EVENT* PETW_CPU_CACHE_FLUSH_EVENT;
typedef _ETW_TP_EVENT_CALLBACK_ENQUEUE ETW_TP_EVENT_CALLBACK_ENQUEUE;
typedef _ETW_TP_EVENT_CALLBACK_ENQUEUE* PETW_TP_EVENT_CALLBACK_ENQUEUE;
typedef ETW_TP_EVENT_CALLBACK_ENQUEUE ETW_TP_EVENT_CALLBACK_DEQUEUE;
typedef ETW_TP_EVENT_CALLBACK_ENQUEUE* PETW_TP_EVENT_CALLBACK_DEQUEUE;
typedef _ETW_TP_EVENT_CALLBACK_START ETW_TP_EVENT_CALLBACK_START;
typedef _ETW_TP_EVENT_CALLBACK_START* PETW_TP_EVENT_CALLBACK_START;
typedef ETW_TP_EVENT_CALLBACK_START ETW_TP_EVENT_CALLBACK_STOP;
typedef ETW_TP_EVENT_CALLBACK_START* PETW_TP_EVENT_CALLBACK_STOP;
typedef _ETW_TP_EVENT_CALLBACK_CANCEL ETW_TP_EVENT_CALLBACK_CANCEL;
typedef _ETW_TP_EVENT_CALLBACK_CANCEL* PETW_TP_EVENT_CALLBACK_CANCEL;
typedef _ETW_TP_EVENT_POOL_CREATE ETW_TP_EVENT_POOL_CREATE;
typedef _ETW_TP_EVENT_POOL_CREATE* PETW_TP_EVENT_POOL_CREATE;
typedef _ETW_TP_EVENT_POOL_CLOSE ETW_TP_EVENT_POOL_CLOSE;
typedef _ETW_TP_EVENT_POOL_CLOSE* PETW_TP_EVENT_POOL_CLOSE;
typedef _ETW_TP_EVENT_POOL_TH_MIN_SET ETW_TP_EVENT_POOL_TH_MIN_SET;
typedef _ETW_TP_EVENT_POOL_TH_MIN_SET* PETW_TP_EVENT_POOL_TH_MIN_SET;
typedef _ETW_TP_EVENT_POOL_TH_MAX_SET ETW_TP_EVENT_POOL_TH_MAX_SET;
typedef _ETW_TP_EVENT_POOL_TH_MAX_SET* PETW_TP_EVENT_POOL_TH_MAX_SET;
typedef _ETW_TP_EVENT_WORKER_NUMANODE_SWITCH
    ETW_TP_EVENT_WORKER_NUMANODE_SWITCH;
typedef _ETW_TP_EVENT_WORKER_NUMANODE_SWITCH* PETW_TP_EVENT_WORKER_NUMANODE_SWITCH;
typedef _ETW_TP_EVENT_TIMER_SET ETW_TP_EVENT_TIMER_SET;
typedef _ETW_TP_EVENT_TIMER_SET* PETW_TP_EVENT_TIMER_SET;
typedef _ETW_TP_EVENT_TIMER_CANCELLED ETW_TP_EVENT_TIMER_CANCELLED;
typedef _ETW_TP_EVENT_TIMER_CANCELLED* PETW_TP_EVENT_TIMER_CANCELLED;
typedef _ETW_TP_EVENT_TIMER_SET_NTTIMER ETW_TP_EVENT_TIMER_SET_NTTIMER;
typedef _ETW_TP_EVENT_TIMER_SET_NTTIMER* PETW_TP_EVENT_TIMER_SET_NTTIMER;
typedef _ETW_TP_EVENT_TIMER_CANCEL_NTTIMER ETW_TP_EVENT_TIMER_CANCEL_NTTIMER;
typedef _ETW_TP_EVENT_TIMER_CANCEL_NTTIMER* PETW_TP_EVENT_TIMER_CANCEL_NTTIMER;
typedef _ETW_TP_EVENT_TIMER_EXPIRATION_BEGIN
    ETW_TP_EVENT_TIMER_EXPIRATION_BEGIN;
typedef _ETW_TP_EVENT_TIMER_EXPIRATION_BEGIN* PETW_TP_EVENT_TIMER_EXPIRATION_BEGIN;
typedef _ETW_TP_EVENT_TIMER_EXPIRATION_END ETW_TP_EVENT_TIMER_EXPIRATION_END;
typedef _ETW_TP_EVENT_TIMER_EXPIRATION_END* PETW_TP_EVENT_TIMER_EXPIRATION_END;
typedef _ETW_TP_EVENT_TIMER_EXPIRATION ETW_TP_EVENT_TIMER_EXPIRATION;
typedef _ETW_TP_EVENT_TIMER_EXPIRATION* PETW_TP_EVENT_TIMER_EXPIRATION;
typedef _ETW_THREAD_EVENT_SUBPROCESSTAG ETW_THREAD_EVENT_SUBPROCESSTAG;
typedef _ETW_THREAD_EVENT_SUBPROCESSTAG* PETW_THREAD_EVENT_SUBPROCESSTAG;
typedef _ETW_WNF_EVENT_SUBSCRIBE ETW_WNF_EVENT_SUBSCRIBE;
typedef _ETW_WNF_EVENT_SUBSCRIBE* PETW_WNF_EVENT_SUBSCRIBE;
typedef ETW_WNF_EVENT_SUBSCRIBE ETW_WNF_EVENT_UNSUBSCRIBE;
typedef ETW_WNF_EVENT_SUBSCRIBE* PETW_WNF_EVENT_UNSUBSCRIBE;
typedef _ETW_WNF_EVENT_CALLBACK ETW_WNF_EVENT_CALLBACK;
typedef _ETW_WNF_EVENT_CALLBACK* PETW_WNF_EVENT_CALLBACK;
typedef _ETW_WNF_EVENT_PUBLISH ETW_WNF_EVENT_PUBLISH;
typedef _ETW_WNF_EVENT_PUBLISH* PETW_WNF_EVENT_PUBLISH;
typedef _ETW_WNF_EVENT_NAME_SUB_RUNDOWN ETW_WNF_EVENT_NAME_SUB_RUNDOWN;
typedef _ETW_WNF_EVENT_NAME_SUB_RUNDOWN* PETW_WNF_EVENT_NAME_SUB_RUNDOWN;
typedef _PERFINFO_MARK_EVENT PERFINFO_MARK_EVENT;
typedef _PERFINFO_MARK_EVENT* PPERFINFO_MARK_EVENT;
typedef _PERFINFO_DRIVER_MAJORFUNCTION PERFINFO_DRIVER_MAJORFUNCTION;
typedef _PERFINFO_DRIVER_MAJORFUNCTION* PPERFINFO_DRIVER_MAJORFUNCTION;
typedef _PERFINFO_DRIVER_MAJORFUNCTION_RET PERFINFO_DRIVER_MAJORFUNCTION_RET;
typedef _PERFINFO_DRIVER_MAJORFUNCTION_RET* PPERFINFO_DRIVER_MAJORFUNCTION_RET;
typedef _PERFINFO_DRIVER_COMPLETE_REQUEST PERFINFO_DRIVER_COMPLETE_REQUEST;
typedef _PERFINFO_DRIVER_COMPLETE_REQUEST* PPERFINFO_DRIVER_COMPLETE_REQUEST;
typedef _PERFINFO_DRIVER_COMPLETE_REQUEST_RET* PPERFINFO_DRIVER_COMPLETE_REQUEST_RET;
typedef _PERFINFO_BATTERY_LIFE_INFO* PPERFINFO_BATTERY_LIFE_INFO;
typedef _PERFINFO_SET_POWER_ACTION_RET PERFINFO_SET_POWER_ACTION_RET;
typedef _PERFINFO_SET_POWER_ACTION_RET* PPERFINFO_SET_POWER_ACTION_RET;
typedef _PERFINFO_SET_DEVICES_STATE PERFINFO_SET_DEVICES_STATE;
typedef _PERFINFO_SET_DEVICES_STATE* PPERFINFO_SET_DEVICES_STATE;
typedef _PERFINFO_SET_DEVICES_STATE_RET PERFINFO_SET_DEVICES_STATE_RET;
typedef _PERFINFO_SET_DEVICES_STATE_RET* PPERFINFO_SET_DEVICES_STATE_RET;
typedef _PERFINFO_PO_NOTIFY_DEVICE PERFINFO_PO_NOTIFY_DEVICE;
typedef _PERFINFO_PO_NOTIFY_DEVICE* PPERFINFO_PO_NOTIFY_DEVICE;
typedef _PERFINFO_PO_NOTIFY_DEVICE_COMPLETE PERFINFO_PO_NOTIFY_DEVICE_COMPLETE;
typedef _PERFINFO_PO_NOTIFY_DEVICE_COMPLETE* PPERFINFO_PO_NOTIFY_DEVICE_COMPLETE;
typedef _PERFINFO_PO_SESSION_CALLOUT PERFINFO_PO_SESSION_CALLOUT;
typedef _PERFINFO_PO_SESSION_CALLOUT* PPERFINFO_PO_SESSION_CALLOUT;
typedef _PERFINFO_PO_PRESLEEP PERFINFO_PO_PRESLEEP;
typedef _PERFINFO_PO_PRESLEEP* PPERFINFO_PO_PRESLEEP;
typedef _PERFINFO_PO_POSTSLEEP PERFINFO_PO_POSTSLEEP;
typedef _PERFINFO_PO_POSTSLEEP* PPERFINFO_PO_POSTSLEEP;
typedef _PERFINFO_PO_CALIBRATED_PERFCOUNTER PERFINFO_PO_CALIBRATED_PERFCOUNTER;
typedef _PERFINFO_PO_CALIBRATED_PERFCOUNTER* PPERFINFO_PO_CALIBRATED_PERFCOUNTER;
typedef _PERFINFO_BOOT_PHASE_START PERFINFO_BOOT_PHASE_START;
typedef _PERFINFO_BOOT_PHASE_START* PPERFINFO_BOOT_PHASE_START;
typedef _PERFINFO_BOOT_PREFETCH_INFORMATION PERFINFO_BOOT_PREFETCH_INFORMATION;
typedef _PERFINFO_BOOT_PREFETCH_INFORMATION* PPERFINFO_BOOT_PREFETCH_INFORMATION;
typedef _PERFINFO_PO_SESSION_CALLOUT_RET PERFINFO_PO_SESSION_CALLOUT_RET;
typedef _PERFINFO_PO_SESSION_CALLOUT_RET* PPERFINFO_PO_SESSION_CALLOUT_RET;
typedef _PERFINFO_PPM_IDLE_STATE_CHANGE PERFINFO_PPM_IDLE_STATE_CHANGE;
typedef _PERFINFO_PPM_IDLE_STATE_CHANGE* PPERFINFO_PPM_IDLE_STATE_CHANGE;
typedef _PERFINFO_PPM_IDLE_STATE_ENTER PERFINFO_PPM_IDLE_STATE_ENTER;
typedef _PERFINFO_PPM_IDLE_STATE_ENTER* PPERFINFO_PPM_IDLE_STATE_ENTER;
typedef _PERFINFO_PPM_IDLE_STATE_EXIT PERFINFO_PPM_IDLE_STATE_EXIT;
typedef _PERFINFO_PPM_IDLE_STATE_EXIT* PPERFINFO_PPM_IDLE_STATE_EXIT;
typedef _PERFINFO_PPM_STATE_SELECTION PERFINFO_PPM_STATE_SELECTION;
typedef _PERFINFO_PPM_STATE_SELECTION* PPERFINFO_PPM_STATE_SELECTION;
typedef _PERFINFO_PPM_IDLE_EXIT_LATENCY PERFINFO_PPM_IDLE_EXIT_LATENCY;
typedef _PERFINFO_PPM_IDLE_EXIT_LATENCY* PPERFINFO_PPM_IDLE_EXIT_LATENCY;
typedef _PERFINFO_PPM_PERF_STATE_CHANGE PERFINFO_PPM_PERF_STATE_CHANGE;
typedef _PERFINFO_PPM_PERF_STATE_CHANGE* PPERFINFO_PPM_PERF_STATE_CHANGE;
typedef _PERFINFO_PPM_THERMAL_CONSTRAINT PERFINFO_PPM_THERMAL_CONSTRAINT;
typedef _PERFINFO_PPM_THERMAL_CONSTRAINT* PPERFINFO_PPM_THERMAL_CONSTRAINT;
typedef _PERFINFO_FILEOBJECT_INFORMATION PERFINFO_FILEOBJECT_INFORMATION;
typedef _PERFINFO_FILEOBJECT_INFORMATION* PPERFINFO_FILEOBJECT_INFORMATION;
typedef _PERFINFO_FILENAME_SAME_INFORMATION PERFINFO_FILENAME_SAME_INFORMATION;
typedef _PERFINFO_FILENAME_SAME_INFORMATION* PPERFINFO_FILENAME_SAME_INFORMATION;
typedef _PERFINFO_PFMAPPED_SECTION_INFORMATION
    PERFINFO_PFMAPPED_SECTION_INFORMATION;
typedef _PERFINFO_PFMAPPED_SECTION_INFORMATION* PPERFINFO_PFMAPPED_SECTION_INFORMATION;
typedef _PERFINFO_PFMAPPED_SECTION_OBJECT_INFORMATION
    PERFINFO_PFMAPPED_SECTION_OBJECT_INFORMATION;
typedef _PERFINFO_PFMAPPED_SECTION_OBJECT_INFORMATION* PPERFINFO_PFMAPPED_SECTION_OBJECT_INFORMATION;
typedef _PERFINFO_SAMPLED_PROFILE_INFORMATION
    PERFINFO_SAMPLED_PROFILE_INFORMATION;
typedef _PERFINFO_SAMPLED_PROFILE_INFORMATION* PPERFINFO_SAMPLED_PROFILE_INFORMATION;
typedef _PERFINFO_SAMPLED_PROFILE_CACHE PERFINFO_SAMPLED_PROFILE_CACHE;
typedef _PERFINFO_SAMPLED_PROFILE_CACHE* PPERFINFO_SAMPLED_PROFILE_CACHE;
typedef _PERFINFO_SAMPLED_PROFILE_CONFIG PERFINFO_SAMPLED_PROFILE_CONFIG;
typedef _PERFINFO_SAMPLED_PROFILE_CONFIG* PPERFINFO_SAMPLED_PROFILE_CONFIG;
typedef _PERFINFO_PMC_SAMPLE_INFORMATION PERFINFO_PMC_SAMPLE_INFORMATION;
typedef _PERFINFO_PMC_SAMPLE_INFORMATION* PPERFINFO_PMC_SAMPLE_INFORMATION;
typedef _PERFINFO_DPC_INFORMATION PERFINFO_DPC_INFORMATION;
typedef _PERFINFO_DPC_INFORMATION* PPERFINFO_DPC_INFORMATION;
typedef _PERFINFO_DPC_ENQUEUE_INFORMATION PERFINFO_DPC_ENQUEUE_INFORMATION;
typedef _PERFINFO_DPC_ENQUEUE_INFORMATION* PPERFINFO_DPC_ENQUEUE_INFORMATION;
typedef _PERFINFO_DPC_EXECUTION_INFORMATION PERFINFO_DPC_EXECUTION_INFORMATION;
typedef _PERFINFO_DPC_EXECUTION_INFORMATION* PPERFINFO_DPC_EXECUTION_INFORMATION;
typedef _PERFINFO_YIELD_PROCESSOR_INFORMATION
    PERFINFO_YIELD_PROCESSOR_INFORMATION;
typedef _PERFINFO_YIELD_PROCESSOR_INFORMATION* PPERFINFO_YIELD_PROCESSOR_INFORMATION;
typedef _PERFINFO_INTERRUPT_INFORMATION PERFINFO_INTERRUPT_INFORMATION;
typedef _PERFINFO_INTERRUPT_INFORMATION* PPERFINFO_INTERRUPT_INFORMATION;
typedef _PERFINFO_CLOCK_INTERRUPT_INFORMATION
    PERFINFO_CLOCK_INTERRUPT_INFORMATION;
typedef _PERFINFO_CLOCK_INTERRUPT_INFORMATION* PPERFINFO_CLOCK_INTERRUPT_INFORMATION;
typedef _PERFINFO_SPINLOCK_CONFIG PERFINFO_SPINLOCK_CONFIG;
typedef _PERFINFO_SPINLOCK_CONFIG* PPERFINFO_SPINLOCK_CONFIG;
typedef _PERFINFO_EXECUTIVE_RESOURCE_CONFIG PERFINFO_EXECUTIVE_RESOURCE_CONFIG;
typedef _PERFINFO_EXECUTIVE_RESOURCE_CONFIG* PPERFINFO_EXECUTIVE_RESOURCE_CONFIG;
typedef _PERFINFO_SESSIONCREATE_INFORMATION PERFINFO_SESSIONCREATE_INFORMATION;
typedef _PERFINFO_SESSIONCREATE_INFORMATION* PPERFINFO_SESSIONCREATE_INFORMATION;
typedef _PERFINFO_PAGE_RANGE_IDENTITY PERFINFO_PAGE_RANGE_IDENTITY;
typedef _PERFINFO_PAGE_RANGE_IDENTITY* PPERFINFO_PAGE_RANGE_IDENTITY;
typedef _PERFINFO_KERNELMEMORY_USAGE_TYPE PERFINFO_KERNELMEMORY_USAGE_TYPE;
typedef _PERFINFO_KERNELMEMORY_USAGE_TYPE* PPERFINFO_KERNELMEMORY_USAGE_TYPE;
typedef char __C_ASSERT__[1];
typedef _PERFINFO_KERNELMEMORY_RANGE_USAGE PERFINFO_KERNELMEMORY_RANGE_USAGE;
typedef _PERFINFO_KERNELMEMORY_RANGE_USAGE* PPERFINFO_KERNELMEMORY_RANGE_USAGE;
typedef _PERFINFO_MM_STAT PERFINFO_MM_STAT;
typedef _PERFINFO_MM_STAT* PPERFINFO_MM_STAT;
typedef char __C_ASSERT__[1];
typedef _PERFINFO_PAGECOMBINE_AGGREGATE_STAT
    PERFINFO_PAGECOMBINE_AGGREGATE_STAT;
typedef _PERFINFO_PAGECOMBINE_AGGREGATE_STAT* PPERFINFO_PAGECOMBINE_AGGREGATE_STAT;
typedef _PERFINFO_PAGECOMBINE_ITERATION_STAT
    PERFINFO_PAGECOMBINE_ITERATION_STAT;
typedef _PERFINFO_PAGECOMBINE_ITERATION_STAT* PPERFINFO_PAGECOMBINE_ITERATION_STAT;
typedef _PERFINFO_HARDPAGEFAULT_INFORMATION PERFINFO_HARDPAGEFAULT_INFORMATION;
typedef _PERFINFO_HARDPAGEFAULT_INFORMATION* PPERFINFO_HARDPAGEFAULT_INFORMATION;
typedef _PERFINFO_VIRTUAL_ALLOC PERFINFO_VIRTUAL_ALLOC;
typedef _PERFINFO_VIRTUAL_ALLOC* PPERFINFO_VIRTUAL_ALLOC;
typedef _PERFINFO_VAD_ROTATE_INFO PERFINFO_VAD_ROTATE_INFO;
typedef _PERFINFO_VAD_ROTATE_INFO* PPERFINFO_VAD_ROTATE_INFO;
typedef _PERFINFO_MEM_RESET_INFO_TYPE PERFINFO_MEM_RESET_INFO_TYPE;
typedef _PERFINFO_MEM_RESET_INFO_TYPE* PPERFINFO_MEM_RESET_INFO_TYPE;
typedef _PERFINFO_MEM_RESET_INFO PERFINFO_MEM_RESET_INFO;
typedef _PERFINFO_MEM_RESET_INFO* PPERFINFO_MEM_RESET_INFO;
typedef _PERFINFO_CC_WORKITEM_ENQUEUE PERFINFO_CC_WORKITEM_ENQUEUE;
typedef _PERFINFO_CC_WORKITEM_ENQUEUE* PPERFINFO_CC_WORKITEM_ENQUEUE;
typedef _PERFINFO_CC_WORKITEM_DEQUEUE PERFINFO_CC_WORKITEM_DEQUEUE;
typedef _PERFINFO_CC_WORKITEM_DEQUEUE* PPERFINFO_CC_WORKITEM_DEQUEUE;
typedef _PERFINFO_CC_WORKITEM_COMPLETE PERFINFO_CC_WORKITEM_COMPLETE;
typedef _PERFINFO_CC_WORKITEM_COMPLETE* PPERFINFO_CC_WORKITEM_COMPLETE;
typedef _PERFINFO_CC_READ_AHEAD PERFINFO_CC_READ_AHEAD_COMPLETE;
typedef _PERFINFO_CC_READ_AHEAD* PPERFINFO_CC_READ_AHEAD_COMPLETE;
typedef _PERFINFO_CC_SCHEDULE_READ_AHEAD PERFINFO_CC_SCHEDULE_READ_AHEAD;
typedef _PERFINFO_CC_SCHEDULE_READ_AHEAD* PPERFINFO_CC_SCHEDULE_READ_AHEAD;
typedef _PERFINFO_CC_LAZY_WRITE_SCAN PERFINFO_CC_LAZY_WRITE_SCAN;
typedef _PERFINFO_CC_LAZY_WRITE_SCAN* PPERFINFO_CC_LAZY_WRITE_SCAN;
typedef _PERFINFO_CC_CAN_WRITE_FAIL PERFINFO_CC_CAN_WRITE_FAIL;
typedef _PERFINFO_CC_CAN_WRITE_FAIL* PPERFINFO_CC_CAN_WRITE_FAIL;
typedef _PERFINFO_CC_FLUSH_SECTION PERFINFO_CC_FLUSH_SECTION;
typedef _PERFINFO_CC_FLUSH_SECTION* PPERFINFO_CC_FLUSH_SECTION;
typedef _PERFINFO_CC_FLUSH_CACHE PERFINFO_CC_FLUSH_CACHE;
typedef _PERFINFO_CC_FLUSH_CACHE* PPERFINFO_CC_FLUSH_CACHE;
typedef _PERFINFO_CC_LOGGED_STREAM_INFO PERFINFO_CC_LOGGED_STREAM_INFO;
typedef _PERFINFO_CC_LOGGED_STREAM_INFO* PPERFINFO_CC_LOGGED_STREAM_INFO;
typedef _PERFINFO_CC_EXTRA_WB_THREAD_INFO PERFINFO_CC_EXTRA_WB_THREAD_INFO;
typedef _PERFINFO_CC_EXTRA_WB_THREAD_INFO* PPERFINFO_CC_EXTRA_WB_THREAD_INFO;
typedef _PERFINFO_IMAGELOAD_IN_PAGEFILE_INFO
    PERFINFO_IMAGELOAD_IN_PAGEFILE_INFO;
typedef _PERFINFO_IMAGELOAD_IN_PAGEFILE_INFO* PPERFINFO_IMAGELOAD_IN_PAGEFILE_INFO;
typedef _PERFINFO_SYSCALL_ENTER_DATA PERFINFO_SYSCALL_ENTER_DATA;
typedef _PERFINFO_SYSCALL_ENTER_DATA* PPERFINFO_SYSCALL_ENTER_DATA;
typedef _PERFINFO_SYSCALL_EXIT_DATA PERFINFO_SYSCALL_EXIT_DATA;
typedef _PERFINFO_SYSCALL_EXIT_DATA* PPERFINFO_SYSCALL_EXIT_DATA;
typedef _PERFINFO_MARK_INFORMATION PERFINFO_MARK_INFORMATION;
typedef _PERFINFO_MARK_INFORMATION* PPERFINFO_MARK_INFORMATION;
typedef _PERFINFO_FILE_CREATE PERFINFO_FILE_CREATE;
typedef _PERFINFO_FILE_CREATE* PPERFINFO_FILE_CREATE;
typedef _PERFINFO_FILE_INFORMATION PERFINFO_FILE_INFORMATION;
typedef _PERFINFO_FILE_INFORMATION* PPERFINFO_FILE_INFORMATION;
typedef _PERFINFO_FILE_DIRENUM PERFINFO_FILE_DIRENUM;
typedef _PERFINFO_FILE_DIRENUM* PPERFINFO_FILE_DIRENUM;
typedef _PERFINFO_FILE_PATH_OPERATION PERFINFO_FILE_PATH_OPERATION;
typedef _PERFINFO_FILE_PATH_OPERATION* PPERFINFO_FILE_PATH_OPERATION;
typedef _PERFINFO_FILE_READ_WRITE PERFINFO_FILE_READ_WRITE;
typedef _PERFINFO_FILE_READ_WRITE* PPERFINFO_FILE_READ_WRITE;
typedef _PERFINFO_FILE_SIMPLE_OPERATION PERFINFO_FILE_SIMPLE_OPERATION;
typedef _PERFINFO_FILE_SIMPLE_OPERATION* PPERFINFO_FILE_SIMPLE_OPERATION;
typedef _PERFINFO_FILE_OPERATION_END PERFINFO_FILE_OPERATION_END;
typedef _PERFINFO_FILE_OPERATION_END* PPERFINFO_FILE_OPERATION_END;
typedef _PERFINFO_FLT_OPERATION PERFINFO_FLT_OPERATION;
typedef _PERFINFO_FLT_OPERATION* PPERFINFO_FLT_OPERATION;
typedef _PERFINFO_FLT_OPERATION_STATUS PERFINFO_FLT_OPERATION_STATUS;
typedef _PERFINFO_FLT_OPERATION_STATUS* PPERFINFO_FLT_OPERATION_STATUS;
typedef _PERFINFO_MEMORY_INFORMATION PERFINFO_MEMORY_INFORMATION;
typedef _PERFINFO_MEMORY_INFORMATION* PPERFINFO_MEMORY_INFORMATION;
typedef _PERFINFO_SYSTEM_MEMORY_INFORMATION PERFINFO_SYSTEM_MEMORY_INFORMATION;
typedef _PERFINFO_SYSTEM_MEMORY_INFORMATION* PPERFINFO_SYSTEM_MEMORY_INFORMATION;
typedef _PERFINFO_WORKINGSET_ENTRY PERFINFO_WORKINGSET_ENTRY;
typedef _PERFINFO_WORKINGSET_ENTRY* PPERFINFO_WORKINGSET_ENTRY;
typedef _PERFINFO_WORKINGSET_INFORMATION PERFINFO_WORKINGSET_INFORMATION;
typedef _PERFINFO_WORKINGSET_INFORMATION* PPERFINFO_WORKINGSET_INFORMATION;
typedef _PERFINFO_CONTIGUOUS_PAGE_GENERATE PERFINFO_CONTIGUOUS_PAGE_GENERATE;
typedef _PERFINFO_CONTIGUOUS_PAGE_GENERATE* PPERFINFO_CONTIGUOUS_PAGE_GENERATE;
typedef _PERFINFO_DEBUG_EVENT_REASON PERFINFO_DEBUG_EVENT_REASON;
typedef _PERFINFO_DEBUG_EVENT_REASON* PPERFINFO_DEBUG_EVENT_REASON;
typedef _PERFINFO_DEBUG_EVENT PERFINFO_DEBUG_EVENT;
typedef _PERFINFO_DEBUG_EVENT* PPERFINFO_DEBUG_EVENT;
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef char __C_ASSERT__[1];
typedef _PERFINFO_CCSWAP_TYPE PERFINFO_CCSWAP_TYPE;
typedef _PERFINFO_CCSWAP_BUFFER PERFINFO_CCSWAP_BUFFER;
typedef _PERFINFO_CCSWAP_BUFFER* PPERFINFO_CCSWAP_BUFFER;
typedef _PERFINFO_CCSWAP_IDLE_SHORT PERFINFO_CCSWAP_IDLE_SHORT;
typedef _PERFINFO_CCSWAP_IDLE_SHORT* PPERFINFO_CCSWAP_IDLE_SHORT;
typedef _PERFINFO_CCSWAP_IDLE PERFINFO_CCSWAP_IDLE;
typedef _PERFINFO_CCSWAP_IDLE* PPERFINFO_CCSWAP_IDLE;
typedef _PERFINFO_CCSWAP_LITE PERFINFO_CCSWAP_LITE;
typedef _PERFINFO_CCSWAP_LITE* PPERFINFO_CCSWAP_LITE;
typedef _PERFINFO_CCSWAP PERFINFO_CCSWAP;
typedef _PERFINFO_CCSWAP* PPERFINFO_CCSWAP;
typedef _PERFINFO_PROCESS_PERFCTR PERFINFO_PROCESS_PERFCTR;
typedef _PERFINFO_PROCESS_PERFCTR* PPERFINFO_PROCESS_PERFCTR;
typedef _PERFINFO_PROCESS_PERFCTR32 PERFINFO_PROCESS_PERFCTR32;
typedef _PERFINFO_PROCESS_PERFCTR32* PPERFINFO_PROCESS_PERFCTR32;
typedef _PERFINFO_PROCESS_PERFCTR64 PERFINFO_PROCESS_PERFCTR64;
typedef _PERFINFO_PROCESS_PERFCTR64* PPERFINFO_PROCESS_PERFCTR64;
typedef _PERFINFO_PROCESS_INSWAP PERFINFO_PROCESS_INSWAP;
typedef _PERFINFO_PROCESS_INSWAP* PPERFINFO_PROCESS_INSWAP;
typedef _PERFINFO_IO_TIMER PERFINFO_IO_TIMER;
typedef _PERFINFO_IO_TIMER* PPERFINFO_IO_TIMER;
typedef _WMI_LOGGER_INFORMATION WMI_LOGGER_INFORMATION;
typedef _WMI_LOGGER_INFORMATION* PWMI_LOGGER_INFORMATION;
typedef _ETW_UMGL_KEY ETW_UMGL_KEY;
typedef _ETW_UMGL_KEY* PETW_UMGL_KEY;
typedef _ETW_KERNEL_HEADER_EXTENSION ETW_KERNEL_HEADER_EXTENSION;
typedef _ETW_KERNEL_HEADER_EXTENSION* PETW_KERNEL_HEADER_EXTENSION;
typedef _ETW_SET_MARK_INFORMATION ETW_SET_MARK_INFORMATION;
typedef _ETW_SET_MARK_INFORMATION* PETW_SET_MARK_INFORMATION;
typedef _ETW_NOTIFICATION_TYPE ETW_NOTIFICATION_TYPE;
typedef _ETW_NOTIFICATION_HEADER ETW_NOTIFICATION_HEADER;
typedef _ETW_NOTIFICATION_HEADER* PETW_NOTIFICATION_HEADER;
typedef ULONG ( *PETW_NOTIFICATION_CALLBACK )( PETW_NOTIFICATION_HEADER, PVOID );
typedef _ETW_SESSION_NOTIFICATION_TYPE ETW_SESSION_NOTIFICATION_TYPE;
typedef _ETW_SESSION_NOTIFICATION_PACKET ETW_SESSION_NOTIFICATION_PACKET;
typedef _ETW_SESSION_NOTIFICATION_PACKET* PETW_SESSION_NOTIFICATION_PACKET;
typedef _EVENT_DESCRIPTOR EVENT_DESCRIPTOR;
typedef _EVENT_DESCRIPTOR* PEVENT_DESCRIPTOR;
typedef const EVENT_DESCRIPTOR* PCEVENT_DESCRIPTOR;
typedef _EVENT_DATA_DESCRIPTOR EVENT_DATA_DESCRIPTOR;
typedef _EVENT_DATA_DESCRIPTOR* PEVENT_DATA_DESCRIPTOR;
typedef _EVENT_INFO_CLASS EVENT_INFO_CLASS;
typedef _ETW_TRACE_PROVIDER_INSTANCE_INFO ETW_TRACE_PROVIDER_INSTANCE_INFO;
typedef _ETW_TRACE_PROVIDER_INSTANCE_INFO* PETW_TRACE_PROVIDER_INSTANCE_INFO;
typedef _ETW_TRACE_GUID_INFO ETW_TRACE_GUID_INFO;
typedef _ETW_TRACE_GUID_INFO* PETW_TRACE_GUID_INFO;
typedef _ETWTRACECONTROLCODE ETWTRACECONTROLCODE;
typedef _TELEMETRY_COVERAGE_POINT TELEMETRY_COVERAGE_POINT;
typedef _TELEMETRY_COVERAGE_POINT* PTELEMETRY_COVERAGE_POINT;
typedef void NOTIFICATIONCALLBACK( PWNODE_HEADER, ULONG_PTR );
typedef void ( *PNOTIFICATIONCALLBACK )( PWNODE_HEADER, ULONG_PTR );
typedef _MOFRESOURCEINFOA MOFRESOURCEINFOA;
typedef _MOFRESOURCEINFOA* PMOFRESOURCEINFOA;
typedef _MOFRESOURCEINFOW MOFRESOURCEINFO;
typedef _MOFRESOURCEINFOW* PMOFRESOURCEINFO;
typedef _MOFRESOURCEINFOW MOFRESOURCEINFOW;
typedef _MOFRESOURCEINFOW* PMOFRESOURCEINFOW;
typedef _WMIGUIDINFORMATION WMIGUIDINFORMATION;
typedef _WMIGUIDINFORMATION* PWMIGUIDINFORMATION;
enum _EXCEPTION_DISPOSITION
{
    ExceptionContinueExecution = 0,
    ExceptionContinueSearch = 1,
    ExceptionNestedException = 2,
    ExceptionCollidedUnwind = 3,
};
enum _STORAGE_IDENTIFIER_CODE_SET
{
    StorageIdCodeSetReserved = 0,
    StorageIdCodeSetBinary = 1,
    StorageIdCodeSetAscii = 2,
    StorageIdCodeSetUtf8 = 3,
};
enum _TOKEN_INFORMATION_CLASS
{
    TokenUser = 1,
    TokenGroups = 2,
    TokenPrivileges = 3,
    TokenOwner = 4,
    TokenPrimaryGroup = 5,
    TokenDefaultDacl = 6,
    TokenSource = 7,
    TokenType = 8,
    TokenImpersonationLevel = 9,
    TokenStatistics = 10,
    TokenRestrictedSids = 11,
    TokenSessionId = 12,
    TokenGroupsAndPrivileges = 13,
    TokenSessionReference = 14,
    TokenSandBoxInert = 15,
    TokenAuditPolicy = 16,
    TokenOrigin = 17,
    TokenElevationType = 18,
    TokenLinkedToken = 19,
    TokenElevation = 20,
    TokenHasRestrictions = 21,
    TokenAccessInformation = 22,
    TokenVirtualizationAllowed = 23,
    TokenVirtualizationEnabled = 24,
    TokenIntegrityLevel = 25,
    TokenUIAccess = 26,
    TokenMandatoryPolicy = 27,
    TokenLogonSid = 28,
    TokenIsAppContainer = 29,
    TokenCapabilities = 30,
    TokenAppContainerSid = 31,
    TokenAppContainerNumber = 32,
    TokenUserClaimAttributes = 33,
    TokenDeviceClaimAttributes = 34,
    TokenRestrictedUserClaimAttributes = 35,
    TokenRestrictedDeviceClaimAttributes = 36,
    TokenDeviceGroups = 37,
    TokenRestrictedDeviceGroups = 38,
    TokenSecurityAttributes = 39,
    TokenIsRestricted = 40,
    TokenProcessTrustLevel = 41,
    TokenPrivateNameSpace = 42,
    TokenSingletonAttributes = 43,
    TokenBnoIsolation = 44,
    TokenChildProcessFlags = 45,
    TokenIsLessPrivilegedAppContainer = 46,
    TokenIsSandboxed = 47,
    TokenIsAppSilo = 48,
    MaxTokenInfoClass = 49,
};
enum _SECURITY_IMPERSONATION_LEVEL
{
    SecurityAnonymous = 0,
    SecurityIdentification = 1,
    SecurityImpersonation = 2,
    SecurityDelegation = 3,
};
enum SYSTEM_POWER_CONDITION
{
    PoAc = 0,
    PoDc = 1,
    PoHot = 2,
    PoConditionMaximum = 3,
};
enum WELL_KNOWN_SID_TYPE
{
    WinNullSid = 0,
    WinWorldSid = 1,
    WinLocalSid = 2,
    WinCreatorOwnerSid = 3,
    WinCreatorGroupSid = 4,
    WinCreatorOwnerServerSid = 5,
    WinCreatorGroupServerSid = 6,
    WinNtAuthoritySid = 7,
    WinDialupSid = 8,
    WinNetworkSid = 9,
    WinBatchSid = 10,
    WinInteractiveSid = 11,
    WinServiceSid = 12,
    WinAnonymousSid = 13,
    WinProxySid = 14,
    WinEnterpriseControllersSid = 15,
    WinSelfSid = 16,
    WinAuthenticatedUserSid = 17,
    WinRestrictedCodeSid = 18,
    WinTerminalServerSid = 19,
    WinRemoteLogonIdSid = 20,
    WinLogonIdsSid = 21,
    WinLocalSystemSid = 22,
    WinLocalServiceSid = 23,
    WinNetworkServiceSid = 24,
    WinBuiltinDomainSid = 25,
    WinBuiltinAdministratorsSid = 26,
    WinBuiltinUsersSid = 27,
    WinBuiltinGuestsSid = 28,
    WinBuiltinPowerUsersSid = 29,
    WinBuiltinAccountOperatorsSid = 30,
    WinBuiltinSystemOperatorsSid = 31,
    WinBuiltinPrintOperatorsSid = 32,
    WinBuiltinBackupOperatorsSid = 33,
    WinBuiltinReplicatorSid = 34,
    WinBuiltinPreWindows2000CompatibleAccessSid = 35,
    WinBuiltinRemoteDesktopUsersSid = 36,
    WinBuiltinNetworkConfigurationOperatorsSid = 37,
    WinAccountAdministratorSid = 38,
    WinAccountGuestSid = 39,
    WinAccountKrbtgtSid = 40,
    WinAccountDomainAdminsSid = 41,
    WinAccountDomainUsersSid = 42,
    WinAccountDomainGuestsSid = 43,
    WinAccountComputersSid = 44,
    WinAccountControllersSid = 45,
    WinAccountCertAdminsSid = 46,
    WinAccountSchemaAdminsSid = 47,
    WinAccountEnterpriseAdminsSid = 48,
    WinAccountPolicyAdminsSid = 49,
    WinAccountRasAndIasServersSid = 50,
    WinNTLMAuthenticationSid = 51,
    WinDigestAuthenticationSid = 52,
    WinSChannelAuthenticationSid = 53,
    WinThisOrganizationSid = 54,
    WinOtherOrganizationSid = 55,
    WinBuiltinIncomingForestTrustBuildersSid = 56,
    WinBuiltinPerfMonitoringUsersSid = 57,
    WinBuiltinPerfLoggingUsersSid = 58,
    WinBuiltinAuthorizationAccessSid = 59,
    WinBuiltinTerminalServerLicenseServersSid = 60,
    WinBuiltinDCOMUsersSid = 61,
    WinBuiltinIUsersSid = 62,
    WinIUserSid = 63,
    WinBuiltinCryptoOperatorsSid = 64,
    WinUntrustedLabelSid = 65,
    WinLowLabelSid = 66,
    WinMediumLabelSid = 67,
    WinHighLabelSid = 68,
    WinSystemLabelSid = 69,
    WinWriteRestrictedCodeSid = 70,
    WinCreatorOwnerRightsSid = 71,
    WinCacheablePrincipalsGroupSid = 72,
    WinNonCacheablePrincipalsGroupSid = 73,
    WinEnterpriseReadonlyControllersSid = 74,
    WinAccountReadonlyControllersSid = 75,
    WinBuiltinEventLogReadersGroup = 76,
    WinNewEnterpriseReadonlyControllersSid = 77,
    WinBuiltinCertSvcDComAccessGroup = 78,
    WinMediumPlusLabelSid = 79,
    WinLocalLogonSid = 80,
    WinConsoleLogonSid = 81,
    WinThisOrganizationCertificateSid = 82,
    WinApplicationPackageAuthoritySid = 83,
    WinBuiltinAnyPackageSid = 84,
    WinCapabilityInternetClientSid = 85,
    WinCapabilityInternetClientServerSid = 86,
    WinCapabilityPrivateNetworkClientServerSid = 87,
    WinCapabilityPicturesLibrarySid = 88,
    WinCapabilityVideosLibrarySid = 89,
    WinCapabilityMusicLibrarySid = 90,
    WinCapabilityDocumentsLibrarySid = 91,
    WinCapabilitySharedUserCertificatesSid = 92,
    WinCapabilityEnterpriseAuthenticationSid = 93,
    WinCapabilityRemovableStorageSid = 94,
    WinBuiltinRDSRemoteAccessServersSid = 95,
    WinBuiltinRDSEndpointServersSid = 96,
    WinBuiltinRDSManagementServersSid = 97,
    WinUserModeDriversSid = 98,
    WinBuiltinHyperVAdminsSid = 99,
    WinAccountCloneableControllersSid = 100,
    WinBuiltinAccessControlAssistanceOperatorsSid = 101,
    WinBuiltinRemoteManagementUsersSid = 102,
    WinAuthenticationAuthorityAssertedSid = 103,
    WinAuthenticationServiceAssertedSid = 104,
    WinLocalAccountSid = 105,
    WinLocalAccountAndAdministratorSid = 106,
    WinAccountProtectedUsersSid = 107,
    WinCapabilityAppointmentsSid = 108,
    WinCapabilityContactsSid = 109,
    WinAccountDefaultSystemManagedSid = 110,
    WinBuiltinDefaultSystemManagedGroupSid = 111,
    WinBuiltinStorageReplicaAdminsSid = 112,
    WinAccountKeyAdminsSid = 113,
    WinAccountEnterpriseKeyAdminsSid = 114,
    WinAuthenticationKeyTrustSid = 115,
    WinAuthenticationKeyPropertyMFASid = 116,
    WinAuthenticationKeyPropertyAttestationSid = 117,
    WinAuthenticationFreshKeyAuthSid = 118,
    WinBuiltinDeviceOwnersSid = 119,
};
enum _AUDIT_EVENT_TYPE
{
    AuditEventObjectAccess = 0,
    AuditEventDirectoryServiceAccess = 1,
};
enum _SYSTEM_POWER_STATE
{
    PowerSystemUnspecified = 0,
    PowerSystemWorking = 1,
    PowerSystemSleeping1 = 2,
    PowerSystemSleeping2 = 3,
    PowerSystemSleeping3 = 4,
    PowerSystemHibernate = 5,
    PowerSystemShutdown = 6,
    PowerSystemMaximum = 7,
};
enum POWER_USER_PRESENCE_TYPE
{
    UserNotPresent = 0,
    UserPresent = 1,
    UserUnknown = 255,
};
enum JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS
{
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE = 1,
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE = 2,
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS = 3,
};
enum _ACL_INFORMATION_CLASS
{
    AclRevisionInformation = 1,
    AclSizeInformation = 2,
};
enum _SharedVirtualDiskHandleState
{
    SharedVirtualDiskHandleStateNone = 0,
    SharedVirtualDiskHandleStateFileShared = 1,
    SharedVirtualDiskHandleStateHandleShared = 3,
};
enum COMPARTMENT_ID
{
    UNSPECIFIED_COMPARTMENT_ID = 0,
    DEFAULT_COMPARTMENT_ID = 1,
};
enum _CPU_SET_INFORMATION_TYPE
{
    CpuSetInformation = 0,
};
enum _TRANSACTION_OUTCOME
{
    TransactionOutcomeUndetermined = 1,
    TransactionOutcomeCommitted = 2,
    TransactionOutcomeAborted = 3,
};
enum SERVICE_SHARED_DIRECTORY_TYPE
{
    ServiceSharedDirectoryPersistentState = 0,
};
enum DPI_AWARENESS
{
    DPI_AWARENESS_INVALID = -1,
    DPI_AWARENESS_UNAWARE = 0,
    DPI_AWARENESS_SYSTEM_AWARE = 1,
    DPI_AWARENESS_PER_MONITOR_AWARE = 2,
};
enum _MONITOR_DISPLAY_STATE
{
    PowerMonitorOff = 0,
    PowerMonitorOn = 1,
    PowerMonitorDim = 2,
};
enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
{
    ToleranceIntervalShort = 1,
    ToleranceIntervalMedium = 2,
    ToleranceIntervalLong = 3,
};
enum _TRANSACTIONMANAGER_INFORMATION_CLASS
{
    TransactionManagerBasicInformation = 0,
    TransactionManagerLogInformation = 1,
    TransactionManagerLogPathInformation = 2,
    TransactionManagerRecoveryInformation = 4,
    TransactionManagerOnlineProbeInformation = 3,
    TransactionManagerOldestTransactionInformation = 5,
};
enum POWER_ACTION
{
    PowerActionNone = 0,
    PowerActionReserved = 1,
    PowerActionSleep = 2,
    PowerActionHibernate = 3,
    PowerActionShutdown = 4,
    PowerActionShutdownReset = 5,
    PowerActionShutdownOff = 6,
    PowerActionWarmEject = 7,
    PowerActionDisplayOff = 8,
};
enum WIN32_MEMORY_PARTITION_INFORMATION_CLASS
{
    MemoryPartitionInfo = 0,
    MemoryPartitionDedicatedMemoryInfo = 1,
};
enum POWER_MONITOR_REQUEST_REASON
{
    MonitorRequestReasonUnknown = 0,
    MonitorRequestReasonPowerButton = 1,
    MonitorRequestReasonRemoteConnection = 2,
    MonitorRequestReasonScMonitorpower = 3,
    MonitorRequestReasonUserInput = 4,
    MonitorRequestReasonAcDcDisplayBurst = 5,
    MonitorRequestReasonUserDisplayBurst = 6,
    MonitorRequestReasonPoSetSystemState = 7,
    MonitorRequestReasonSetThreadExecutionState = 8,
    MonitorRequestReasonFullWake = 9,
    MonitorRequestReasonSessionUnlock = 10,
    MonitorRequestReasonScreenOffRequest = 11,
    MonitorRequestReasonIdleTimeout = 12,
    MonitorRequestReasonPolicyChange = 13,
    MonitorRequestReasonSleepButton = 14,
    MonitorRequestReasonLid = 15,
    MonitorRequestReasonBatteryCountChange = 16,
    MonitorRequestReasonGracePeriod = 17,
    MonitorRequestReasonPnP = 18,
    MonitorRequestReasonDP = 19,
    MonitorRequestReasonSxTransition = 20,
    MonitorRequestReasonSystemIdle = 21,
    MonitorRequestReasonNearProximity = 22,
    MonitorRequestReasonThermalStandby = 23,
    MonitorRequestReasonResumePdc = 24,
    MonitorRequestReasonResumeS4 = 25,
    MonitorRequestReasonTerminal = 26,
    MonitorRequestReasonPdcSignal = 27,
    MonitorRequestReasonAcDcDisplayBurstSuppressed = 28,
    MonitorRequestReasonSystemStateEntered = 29,
    MonitorRequestReasonWinrt = 30,
    MonitorRequestReasonUserInputKeyboard = 31,
    MonitorRequestReasonUserInputMouse = 32,
    MonitorRequestReasonUserInputTouchpad = 33,
    MonitorRequestReasonUserInputPen = 34,
    MonitorRequestReasonUserInputAccelerometer = 35,
    MonitorRequestReasonUserInputHid = 36,
    MonitorRequestReasonUserInputPoUserPresent = 37,
    MonitorRequestReasonUserInputSessionSwitch = 38,
    MonitorRequestReasonUserInputInitialization = 39,
    MonitorRequestReasonPdcSignalWindowsMobilePwrNotif = 40,
    MonitorRequestReasonPdcSignalWindowsMobileShell = 41,
    MonitorRequestReasonPdcSignalHeyCortana = 42,
    MonitorRequestReasonPdcSignalHolographicShell = 43,
    MonitorRequestReasonPdcSignalFingerprint = 44,
    MonitorRequestReasonDirectedDrips = 45,
    MonitorRequestReasonDim = 46,
    MonitorRequestReasonBuiltinPanel = 47,
    MonitorRequestReasonDisplayRequiredUnDim = 48,
    MonitorRequestReasonBatteryCountChangeSuppressed = 49,
    MonitorRequestReasonResumeModernStandby = 50,
    MonitorRequestReasonTerminalInit = 51,
    MonitorRequestReasonPdcSignalSensorsHumanPresence = 52,
    MonitorRequestReasonBatteryPreCritical = 53,
    MonitorRequestReasonUserInputTouch = 54,
    MonitorRequestReasonMax = 55,
};
enum _ENLISTMENT_INFORMATION_CLASS
{
    EnlistmentBasicInformation = 0,
    EnlistmentRecoveryInformation = 1,
    EnlistmentCrmInformation = 2,
};
enum _STORAGE_SET_TYPE
{
    PropertyStandardSet = 0,
    PropertyExistsSet = 1,
    PropertySetMaxDefined = 2,
};
enum _USER_ACTIVITY_PRESENCE
{
    PowerUserPresent = 0,
    PowerUserNotPresent = 1,
    PowerUserInactive = 2,
    PowerUserMaximum = 3,
    PowerUserInvalid = 3,
};
enum _STREAM_INFO_LEVELS
{
    FindStreamInfoStandard = 0,
    FindStreamInfoMaxInfoLevel = 1,
};
enum _SID_NAME_USE
{
    SidTypeUser = 1,
    SidTypeGroup = 2,
    SidTypeDomain = 3,
    SidTypeAlias = 4,
    SidTypeWellKnownGroup = 5,
    SidTypeDeletedAccount = 6,
    SidTypeInvalid = 7,
    SidTypeUnknown = 8,
    SidTypeComputer = 9,
    SidTypeLabel = 10,
    SidTypeLogonSession = 11,
};
enum MEM_SECTION_EXTENDED_PARAMETER_TYPE
{
    MemSectionExtendedParameterInvalidType = 0,
    MemSectionExtendedParameterUserPhysicalFlags = 1,
    MemSectionExtendedParameterNumaNode = 2,
    MemSectionExtendedParameterSigningLevel = 3,
    MemSectionExtendedParameterMax = 4,
};
enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS
{
    JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1,
    JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2,
    JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4,
    JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7,
};
enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS
{
    JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1,
    JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8,
    JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15,
};
enum _JOBOBJECTINFOCLASS
{
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation = 2,
    JobObjectBasicProcessIdList = 3,
    JobObjectBasicUIRestrictions = 4,
    JobObjectSecurityLimitInformation = 5,
    JobObjectEndOfJobTimeInformation = 6,
    JobObjectAssociateCompletionPortInformation = 7,
    JobObjectBasicAndIoAccountingInformation = 8,
    JobObjectExtendedLimitInformation = 9,
    JobObjectJobSetInformation = 10,
    JobObjectGroupInformation = 11,
    JobObjectNotificationLimitInformation = 12,
    JobObjectLimitViolationInformation = 13,
    JobObjectGroupInformationEx = 14,
    JobObjectCpuRateControlInformation = 15,
    JobObjectCompletionFilter = 16,
    JobObjectCompletionCounter = 17,
    JobObjectReserved1Information = 18,
    JobObjectReserved2Information = 19,
    JobObjectReserved3Information = 20,
    JobObjectReserved4Information = 21,
    JobObjectReserved5Information = 22,
    JobObjectReserved6Information = 23,
    JobObjectReserved7Information = 24,
    JobObjectReserved8Information = 25,
    JobObjectReserved9Information = 26,
    JobObjectReserved10Information = 27,
    JobObjectReserved11Information = 28,
    JobObjectReserved12Information = 29,
    JobObjectReserved13Information = 30,
    JobObjectReserved14Information = 31,
    JobObjectNetRateControlInformation = 32,
    JobObjectNotificationLimitInformation2 = 33,
    JobObjectLimitViolationInformation2 = 34,
    JobObjectCreateSilo = 35,
    JobObjectSiloBasicInformation = 36,
    JobObjectReserved15Information = 37,
    JobObjectReserved16Information = 38,
    JobObjectReserved17Information = 39,
    JobObjectReserved18Information = 40,
    JobObjectReserved19Information = 41,
    JobObjectReserved20Information = 42,
    JobObjectReserved21Information = 43,
    JobObjectReserved22Information = 44,
    JobObjectReserved23Information = 45,
    JobObjectReserved24Information = 46,
    JobObjectReserved25Information = 47,
    JobObjectReserved26Information = 48,
    JobObjectReserved27Information = 49,
    MaxJobObjectInfoClass = 50,
};
enum _PROCESS_MITIGATION_POLICY
{
    ProcessDEPPolicy = 0,
    ProcessASLRPolicy = 1,
    ProcessDynamicCodePolicy = 2,
    ProcessStrictHandleCheckPolicy = 3,
    ProcessSystemCallDisablePolicy = 4,
    ProcessMitigationOptionsMask = 5,
    ProcessExtensionPointDisablePolicy = 6,
    ProcessControlFlowGuardPolicy = 7,
    ProcessSignaturePolicy = 8,
    ProcessFontDisablePolicy = 9,
    ProcessImageLoadPolicy = 10,
    ProcessSystemCallFilterPolicy = 11,
    ProcessPayloadRestrictionPolicy = 12,
    ProcessChildProcessPolicy = 13,
    ProcessSideChannelIsolationPolicy = 14,
    ProcessUserShadowStackPolicy = 15,
    ProcessRedirectionTrustPolicy = 16,
    ProcessUserPointerAuthPolicy = 17,
    ProcessSEHOPPolicy = 18,
    ProcessActivationContextTrustPolicy = 19,
    MaxProcessMitigationPolicy = 20,
};
enum _ACCESS_REASON_TYPE
{
    AccessReasonNone = 0,
    AccessReasonAllowedAce = 65536,
    AccessReasonDeniedAce = 131072,
    AccessReasonAllowedParentAce = 196608,
    AccessReasonDeniedParentAce = 262144,
    AccessReasonNotGrantedByCape = 327680,
    AccessReasonNotGrantedByParentCape = 393216,
    AccessReasonNotGrantedToAppContainer = 458752,
    AccessReasonMissingPrivilege = 1048576,
    AccessReasonFromPrivilege = 2097152,
    AccessReasonIntegrityLevel = 3145728,
    AccessReasonOwnership = 4194304,
    AccessReasonNullDacl = 5242880,
    AccessReasonEmptyDacl = 6291456,
    AccessReasonNoSD = 7340032,
    AccessReasonNoGrant = 8388608,
    AccessReasonTrustLabel = 9437184,
    AccessReasonFilterAce = 10485760,
};
enum _TOKEN_TYPE
{
    TokenPrimary = 1,
    TokenImpersonation = 2,
};
enum _TOKEN_ELEVATION_TYPE
{
    TokenElevationTypeDefault = 1,
    TokenElevationTypeFull = 2,
    TokenElevationTypeLimited = 3,
};
enum _POWER_REQUEST_TYPE
{
    PowerRequestDisplayRequired = 0,
    PowerRequestSystemRequired = 1,
    PowerRequestAwayModeRequired = 2,
    PowerRequestExecutionRequired = 3,
};
enum tagBINDSTRING
{
    BINDSTRING_HEADERS = 1,
    BINDSTRING_ACCEPT_MIMES = 2,
    BINDSTRING_EXTRA_URL = 3,
    BINDSTRING_LANGUAGE = 4,
    BINDSTRING_USERNAME = 5,
    BINDSTRING_PASSWORD = 6,
    BINDSTRING_UA_PIXELS = 7,
    BINDSTRING_UA_COLOR = 8,
    BINDSTRING_OS = 9,
    BINDSTRING_USER_AGENT = 10,
    BINDSTRING_ACCEPT_ENCODINGS = 11,
    BINDSTRING_POST_COOKIE = 12,
    BINDSTRING_POST_DATA_MIME = 13,
    BINDSTRING_URL = 14,
    BINDSTRING_IID = 15,
    BINDSTRING_FLAG_BIND_TO_OBJECT = 16,
    BINDSTRING_PTR_BIND_CONTEXT = 17,
    BINDSTRING_XDR_ORIGIN = 18,
    BINDSTRING_DOWNLOADPATH = 19,
    BINDSTRING_ROOTDOC_URL = 20,
    BINDSTRING_INITIAL_FILENAME = 21,
    BINDSTRING_PROXY_USERNAME = 22,
    BINDSTRING_PROXY_PASSWORD = 23,
    BINDSTRING_ENTERPRISE_ID = 24,
    BINDSTRING_DOC_URL = 25,
    BINDSTRING_SAMESITE_COOKIE_LEVEL = 26,
};
enum _IMAGE_POLICY_ENTRY_TYPE
{
    ImagePolicyEntryTypeNone = 0,
    ImagePolicyEntryTypeBool = 1,
    ImagePolicyEntryTypeInt8 = 2,
    ImagePolicyEntryTypeUInt8 = 3,
    ImagePolicyEntryTypeInt16 = 4,
    ImagePolicyEntryTypeUInt16 = 5,
    ImagePolicyEntryTypeInt32 = 6,
    ImagePolicyEntryTypeUInt32 = 7,
    ImagePolicyEntryTypeInt64 = 8,
    ImagePolicyEntryTypeUInt64 = 9,
    ImagePolicyEntryTypeAnsiString = 10,
    ImagePolicyEntryTypeUnicodeString = 11,
    ImagePolicyEntryTypeOverride = 12,
    ImagePolicyEntryTypeMaximum = 13,
};
enum TOOLTIP_DISMISS_FLAGS
{
    TDF_REGISTER = 1,
    TDF_UNREGISTER = 2,
};
enum _DEVICE_POWER_STATE
{
    PowerDeviceUnspecified = 0,
    PowerDeviceD0 = 1,
    PowerDeviceD1 = 2,
    PowerDeviceD2 = 3,
    PowerDeviceD3 = 4,
    PowerDeviceMaximum = 5,
};
enum _MANDATORY_LEVEL
{
    MandatoryLevelUntrusted = 0,
    MandatoryLevelLow = 1,
    MandatoryLevelMedium = 2,
    MandatoryLevelHigh = 3,
    MandatoryLevelSystem = 4,
    MandatoryLevelSecureProcess = 5,
    MandatoryLevelCount = 6,
};
enum _POWER_MONITOR_REQUEST_TYPE
{
    MonitorRequestTypeOff = 0,
    MonitorRequestTypeOnAndPresent = 1,
    MonitorRequestTypeToggleOn = 2,
};
enum __MIDL_IMonikerProp_0001
{
    MIMETYPEPROP = 0,
    USE_SRC_URL = 1,
    CLASSIDPROP = 2,
    TRUSTEDDOWNLOADPROP = 3,
    POPUPLEVELPROP = 4,
};
enum _SE_IMAGE_SIGNATURE_TYPE
{
    SeImageSignatureNone = 0,
    SeImageSignatureEmbedded = 1,
    SeImageSignatureCache = 2,
    SeImageSignatureCatalogCached = 3,
    SeImageSignatureCatalogNotCached = 4,
    SeImageSignatureCatalogHint = 5,
    SeImageSignaturePackageCatalog = 6,
    SeImageSignaturePplMitigated = 7,
};
enum _RTL_SYSTEM_GLOBAL_DATA_ID
{
    GlobalDataIdUnknown = 0,
    GlobalDataIdRngSeedVersion = 1,
    GlobalDataIdInterruptTime = 2,
    GlobalDataIdTimeZoneBias = 3,
    GlobalDataIdImageNumberLow = 4,
    GlobalDataIdImageNumberHigh = 5,
    GlobalDataIdTimeZoneId = 6,
    GlobalDataIdNtMajorVersion = 7,
    GlobalDataIdNtMinorVersion = 8,
    GlobalDataIdSystemExpirationDate = 9,
    GlobalDataIdKdDebuggerEnabled = 10,
    GlobalDataIdCyclesPerYield = 11,
    GlobalDataIdSafeBootMode = 12,
    GlobalDataIdLastSystemRITEventTickCount = 13,
    GlobalDataIdConsoleSharedDataFlags = 14,
    GlobalDataIdNtSystemRootDrive = 15,
    GlobalDataIdQpcShift = 16,
    GlobalDataIdQpcBypassEnabled = 17,
    GlobalDataIdQpcData = 18,
    GlobalDataIdQpcBias = 19,
};
enum LATENCY_TIME
{
    LT_DONT_CARE = 0,
    LT_LOWEST_LATENCY = 1,
};
enum ARM64_FNPDATA_CR
{
    PdataCrUnchained = 0,
    PdataCrUnchainedSavedLr = 1,
    PdataCrChainedWithPac = 2,
    PdataCrChained = 3,
};
enum _FIRMWARE_TYPE
{
    FirmwareTypeUnknown = 0,
    FirmwareTypeBios = 1,
    FirmwareTypeUefi = 2,
    FirmwareTypeMax = 3,
};
enum _HEAP_INFORMATION_CLASS
{
    HeapCompatibilityInformation = 0,
    HeapEnableTerminationOnCorruption = 1,
    HeapOptimizeResources = 3,
    HeapTag = 7,
};
enum _HARDWARE_COUNTER_TYPE
{
    PMCCounter = 0,
    MaxHardwareCounterType = 1,
};
enum _PROCESSOR_CACHE_TYPE
{
    CacheUnified = 0,
    CacheInstruction = 1,
    CacheData = 2,
    CacheTrace = 3,
};
enum _COMPUTER_NAME_FORMAT
{
    ComputerNameNetBIOS = 0,
    ComputerNameDnsHostname = 1,
    ComputerNameDnsDomain = 2,
    ComputerNameDnsFullyQualified = 3,
    ComputerNamePhysicalNetBIOS = 4,
    ComputerNamePhysicalDnsHostname = 5,
    ComputerNamePhysicalDnsDomain = 6,
    ComputerNamePhysicalDnsFullyQualified = 7,
    ComputerNameMax = 8,
};
enum MEM_EXTENDED_PARAMETER_TYPE
{
    MemExtendedParameterInvalidType = 0,
    MemExtendedParameterAddressRequirements = 1,
    MemExtendedParameterNumaNode = 2,
    MemExtendedParameterPartitionHandle = 3,
    MemExtendedParameterUserPhysicalHandle = 4,
    MemExtendedParameterAttributeFlags = 5,
    MemExtendedParameterImageMachine = 6,
    MemExtendedParameterMax = 7,
};
enum _MEM_DEDICATED_ATTRIBUTE_TYPE
{
    MemDedicatedAttributeReadBandwidth = 0,
    MemDedicatedAttributeReadLatency = 1,
    MemDedicatedAttributeWriteBandwidth = 2,
    MemDedicatedAttributeWriteLatency = 3,
    MemDedicatedAttributeMax = 4,
};
enum PIDMSI_STATUS_VALUE
{
    PIDMSI_STATUS_NORMAL = 0,
    PIDMSI_STATUS_NEW = 1,
    PIDMSI_STATUS_PRELIM = 2,
    PIDMSI_STATUS_DRAFT = 3,
    PIDMSI_STATUS_INPROGRESS = 4,
    PIDMSI_STATUS_EDIT = 5,
    PIDMSI_STATUS_REVIEW = 6,
    PIDMSI_STATUS_PROOF = 7,
    PIDMSI_STATUS_FINAL = 8,
    PIDMSI_STATUS_OTHER = 32767,
};
enum _LOGICAL_PROCESSOR_RELATIONSHIP
{
    RelationProcessorCore = 0,
    RelationNumaNode = 1,
    RelationCache = 2,
    RelationProcessorPackage = 3,
    RelationGroup = 4,
    RelationProcessorDie = 5,
    RelationNumaNodeEx = 6,
    RelationProcessorModule = 7,
    RelationAll = 65535,
};
enum _JOBOBJECT_RATE_CONTROL_TOLERANCE
{
    ToleranceLow = 1,
    ToleranceMedium = 2,
    ToleranceHigh = 3,
};
enum _SERVERSILO_STATE
{
    SERVERSILO_INITING = 0,
    SERVERSILO_STARTED = 1,
    SERVERSILO_SHUTTING_DOWN = 2,
    SERVERSILO_TERMINATING = 3,
    SERVERSILO_TERMINATED = 4,
};
enum __MIDL_IInternetSecurityManager_0002
{
    PUAFOUT_DEFAULT = 0,
    PUAFOUT_ISLOCKZONEPOLICY = 1,
};
enum _RTL_UMS_SCHEDULER_REASON
{
    UmsSchedulerStartup = 0,
    UmsSchedulerThreadBlocked = 1,
    UmsSchedulerThreadYield = 2,
};
enum _OS_DEPLOYEMENT_STATE_VALUES
{
    OS_DEPLOYMENT_STANDARD = 1,
    OS_DEPLOYMENT_COMPACT = 2,
};
enum tagXMLEMEM_TYPE
{
    XMLELEMTYPE_ELEMENT = 0,
    XMLELEMTYPE_TEXT = 1,
    XMLELEMTYPE_COMMENT = 2,
    XMLELEMTYPE_DOCUMENT = 3,
    XMLELEMTYPE_DTD = 4,
    XMLELEMTYPE_PI = 5,
    XMLELEMTYPE_OTHER = 6,
};
enum _SharedVirtualDiskSupportType
{
    SharedVirtualDisksUnsupported = 0,
    SharedVirtualDisksSupported = 1,
    SharedVirtualDiskSnapshotsSupported = 3,
    SharedVirtualDiskCDPSnapshotsSupported = 7,
};
enum POWER_SETTING_ALTITUDE
{
    ALTITUDE_GROUP_POLICY = 0,
    ALTITUDE_USER = 1,
    ALTITUDE_RUNTIME_OVERRIDE = 2,
    ALTITUDE_PROVISIONING = 3,
    ALTITUDE_OEM_CUSTOMIZATION = 4,
    ALTITUDE_INTERNAL_OVERRIDE = 5,
    ALTITUDE_OS_DEFAULT = 6,
};
enum POWER_INFORMATION_LEVEL
{
    SystemPowerPolicyAc = 0,
    SystemPowerPolicyDc = 1,
    VerifySystemPolicyAc = 2,
    VerifySystemPolicyDc = 3,
    SystemPowerCapabilities = 4,
    SystemBatteryState = 5,
    SystemPowerStateHandler = 6,
    ProcessorStateHandler = 7,
    SystemPowerPolicyCurrent = 8,
    AdministratorPowerPolicy = 9,
    SystemReserveHiberFile = 10,
    ProcessorInformation = 11,
    SystemPowerInformation = 12,
    ProcessorStateHandler2 = 13,
    LastWakeTime = 14,
    LastSleepTime = 15,
    SystemExecutionState = 16,
    SystemPowerStateNotifyHandler = 17,
    ProcessorPowerPolicyAc = 18,
    ProcessorPowerPolicyDc = 19,
    VerifyProcessorPowerPolicyAc = 20,
    VerifyProcessorPowerPolicyDc = 21,
    ProcessorPowerPolicyCurrent = 22,
    SystemPowerStateLogging = 23,
    SystemPowerLoggingEntry = 24,
    SetPowerSettingValue = 25,
    NotifyUserPowerSetting = 26,
    PowerInformationLevelUnused0 = 27,
    SystemMonitorHiberBootPowerOff = 28,
    SystemVideoState = 29,
    TraceApplicationPowerMessage = 30,
    TraceApplicationPowerMessageEnd = 31,
    ProcessorPerfStates = 32,
    ProcessorIdleStates = 33,
    ProcessorCap = 34,
    SystemWakeSource = 35,
    SystemHiberFileInformation = 36,
    TraceServicePowerMessage = 37,
    ProcessorLoad = 38,
    PowerShutdownNotification = 39,
    MonitorCapabilities = 40,
    SessionPowerInit = 41,
    SessionDisplayState = 42,
    PowerRequestCreate = 43,
    PowerRequestAction = 44,
    GetPowerRequestList = 45,
    ProcessorInformationEx = 46,
    NotifyUserModeLegacyPowerEvent = 47,
    GroupPark = 48,
    ProcessorIdleDomains = 49,
    WakeTimerList = 50,
    SystemHiberFileSize = 51,
    ProcessorIdleStatesHv = 52,
    ProcessorPerfStatesHv = 53,
    ProcessorPerfCapHv = 54,
    ProcessorSetIdle = 55,
    LogicalProcessorIdling = 56,
    UserPresence = 57,
    PowerSettingNotificationName = 58,
    GetPowerSettingValue = 59,
    IdleResiliency = 60,
    SessionRITState = 61,
    SessionConnectNotification = 62,
    SessionPowerCleanup = 63,
    SessionLockState = 64,
    SystemHiberbootState = 65,
    PlatformInformation = 66,
    PdcInvocation = 67,
    MonitorInvocation = 68,
    FirmwareTableInformationRegistered = 69,
    SetShutdownSelectedTime = 70,
    SuspendResumeInvocation = 71,
    PlmPowerRequestCreate = 72,
    ScreenOff = 73,
    CsDeviceNotification = 74,
    PlatformRole = 75,
    LastResumePerformance = 76,
    DisplayBurst = 77,
    ExitLatencySamplingPercentage = 78,
    RegisterSpmPowerSettings = 79,
    PlatformIdleStates = 80,
    ProcessorIdleVeto = 81,
    PlatformIdleVeto = 82,
    SystemBatteryStatePrecise = 83,
    ThermalEvent = 84,
    PowerRequestActionInternal = 85,
    BatteryDeviceState = 86,
    PowerInformationInternal = 87,
    ThermalStandby = 88,
    SystemHiberFileType = 89,
    PhysicalPowerButtonPress = 90,
    QueryPotentialDripsConstraint = 91,
    EnergyTrackerCreate = 92,
    EnergyTrackerQuery = 93,
    UpdateBlackBoxRecorder = 94,
    SessionAllowExternalDmaDevices = 95,
    SendSuspendResumeNotification = 96,
    BlackBoxRecorderDirectAccessBuffer = 97,
    PowerInformationLevelMaximum = 98,
};
enum _TRANSACTION_INFORMATION_CLASS
{
    TransactionBasicInformation = 0,
    TransactionPropertiesInformation = 1,
    TransactionEnlistmentInformation = 2,
    TransactionSuperiorEnlistmentInformation = 3,
    TransactionBindInformation = 4,
    TransactionDTCPrivateInformation = 5,
};
enum tagOLECONTF
{
    OLECONTF_EMBEDDINGS = 1,
    OLECONTF_LINKS = 2,
    OLECONTF_OTHERS = 4,
    OLECONTF_ONLYUSER = 8,
    OLECONTF_ONLYIFRUNNING = 16,
};
enum _POWER_PLATFORM_ROLE
{
    PlatformRoleUnspecified = 0,
    PlatformRoleDesktop = 1,
    PlatformRoleMobile = 2,
    PlatformRoleWorkstation = 3,
    PlatformRoleEnterpriseServer = 4,
    PlatformRoleSOHOServer = 5,
    PlatformRoleAppliancePC = 6,
    PlatformRolePerformanceServer = 7,
    PlatformRoleSlate = 8,
    PlatformRoleMaximum = 9,
};
enum tagCOMSD
{
    SD_LAUNCHPERMISSIONS = 0,
    SD_ACCESSPERMISSIONS = 1,
    SD_LAUNCHRESTRICTIONS = 2,
    SD_ACCESSRESTRICTIONS = 3,
};
enum _HIBERFILE_BUCKET_SIZE
{
    HiberFileBucket1GB = 0,
    HiberFileBucket2GB = 1,
    HiberFileBucket4GB = 2,
    HiberFileBucket8GB = 3,
    HiberFileBucket16GB = 4,
    HiberFileBucket32GB = 5,
    HiberFileBucketUnlimited = 6,
    HiberFileBucketMax = 7,
};
enum _KTMOBJECT_TYPE
{
    KTMOBJECT_TRANSACTION = 0,
    KTMOBJECT_TRANSACTION_MANAGER = 1,
    KTMOBJECT_RESOURCE_MANAGER = 2,
    KTMOBJECT_ENLISTMENT = 3,
    KTMOBJECT_INVALID = 4,
};
enum _CM_ERROR_CONTROL_TYPE
{
    IgnoreError = 0,
    NormalError = 1,
    SevereError = 2,
    CriticalError = 3,
};
enum _CM_SERVICE_NODE_TYPE
{
    DriverType = 1,
    FileSystemType = 2,
    Win32ServiceOwnProcess = 16,
    Win32ServiceShareProcess = 32,
    AdapterType = 4,
    RecognizerType = 8,
};
enum IMPORT_OBJECT_TYPE
{
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_CONST = 2,
};
enum _TAPE_DRIVE_PROBLEM_TYPE
{
    TapeDriveProblemNone = 0,
    TapeDriveReadWriteWarning = 1,
    TapeDriveReadWriteError = 2,
    TapeDriveReadWarning = 3,
    TapeDriveWriteWarning = 4,
    TapeDriveReadError = 5,
    TapeDriveWriteError = 6,
    TapeDriveHardwareError = 7,
    TapeDriveUnsupportedMedia = 8,
    TapeDriveScsiConnectionError = 9,
    TapeDriveTimetoClean = 10,
    TapeDriveCleanDriveNow = 11,
    TapeDriveMediaLifeExpired = 12,
    TapeDriveSnappedTape = 13,
};
enum IMAGE_AUX_SYMBOL_TYPE
{
    IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1,
};
enum ACTCTX_COMPATIBILITY_ELEMENT_TYPE
{
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS = 1,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION = 2,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED = 3,
};
enum _CM_SERVICE_LOAD_TYPE
{
    BootLoad = 0,
    SystemLoad = 1,
    AutoLoad = 2,
    DemandLoad = 3,
    DisableLoad = 4,
};
enum _THREAD_INFORMATION_CLASS
{
    ThreadMemoryPriority = 0,
    ThreadAbsoluteCpuPriority = 1,
    ThreadDynamicCodePolicy = 2,
    ThreadPowerThrottling = 3,
    ThreadInformationClassMax = 4,
};
enum ARM64_FNPDATA_FLAGS
{
    PdataRefToFullXdata = 0,
    PdataPackedUnwindFunction = 1,
    PdataPackedUnwindFragment = 2,
};
enum _PROCESS_MEMORY_EXHAUSTION_TYPE
{
    PMETypeFailFastOnCommitFailure = 0,
    PMETypeMax = 1,
};
enum IMPORT_OBJECT_NAME_TYPE
{
    IMPORT_OBJECT_ORDINAL = 0,
    IMPORT_OBJECT_NAME = 1,
    IMPORT_OBJECT_NAME_NO_PREFIX = 2,
    IMPORT_OBJECT_NAME_UNDECORATE = 3,
    IMPORT_OBJECT_NAME_EXPORTAS = 4,
};
enum ReplacesCorHdrNumericDefines
{
    COMIMAGE_FLAGS_ILONLY = 1,
    COMIMAGE_FLAGS_32BITREQUIRED = 2,
    COMIMAGE_FLAGS_IL_LIBRARY = 4,
    COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,
    COMIMAGE_FLAGS_TRACKDEBUGDATA = 65536,
    COMIMAGE_FLAGS_32BITPREFERRED = 131072,
    COR_VERSION_MAJOR_V2 = 2,
    COR_VERSION_MAJOR = 2,
    COR_VERSION_MINOR = 5,
    COR_DELETED_NAME_LENGTH = 8,
    COR_VTABLEGAP_NAME_LENGTH = 8,
    NATIVE_TYPE_MAX_CB = 1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
    IMAGE_COR_MIH_METHODRVA = 1,
    IMAGE_COR_MIH_EHRVA = 2,
    IMAGE_COR_MIH_BASICBLOCK = 8,
    COR_VTABLE_32BIT = 1,
    COR_VTABLE_64BIT = 2,
    COR_VTABLE_FROM_UNMANAGED = 4,
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8,
    COR_VTABLE_CALL_MOST_DERIVED = 16,
    IMAGE_COR_EATJ_THUNK_SIZE = 32,
    MAX_CLASS_NAME = 1024,
    MAX_PACKAGE_NAME = 1024,
};
enum _FINDEX_SEARCH_OPS
{
    FindExSearchNameMatch = 0,
    FindExSearchLimitToDirectories = 1,
    FindExSearchLimitToDevices = 2,
    FindExSearchMaxSearchOp = 3,
};
enum _GET_FILEEX_INFO_LEVELS
{
    GetFileExInfoStandard = 0,
    GetFileExMaxInfoLevel = 1,
};
enum _RTL_UMS_THREAD_INFO_CLASS
{
    UmsThreadInvalidInfoClass = 0,
    UmsThreadUserContext = 1,
    UmsThreadPriority = 2,
    UmsThreadAffinity = 3,
    UmsThreadTeb = 4,
    UmsThreadIsSuspended = 5,
    UmsThreadIsTerminated = 6,
    UmsThreadMaxInfoClass = 7,
};
enum _IMAGE_POLICY_ID
{
    ImagePolicyIdNone = 0,
    ImagePolicyIdEtw = 1,
    ImagePolicyIdDebug = 2,
    ImagePolicyIdCrashDump = 3,
    ImagePolicyIdCrashDumpKey = 4,
    ImagePolicyIdCrashDumpKeyGuid = 5,
    ImagePolicyIdParentSd = 6,
    ImagePolicyIdParentSdRev = 7,
    ImagePolicyIdSvn = 8,
    ImagePolicyIdDeviceId = 9,
    ImagePolicyIdCapability = 10,
    ImagePolicyIdScenarioId = 11,
    ImagePolicyIdMaximum = 12,
};
enum _FINDEX_INFO_LEVELS
{
    FindExInfoStandard = 0,
    FindExInfoBasic = 1,
    FindExInfoMaxInfoLevel = 2,
};
enum _ACTIVATION_CONTEXT_INFO_CLASS
{
    ActivationContextBasicInformation = 1,
    ActivationContextDetailedInformation = 2,
    AssemblyDetailedInformationInActivationContext = 3,
    FileInformationInAssemblyOfAssemblyInActivationContext = 4,
    RunlevelInformationInActivationContext = 5,
    CompatibilityInformationInActivationContext = 6,
    ActivationContextManifestResourceName = 7,
    MaxActivationContextInfoClass = 8,
    AssemblyDetailedInformationInActivationContxt = 3,
    FileInformationInAssemblyOfAssemblyInActivationContxt = 4,
};
enum ACTCTX_REQUESTED_RUN_LEVEL
{
    ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
    ACTCTX_RUN_LEVEL_AS_INVOKER = 1,
    ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE = 2,
    ACTCTX_RUN_LEVEL_REQUIRE_ADMIN = 3,
    ACTCTX_RUN_LEVEL_NUMBERS = 4,
};
enum _QUEUE_USER_APC_FLAGS
{
    QUEUE_USER_APC_FLAGS_NONE = 0,
    QUEUE_USER_APC_FLAGS_SPECIAL_USER_APC = 1,
    QUEUE_USER_APC_CALLBACK_DATA_CONTEXT = 65536,
};
enum DISPLAYCONFIG_SCALING
{
    DISPLAYCONFIG_SCALING_IDENTITY = 1,
    DISPLAYCONFIG_SCALING_CENTERED = 2,
    DISPLAYCONFIG_SCALING_STRETCHED = 3,
    DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 4,
    DISPLAYCONFIG_SCALING_CUSTOM = 5,
    DISPLAYCONFIG_SCALING_PREFERRED = 128,
    DISPLAYCONFIG_SCALING_FORCE_UINT32 = -1,
};
enum _PROCESS_INFORMATION_CLASS
{
    ProcessMemoryPriority = 0,
    ProcessMemoryExhaustionInfo = 1,
    ProcessAppMemoryInfo = 2,
    ProcessInPrivateInfo = 3,
    ProcessPowerThrottling = 4,
    ProcessReservedValue1 = 5,
    ProcessTelemetryCoverageInfo = 6,
    ProcessProtectionLevelInfo = 7,
    ProcessLeapSecondInfo = 8,
    ProcessMachineTypeInfo = 9,
    ProcessInformationClassMax = 10,
};
enum OFFER_PRIORITY
{
    VmOfferPriorityVeryLow = 1,
    VmOfferPriorityLow = 2,
    VmOfferPriorityBelowNormal = 3,
    VmOfferPriorityNormal = 4,
};
enum _MEMORY_RESOURCE_NOTIFICATION_TYPE
{
    LowMemoryResourceNotification = 0,
    HighMemoryResourceNotification = 1,
};
enum _MACHINE_ATTRIBUTES
{
    UserEnabled = 1,
    KernelEnabled = 2,
    Wow64Container = 4,
};
enum _TRANSACTION_STATE
{
    TransactionStateNormal = 1,
    TransactionStateIndoubt = 2,
    TransactionStateCommittedNotify = 3,
};
enum _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS
{
    ReadDirectoryNotifyInformation = 1,
    ReadDirectoryNotifyExtendedInformation = 2,
    ReadDirectoryNotifyFullInformation = 3,
    ReadDirectoryNotifyMaximumInformation = 4,
};
enum _FILE_INFO_BY_HANDLE_CLASS
{
    FileBasicInfo = 0,
    FileStandardInfo = 1,
    FileNameInfo = 2,
    FileRenameInfo = 3,
    FileDispositionInfo = 4,
    FileAllocationInfo = 5,
    FileEndOfFileInfo = 6,
    FileStreamInfo = 7,
    FileCompressionInfo = 8,
    FileAttributeTagInfo = 9,
    FileIdBothDirectoryInfo = 10,
    FileIdBothDirectoryRestartInfo = 11,
    FileIoPriorityHintInfo = 12,
    FileRemoteProtocolInfo = 13,
    FileFullDirectoryInfo = 14,
    FileFullDirectoryRestartInfo = 15,
    FileStorageInfo = 16,
    FileAlignmentInfo = 17,
    FileIdInfo = 18,
    FileIdExtdDirectoryInfo = 19,
    FileIdExtdDirectoryRestartInfo = 20,
    FileDispositionInfoEx = 21,
    FileRenameInfoEx = 22,
    FileCaseSensitiveInfo = 23,
    FileNormalizedNameInfo = 24,
    MaximumFileInfoByHandleClass = 25,
};
enum _RESOURCEMANAGER_INFORMATION_CLASS
{
    ResourceManagerBasicInformation = 0,
    ResourceManagerCompletionInformation = 1,
};
enum _TP_CALLBACK_PRIORITY
{
    TP_CALLBACK_PRIORITY_HIGH = 0,
    TP_CALLBACK_PRIORITY_NORMAL = 1,
    TP_CALLBACK_PRIORITY_LOW = 2,
    TP_CALLBACK_PRIORITY_INVALID = 3,
    TP_CALLBACK_PRIORITY_COUNT = 3,
};
enum tagSTGC
{
    STGC_DEFAULT = 0,
    STGC_OVERWRITE = 1,
    STGC_ONLYIFCURRENT = 2,
    STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4,
    STGC_CONSOLIDATE = 8,
};
enum DPI_HOSTING_BEHAVIOR
{
    DPI_HOSTING_BEHAVIOR_INVALID = -1,
    DPI_HOSTING_BEHAVIOR_DEFAULT = 0,
    DPI_HOSTING_BEHAVIOR_MIXED = 1,
};
enum tagMSHCTX
{
    MSHCTX_LOCAL = 0,
    MSHCTX_NOSHAREDMEM = 1,
    MSHCTX_DIFFERENTMACHINE = 2,
    MSHCTX_INPROC = 3,
    MSHCTX_CROSSCTX = 4,
    MSHCTX_CONTAINER = 5,
};
enum _APTTYPEQUALIFIER
{
    APTTYPEQUALIFIER_NONE = 0,
    APTTYPEQUALIFIER_IMPLICIT_MTA = 1,
    APTTYPEQUALIFIER_NA_ON_MTA = 2,
    APTTYPEQUALIFIER_NA_ON_STA = 3,
    APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 4,
    APTTYPEQUALIFIER_NA_ON_MAINSTA = 5,
    APTTYPEQUALIFIER_APPLICATION_STA = 6,
    APTTYPEQUALIFIER_RESERVED_1 = 7,
};
enum WIN32_MEMORY_INFORMATION_CLASS
{
    MemoryRegionInfo = 0,
};
enum DISPLAYCONFIG_MODE_INFO_TYPE
{
    DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1,
    DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2,
    DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE = 3,
    DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = -1,
};
enum FILE_WRITE_FLAGS
{
    FILE_WRITE_FLAGS_NONE = 0,
    FILE_WRITE_FLAGS_WRITE_THROUGH = 1,
};
enum FILE_FLUSH_MODE
{
    FILE_FLUSH_DEFAULT = 0,
    FILE_FLUSH_DATA = 1,
    FILE_FLUSH_MIN_METADATA = 2,
    FILE_FLUSH_NO_SYNC = 3,
};
enum DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY
{
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = -1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 2,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 3,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 4,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 5,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 6,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 8,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 9,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 10,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 11,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 12,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 13,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 14,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST = 15,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED = 16,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL = 17,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_USB_TUNNEL = 18,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = -2147483648,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = -1,
};
enum _DEP_SYSTEM_POLICY_TYPE
{
    DEPPolicyAlwaysOff = 0,
    DEPPolicyAlwaysOn = 1,
    DEPPolicyOptIn = 2,
    DEPPolicyOptOut = 3,
    DEPTotalPolicyCount = 4,
};
enum _PROC_THREAD_ATTRIBUTE_NUM
{
    ProcThreadAttributeParentProcess = 0,
    ProcThreadAttributeHandleList = 2,
    ProcThreadAttributeGroupAffinity = 3,
    ProcThreadAttributePreferredNode = 4,
    ProcThreadAttributeIdealProcessor = 5,
    ProcThreadAttributeUmsThread = 6,
    ProcThreadAttributeMitigationPolicy = 7,
    ProcThreadAttributeSecurityCapabilities = 9,
    ProcThreadAttributeProtectionLevel = 11,
    ProcThreadAttributeJobList = 13,
    ProcThreadAttributeChildProcessPolicy = 14,
    ProcThreadAttributeAllApplicationPackagesPolicy = 15,
    ProcThreadAttributeWin32kFilter = 16,
    ProcThreadAttributeSafeOpenPromptOriginClaim = 17,
    ProcThreadAttributeDesktopAppPolicy = 18,
    ProcThreadAttributePseudoConsole = 22,
    ProcThreadAttributeMitigationAuditPolicy = 24,
    ProcThreadAttributeMachineType = 25,
    ProcThreadAttributeComponentFilter = 26,
    ProcThreadAttributeEnableOptionalXStateFeatures = 27,
    ProcThreadAttributeTrustedApp = 29,
};
enum _COPYFILE2_MESSAGE_TYPE
{
    COPYFILE2_CALLBACK_NONE = 0,
    COPYFILE2_CALLBACK_CHUNK_STARTED = 1,
    COPYFILE2_CALLBACK_CHUNK_FINISHED = 2,
    COPYFILE2_CALLBACK_STREAM_STARTED = 3,
    COPYFILE2_CALLBACK_STREAM_FINISHED = 4,
    COPYFILE2_CALLBACK_POLL_CONTINUE = 5,
    COPYFILE2_CALLBACK_ERROR = 6,
    COPYFILE2_CALLBACK_MAX = 7,
};
enum _COPYFILE2_MESSAGE_ACTION
{
    COPYFILE2_PROGRESS_CONTINUE = 0,
    COPYFILE2_PROGRESS_CANCEL = 1,
    COPYFILE2_PROGRESS_STOP = 2,
    COPYFILE2_PROGRESS_QUIET = 3,
    COPYFILE2_PROGRESS_PAUSE = 4,
};
enum _COPYFILE2_COPY_PHASE
{
    COPYFILE2_PHASE_NONE = 0,
    COPYFILE2_PHASE_PREPARE_SOURCE = 1,
    COPYFILE2_PHASE_PREPARE_DEST = 2,
    COPYFILE2_PHASE_READ_SOURCE = 3,
    COPYFILE2_PHASE_WRITE_DESTINATION = 4,
    COPYFILE2_PHASE_SERVER_COPY = 5,
    COPYFILE2_PHASE_NAMEGRAFT_COPY = 6,
    COPYFILE2_PHASE_MAX = 7,
};
enum SERVICE_REGISTRY_STATE_TYPE
{
    ServiceRegistryStateParameters = 0,
    ServiceRegistryStatePersistent = 1,
    MaxServiceRegistryStateType = 2,
};
enum _PRIORITY_HINT
{
    IoPriorityHintVeryLow = 0,
    IoPriorityHintLow = 1,
    IoPriorityHintNormal = 2,
    MaximumIoPriorityHintType = 3,
};
enum _STORAGE_BUS_TYPE
{
    BusTypeUnknown = 0,
    BusTypeScsi = 1,
    BusTypeAtapi = 2,
    BusTypeAta = 3,
    BusType1394 = 4,
    BusTypeSsa = 5,
    BusTypeFibre = 6,
    BusTypeUsb = 7,
    BusTypeRAID = 8,
    BusTypeiScsi = 9,
    BusTypeSas = 10,
    BusTypeSata = 11,
    BusTypeSd = 12,
    BusTypeMmc = 13,
    BusTypeVirtual = 14,
    BusTypeFileBackedVirtual = 15,
    BusTypeSpaces = 16,
    BusTypeNvme = 17,
    BusTypeSCM = 18,
    BusTypeUfs = 19,
    BusTypeMax = 20,
    BusTypeMaxReserved = 127,
};
enum _FILE_ID_TYPE
{
    FileIdType = 0,
    ObjectIdType = 1,
    ExtendedFileIdType = 2,
    MaximumFileIdType = 3,
};
enum _STORAGE_ASSOCIATION_TYPE
{
    StorageIdAssocDevice = 0,
    StorageIdAssocPort = 1,
    StorageIdAssocTarget = 2,
};
enum _SC_STATUS_TYPE
{
    SC_STATUS_PROCESS_INFO = 0,
};
enum DISPLAYCONFIG_SCANLINE_ORDERING
{
    DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0,
    DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 2,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3,
    DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = -1,
};
enum DISPLAYCONFIG_ROTATION
{
    DISPLAYCONFIG_ROTATION_IDENTITY = 1,
    DISPLAYCONFIG_ROTATION_ROTATE90 = 2,
    DISPLAYCONFIG_ROTATION_ROTATE180 = 3,
    DISPLAYCONFIG_ROTATION_ROTATE270 = 4,
    DISPLAYCONFIG_ROTATION_FORCE_UINT32 = -1,
};
enum DISPLAYCONFIG_PIXELFORMAT
{
    DISPLAYCONFIG_PIXELFORMAT_8BPP = 1,
    DISPLAYCONFIG_PIXELFORMAT_16BPP = 2,
    DISPLAYCONFIG_PIXELFORMAT_24BPP = 3,
    DISPLAYCONFIG_PIXELFORMAT_32BPP = 4,
    DISPLAYCONFIG_PIXELFORMAT_NONGDI = 5,
    DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = -1,
};
enum DISPLAYCONFIG_TOPOLOGY_ID
{
    DISPLAYCONFIG_TOPOLOGY_INTERNAL = 1,
    DISPLAYCONFIG_TOPOLOGY_CLONE = 2,
    DISPLAYCONFIG_TOPOLOGY_EXTEND = 4,
    DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 8,
    DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = -1,
};
enum DISPLAYCONFIG_DEVICE_INFO_TYPE
{
    DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 1,
    DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 2,
    DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 3,
    DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 4,
    DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 5,
    DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE = 6,
    DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION = 7,
    DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION = 8,
    DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO = 9,
    DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE = 10,
    DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL = 11,
    DISPLAYCONFIG_DEVICE_INFO_GET_MONITOR_SPECIALIZATION = 12,
    DISPLAYCONFIG_DEVICE_INFO_SET_MONITOR_SPECIALIZATION = 13,
    DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = -1,
};
enum _DISPLAYCONFIG_COLOR_ENCODING
{
    DISPLAYCONFIG_COLOR_ENCODING_RGB = 0,
    DISPLAYCONFIG_COLOR_ENCODING_YCBCR444 = 1,
    DISPLAYCONFIG_COLOR_ENCODING_YCBCR422 = 2,
    DISPLAYCONFIG_COLOR_ENCODING_YCBCR420 = 3,
    DISPLAYCONFIG_COLOR_ENCODING_INTENSITY = 4,
    DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32 = -1,
};
enum tagAR_STATE
{
    AR_ENABLED = 0,
    AR_DISABLED = 1,
    AR_SUPPRESSED = 2,
    AR_REMOTESESSION = 4,
    AR_MULTIMON = 8,
    AR_NOSENSOR = 16,
    AR_NOT_SUPPORTED = 32,
    AR_DOCKED = 64,
    AR_LAPTOP = 128,
};
enum DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS
{
    DCDC_DEFAULT = 0,
    DCDC_DISABLE_FONT_UPDATE = 1,
    DCDC_DISABLE_RELAYOUT = 2,
};
enum _FILE_STORAGE_TIER_CLASS
{
    FileStorageTierClassUnspecified = 0,
    FileStorageTierClassCapacity = 1,
    FileStorageTierClassPerformance = 2,
    FileStorageTierClassMax = 3,
};
enum _CSV_CONTROL_OP
{
    CsvControlStartRedirectFile = 2,
    CsvControlStopRedirectFile = 3,
    CsvControlQueryRedirectState = 4,
    CsvControlQueryFileRevision = 6,
    CsvControlQueryMdsPath = 8,
    CsvControlQueryFileRevisionFileId128 = 9,
    CsvControlQueryVolumeRedirectState = 10,
    CsvControlEnableUSNRangeModificationTracking = 13,
    CsvControlMarkHandleLocalVolumeMount = 14,
    CsvControlUnmarkHandleLocalVolumeMount = 15,
    CsvControlGetCsvFsMdsPathV2 = 18,
    CsvControlDisableCaching = 19,
    CsvControlEnableCaching = 20,
    CsvControlStartForceDFO = 21,
    CsvControlStopForceDFO = 22,
    CsvControlQueryMdsPathNoPause = 23,
    CsvControlSetVolumeId = 24,
    CsvControlQueryVolumeId = 25,
};
enum ORIENTATION_PREFERENCE
{
    ORIENTATION_PREFERENCE_NONE = 0,
    ORIENTATION_PREFERENCE_LANDSCAPE = 1,
    ORIENTATION_PREFERENCE_PORTRAIT = 2,
    ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 4,
    ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED = 8,
};
enum _NORM_FORM
{
    NormalizationOther = 0,
    NormalizationC = 1,
    NormalizationD = 2,
    NormalizationKC = 5,
    NormalizationKD = 6,
};
enum tagINPUT_MESSAGE_DEVICE_TYPE
{
    IMDT_UNAVAILABLE = 0,
    IMDT_KEYBOARD = 1,
    IMDT_MOUSE = 2,
    IMDT_TOUCH = 4,
    IMDT_PEN = 8,
    IMDT_TOUCHPAD = 16,
};
enum tagPOINTER_DEVICE_CURSOR_TYPE
{
    POINTER_DEVICE_CURSOR_TYPE_UNKNOWN = 0,
    POINTER_DEVICE_CURSOR_TYPE_TIP = 1,
    POINTER_DEVICE_CURSOR_TYPE_ERASER = 2,
    POINTER_DEVICE_CURSOR_TYPE_MAX = -1,
};
enum tagPOINTER_BUTTON_CHANGE_TYPE
{
    POINTER_CHANGE_NONE = 0,
    POINTER_CHANGE_FIRSTBUTTON_DOWN = 1,
    POINTER_CHANGE_FIRSTBUTTON_UP = 2,
    POINTER_CHANGE_SECONDBUTTON_DOWN = 3,
    POINTER_CHANGE_SECONDBUTTON_UP = 4,
    POINTER_CHANGE_THIRDBUTTON_DOWN = 5,
    POINTER_CHANGE_THIRDBUTTON_UP = 6,
    POINTER_CHANGE_FOURTHBUTTON_DOWN = 7,
    POINTER_CHANGE_FOURTHBUTTON_UP = 8,
    POINTER_CHANGE_FIFTHBUTTON_DOWN = 9,
    POINTER_CHANGE_FIFTHBUTTON_UP = 10,
};
enum SYSGEOCLASS
{
    GEOCLASS_NATION = 16,
    GEOCLASS_REGION = 14,
    GEOCLASS_ALL = 0,
};
enum _STORAGE_TIER_MEDIA_TYPE
{
    StorageTierMediaTypeUnspecified = 0,
    StorageTierMediaTypeDisk = 1,
    StorageTierMediaTypeSsd = 2,
    StorageTierMediaTypeScm = 4,
    StorageTierMediaTypeMax = 5,
};
enum _STORAGE_CRYPTO_ALGORITHM_ID
{
    StorageCryptoAlgorithmUnknown = 0,
    StorageCryptoAlgorithmXTSAES = 1,
    StorageCryptoAlgorithmBitlockerAESCBC = 2,
    StorageCryptoAlgorithmAESECB = 3,
    StorageCryptoAlgorithmESSIVAESCBC = 4,
    StorageCryptoAlgorithmMax = 5,
};
enum tagPOINTER_DEVICE_TYPE
{
    POINTER_DEVICE_TYPE_INTEGRATED_PEN = 1,
    POINTER_DEVICE_TYPE_EXTERNAL_PEN = 2,
    POINTER_DEVICE_TYPE_TOUCH = 3,
    POINTER_DEVICE_TYPE_TOUCH_PAD = 4,
    POINTER_DEVICE_TYPE_MAX = -1,
};
enum _STORAGE_QUERY_TYPE
{
    PropertyStandardQuery = 0,
    PropertyExistsQuery = 1,
    PropertyMaskQuery = 2,
    PropertyQueryMaxDefined = 3,
};
enum DIALOG_DPI_CHANGE_BEHAVIORS
{
    DDC_DEFAULT = 0,
    DDC_DISABLE_ALL = 1,
    DDC_DISABLE_RESIZE = 2,
    DDC_DISABLE_CONTROL_RELAYOUT = 4,
};
enum _STORAGE_RPMB_FRAME_TYPE
{
    StorageRpmbFrameTypeUnknown = 0,
    StorageRpmbFrameTypeStandard = 1,
    StorageRpmbFrameTypeMax = 2,
};
enum tagPOINTER_INPUT_TYPE
{
    PT_POINTER = 1,
    PT_TOUCH = 2,
    PT_PEN = 3,
    PT_MOUSE = 4,
    PT_TOUCHPAD = 5,
};
enum POINTER_FEEDBACK_MODE
{
    POINTER_FEEDBACK_DEFAULT = 1,
    POINTER_FEEDBACK_INDIRECT = 2,
    POINTER_FEEDBACK_NONE = 3,
};
enum tagFEEDBACK_TYPE
{
    FEEDBACK_TOUCH_CONTACTVISUALIZATION = 1,
    FEEDBACK_PEN_BARRELVISUALIZATION = 2,
    FEEDBACK_PEN_TAP = 3,
    FEEDBACK_PEN_DOUBLETAP = 4,
    FEEDBACK_PEN_PRESSANDHOLD = 5,
    FEEDBACK_PEN_RIGHTTAP = 6,
    FEEDBACK_TOUCH_TAP = 7,
    FEEDBACK_TOUCH_DOUBLETAP = 8,
    FEEDBACK_TOUCH_PRESSANDHOLD = 9,
    FEEDBACK_TOUCH_RIGHTTAP = 10,
    FEEDBACK_GESTURE_PRESSANDTAP = 11,
    FEEDBACK_MAX = -1,
};
enum EDIT_CONTROL_FEATURE
{
    EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT = 0,
    EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS = 1,
};
enum _SC_ENUM_TYPE
{
    SC_ENUM_PROCESS_INFO = 0,
};
enum tagHANDEDNESS
{
    HANDEDNESS_LEFT = 0,
    HANDEDNESS_RIGHT = 1,
};
enum _STORAGE_TIER_CLASS
{
    StorageTierClassUnspecified = 0,
    StorageTierClassCapacity = 1,
    StorageTierClassPerformance = 2,
    StorageTierClassMax = 3,
};
enum _STORAGE_CRYPTO_KEY_SIZE
{
    StorageCryptoKeySizeUnknown = 0,
    StorageCryptoKeySize128Bits = 1,
    StorageCryptoKeySize192Bits = 2,
    StorageCryptoKeySize256Bits = 3,
    StorageCryptoKeySize512Bits = 4,
};
enum SERVICE_DIRECTORY_TYPE
{
    ServiceDirectoryPersistentState = 0,
    ServiceDirectoryTypeMax = 1,
};
enum tagINPUT_MESSAGE_ORIGIN_ID
{
    IMO_UNAVAILABLE = 0,
    IMO_HARDWARE = 1,
    IMO_INJECTED = 2,
    IMO_SYSTEM = 4,
};
enum SERVICE_SHARED_REGISTRY_STATE_TYPE
{
    ServiceSharedRegistryPersistentState = 0,
};
enum SYSNLS_FUNCTION
{
    COMPARE_STRING = 1,
};
enum SYSGEOTYPE
{
    GEO_NATION = 1,
    GEO_LATITUDE = 2,
    GEO_LONGITUDE = 3,
    GEO_ISO2 = 4,
    GEO_ISO3 = 5,
    GEO_RFC1766 = 6,
    GEO_LCID = 7,
    GEO_FRIENDLYNAME = 8,
    GEO_OFFICIALNAME = 9,
    GEO_TIMEZONES = 10,
    GEO_OFFICIALLANGUAGES = 11,
    GEO_ISO_UN_NUMBER = 12,
    GEO_PARENT = 13,
    GEO_DIALINGCODE = 14,
    GEO_CURRENCYCODE = 15,
    GEO_CURRENCYSYMBOL = 16,
    GEO_NAME = 17,
    GEO_ID = 18,
};
enum _STORAGE_PORT_CODE_SET
{
    StoragePortCodeSetReserved = 0,
    StoragePortCodeSetStorport = 1,
    StoragePortCodeSetSCSIport = 2,
    StoragePortCodeSetSpaceport = 3,
    StoragePortCodeSetATAport = 4,
    StoragePortCodeSetUSBport = 5,
    StoragePortCodeSetSBP2port = 6,
    StoragePortCodeSetSDport = 7,
};
enum _SCM_PD_HEALTH_STATUS
{
    ScmPhysicalDeviceHealth_Unknown = 0,
    ScmPhysicalDeviceHealth_Unhealthy = 1,
    ScmPhysicalDeviceHealth_Warning = 2,
    ScmPhysicalDeviceHealth_Healthy = 3,
    ScmPhysicalDeviceHealth_Max = 4,
};
enum _STORAGE_ID_NAA_FORMAT
{
    StorageIdNAAFormatIEEEExtended = 2,
    StorageIdNAAFormatIEEERegistered = 3,
    StorageIdNAAFormatIEEEERegisteredExtended = 5,
};
enum _STORAGE_MEDIA_TYPE
{
    DDS_4mm = 32,
    MiniQic = 33,
    Travan = 34,
    QIC = 35,
    MP_8mm = 36,
    AME_8mm = 37,
    AIT1_8mm = 38,
    DLT = 39,
    NCTP = 40,
    IBM_3480 = 41,
    IBM_3490E = 42,
    IBM_Magstar_3590 = 43,
    IBM_Magstar_MP = 44,
    STK_DATA_D3 = 45,
    SONY_DTF = 46,
    DV_6mm = 47,
    DMI = 48,
    SONY_D2 = 49,
    CLEANER_CARTRIDGE = 50,
    CD_ROM = 51,
    CD_R = 52,
    CD_RW = 53,
    DVD_ROM = 54,
    DVD_R = 55,
    DVD_RW = 56,
    MO_3_RW = 57,
    MO_5_WO = 58,
    MO_5_RW = 59,
    MO_5_LIMDOW = 60,
    PC_5_WO = 61,
    PC_5_RW = 62,
    PD_5_RW = 63,
    ABL_5_WO = 64,
    PINNACLE_APEX_5_RW = 65,
    SONY_12_WO = 66,
    PHILIPS_12_WO = 67,
    HITACHI_12_WO = 68,
    CYGNET_12_WO = 69,
    KODAK_14_WO = 70,
    MO_NFR_525 = 71,
    NIKON_12_RW = 72,
    IOMEGA_ZIP = 73,
    IOMEGA_JAZ = 74,
    SYQUEST_EZ135 = 75,
    SYQUEST_EZFLYER = 76,
    SYQUEST_SYJET = 77,
    AVATAR_F2 = 78,
    MP2_8mm = 79,
    DST_S = 80,
    DST_M = 81,
    DST_L = 82,
    VXATape_1 = 83,
    VXATape_2 = 84,
    STK_9840 = 85,
    LTO_Ultrium = 86,
    LTO_Accelis = 87,
    DVD_RAM = 88,
    AIT_8mm = 89,
    ADR_1 = 90,
    ADR_2 = 91,
    STK_9940 = 92,
    SAIT = 93,
    VXATape = 94,
};
enum _STORAGE_PROPERTY_ID
{
    StorageDeviceProperty = 0,
    StorageAdapterProperty = 1,
    StorageDeviceIdProperty = 2,
    StorageDeviceUniqueIdProperty = 3,
    StorageDeviceWriteCacheProperty = 4,
    StorageMiniportProperty = 5,
    StorageAccessAlignmentProperty = 6,
    StorageDeviceSeekPenaltyProperty = 7,
    StorageDeviceTrimProperty = 8,
    StorageDeviceWriteAggregationProperty = 9,
    StorageDeviceDeviceTelemetryProperty = 10,
    StorageDeviceLBProvisioningProperty = 11,
    StorageDevicePowerProperty = 12,
    StorageDeviceCopyOffloadProperty = 13,
    StorageDeviceResiliencyProperty = 14,
    StorageDeviceMediumProductType = 15,
    StorageAdapterRpmbProperty = 16,
    StorageAdapterCryptoProperty = 17,
    StorageDeviceIoCapabilityProperty = 48,
    StorageAdapterProtocolSpecificProperty = 49,
    StorageDeviceProtocolSpecificProperty = 50,
    StorageAdapterTemperatureProperty = 51,
    StorageDeviceTemperatureProperty = 52,
    StorageAdapterPhysicalTopologyProperty = 53,
    StorageDevicePhysicalTopologyProperty = 54,
    StorageDeviceAttributesProperty = 55,
    StorageDeviceManagementStatus = 56,
    StorageAdapterSerialNumberProperty = 57,
    StorageDeviceLocationProperty = 58,
    StorageDeviceNumaProperty = 59,
    StorageDeviceZonedDeviceProperty = 60,
    StorageDeviceUnsafeShutdownCount = 61,
    StorageDeviceEnduranceProperty = 62,
    StorageDeviceLedStateProperty = 63,
    StorageDeviceSelfEncryptionProperty = 64,
    StorageFruIdProperty = 65,
};
enum _SC_ACTION_TYPE
{
    SC_ACTION_NONE = 0,
    SC_ACTION_RESTART = 1,
    SC_ACTION_REBOOT = 2,
    SC_ACTION_RUN_COMMAND = 3,
    SC_ACTION_OWN_RESTART = 4,
};
enum _SC_EVENT_TYPE
{
    SC_EVENT_DATABASE_CHANGE = 0,
    SC_EVENT_PROPERTY_CHANGE = 1,
    SC_EVENT_STATUS_CHANGE = 2,
};
enum _STORAGE_IDENTIFIER_TYPE
{
    StorageIdTypeVendorSpecific = 0,
    StorageIdTypeVendorId = 1,
    StorageIdTypeEUI64 = 2,
    StorageIdTypeFCPHName = 3,
    StorageIdTypePortRelative = 4,
    StorageIdTypeTargetPortGroup = 5,
    StorageIdTypeLogicalUnitGroup = 6,
    StorageIdTypeMD5LogicalUnitIdentifier = 7,
    StorageIdTypeScsiNameString = 8,
};
enum _SCM_BUS_FIRMWARE_ACTIVATION_STATE
{
    ScmBusFirmwareActivationState_Idle = 0,
    ScmBusFirmwareActivationState_Armed = 1,
    ScmBusFirmwareActivationState_Busy = 2,
};
enum _STORAGE_PROTOCOL_TYPE
{
    ProtocolTypeUnknown = 0,
    ProtocolTypeScsi = 1,
    ProtocolTypeAta = 2,
    ProtocolTypeNvme = 3,
    ProtocolTypeSd = 4,
    ProtocolTypeUfs = 5,
    ProtocolTypeProprietary = 126,
    ProtocolTypeMaxReserved = 127,
};
enum _STORAGE_PROTOCOL_NVME_DATA_TYPE
{
    NVMeDataTypeUnknown = 0,
    NVMeDataTypeIdentify = 1,
    NVMeDataTypeLogPage = 2,
    NVMeDataTypeFeature = 3,
};
enum _STORAGE_PROTOCOL_ATA_DATA_TYPE
{
    AtaDataTypeUnknown = 0,
    AtaDataTypeIdentify = 1,
    AtaDataTypeLogPage = 2,
};
enum _STORAGE_PROTOCOL_UFS_DATA_TYPE
{
    UfsDataTypeUnknown = 0,
    UfsDataTypeQueryDescriptor = 1,
    UfsDataTypeQueryAttribute = 2,
    UfsDataTypeQueryFlag = 3,
    UfsDataTypeQueryDmeAttribute = 4,
    UfsDataTypeQueryDmePeerAttribute = 5,
    UfsDataTypeMax = 6,
};
enum _SCM_PD_PROPERTY_ID
{
    ScmPhysicalDeviceProperty_DeviceInfo = 0,
    ScmPhysicalDeviceProperty_ManagementStatus = 1,
    ScmPhysicalDeviceProperty_FirmwareInfo = 2,
    ScmPhysicalDeviceProperty_LocationString = 3,
    ScmPhysicalDeviceProperty_DeviceSpecificInfo = 4,
    ScmPhysicalDeviceProperty_DeviceHandle = 5,
    ScmPhysicalDeviceProperty_FruIdString = 6,
    ScmPhysicalDeviceProperty_RuntimeFwActivationInfo = 7,
    ScmPhysicalDeviceProperty_RuntimeFwActivationArmState = 8,
    ScmPhysicalDeviceProperty_Max = 9,
};
enum _STORAGE_DEVICE_FORM_FACTOR
{
    FormFactorUnknown = 0,
    FormFactor3_5 = 1,
    FormFactor2_5 = 2,
    FormFactor1_8 = 3,
    FormFactor1_8Less = 4,
    FormFactorEmbedded = 5,
    FormFactorMemoryCard = 6,
    FormFactormSata = 7,
    FormFactorM_2 = 8,
    FormFactorPCIeBoard = 9,
    FormFactorDimm = 10,
};
enum _STORAGE_COMPONENT_HEALTH_STATUS
{
    HealthStatusUnknown = 0,
    HealthStatusNormal = 1,
    HealthStatusThrottled = 2,
    HealthStatusWarning = 3,
    HealthStatusDisabled = 4,
    HealthStatusFailed = 5,
};
enum _STORAGE_DISK_HEALTH_STATUS
{
    DiskHealthUnknown = 0,
    DiskHealthUnhealthy = 1,
    DiskHealthWarning = 2,
    DiskHealthHealthy = 3,
    DiskHealthMax = 4,
};
enum _STORAGE_DISK_OPERATIONAL_STATUS
{
    DiskOpStatusNone = 0,
    DiskOpStatusUnknown = 1,
    DiskOpStatusOk = 2,
    DiskOpStatusPredictingFailure = 3,
    DiskOpStatusInService = 4,
    DiskOpStatusHardwareError = 5,
    DiskOpStatusNotUsable = 6,
    DiskOpStatusTransientError = 7,
    DiskOpStatusMissing = 8,
};
enum _STORAGE_OPERATIONAL_STATUS_REASON
{
    DiskOpReasonUnknown = 0,
    DiskOpReasonScsiSenseCode = 1,
    DiskOpReasonMedia = 2,
    DiskOpReasonIo = 3,
    DiskOpReasonThresholdExceeded = 4,
    DiskOpReasonLostData = 5,
    DiskOpReasonEnergySource = 6,
    DiskOpReasonConfiguration = 7,
    DiskOpReasonDeviceController = 8,
    DiskOpReasonMediaController = 9,
    DiskOpReasonComponent = 10,
    DiskOpReasonNVDIMM_N = 11,
    DiskOpReasonBackgroundOperation = 12,
    DiskOpReasonInvalidFirmware = 13,
    DiskOpReasonHealthCheck = 14,
    DiskOpReasonLostDataPersistence = 15,
    DiskOpReasonDisabledByPlatform = 16,
    DiskOpReasonLostWritePersistence = 17,
    DiskOpReasonDataPersistenceLossImminent = 18,
    DiskOpReasonWritePersistenceLossImminent = 19,
    DiskOpReasonMax = 20,
};
enum _STORAGE_ATTRIBUTE_MGMT_ACTION
{
    StorAttributeMgmt_ClearAttribute = 0,
    StorAttributeMgmt_SetAttribute = 1,
    StorAttributeMgmt_ResetAttribute = 2,
};
enum _CHANGER_DEVICE_PROBLEM_TYPE
{
    DeviceProblemNone = 0,
    DeviceProblemHardware = 1,
    DeviceProblemCHMError = 2,
    DeviceProblemDoorOpen = 3,
    DeviceProblemCalibrationError = 4,
    DeviceProblemTargetFailure = 5,
    DeviceProblemCHMMoveError = 6,
    DeviceProblemCHMZeroError = 7,
    DeviceProblemCartridgeInsertError = 8,
    DeviceProblemPositionError = 9,
    DeviceProblemSensorError = 10,
    DeviceProblemCartridgeEjectError = 11,
    DeviceProblemGripperError = 12,
    DeviceProblemDriveError = 13,
};
enum _STORAGE_ZONED_DEVICE_TYPES
{
    ZonedDeviceTypeUnknown = 0,
    ZonedDeviceTypeHostManaged = 1,
    ZonedDeviceTypeHostAware = 2,
    ZonedDeviceTypeDeviceManaged = 3,
};
enum _STORAGE_ZONE_TYPES
{
    ZoneTypeUnknown = 0,
    ZoneTypeConventional = 1,
    ZoneTypeSequentialWriteRequired = 2,
    ZoneTypeSequentialWritePreferred = 3,
    ZoneTypeMax = 4,
};
enum _SHRINK_VOLUME_REQUEST_TYPES
{
    ShrinkPrepare = 1,
    ShrinkCommit = 2,
    ShrinkAbort = 3,
};
enum _SCM_REGION_FLAG
{
    ScmRegionFlagNone = 0,
    ScmRegionFlagLabel = 1,
};
enum _RPC_NOTIFICATIONS
{
    RpcNotificationCallNone = 0,
    RpcNotificationClientDisconnect = 1,
    RpcNotificationCallCancel = 2,
};
enum _STORAGE_ENCRYPTION_TYPE
{
    StorageEncryptionTypeUnknown = 0,
    StorageEncryptionTypeEDrive = 1,
    StorageEncryptionTypeTcgOpal = 2,
};
enum _STORAGE_SANITIZE_METHOD
{
    StorageSanitizeMethodDefault = 0,
    StorageSanitizeMethodBlockErase = 1,
    StorageSanitizeMethodCryptoErase = 2,
};
enum _SCM_PD_MEDIA_REINITIALIZATION_STATUS
{
    ScmPhysicalDeviceReinit_Success = 0,
    ScmPhysicalDeviceReinit_RebootNeeded = 1,
    ScmPhysicalDeviceReinit_ColdBootNeeded = 2,
    ScmPhysicalDeviceReinit_Max = 3,
};
enum _STORAGE_RPMB_COMMAND_TYPE
{
    StorRpmbProgramAuthKey = 1,
    StorRpmbQueryWriteCounter = 2,
    StorRpmbAuthenticatedWrite = 3,
    StorRpmbAuthenticatedRead = 4,
    StorRpmbReadResultRequest = 5,
    StorRpmbAuthenticatedDeviceConfigWrite = 6,
    StorRpmbAuthenticatedDeviceConfigRead = 7,
};
enum _DETECTION_TYPE
{
    DetectNone = 0,
    DetectInt13 = 1,
    DetectExInt13 = 2,
};
enum _WRITE_CACHE_CHANGE
{
    WriteCacheChangeUnknown = 0,
    WriteCacheNotChangeable = 1,
    WriteCacheChangeable = 2,
};
enum _DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE
{
    DeviceInternalStatusDataRequestTypeUndefined = 0,
    DeviceCurrentInternalStatusDataHeader = 1,
    DeviceCurrentInternalStatusData = 2,
    DeviceSavedInternalStatusDataHeader = 3,
    DeviceSavedInternalStatusData = 4,
};
enum _STORAGE_ZONES_ATTRIBUTES
{
    ZonesAttributeTypeAndLengthMayDifferent = 0,
    ZonesAttributeTypeSameLengthSame = 1,
    ZonesAttributeTypeSameLastZoneLengthDifferent = 2,
    ZonesAttributeTypeMayDifferentLengthSame = 3,
};
enum _STORAGE_DIAGNOSTIC_LEVEL
{
    StorageDiagnosticLevelDefault = 0,
    StorageDiagnosticLevelMax = 1,
};
enum _STORAGE_ZONE_CONDITION
{
    ZoneConditionConventional = 0,
    ZoneConditionEmpty = 1,
    ZoneConditionImplicitlyOpened = 2,
    ZoneConditionExplicitlyOpened = 3,
    ZoneConditionClosed = 4,
    ZoneConditionReadOnly = 13,
    ZoneConditionFull = 14,
    ZoneConditionOffline = 15,
};
enum _STORAGE_DIAGNOSTIC_TARGET_TYPE
{
    StorageDiagnosticTargetTypeUndefined = 0,
    StorageDiagnosticTargetTypePort = 1,
    StorageDiagnosticTargetTypeMiniport = 2,
    StorageDiagnosticTargetTypeHbaFirmware = 3,
    StorageDiagnosticTargetTypeMax = 4,
};
enum _DEVICE_INTERNAL_STATUS_DATA_SET
{
    DeviceStatusDataSetUndefined = 0,
    DeviceStatusDataSet1 = 1,
    DeviceStatusDataSet2 = 2,
    DeviceStatusDataSet3 = 3,
    DeviceStatusDataSet4 = 4,
    DeviceStatusDataSetMax = 5,
};
enum _WRITE_CACHE_TYPE
{
    WriteCacheTypeUnknown = 0,
    WriteCacheTypeNone = 1,
    WriteCacheTypeWriteBack = 2,
    WriteCacheTypeWriteThrough = 3,
};
enum _WRITE_CACHE_ENABLE
{
    WriteCacheEnableUnknown = 0,
    WriteCacheDisabled = 1,
    WriteCacheEnabled = 2,
};
enum _WRITE_THROUGH
{
    WriteThroughUnknown = 0,
    WriteThroughNotSupported = 1,
    WriteThroughSupported = 2,
};
enum DISK_CACHE_RETENTION_PRIORITY
{
    EqualPriority = 0,
    KeepPrefetchedData = 1,
    KeepReadData = 2,
};
enum _DEVICEDUMP_COLLECTION_TYPE
{
    TCCollectionBugCheck = 1,
    TCCollectionApplicationRequested = 2,
    TCCollectionDeviceRequested = 3,
};
enum _STORAGE_POWERUP_REASON_TYPE
{
    StoragePowerupUnknown = 0,
    StoragePowerupIO = 1,
    StoragePowerupDeviceAttention = 2,
};
enum _SYSTEM_VA_TYPE
{
    SystemVaTypeAll = 0,
    SystemVaTypeNonPagedPool = 1,
    SystemVaTypePagedPool = 2,
    SystemVaTypeSystemCache = 3,
    SystemVaTypeSystemPtes = 4,
    SystemVaTypeSessionSpace = 5,
    SystemVaTypeMax = 6,
};
enum tagOLEUPDATE
{
    OLEUPDATE_ALWAYS = 1,
    OLEUPDATE_ONCALL = 3,
};
enum _STORAGE_DEVICE_POWER_CAP_UNITS
{
    StorageDevicePowerCapUnitsPercent = 0,
    StorageDevicePowerCapUnitsMilliwatts = 1,
};
enum _STORAGE_COUNTER_TYPE
{
    StorageCounterTypeUnknown = 0,
    StorageCounterTypeTemperatureCelsius = 1,
    StorageCounterTypeTemperatureCelsiusMax = 2,
    StorageCounterTypeReadErrorsTotal = 3,
    StorageCounterTypeReadErrorsCorrected = 4,
    StorageCounterTypeReadErrorsUncorrected = 5,
    StorageCounterTypeWriteErrorsTotal = 6,
    StorageCounterTypeWriteErrorsCorrected = 7,
    StorageCounterTypeWriteErrorsUncorrected = 8,
    StorageCounterTypeManufactureDate = 9,
    StorageCounterTypeStartStopCycleCount = 10,
    StorageCounterTypeStartStopCycleCountMax = 11,
    StorageCounterTypeLoadUnloadCycleCount = 12,
    StorageCounterTypeLoadUnloadCycleCountMax = 13,
    StorageCounterTypeWearPercentage = 14,
    StorageCounterTypeWearPercentageWarning = 15,
    StorageCounterTypeWearPercentageMax = 16,
    StorageCounterTypePowerOnHours = 17,
    StorageCounterTypeReadLatency100NSMax = 18,
    StorageCounterTypeWriteLatency100NSMax = 19,
    StorageCounterTypeFlushLatency100NSMax = 20,
    StorageCounterTypeMax = 21,
};
enum _RPC_NOTIFICATION_TYPES
{
    RpcNotificationTypeNone = 0,
    RpcNotificationTypeEvent = 1,
    RpcNotificationTypeApc = 2,
    RpcNotificationTypeIoc = 3,
    RpcNotificationTypeHwnd = 4,
    RpcNotificationTypeCallback = 5,
};
enum __MIDL_IInternetZoneManager_0002
{
    ZAFLAGS_CUSTOM_EDIT = 1,
    ZAFLAGS_ADD_SITES = 2,
    ZAFLAGS_REQUIRE_VERIFICATION = 4,
    ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 8,
    ZAFLAGS_INCLUDE_INTRANET_SITES = 16,
    ZAFLAGS_NO_UI = 32,
    ZAFLAGS_SUPPORTS_VERIFICATION = 64,
    ZAFLAGS_UNC_AS_INTRANET = 128,
    ZAFLAGS_DETECT_INTRANET = 256,
    ZAFLAGS_USE_LOCKED_ZONES = 65536,
    ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 131072,
    ZAFLAGS_NO_CACHE = 262144,
};
enum _LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION
{
    MarshalDirectionMarshal = 0,
    MarshalDirectionUnmarshal = 1,
};
enum _SCM_PD_LAST_FW_ACTIVATION_STATUS
{
    ScmPdLastFwActivationStatus_None = 0,
    ScmPdLastFwActivationStatus_Success = 1,
    ScmPdLastFwActivationStatus_FwNotFound = 2,
    ScmPdLastFwActivationStatus_ColdRebootRequired = 3,
    ScmPdLastFwActivaitonStatus_ActivationInProgress = 4,
    ScmPdLastFwActivaitonStatus_Retry = 5,
    ScmPdLastFwActivaitonStatus_FwUnsupported = 6,
    ScmPdLastFwActivaitonStatus_UnknownError = 7,
};
enum _PARTITION_STYLE
{
    PARTITION_STYLE_MBR = 0,
    PARTITION_STYLE_GPT = 1,
    PARTITION_STYLE_RAW = 2,
};
enum _SCM_BUS_QUERY_TYPE
{
    ScmBusQuery_Descriptor = 0,
    ScmBusQuery_IsSupported = 1,
    ScmBusQuery_Max = 2,
};
enum _SCM_BUS_SET_TYPE
{
    ScmBusSet_Descriptor = 0,
    ScmBusSet_IsSupported = 1,
    ScmBusSet_Max = 2,
};
enum _SCM_BUS_PROPERTY_ID
{
    ScmBusProperty_RuntimeFwActivationInfo = 0,
    ScmBusProperty_DedicatedMemoryInfo = 1,
    ScmBusProperty_DedicatedMemoryState = 2,
    ScmBusProperty_Max = 3,
};
enum _SCM_PD_OPERATIONAL_STATUS
{
    ScmPhysicalDeviceOpStatus_Unknown = 0,
    ScmPhysicalDeviceOpStatus_Ok = 1,
    ScmPhysicalDeviceOpStatus_PredictingFailure = 2,
    ScmPhysicalDeviceOpStatus_InService = 3,
    ScmPhysicalDeviceOpStatus_HardwareError = 4,
    ScmPhysicalDeviceOpStatus_NotUsable = 5,
    ScmPhysicalDeviceOpStatus_TransientError = 6,
    ScmPhysicalDeviceOpStatus_Missing = 7,
    ScmPhysicalDeviceOpStatus_Max = 8,
};
enum _SCM_PD_QUERY_TYPE
{
    ScmPhysicalDeviceQuery_Descriptor = 0,
    ScmPhysicalDeviceQuery_IsSupported = 1,
    ScmPhysicalDeviceQuery_Max = 2,
};
enum _SCM_PD_SET_TYPE
{
    ScmPhysicalDeviceSet_Descriptor = 0,
    ScmPhysicalDeviceSet_IsSupported = 1,
    ScmPhysicalDeviceSet_Max = 2,
};
enum _MUTANT_INFORMATION_CLASS
{
    MutantBasicInformation = 0,
    MutantOwnerInformation = 1,
};
enum _SCM_PD_OPERATIONAL_STATUS_REASON
{
    ScmPhysicalDeviceOpReason_Unknown = 0,
    ScmPhysicalDeviceOpReason_Media = 1,
    ScmPhysicalDeviceOpReason_ThresholdExceeded = 2,
    ScmPhysicalDeviceOpReason_LostData = 3,
    ScmPhysicalDeviceOpReason_EnergySource = 4,
    ScmPhysicalDeviceOpReason_Configuration = 5,
    ScmPhysicalDeviceOpReason_DeviceController = 6,
    ScmPhysicalDeviceOpReason_MediaController = 7,
    ScmPhysicalDeviceOpReason_Component = 8,
    ScmPhysicalDeviceOpReason_BackgroundOperation = 9,
    ScmPhysicalDeviceOpReason_InvalidFirmware = 10,
    ScmPhysicalDeviceOpReason_HealthCheck = 11,
    ScmPhysicalDeviceOpReason_LostDataPersistence = 12,
    ScmPhysicalDeviceOpReason_DisabledByPlatform = 13,
    ScmPhysicalDeviceOpReason_PermanentError = 14,
    ScmPhysicalDeviceOpReason_LostWritePersistence = 15,
    ScmPhysicalDeviceOpReason_FatalError = 16,
    ScmPhysicalDeviceOpReason_DataPersistenceLossImminent = 17,
    ScmPhysicalDeviceOpReason_WritePersistenceLossImminent = 18,
    ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock = 19,
    ScmPhysicalDeviceOpReason_PerformanceDegradation = 20,
    ScmPhysicalDeviceOpReason_ExcessiveTemperature = 21,
    ScmPhysicalDeviceOpReason_InternalFailure = 22,
    ScmPhysicalDeviceOpReason_Max = 23,
};
enum _DUPLICATE_EXTENTS_STATE
{
    FileSnapStateInactive = 0,
    FileSnapStateSource = 1,
    FileSnapStateTarget = 2,
};
enum _SCM_PD_FIRMWARE_ACTIVATION_STATE
{
    ScmPdFirmwareActivationState_Idle = 0,
    ScmPdFirmwareActivationState_Armed = 1,
    ScmPdFirmwareActivationState_Busy = 2,
};
enum _tagOIBDG_FLAGS
{
    OIBDG_APARTMENTTHREADED = 256,
    OIBDG_DATAONLY = 4096,
};
enum _tagQUERYOPTION
{
    QUERY_EXPIRATION_DATE = 1,
    QUERY_TIME_OF_LAST_CHANGE = 2,
    QUERY_CONTENT_ENCODING = 3,
    QUERY_CONTENT_TYPE = 4,
    QUERY_REFRESH = 5,
    QUERY_RECOMBINE = 6,
    QUERY_CAN_NAVIGATE = 7,
    QUERY_USES_NETWORK = 8,
    QUERY_IS_CACHED = 9,
    QUERY_IS_INSTALLEDENTRY = 10,
    QUERY_IS_CACHED_OR_MAPPED = 11,
    QUERY_USES_CACHE = 12,
    QUERY_IS_SECURE = 13,
    QUERY_IS_SAFE = 14,
    QUERY_USES_HISTORYFOLDER = 15,
    QUERY_IS_CACHED_AND_USABLE_OFFLINE = 16,
};
enum _MEDIA_TYPE
{
    Unknown = 0,
    F5_1Pt2_512 = 1,
    F3_1Pt44_512 = 2,
    F3_2Pt88_512 = 3,
    F3_20Pt8_512 = 4,
    F3_720_512 = 5,
    F5_360_512 = 6,
    F5_320_512 = 7,
    F5_320_1024 = 8,
    F5_180_512 = 9,
    F5_160_512 = 10,
    RemovableMedia = 11,
    FixedMedia = 12,
    F3_120M_512 = 13,
    F3_640_512 = 14,
    F5_640_512 = 15,
    F5_720_512 = 16,
    F3_1Pt2_512 = 17,
    F3_1Pt23_1024 = 18,
    F5_1Pt23_1024 = 19,
    F3_128Mb_512 = 20,
    F3_230Mb_512 = 21,
    F8_256_128 = 22,
    F3_200Mb_512 = 23,
    F3_240M_512 = 24,
    F3_32M_512 = 25,
};
enum __MIDL_IBindStatusCallback_0006
{
    BSCF_FIRSTDATANOTIFICATION = 1,
    BSCF_INTERMEDIATEDATANOTIFICATION = 2,
    BSCF_LASTDATANOTIFICATION = 4,
    BSCF_DATAFULLYAVAILABLE = 8,
    BSCF_AVAILABLEDATASIZEUNKNOWN = 16,
    BSCF_SKIPDRAINDATAFORFILEURLS = 32,
    BSCF_64BITLENGTHDOWNLOAD = 64,
};
enum ETW_PROCESS_TRACE_MODES
{
    ETW_PROCESS_TRACE_MODE_NONE = 0,
    ETW_PROCESS_TRACE_MODE_RAW_TIMESTAMP = 1,
};
enum _BIN_TYPES
{
    RequestSize = 0,
    RequestLocation = 1,
};
enum _ELEMENT_TYPE
{
    AllElements = 0,
    ChangerTransport = 1,
    ChangerSlot = 2,
    ChangerIEPort = 3,
    ChangerDrive = 4,
    ChangerDoor = 5,
    ChangerKeypad = 6,
    ChangerMaxElement = 7,
};
enum tagOLEGETMONIKER
{
    OLEGETMONIKER_ONLYIFTHERE = 1,
    OLEGETMONIKER_FORCEASSIGN = 2,
    OLEGETMONIKER_UNASSIGN = 3,
    OLEGETMONIKER_TEMPFORUSER = 4,
};
enum _tagPI_FLAGS
{
    PI_PARSE_URL = 1,
    PI_FILTER_MODE = 2,
    PI_FORCE_ASYNC = 4,
    PI_USE_WORKERTHREAD = 8,
    PI_MIMEVERIFICATION = 16,
    PI_CLSIDLOOKUP = 32,
    PI_DATAPROGRESS = 64,
    PI_SYNCHRONOUS = 128,
    PI_APARTMENTTHREADED = 256,
    PI_CLASSINSTALL = 512,
    PI_PASSONBINDCTX = 8192,
    PI_NOMIMEHANDLER = 32768,
    PI_LOADAPPDIRECT = 16384,
    PD_FORCE_SWITCH = 65536,
    PI_PREFERDEFAULTHANDLER = 131072,
};
enum _TRACE_QUERY_INFO_CLASS
{
    TraceGuidQueryList = 0,
    TraceGuidQueryInfo = 1,
    TraceGuidQueryProcess = 2,
    TraceStackTracingInfo = 3,
    TraceSystemTraceEnableFlagsInfo = 4,
    TraceSampledProfileIntervalInfo = 5,
    TraceProfileSourceConfigInfo = 6,
    TraceProfileSourceListInfo = 7,
    TracePmcEventListInfo = 8,
    TracePmcCounterListInfo = 9,
    TraceSetDisallowList = 10,
    TraceVersionInfo = 11,
    TraceGroupQueryList = 12,
    TraceGroupQueryInfo = 13,
    TraceDisallowListQuery = 14,
    TraceInfoReserved15 = 15,
    TracePeriodicCaptureStateListInfo = 16,
    TracePeriodicCaptureStateInfo = 17,
    TraceProviderBinaryTracking = 18,
    TraceMaxLoggersQuery = 19,
    TraceLbrConfigurationInfo = 20,
    TraceLbrEventListInfo = 21,
    TraceMaxPmcCounterQuery = 22,
    TraceStreamCount = 23,
    TraceStackCachingInfo = 24,
    TracePmcCounterOwners = 25,
    TraceUnifiedStackCachingInfo = 26,
    TracePmcSessionInformation = 27,
    MaxTraceSetInfoClass = 28,
};
enum __MIDL_IBindStatusCallback_0004
{
    URL_ENCODING_NONE = 0,
    URL_ENCODING_ENABLE_UTF8 = 268435456,
    URL_ENCODING_DISABLE_UTF8 = 536870912,
};
enum _FS_BPIO_OUTFLAGS
{
    FSBPIO_OUTFL_None = 0,
    FSBPIO_OUTFL_VOLUME_STACK_BYPASS_PAUSED = 1,
    FSBPIO_OUTFL_STREAM_BYPASS_PAUSED = 2,
    FSBPIO_OUTFL_FILTER_ATTACH_BLOCKED = 4,
    FSBPIO_OUTFL_COMPATIBLE_STORAGE_DRIVER = 8,
};
enum _FS_BPIO_INFLAGS
{
    FSBPIO_INFL_None = 0,
    FSBPIO_INFL_SKIP_STORAGE_STACK_QUERY = 1,
};
enum _MINIDUMP_SECONDARY_FLAGS
{
    MiniSecondaryWithoutPowerInfo = 1,
    MiniSecondaryValidFlags = 1,
};
enum tagRpcCallClientLocality
{
    rcclInvalid = 0,
    rcclLocal = 1,
    rcclRemote = 2,
    rcclClientUnknownLocality = 3,
};
enum _CSVFS_DISK_CONNECTIVITY
{
    CsvFsDiskConnectivityNone = 0,
    CsvFsDiskConnectivityMdsNodeOnly = 1,
    CsvFsDiskConnectivitySubsetOfNodes = 2,
    CsvFsDiskConnectivityAllNodes = 3,
};
enum tagFUNCKIND
{
    FUNC_VIRTUAL = 0,
    FUNC_PUREVIRTUAL = 1,
    FUNC_NONVIRTUAL = 2,
    FUNC_STATIC = 3,
    FUNC_DISPATCH = 4,
};
enum _LMR_QUERY_INFO_CLASS
{
    LMRQuerySessionInfo = 1,
};
enum _STORAGE_RESERVE_ID
{
    StorageReserveIdNone = 0,
    StorageReserveIdHard = 1,
    StorageReserveIdSoft = 2,
    StorageReserveIdUpdateScratch = 3,
    StorageReserveIdMax = 4,
};
enum _QUERY_FILE_LAYOUT_FILTER_TYPE
{
    QUERY_FILE_LAYOUT_FILTER_TYPE_NONE = 0,
    QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS = 1,
    QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID = 2,
    QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID = 3,
    QUERY_FILE_LAYOUT_NUM_FILTER_TYPES = 4,
};
enum _THREAD_WRITE_FLAGS
{
    ThreadWriteThread = 1,
    ThreadWriteStack = 2,
    ThreadWriteContext = 4,
    ThreadWriteBackingStore = 8,
    ThreadWriteInstructionWindow = 16,
    ThreadWriteThreadData = 32,
    ThreadWriteThreadInfo = 64,
};
enum _RPC_ASYNC_EVENT
{
    RpcCallComplete = 0,
    RpcSendComplete = 1,
    RpcReceiveComplete = 2,
    RpcClientDisconnect = 3,
    RpcClientCancel = 4,
};
enum _FILE_STORAGE_TIER_MEDIA_TYPE
{
    FileStorageTierMediaTypeUnspecified = 0,
    FileStorageTierMediaTypeDisk = 1,
    FileStorageTierMediaTypeSsd = 2,
    FileStorageTierMediaTypeScm = 4,
    FileStorageTierMediaTypeMax = 5,
};
enum _REFS_SMR_VOLUME_GC_STATE
{
    SmrGcStateInactive = 0,
    SmrGcStatePaused = 1,
    SmrGcStateActive = 2,
    SmrGcStateActiveFullSpeed = 3,
};
enum _REFS_SMR_VOLUME_GC_ACTION
{
    SmrGcActionStart = 1,
    SmrGcActionStartFullSpeed = 2,
    SmrGcActionPause = 3,
    SmrGcActionStop = 4,
};
enum _MINIDUMP_STREAM_TYPE
{
    UnusedStream = 0,
    ReservedStream0 = 1,
    ReservedStream1 = 2,
    ThreadListStream = 3,
    ModuleListStream = 4,
    MemoryListStream = 5,
    ExceptionStream = 6,
    SystemInfoStream = 7,
    ThreadExListStream = 8,
    Memory64ListStream = 9,
    CommentStreamA = 10,
    CommentStreamW = 11,
    HandleDataStream = 12,
    FunctionTableStream = 13,
    UnloadedModuleListStream = 14,
    MiscInfoStream = 15,
    MemoryInfoListStream = 16,
    ThreadInfoListStream = 17,
    HandleOperationListStream = 18,
    TokenStream = 19,
    JavaScriptDataStream = 20,
    SystemMemoryInfoStream = 21,
    ProcessVmCountersStream = 22,
    IptTraceStream = 23,
    ThreadNamesStream = 24,
    ceStreamNull = 32768,
    ceStreamSystemInfo = 32769,
    ceStreamException = 32770,
    ceStreamModuleList = 32771,
    ceStreamProcessList = 32772,
    ceStreamThreadList = 32773,
    ceStreamThreadContextList = 32774,
    ceStreamThreadCallStackList = 32775,
    ceStreamMemoryVirtualList = 32776,
    ceStreamMemoryPhysicalList = 32777,
    ceStreamBucketParameters = 32778,
    ceStreamProcessModuleMap = 32779,
    ceStreamDiagnosisList = 32780,
    LastReservedStream = 65535,
};
enum _REFS_SMR_VOLUME_GC_METHOD
{
    SmrGcMethodCompaction = 1,
    SmrGcMethodCompression = 2,
    SmrGcMethodRotation = 3,
};
enum _FS_BPIO_OPERATIONS
{
    FS_BPIO_OP_ENABLE = 1,
    FS_BPIO_OP_DISABLE = 2,
    FS_BPIO_OP_QUERY = 3,
    FS_BPIO_OP_VOLUME_STACK_PAUSE = 4,
    FS_BPIO_OP_VOLUME_STACK_RESUME = 5,
    FS_BPIO_OP_STREAM_PAUSE = 6,
    FS_BPIO_OP_STREAM_RESUME = 7,
    FS_BPIO_OP_GET_INFO = 8,
    FS_BPIO_OP_MAX_OPERATION = 9,
};
enum _VIRTUAL_STORAGE_BEHAVIOR_CODE
{
    VirtualStorageBehaviorUndefined = 0,
    VirtualStorageBehaviorCacheWriteThrough = 1,
    VirtualStorageBehaviorCacheWriteBack = 2,
    VirtualStorageBehaviorStopIoProcessing = 3,
    VirtualStorageBehaviorRestartIoProcessing = 4,
};
enum tagRpcCallType
{
    rctInvalid = 0,
    rctNormal = 1,
    rctTraining = 2,
    rctGuaranteed = 3,
};
enum XLAT_SIDE
{
    XLAT_SERVER = 1,
    XLAT_CLIENT = 2,
};
enum
{
    MidlInterceptionInfoVersionOne = 1,
};
enum _MINIDUMP_CALLBACK_TYPE
{
    ModuleCallback = 0,
    ThreadCallback = 1,
    ThreadExCallback = 2,
    IncludeThreadCallback = 3,
    IncludeModuleCallback = 4,
    MemoryCallback = 5,
    CancelCallback = 6,
    WriteKernelMinidumpCallback = 7,
    KernelMinidumpStatusCallback = 8,
    RemoveMemoryCallback = 9,
    IncludeVmRegionCallback = 10,
    IoStartCallback = 11,
    IoWriteAllCallback = 12,
    IoFinishCallback = 13,
    ReadMemoryFailureCallback = 14,
    SecondaryFlagsCallback = 15,
    IsProcessSnapshotCallback = 16,
    VmStartCallback = 17,
    VmQueryCallback = 18,
    VmPreReadCallback = 19,
    VmPostReadCallback = 20,
};
enum WMIDPREQUESTCODE
{
    WMI_GET_ALL_DATA = 0,
    WMI_GET_SINGLE_INSTANCE = 1,
    WMI_SET_SINGLE_INSTANCE = 2,
    WMI_SET_SINGLE_ITEM = 3,
    WMI_ENABLE_EVENTS = 4,
    WMI_DISABLE_EVENTS = 5,
    WMI_ENABLE_COLLECTION = 6,
    WMI_DISABLE_COLLECTION = 7,
    WMI_REGINFO = 8,
    WMI_EXECUTE_METHOD = 9,
    WMI_CAPTURE_STATE = 10,
};
enum ETW_COMPRESSION_RESUMPTION_MODE
{
    EtwCompressionModeRestart = 0,
    EtwCompressionModeNoDisable = 1,
    EtwCompressionModeNoRestart = 2,
};
enum tagDATADIR
{
    DATADIR_GET = 1,
    DATADIR_SET = 2,
};
enum _ETW_PMC_COUNTER_OWNER_TYPE
{
    EtwPmcOwnerFree = 0,
    EtwPmcOwnerUntagged = 1,
    EtwPmcOwnerTagged = 2,
    EtwPmcOwnerTaggedWithSource = 3,
};
enum tagBIND_FLAGS
{
    BIND_MAYBOTHERUSER = 1,
    BIND_JUSTTESTEXISTENCE = 2,
};
enum _ETW_PROCESS_HANDLE_INFO_TYPE
{
    EtwQueryPartitionInformation = 1,
    EtwQueryPartitionInformationV2 = 2,
    EtwQueryLastDroppedTimes = 3,
    EtwQueryLogFileHeader = 4,
    EtwQueryProcessHandleInfoMax = 5,
};
enum tagSYSKIND
{
    SYS_WIN16 = 0,
    SYS_WIN32 = 1,
    SYS_MAC = 2,
    SYS_WIN64 = 3,
};
enum tagRpcLocalAddressFormat
{
    rlafInvalid = 0,
    rlafIPv4 = 1,
    rlafIPv6 = 2,
};
enum tagExtendedErrorParamTypes
{
    eeptAnsiString = 1,
    eeptUnicodeString = 2,
    eeptLongVal = 3,
    eeptShortVal = 4,
    eeptPointerVal = 5,
    eeptNone = 6,
    eeptBinary = 7,
};
enum RpcProxyPerfCounters
{
    RpcCurrentUniqueUser = 1,
    RpcBackEndConnectionAttempts = 2,
    RpcBackEndConnectionFailed = 3,
    RpcRequestsPerSecond = 4,
    RpcIncomingConnections = 5,
    RpcIncomingBandwidth = 6,
    RpcOutgoingBandwidth = 7,
    RpcAttemptedLbsDecisions = 8,
    RpcFailedLbsDecisions = 9,
    RpcAttemptedLbsMessages = 10,
    RpcFailedLbsMessages = 11,
    RpcLastCounter = 12,
};
enum _MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE
{
    MiniHandleObjectInformationNone = 0,
    MiniThreadInformation1 = 1,
    MiniMutantInformation1 = 2,
    MiniMutantInformation2 = 3,
    MiniProcessInformation1 = 4,
    MiniProcessInformation2 = 5,
    MiniEventInformation1 = 6,
    MiniSectionInformation1 = 7,
    MiniSemaphoreInformation1 = 8,
    MiniHandleObjectInformationTypeMax = 9,
};
enum _MODULE_WRITE_FLAGS
{
    ModuleWriteModule = 1,
    ModuleWriteDataSeg = 2,
    ModuleWriteMiscRecord = 4,
    ModuleWriteCvRecord = 8,
    ModuleReferencedByMemory = 16,
    ModuleWriteTlsData = 32,
    ModuleWriteCodeSegs = 64,
};
enum _MINIDUMP_TYPE
{
    MiniDumpNormal = 0,
    MiniDumpWithDataSegs = 1,
    MiniDumpWithFullMemory = 2,
    MiniDumpWithHandleData = 4,
    MiniDumpFilterMemory = 8,
    MiniDumpScanMemory = 16,
    MiniDumpWithUnloadedModules = 32,
    MiniDumpWithIndirectlyReferencedMemory = 64,
    MiniDumpFilterModulePaths = 128,
    MiniDumpWithProcessThreadData = 256,
    MiniDumpWithPrivateReadWriteMemory = 512,
    MiniDumpWithoutOptionalData = 1024,
    MiniDumpWithFullMemoryInfo = 2048,
    MiniDumpWithThreadInfo = 4096,
    MiniDumpWithCodeSegs = 8192,
    MiniDumpWithoutAuxiliaryState = 16384,
    MiniDumpWithFullAuxiliaryState = 32768,
    MiniDumpWithPrivateWriteCopyMemory = 65536,
    MiniDumpIgnoreInaccessibleMemory = 131072,
    MiniDumpWithTokenInformation = 262144,
    MiniDumpWithModuleHeaders = 524288,
    MiniDumpFilterTriage = 1048576,
    MiniDumpWithAvxXStateContext = 2097152,
    MiniDumpWithIptTrace = 4194304,
    MiniDumpScanInaccessiblePartialPages = 8388608,
    MiniDumpFilterWriteCombinedMemory = 16777216,
    MiniDumpValidTypeFlags = 33554431,
};
enum _RPC_HTTP_REDIRECTOR_STAGE
{
    RPCHTTP_RS_REDIRECT = 1,
    RPCHTTP_RS_ACCESS_1 = 2,
    RPCHTTP_RS_SESSION = 3,
    RPCHTTP_RS_ACCESS_2 = 4,
    RPCHTTP_RS_INTERFACE = 5,
};
enum RPC_ADDRESS_CHANGE_TYPE
{
    PROTOCOL_NOT_LOADED = 1,
    PROTOCOL_LOADED = 2,
    PROTOCOL_ADDRESS_CHANGE = 3,
};
enum tagEXTCONN
{
    EXTCONN_STRONG = 1,
    EXTCONN_WEAK = 2,
    EXTCONN_CALLABLE = 4,
};
enum tagSTGMOVE
{
    STGMOVE_MOVE = 0,
    STGMOVE_COPY = 1,
    STGMOVE_SHALLOWCOPY = 2,
};
enum _USER_MARSHAL_CB_TYPE
{
    USER_MARSHAL_CB_BUFFER_SIZE = 0,
    USER_MARSHAL_CB_MARSHALL = 1,
    USER_MARSHAL_CB_UNMARSHALL = 2,
    USER_MARSHAL_CB_FREE = 3,
};
enum _IDL_CS_CONVERT
{
    IDL_CS_NO_CONVERT = 0,
    IDL_CS_IN_PLACE_CONVERT = 1,
    IDL_CS_NEW_BUFFER_CONVERT = 2,
};
enum tagSF_TYPE
{
    SF_ERROR = 10,
    SF_I1 = 16,
    SF_I2 = 2,
    SF_I4 = 3,
    SF_I8 = 20,
    SF_BSTR = 8,
    SF_UNKNOWN = 13,
    SF_DISPATCH = 9,
    SF_VARIANT = 12,
    SF_RECORD = 36,
    SF_HAVEIID = 32781,
};
enum _system_handle_t
{
    SYSTEM_HANDLE_FILE = 0,
    SYSTEM_HANDLE_SEMAPHORE = 1,
    SYSTEM_HANDLE_EVENT = 2,
    SYSTEM_HANDLE_MUTEX = 3,
    SYSTEM_HANDLE_PROCESS = 4,
    SYSTEM_HANDLE_TOKEN = 5,
    SYSTEM_HANDLE_SECTION = 6,
    SYSTEM_HANDLE_REG_KEY = 7,
    SYSTEM_HANDLE_THREAD = 8,
    SYSTEM_HANDLE_COMPOSITION_OBJECT = 9,
    SYSTEM_HANDLE_SOCKET = 10,
    SYSTEM_HANDLE_JOB = 11,
    SYSTEM_HANDLE_PIPE = 12,
    SYSTEM_HANDLE_MAX = 12,
    SYSTEM_HANDLE_INVALID = 255,
};
enum
{
    MidlWinrtTypeSerializationInfoVersionOne = 1,
};
enum tagDESCKIND
{
    DESCKIND_NONE = 0,
    DESCKIND_FUNCDESC = 1,
    DESCKIND_VARDESC = 2,
    DESCKIND_TYPECOMP = 3,
    DESCKIND_IMPLICITAPPOBJ = 4,
    DESCKIND_MAX = 5,
};
enum STUB_PHASE
{
    STUB_UNMARSHAL = 0,
    STUB_CALL_SERVER = 1,
    STUB_MARSHAL = 2,
    STUB_CALL_SERVER_NO_HRESULT = 3,
};
enum PROXY_PHASE
{
    PROXY_CALCSIZE = 0,
    PROXY_GETBUFFER = 1,
    PROXY_MARSHAL = 2,
    PROXY_SENDRECEIVE = 3,
    PROXY_UNMARSHAL = 4,
};
enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES
{
    COMGLB_UNMARSHALING_POLICY_NORMAL = 0,
    COMGLB_UNMARSHALING_POLICY_STRONG = 1,
    COMGLB_UNMARSHALING_POLICY_HYBRID = 2,
};
enum tagDCOM_CALL_STATE
{
    DCOM_NONE = 0,
    DCOM_CALL_COMPLETE = 1,
    DCOM_CALL_CANCELED = 2,
};
enum tagREGCLS
{
    REGCLS_SINGLEUSE = 0,
    REGCLS_MULTIPLEUSE = 1,
    REGCLS_MULTI_SEPARATE = 2,
    REGCLS_SUSPENDED = 4,
    REGCLS_SURROGATE = 8,
    REGCLS_AGILE = 16,
};
enum tagMKREDUCE
{
    MKRREDUCE_ONE = 196608,
    MKRREDUCE_TOUSER = 131072,
    MKRREDUCE_THROUGHUSER = 65536,
    MKRREDUCE_ALL = 0,
};
enum tagCOINITBASE
{
    COINITBASE_MULTITHREADED = 0,
};
enum tagGLOBALOPT_PROPERTIES
{
    COMGLB_EXCEPTION_HANDLING = 1,
    COMGLB_APPID = 2,
    COMGLB_RPC_THREADPOOL_SETTING = 3,
    COMGLB_RO_SETTINGS = 4,
    COMGLB_UNMARSHALING_POLICY = 5,
    COMGLB_PROPERTIES_RESERVED1 = 6,
    COMGLB_PROPERTIES_RESERVED2 = 7,
    COMGLB_PROPERTIES_RESERVED3 = 8,
};
enum _SYSTEM_FIRMWARE_TABLE_ACTION
{
    SystemFirmwareTableEnumerate = 0,
    SystemFirmwareTableGet = 1,
    SystemFirmwareTableMax = 2,
};
enum tagMEMCTX
{
    MEMCTX_TASK = 1,
    MEMCTX_SHARED = 2,
    MEMCTX_MACSYSTEM = 3,
    MEMCTX_UNKNOWN = -1,
    MEMCTX_SAME = -2,
};
enum tagCLSCTX
{
    CLSCTX_INPROC_SERVER = 1,
    CLSCTX_INPROC_HANDLER = 2,
    CLSCTX_LOCAL_SERVER = 4,
    CLSCTX_INPROC_SERVER16 = 8,
    CLSCTX_REMOTE_SERVER = 16,
    CLSCTX_INPROC_HANDLER16 = 32,
    CLSCTX_RESERVED1 = 64,
    CLSCTX_RESERVED2 = 128,
    CLSCTX_RESERVED3 = 256,
    CLSCTX_RESERVED4 = 512,
    CLSCTX_NO_CODE_DOWNLOAD = 1024,
    CLSCTX_RESERVED5 = 2048,
    CLSCTX_NO_CUSTOM_MARSHAL = 4096,
    CLSCTX_ENABLE_CODE_DOWNLOAD = 8192,
    CLSCTX_NO_FAILURE_LOG = 16384,
    CLSCTX_DISABLE_AAA = 32768,
    CLSCTX_ENABLE_AAA = 65536,
    CLSCTX_FROM_DEFAULT_CONTEXT = 131072,
    CLSCTX_ACTIVATE_X86_SERVER = 262144,
    CLSCTX_ACTIVATE_32_BIT_SERVER = 262144,
    CLSCTX_ACTIVATE_64_BIT_SERVER = 524288,
    CLSCTX_ENABLE_CLOAKING = 1048576,
    CLSCTX_APPCONTAINER = 4194304,
    CLSCTX_ACTIVATE_AAA_AS_IU = 8388608,
    CLSCTX_RESERVED6 = 16777216,
    CLSCTX_ACTIVATE_ARM32_SERVER = 33554432,
    CLSCTX_ALLOW_LOWER_TRUST_REGISTRATION = 67108864,
    CLSCTX_PS_DLL = -2147483648,
};
enum tagMSHLFLAGS
{
    MSHLFLAGS_NORMAL = 0,
    MSHLFLAGS_TABLESTRONG = 1,
    MSHLFLAGS_TABLEWEAK = 2,
    MSHLFLAGS_NOPING = 4,
    MSHLFLAGS_RESERVED1 = 8,
    MSHLFLAGS_RESERVED2 = 16,
    MSHLFLAGS_RESERVED3 = 32,
    MSHLFLAGS_RESERVED4 = 64,
};
enum _APTTYPE
{
    APTTYPE_CURRENT = -1,
    APTTYPE_STA = 0,
    APTTYPE_MTA = 1,
    APTTYPE_NA = 2,
    APTTYPE_MAINSTA = 3,
};
enum CWMO_FLAGS
{
    CWMO_DEFAULT = 0,
    CWMO_DISPATCH_CALLS = 1,
    CWMO_DISPATCH_WINDOW_MESSAGES = 2,
};
enum tagShutdownType
{
    IdleShutdown = 0,
    ForcedShutdown = 1,
};
enum tagCALLTYPE
{
    CALLTYPE_TOPLEVEL = 1,
    CALLTYPE_NESTED = 2,
    CALLTYPE_ASYNC = 3,
    CALLTYPE_TOPLEVEL_CALLPENDING = 4,
    CALLTYPE_ASYNC_CALLPENDING = 5,
};
enum VARENUM
{
    VT_EMPTY = 0,
    VT_NULL = 1,
    VT_I2 = 2,
    VT_I4 = 3,
    VT_R4 = 4,
    VT_R8 = 5,
    VT_CY = 6,
    VT_DATE = 7,
    VT_BSTR = 8,
    VT_DISPATCH = 9,
    VT_ERROR = 10,
    VT_BOOL = 11,
    VT_VARIANT = 12,
    VT_UNKNOWN = 13,
    VT_DECIMAL = 14,
    VT_I1 = 16,
    VT_UI1 = 17,
    VT_UI2 = 18,
    VT_UI4 = 19,
    VT_I8 = 20,
    VT_UI8 = 21,
    VT_INT = 22,
    VT_UINT = 23,
    VT_VOID = 24,
    VT_HRESULT = 25,
    VT_PTR = 26,
    VT_SAFEARRAY = 27,
    VT_CARRAY = 28,
    VT_USERDEFINED = 29,
    VT_LPSTR = 30,
    VT_LPWSTR = 31,
    VT_RECORD = 36,
    VT_INT_PTR = 37,
    VT_UINT_PTR = 38,
    VT_FILETIME = 64,
    VT_BLOB = 65,
    VT_STREAM = 66,
    VT_STORAGE = 67,
    VT_STREAMED_OBJECT = 68,
    VT_STORED_OBJECT = 69,
    VT_BLOB_OBJECT = 70,
    VT_CF = 71,
    VT_CLSID = 72,
    VT_VERSIONED_STREAM = 73,
    VT_BSTR_BLOB = 4095,
    VT_VECTOR = 4096,
    VT_ARRAY = 8192,
    VT_BYREF = 16384,
    VT_RESERVED = 32768,
    VT_ILLEGAL = 65535,
    VT_ILLEGALMASKED = 4095,
    VT_TYPEMASK = 4095,
};
enum _KPROFILE_SOURCE
{
    ProfileTime = 0,
    ProfileAlignmentFixup = 1,
    ProfileTotalIssues = 2,
    ProfilePipelineDry = 3,
    ProfileLoadInstructions = 4,
    ProfilePipelineFrozen = 5,
    ProfileBranchInstructions = 6,
    ProfileTotalNonissues = 7,
    ProfileDcacheMisses = 8,
    ProfileIcacheMisses = 9,
    ProfileCacheMisses = 10,
    ProfileBranchMispredictions = 11,
    ProfileStoreInstructions = 12,
    ProfileFpInstructions = 13,
    ProfileIntegerInstructions = 14,
    Profile2Issue = 15,
    Profile3Issue = 16,
    Profile4Issue = 17,
    ProfileSpecialInstructions = 18,
    ProfileTotalCycles = 19,
    ProfileIcacheIssues = 20,
    ProfileDcacheAccesses = 21,
    ProfileMemoryBarrierCycles = 22,
    ProfileLoadLinkedIssues = 23,
    ProfileMaximum = 24,
};
enum tagLIBFLAGS
{
    LIBFLAG_FRESTRICTED = 1,
    LIBFLAG_FCONTROL = 2,
    LIBFLAG_FHIDDEN = 4,
    LIBFLAG_FHASDISKIMAGE = 8,
};
enum tagMKSYS
{
    MKSYS_NONE = 0,
    MKSYS_GENERICCOMPOSITE = 1,
    MKSYS_FILEMONIKER = 2,
    MKSYS_ANTIMONIKER = 3,
    MKSYS_ITEMMONIKER = 4,
    MKSYS_POINTERMONIKER = 5,
    MKSYS_CLASSMONIKER = 7,
    MKSYS_OBJREFMONIKER = 8,
    MKSYS_SESSIONMONIKER = 9,
    MKSYS_LUAMONIKER = 10,
};
enum tagRPCOPT_SERVER_LOCALITY_VALUES
{
    SERVER_LOCALITY_PROCESS_LOCAL = 0,
    SERVER_LOCALITY_MACHINE_LOCAL = 1,
    SERVER_LOCALITY_REMOTE = 2,
};
enum tagGLOBALOPT_RO_FLAGS
{
    COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES = 1,
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES = 2,
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 4,
    COMGLB_FAST_RUNDOWN = 8,
    COMGLB_RESERVED1 = 16,
    COMGLB_RESERVED2 = 32,
    COMGLB_RESERVED3 = 64,
    COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES = 128,
    COMGLB_RESERVED4 = 256,
    COMGLB_RESERVED5 = 512,
    COMGLB_RESERVED6 = 1024,
};
enum _WNF_DATA_SCOPE
{
    WnfDataScopeSystem = 0,
    WnfDataScopeSession = 1,
    WnfDataScopeUser = 2,
    WnfDataScopeProcess = 3,
    WnfDataScopeMachine = 4,
    WnfDataScopePhysicalMachine = 5,
};
enum tagSTREAM_SEEK
{
    STREAM_SEEK_SET = 0,
    STREAM_SEEK_CUR = 1,
    STREAM_SEEK_END = 2,
};
enum tagCALLCONV
{
    CC_FASTCALL = 0,
    CC_CDECL = 1,
    CC_MSCPASCAL = 2,
    CC_PASCAL = 2,
    CC_MACPASCAL = 3,
    CC_STDCALL = 4,
    CC_FPFASTCALL = 5,
    CC_SYSCALL = 6,
    CC_MPWCDECL = 7,
    CC_MPWPASCAL = 8,
    CC_MAX = 9,
};
enum tagACTIVATIONTYPE
{
    ACTIVATIONTYPE_UNCATEGORIZED = 0,
    ACTIVATIONTYPE_FROM_MONIKER = 1,
    ACTIVATIONTYPE_FROM_DATA = 2,
    ACTIVATIONTYPE_FROM_STORAGE = 4,
    ACTIVATIONTYPE_FROM_STREAM = 8,
    ACTIVATIONTYPE_FROM_FILE = 16,
};
enum tagSTGTY
{
    STGTY_STORAGE = 1,
    STGTY_STREAM = 2,
    STGTY_LOCKBYTES = 3,
    STGTY_PROPERTY = 4,
};
enum tagLOCKTYPE
{
    LOCK_WRITE = 1,
    LOCK_EXCLUSIVE = 2,
    LOCK_ONLYONCE = 4,
};
enum tagEOLE_AUTHENTICATION_CAPABILITIES
{
    EOAC_NONE = 0,
    EOAC_MUTUAL_AUTH = 1,
    EOAC_STATIC_CLOAKING = 32,
    EOAC_DYNAMIC_CLOAKING = 64,
    EOAC_ANY_AUTHORITY = 128,
    EOAC_MAKE_FULLSIC = 256,
    EOAC_DEFAULT = 2048,
    EOAC_SECURE_REFS = 2,
    EOAC_ACCESS_CONTROL = 4,
    EOAC_APPID = 8,
    EOAC_DYNAMIC = 16,
    EOAC_REQUIRE_FULLSIC = 512,
    EOAC_AUTO_IMPERSONATE = 1024,
    EOAC_DISABLE_AAA = 4096,
    EOAC_NO_CUSTOM_MARSHAL = 8192,
    EOAC_RESERVED1 = 16384,
};
enum tagRPCOPT_PROPERTIES
{
    COMBND_RPCTIMEOUT = 1,
    COMBND_SERVER_LOCALITY = 2,
    COMBND_RESERVED1 = 4,
    COMBND_RESERVED2 = 5,
    COMBND_RESERVED3 = 8,
    COMBND_RESERVED4 = 16,
};
enum tagGLOBALOPT_EH_VALUES
{
    COMGLB_EXCEPTION_HANDLE = 0,
    COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1,
    COMGLB_EXCEPTION_DONOT_HANDLE = 1,
    COMGLB_EXCEPTION_DONOT_HANDLE_ANY = 2,
};
enum tagGLOBALOPT_RPCTP_VALUES
{
    COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0,
    COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 1,
};
enum tagCOINIT
{
    COINIT_APARTMENTTHREADED = 2,
    COINIT_MULTITHREADED = 0,
    COINIT_DISABLE_OLE1DDE = 4,
    COINIT_SPEED_OVER_MEMORY = 8,
};
enum _THDTYPE
{
    THDTYPE_BLOCKMESSAGES = 0,
    THDTYPE_PROCESSMESSAGES = 1,
};
enum tagOLEMISC
{
    OLEMISC_RECOMPOSEONRESIZE = 1,
    OLEMISC_ONLYICONIC = 2,
    OLEMISC_INSERTNOTREPLACE = 4,
    OLEMISC_STATIC = 8,
    OLEMISC_CANTLINKINSIDE = 16,
    OLEMISC_CANLINKBYOLE1 = 32,
    OLEMISC_ISLINKOBJECT = 64,
    OLEMISC_INSIDEOUT = 128,
    OLEMISC_ACTIVATEWHENVISIBLE = 256,
    OLEMISC_RENDERINGISDEVICEINDEPENDENT = 512,
    OLEMISC_INVISIBLEATRUNTIME = 1024,
    OLEMISC_ALWAYSRUN = 2048,
    OLEMISC_ACTSLIKEBUTTON = 4096,
    OLEMISC_ACTSLIKELABEL = 8192,
    OLEMISC_NOUIACTIVATE = 16384,
    OLEMISC_ALIGNABLE = 32768,
    OLEMISC_SIMPLEFRAME = 65536,
    OLEMISC_SETCLIENTSITEFIRST = 131072,
    OLEMISC_IMEMODE = 262144,
    OLEMISC_IGNOREACTIVATEWHENVISIBLE = 524288,
    OLEMISC_WANTSTOMENUMERGE = 1048576,
    OLEMISC_SUPPORTSMULTILEVELUNDO = 2097152,
};
enum CO_MARSHALING_CONTEXT_ATTRIBUTES
{
    CO_MARSHALING_SOURCE_IS_APP_CONTAINER = 0,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_1 = -2147483648,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_2 = -2147483647,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_3 = -2147483646,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_4 = -2147483645,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_5 = -2147483644,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_6 = -2147483643,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_7 = -2147483642,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_8 = -2147483641,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_9 = -2147483640,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_10 = -2147483639,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_11 = -2147483638,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_12 = -2147483637,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_13 = -2147483636,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_14 = -2147483635,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_15 = -2147483634,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_16 = -2147483633,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_17 = -2147483632,
    CO_MARSHALING_CONTEXT_ATTRIBUTE_RESERVED_18 = -2147483631,
};
enum tagSTDMSHLFLAGS
{
    SMEXF_SERVER = 1,
    SMEXF_HANDLER = 2,
};
enum tagCOWAIT_FLAGS
{
    COWAIT_DEFAULT = 0,
    COWAIT_WAITALL = 1,
    COWAIT_ALERTABLE = 2,
    COWAIT_INPUTAVAILABLE = 4,
    COWAIT_DISPATCH_CALLS = 8,
    COWAIT_DISPATCH_WINDOW_MESSAGES = 16,
};
enum AgileReferenceOptions
{
    AGILEREFERENCE_DEFAULT = 0,
    AGILEREFERENCE_DELAYEDMARSHAL = 1,
};
enum _WORKERFACTORYINFOCLASS
{
    WorkerFactoryTimeout = 0,
    WorkerFactoryRetryTimeout = 1,
    WorkerFactoryIdleTimeout = 2,
    WorkerFactoryBindingCount = 3,
    WorkerFactoryThreadMinimum = 4,
    WorkerFactoryThreadMaximum = 5,
    WorkerFactoryPaused = 6,
    WorkerFactoryBasicInformation = 7,
    WorkerFactoryAdjustThreadGoal = 8,
    WorkerFactoryCallbackType = 9,
    WorkerFactoryStackInformation = 10,
    WorkerFactoryThreadBasePriority = 11,
    WorkerFactoryTimeoutWaiters = 12,
    WorkerFactoryFlags = 13,
    WorkerFactoryThreadSoftMaximum = 14,
    WorkerFactoryThreadCpuSets = 15,
    MaxWorkerFactoryInfoClass = 16,
};
enum __MIDL_IInternetZoneManager_0001
{
    MAX_ZONE_PATH = 260,
    MAX_ZONE_DESCRIPTION = 200,
};
enum _EVENT_INFORMATION_CLASS
{
    EventBasicInformation = 0,
};
enum __MIDL_IInternetSecurityManager_0003
{
    SZM_CREATE = 0,
    SZM_DELETE = 1,
};
enum tagURLTEMPLATE
{
    URLTEMPLATE_CUSTOM = 0,
    URLTEMPLATE_PREDEFINED_MIN = 65536,
    URLTEMPLATE_LOW = 65536,
    URLTEMPLATE_MEDLOW = 66816,
    URLTEMPLATE_MEDIUM = 69632,
    URLTEMPLATE_MEDHIGH = 70912,
    URLTEMPLATE_HIGH = 73728,
    URLTEMPLATE_PREDEFINED_MAX = 131072,
};
enum _SYSTEM_INFORMATION_CLASS
{
    SystemBasicInformation = 0,
    SystemProcessorInformation = 1,
    SystemPerformanceInformation = 2,
    SystemTimeOfDayInformation = 3,
    SystemPathInformation = 4,
    SystemProcessInformation = 5,
    SystemCallCountInformation = 6,
    SystemDeviceInformation = 7,
    SystemProcessorPerformanceInformation = 8,
    SystemFlagsInformation = 9,
    SystemCallTimeInformation = 10,
    SystemModuleInformation = 11,
    SystemLocksInformation = 12,
    SystemStackTraceInformation = 13,
    SystemPagedPoolInformation = 14,
    SystemNonPagedPoolInformation = 15,
    SystemHandleInformation = 16,
    SystemObjectInformation = 17,
    SystemPageFileInformation = 18,
    SystemVdmInstemulInformation = 19,
    SystemVdmBopInformation = 20,
    SystemFileCacheInformation = 21,
    SystemPoolTagInformation = 22,
    SystemInterruptInformation = 23,
    SystemDpcBehaviorInformation = 24,
    SystemFullMemoryInformation = 25,
    SystemLoadGdiDriverInformation = 26,
    SystemUnloadGdiDriverInformation = 27,
    SystemTimeAdjustmentInformation = 28,
    SystemSummaryMemoryInformation = 29,
    SystemMirrorMemoryInformation = 30,
    SystemPerformanceTraceInformation = 31,
    SystemObsolete0 = 32,
    SystemExceptionInformation = 33,
    SystemCrashDumpStateInformation = 34,
    SystemKernelDebuggerInformation = 35,
    SystemContextSwitchInformation = 36,
    SystemRegistryQuotaInformation = 37,
    SystemExtendServiceTableInformation = 38,
    SystemPrioritySeparation = 39,
    SystemVerifierAddDriverInformation = 40,
    SystemVerifierRemoveDriverInformation = 41,
    SystemProcessorIdleInformation = 42,
    SystemLegacyDriverInformation = 43,
    SystemCurrentTimeZoneInformation = 44,
    SystemLookasideInformation = 45,
    SystemTimeSlipNotification = 46,
    SystemSessionCreate = 47,
    SystemSessionDetach = 48,
    SystemSessionInformation = 49,
    SystemRangeStartInformation = 50,
    SystemVerifierInformation = 51,
    SystemVerifierThunkExtend = 52,
    SystemSessionProcessInformation = 53,
    SystemLoadGdiDriverInSystemSpace = 54,
    SystemNumaProcessorMap = 55,
    SystemPrefetcherInformation = 56,
    SystemExtendedProcessInformation = 57,
    SystemRecommendedSharedDataAlignment = 58,
    SystemComPlusPackage = 59,
    SystemNumaAvailableMemory = 60,
    SystemProcessorPowerInformation = 61,
    SystemEmulationBasicInformation = 62,
    SystemEmulationProcessorInformation = 63,
    SystemExtendedHandleInformation = 64,
    SystemLostDelayedWriteInformation = 65,
    SystemBigPoolInformation = 66,
    SystemSessionPoolTagInformation = 67,
    SystemSessionMappedViewInformation = 68,
    SystemHotpatchInformation = 69,
    SystemObjectSecurityMode = 70,
    SystemWatchdogTimerHandler = 71,
    SystemWatchdogTimerInformation = 72,
    SystemLogicalProcessorInformation = 73,
    SystemWow64SharedInformationObsolete = 74,
    SystemRegisterFirmwareTableInformationHandler = 75,
    SystemFirmwareTableInformation = 76,
    SystemModuleInformationEx = 77,
    SystemVerifierTriageInformation = 78,
    SystemSuperfetchInformation = 79,
    SystemMemoryListInformation = 80,
    SystemFileCacheInformationEx = 81,
    SystemThreadPriorityClientIdInformation = 82,
    SystemProcessorIdleCycleTimeInformation = 83,
    SystemVerifierCancellationInformation = 84,
    SystemProcessorPowerInformationEx = 85,
    SystemRefTraceInformation = 86,
    SystemSpecialPoolInformation = 87,
    SystemProcessIdInformation = 88,
    SystemErrorPortInformation = 89,
    SystemBootEnvironmentInformation = 90,
    SystemHypervisorInformation = 91,
    SystemVerifierInformationEx = 92,
    SystemTimeZoneInformation = 93,
    SystemImageFileExecutionOptionsInformation = 94,
    SystemCoverageInformation = 95,
    SystemPrefetchPatchInformation = 96,
    SystemVerifierFaultsInformation = 97,
    SystemSystemPartitionInformation = 98,
    SystemSystemDiskInformation = 99,
    SystemProcessorPerformanceDistribution = 100,
    SystemNumaProximityNodeInformation = 101,
    SystemDynamicTimeZoneInformation = 102,
    SystemCodeIntegrityInformation = 103,
    SystemProcessorMicrocodeUpdateInformation = 104,
    SystemProcessorBrandString = 105,
    SystemVirtualAddressInformation = 106,
    SystemLogicalProcessorAndGroupInformation = 107,
    SystemProcessorCycleTimeInformation = 108,
    SystemStoreInformation = 109,
    SystemRegistryAppendString = 110,
    SystemAitSamplingValue = 111,
    SystemVhdBootInformation = 112,
    SystemCpuQuotaInformation = 113,
    SystemNativeBasicInformation = 114,
    SystemErrorPortTimeouts = 115,
    SystemLowPriorityIoInformation = 116,
    SystemTpmBootEntropyInformation = 117,
    SystemVerifierCountersInformation = 118,
    SystemPagedPoolInformationEx = 119,
    SystemSystemPtesInformationEx = 120,
    SystemNodeDistanceInformation = 121,
    SystemAcpiAuditInformation = 122,
    SystemBasicPerformanceInformation = 123,
    SystemQueryPerformanceCounterInformation = 124,
    SystemSessionBigPoolInformation = 125,
    SystemBootGraphicsInformation = 126,
    SystemScrubPhysicalMemoryInformation = 127,
    SystemBadPageInformation = 128,
    SystemProcessorProfileControlArea = 129,
    SystemCombinePhysicalMemoryInformation = 130,
    SystemEntropyInterruptTimingInformation = 131,
    SystemConsoleInformation = 132,
    SystemPlatformBinaryInformation = 133,
    SystemPolicyInformation = 134,
    SystemHypervisorProcessorCountInformation = 135,
    SystemDeviceDataInformation = 136,
    SystemDeviceDataEnumerationInformation = 137,
    SystemMemoryTopologyInformation = 138,
    SystemMemoryChannelInformation = 139,
    SystemBootLogoInformation = 140,
    SystemProcessorPerformanceInformationEx = 141,
    SystemCriticalProcessErrorLogInformation = 142,
    SystemSecureBootPolicyInformation = 143,
    SystemPageFileInformationEx = 144,
    SystemSecureBootInformation = 145,
    SystemEntropyInterruptTimingRawInformation = 146,
    SystemPortableWorkspaceEfiLauncherInformation = 147,
    SystemFullProcessInformation = 148,
    SystemKernelDebuggerInformationEx = 149,
    SystemBootMetadataInformation = 150,
    SystemSoftRebootInformation = 151,
    SystemElamCertificateInformation = 152,
    SystemOfflineDumpConfigInformation = 153,
    SystemProcessorFeaturesInformation = 154,
    SystemRegistryReconciliationInformation = 155,
    SystemEdidInformation = 156,
    SystemManufacturingInformation = 157,
    SystemEnergyEstimationConfigInformation = 158,
    SystemHypervisorDetailInformation = 159,
    SystemProcessorCycleStatsInformation = 160,
    SystemVmGenerationCountInformation = 161,
    SystemTrustedPlatformModuleInformation = 162,
    SystemKernelDebuggerFlags = 163,
    SystemCodeIntegrityPolicyInformation = 164,
    SystemIsolatedUserModeInformation = 165,
    SystemHardwareSecurityTestInterfaceResultsInformation = 166,
    SystemSingleModuleInformation = 167,
    SystemAllowedCpuSetsInformation = 168,
    SystemVsmProtectionInformation = 169,
    SystemInterruptCpuSetsInformation = 170,
    SystemSecureBootPolicyFullInformation = 171,
    SystemCodeIntegrityPolicyFullInformation = 172,
    SystemAffinitizedInterruptProcessorInformation = 173,
    SystemRootSiloInformation = 174,
    SystemCpuSetInformation = 175,
    SystemCpuSetTagInformation = 176,
    SystemWin32WerStartCallout = 177,
    SystemSecureKernelProfileInformation = 178,
    SystemCodeIntegrityPlatformManifestInformation = 179,
    SystemInterruptSteeringInformation = 180,
    SystemSupportedProcessorArchitectures = 181,
    SystemMemoryUsageInformation = 182,
    SystemCodeIntegrityCertificateInformation = 183,
    SystemPhysicalMemoryInformation = 184,
    SystemControlFlowTransition = 185,
    SystemKernelDebuggingAllowed = 186,
    SystemActivityModerationExeState = 187,
    SystemActivityModerationUserSettings = 188,
    SystemCodeIntegrityPoliciesFullInformation = 189,
    SystemCodeIntegrityUnlockInformation = 190,
    SystemIntegrityQuotaInformation = 191,
    SystemFlushInformation = 192,
    SystemProcessorIdleMaskInformation = 193,
    SystemSecureDumpEncryptionInformation = 194,
    SystemWriteConstraintInformation = 195,
    SystemKernelVaShadowInformation = 196,
    SystemHypervisorSharedPageInformation = 197,
    SystemFirmwareBootPerformanceInformation = 198,
    SystemCodeIntegrityVerificationInformation = 199,
    SystemFirmwarePartitionInformation = 200,
    SystemSpeculationControlInformation = 201,
    SystemDmaGuardPolicyInformation = 202,
    SystemEnclaveLaunchControlInformation = 203,
    SystemWorkloadAllowedCpuSetsInformation = 204,
    SystemCodeIntegrityUnlockModeInformation = 205,
    SystemLeapSecondInformation = 206,
    SystemFlags2Information = 207,
    SystemSecurityModelInformation = 208,
    SystemCodeIntegritySyntheticCacheInformation = 209,
    SystemFeatureConfigurationInformation = 210,
    SystemFeatureConfigurationSectionInformation = 211,
    SystemFeatureUsageSubscriptionInformation = 212,
    SystemSecureSpeculationControlInformation = 213,
    SystemSpacesBootInformation = 214,
    SystemFwRamdiskInformation = 215,
    SystemWheaIpmiHardwareInformation = 216,
    SystemDifSetRuleClassInformation = 217,
    SystemDifClearRuleClassInformation = 218,
    SystemDifApplyPluginVerificationOnDriver = 219,
    SystemDifRemovePluginVerificationOnDriver = 220,
    SystemShadowStackInformation = 221,
    SystemBuildVersionInformation = 222,
    SystemPoolLimitInformation = 223,
    SystemCodeIntegrityAddDynamicStore = 224,
    SystemCodeIntegrityClearDynamicStores = 225,
    SystemDifPoolTrackingInformation = 226,
    SystemPoolZeroingInformation = 227,
    SystemDpcWatchdogInformation = 228,
    SystemDpcWatchdogInformation2 = 229,
    SystemSupportedProcessorArchitectures2 = 230,
    SystemSingleProcessorRelationshipInformation = 231,
    SystemXfgCheckFailureInformation = 232,
    SystemIommuStateInformation = 233,
    SystemHypervisorMinrootInformation = 234,
    SystemHypervisorBootPagesInformation = 235,
    SystemPointerAuthInformation = 236,
    SystemSecureKernelDebuggerInformation = 237,
    SystemOriginalImageFeatureInformation = 238,
    SystemMemoryNumaInformation = 239,
    SystemMemoryNumaPerformanceInformation = 240,
    SystemCodeIntegritySignedPoliciesFullInformation = 241,
    SystemSecureCoreInformation = 242,
    SystemTrustedAppsRuntimeInformation = 243,
    SystemBadPageInformationEx = 244,
    SystemResourceDeadlockTimeout = 245,
    SystemBreakOnContextUnwindFailureInformation = 246,
    SystemOslRamdiskInformation = 247,
    MaxSystemInfoClass = 248,
};
enum _WATCHDOG_INFORMATION_CLASS
{
    WdInfoTimeoutValue = 0,
    WdInfoResetTimer = 1,
    WdInfoStopTimer = 2,
    WdInfoStartTimer = 3,
    WdInfoTriggerAction = 4,
    WdInfoState = 5,
    WdInfoTriggerReset = 6,
    WdInfoNop = 7,
    WdInfoGeneratedLastReset = 8,
    WdInfoInvalid = 9,
};
enum tagDVASPECT
{
    DVASPECT_CONTENT = 1,
    DVASPECT_THUMBNAIL = 2,
    DVASPECT_ICON = 4,
    DVASPECT_DOCPRINT = 8,
};
enum tagFUNCFLAGS
{
    FUNCFLAG_FRESTRICTED = 1,
    FUNCFLAG_FSOURCE = 2,
    FUNCFLAG_FBINDABLE = 4,
    FUNCFLAG_FREQUESTEDIT = 8,
    FUNCFLAG_FDISPLAYBIND = 16,
    FUNCFLAG_FDEFAULTBIND = 32,
    FUNCFLAG_FHIDDEN = 64,
    FUNCFLAG_FUSESGETLASTERROR = 128,
    FUNCFLAG_FDEFAULTCOLLELEM = 256,
    FUNCFLAG_FUIDEFAULT = 512,
    FUNCFLAG_FNONBROWSABLE = 1024,
    FUNCFLAG_FREPLACEABLE = 2048,
    FUNCFLAG_FIMMEDIATEBIND = 4096,
};
enum tagTYSPEC
{
    TYSPEC_CLSID = 0,
    TYSPEC_FILEEXT = 1,
    TYSPEC_MIMETYPE = 2,
    TYSPEC_FILENAME = 3,
    TYSPEC_PROGID = 4,
    TYSPEC_PACKAGENAME = 5,
    TYSPEC_OBJECTID = 6,
};
enum tagSTATFLAG
{
    STATFLAG_DEFAULT = 0,
    STATFLAG_NONAME = 1,
    STATFLAG_NOOPEN = 2,
};
enum tagCHANGEKIND
{
    CHANGEKIND_ADDMEMBER = 0,
    CHANGEKIND_DELETEMEMBER = 1,
    CHANGEKIND_SETNAMES = 2,
    CHANGEKIND_SETDOCUMENTATION = 3,
    CHANGEKIND_GENERAL = 4,
    CHANGEKIND_INVALIDATE = 5,
    CHANGEKIND_CHANGEFAILED = 6,
    CHANGEKIND_MAX = 7,
};
enum tagSERVERCALL
{
    SERVERCALL_ISHANDLED = 0,
    SERVERCALL_REJECTED = 1,
    SERVERCALL_RETRYLATER = 2,
};
enum tagVARKIND
{
    VAR_PERINSTANCE = 0,
    VAR_STATIC = 1,
    VAR_CONST = 2,
    VAR_DISPATCH = 3,
};
enum __MIDL_IBindStatusCallback_0005
{
    BINDINFO_OPTIONS_WININETFLAG = 65536,
    BINDINFO_OPTIONS_ENABLE_UTF8 = 131072,
    BINDINFO_OPTIONS_DISABLE_UTF8 = 262144,
    BINDINFO_OPTIONS_USE_IE_ENCODING = 524288,
    BINDINFO_OPTIONS_BINDTOOBJECT = 1048576,
    BINDINFO_OPTIONS_SECURITYOPTOUT = 2097152,
    BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN = 4194304,
    BINDINFO_OPTIONS_USEBINDSTRINGCREDS = 8388608,
    BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 16777216,
    BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE = 33554432,
    BINDINFO_WPC_DOWNLOADBLOCKED = 134217728,
    BINDINFO_WPC_LOGGING_ENABLED = 268435456,
    BINDINFO_OPTIONS_ALLOWCONNECTDATA = 536870912,
    BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS = 1073741824,
    BINDINFO_OPTIONS_SHDOCVW_NAVIGATE = -2147483648,
};
enum __MIDL_IInternetSecurityManager_0001
{
    PUAF_DEFAULT = 0,
    PUAF_NOUI = 1,
    PUAF_ISFILE = 2,
    PUAF_WARN_IF_DENIED = 4,
    PUAF_FORCEUI_FOREGROUND = 8,
    PUAF_CHECK_TIFS = 16,
    PUAF_DONTCHECKBOXINDIALOG = 32,
    PUAF_TRUSTED = 64,
    PUAF_ACCEPT_WILDCARD_SCHEME = 128,
    PUAF_ENFORCERESTRICTED = 256,
    PUAF_NOSAVEDFILECHECK = 512,
    PUAF_REQUIRESAVEDFILECHECK = 1024,
    PUAF_DONT_USE_CACHE = 4096,
    PUAF_RESERVED1 = 8192,
    PUAF_RESERVED2 = 16384,
    PUAF_LMZ_UNLOCKED = 65536,
    PUAF_LMZ_LOCKED = 131072,
    PUAF_DEFAULTZONEPOL = 262144,
    PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 524288,
    PUAF_NOUIIFLOCKED = 1048576,
    PUAF_DRAGPROTOCOLCHECK = 2097152,
};
enum _LDR_DLL_LOAD_REASON
{
    LoadReasonStaticDependency = 0,
    LoadReasonStaticForwarderDependency = 1,
    LoadReasonDynamicForwarderDependency = 2,
    LoadReasonDelayloadDependency = 3,
    LoadReasonDynamicLoad = 4,
    LoadReasonAsImageLoad = 5,
    LoadReasonAsDataLoad = 6,
    LoadReasonEnclavePrimary = 7,
    LoadReasonEnclaveDependency = 8,
    LoadReasonPatchImage = 9,
    LoadReasonUnknown = -1,
};
enum tagADVF
{
    ADVF_NODATA = 1,
    ADVF_PRIMEFIRST = 2,
    ADVF_ONLYONCE = 4,
    ADVF_DATAONSTOP = 64,
    ADVFCACHE_NOHANDLER = 8,
    ADVFCACHE_FORCEBUILTIN = 16,
    ADVFCACHE_ONSAVE = 32,
};
enum tagTYMED
{
    TYMED_HGLOBAL = 1,
    TYMED_FILE = 2,
    TYMED_ISTREAM = 4,
    TYMED_ISTORAGE = 8,
    TYMED_GDI = 16,
    TYMED_MFPICT = 32,
    TYMED_ENHMF = 64,
    TYMED_NULL = 0,
};
enum tagREGKIND
{
    REGKIND_DEFAULT = 0,
    REGKIND_REGISTER = 1,
    REGKIND_NONE = 2,
};
enum tagPENDINGTYPE
{
    PENDINGTYPE_TOPLEVEL = 1,
    PENDINGTYPE_NESTED = 2,
};
enum tagPENDINGMSG
{
    PENDINGMSG_CANCELCALL = 0,
    PENDINGMSG_WAITNOPROCESS = 1,
    PENDINGMSG_WAITDEFPROCESS = 2,
};
enum tagApplicationType
{
    ServerApplication = 0,
    LibraryApplication = 1,
};
enum tagDOMNodeType
{
    NODE_INVALID = 0,
    NODE_ELEMENT = 1,
    NODE_ATTRIBUTE = 2,
    NODE_TEXT = 3,
    NODE_CDATA_SECTION = 4,
    NODE_ENTITY_REFERENCE = 5,
    NODE_ENTITY = 6,
    NODE_PROCESSING_INSTRUCTION = 7,
    NODE_COMMENT = 8,
    NODE_DOCUMENT = 9,
    NODE_DOCUMENT_TYPE = 10,
    NODE_DOCUMENT_FRAGMENT = 11,
    NODE_NOTATION = 12,
};
enum tagTYPEFLAGS
{
    TYPEFLAG_FAPPOBJECT = 1,
    TYPEFLAG_FCANCREATE = 2,
    TYPEFLAG_FLICENSED = 4,
    TYPEFLAG_FPREDECLID = 8,
    TYPEFLAG_FHIDDEN = 16,
    TYPEFLAG_FCONTROL = 32,
    TYPEFLAG_FDUAL = 64,
    TYPEFLAG_FNONEXTENSIBLE = 128,
    TYPEFLAG_FOLEAUTOMATION = 256,
    TYPEFLAG_FRESTRICTED = 512,
    TYPEFLAG_FAGGREGATABLE = 1024,
    TYPEFLAG_FREPLACEABLE = 2048,
    TYPEFLAG_FDISPATCHABLE = 4096,
    TYPEFLAG_FREVERSEBIND = 8192,
    TYPEFLAG_FPROXY = 16384,
};
enum tagTYPEKIND
{
    TKIND_ENUM = 0,
    TKIND_RECORD = 1,
    TKIND_MODULE = 2,
    TKIND_INTERFACE = 3,
    TKIND_DISPATCH = 4,
    TKIND_COCLASS = 5,
    TKIND_ALIAS = 6,
    TKIND_UNION = 7,
    TKIND_MAX = 8,
};
enum tagDISCARDCACHE
{
    DISCARDCACHE_SAVEIFDIRTY = 0,
    DISCARDCACHE_NOSAVE = 1,
};
enum _KWAIT_REASON
{
    Executive = 0,
    FreePage = 1,
    PageIn = 2,
    PoolAllocation = 3,
    DelayExecution = 4,
    Suspended = 5,
    UserRequest = 6,
    WrExecutive = 7,
    WrFreePage = 8,
    WrPageIn = 9,
    WrPoolAllocation = 10,
    WrDelayExecution = 11,
    WrSuspended = 12,
    WrUserRequest = 13,
    WrEventPair = 14,
    WrQueue = 15,
    WrLpcReceive = 16,
    WrLpcReply = 17,
    WrVirtualMemory = 18,
    WrPageOut = 19,
    WrRendezvous = 20,
    WrKeyedEvent = 21,
    WrTerminated = 22,
    WrProcessInSwap = 23,
    WrCpuRateControl = 24,
    WrCalloutStack = 25,
    WrKernel = 26,
    WrResource = 27,
    WrPushLock = 28,
    WrMutex = 29,
    WrQuantumEnd = 30,
    WrDispatchInt = 31,
    WrPreempted = 32,
    WrYieldExecution = 33,
    WrFastMutex = 34,
    WrGuardedMutex = 35,
    WrRundown = 36,
    WrAlertByThreadId = 37,
    WrDeferredPreempt = 38,
    WrPhysicalFault = 39,
    WrIoRing = 40,
    WrMdlCache = 41,
    WrRcu = 42,
    MaximumWaitReason = 43,
};
enum tagINVOKEKIND
{
    INVOKE_FUNC = 1,
    INVOKE_PROPERTYGET = 2,
    INVOKE_PROPERTYPUT = 4,
    INVOKE_PROPERTYPUTREF = 8,
};
enum tagVARFLAGS
{
    VARFLAG_FREADONLY = 1,
    VARFLAG_FSOURCE = 2,
    VARFLAG_FBINDABLE = 4,
    VARFLAG_FREQUESTEDIT = 8,
    VARFLAG_FDISPLAYBIND = 16,
    VARFLAG_FDEFAULTBIND = 32,
    VARFLAG_FHIDDEN = 64,
    VARFLAG_FRESTRICTED = 128,
    VARFLAG_FDEFAULTCOLLELEM = 256,
    VARFLAG_FUIDEFAULT = 512,
    VARFLAG_FNONBROWSABLE = 1024,
    VARFLAG_FREPLACEABLE = 2048,
    VARFLAG_FIMMEDIATEBIND = 4096,
};
enum _LDR_HOT_PATCH_STATE
{
    LdrHotPatchBaseImage = 0,
    LdrHotPatchNotApplied = 1,
    LdrHotPatchAppliedReverse = 2,
    LdrHotPatchAppliedForward = 3,
    LdrHotPatchFailedToPatch = 4,
    LdrHotPatchStateMax = 5,
};
enum _KTHREAD_STATE
{
    Initialized = 0,
    Ready = 1,
    Running = 2,
    Standby = 3,
    Terminated = 4,
    Waiting = 5,
    Transition = 6,
    DeferredReady = 7,
    GateWaitObsolete = 8,
    WaitingForProcessInSwap = 9,
    MaximumThreadState = 10,
};
enum __MIDL_IUri_0001
{
    Uri_PROPERTY_ABSOLUTE_URI = 0,
    Uri_PROPERTY_STRING_START = 0,
    Uri_PROPERTY_AUTHORITY = 1,
    Uri_PROPERTY_DISPLAY_URI = 2,
    Uri_PROPERTY_DOMAIN = 3,
    Uri_PROPERTY_EXTENSION = 4,
    Uri_PROPERTY_FRAGMENT = 5,
    Uri_PROPERTY_HOST = 6,
    Uri_PROPERTY_PASSWORD = 7,
    Uri_PROPERTY_PATH = 8,
    Uri_PROPERTY_PATH_AND_QUERY = 9,
    Uri_PROPERTY_QUERY = 10,
    Uri_PROPERTY_RAW_URI = 11,
    Uri_PROPERTY_SCHEME_NAME = 12,
    Uri_PROPERTY_USER_INFO = 13,
    Uri_PROPERTY_USER_NAME = 14,
    Uri_PROPERTY_STRING_LAST = 14,
    Uri_PROPERTY_HOST_TYPE = 15,
    Uri_PROPERTY_DWORD_START = 15,
    Uri_PROPERTY_PORT = 16,
    Uri_PROPERTY_SCHEME = 17,
    Uri_PROPERTY_ZONE = 18,
    Uri_PROPERTY_DWORD_LAST = 18,
};
enum tagOLERENDER
{
    OLERENDER_NONE = 0,
    OLERENDER_DRAW = 1,
    OLERENDER_FORMAT = 2,
    OLERENDER_ASIS = 3,
};
enum tagOLEWHICHMK
{
    OLEWHICHMK_CONTAINER = 1,
    OLEWHICHMK_OBJREL = 2,
    OLEWHICHMK_OBJFULL = 3,
};
enum tagUSERCLASSTYPE
{
    USERCLASSTYPE_FULL = 1,
    USERCLASSTYPE_SHORT = 2,
    USERCLASSTYPE_APPNAME = 3,
};
enum tagOLECLOSE
{
    OLECLOSE_SAVEIFDIRTY = 0,
    OLECLOSE_NOSAVE = 1,
    OLECLOSE_PROMPTSAVE = 2,
};
enum tagOLELINKBIND
{
    OLELINKBIND_EVENIFCLASSDIFF = 1,
};
enum tagBINDSPEED
{
    BINDSPEED_INDEFINITE = 1,
    BINDSPEED_MODERATE = 2,
    BINDSPEED_IMMEDIATE = 3,
};
enum tagOLEVERBATTRIB
{
    OLEVERBATTRIB_NEVERDIRTIES = 1,
    OLEVERBATTRIB_ONCONTAINERMENU = 2,
};
enum _KHETERO_CPU_POLICY
{
    KHeteroCpuPolicyAll = 0,
    KHeteroCpuPolicyLarge = 1,
    KHeteroCpuPolicyLargeOrIdle = 2,
    KHeteroCpuPolicySmall = 3,
    KHeteroCpuPolicySmallOrIdle = 4,
    KHeteroCpuPolicyDynamic = 5,
    KHeteroCpuPolicyStaticMax = 5,
    KHeteroCpuPolicyBiasedSmall = 6,
    KHeteroCpuPolicyBiasedLarge = 7,
    KHeteroCpuPolicyDefault = 8,
    KHeteroCpuPolicyMax = 9,
};
enum _EVENT_TRACE_PROFILE_ADD_INFORMATION_VERSIONS
{
    EventTraceProfileAddInformationMinVersion = 2,
    EventTraceProfileAddInformationV2 = 2,
    EventTraceProfileAddInformationV3 = 3,
    EventTraceProfileAddInformationMaxVersion = 3,
};
enum _EVENT_TRACE_INFORMATION_CLASS
{
    EventTraceKernelVersionInformation = 0,
    EventTraceGroupMaskInformation = 1,
    EventTracePerformanceInformation = 2,
    EventTraceTimeProfileInformation = 3,
    EventTraceSessionSecurityInformation = 4,
    EventTraceSpinlockInformation = 5,
    EventTraceStackTracingInformation = 6,
    EventTraceExecutiveResourceInformation = 7,
    EventTraceHeapTracingInformation = 8,
    EventTraceHeapSummaryTracingInformation = 9,
    EventTracePoolTagFilterInformation = 10,
    EventTracePebsTracingInformation = 11,
    EventTraceProfileConfigInformation = 12,
    EventTraceProfileSourceListInformation = 13,
    EventTraceProfileEventListInformation = 14,
    EventTraceProfileCounterListInformation = 15,
    EventTraceStackCachingInformation = 16,
    EventTraceObjectTypeFilterInformation = 17,
    EventTraceSoftRestartInformation = 18,
    EventTraceLastBranchConfigurationInformation = 19,
    EventTraceLastBranchEventListInformation = 20,
    EventTraceProfileSourceAddInformation = 21,
    EventTraceProfileSourceRemoveInformation = 22,
    EventTraceProcessorTraceConfigurationInformation = 23,
    EventTraceProcessorTraceEventListInformation = 24,
    EventTraceCoverageSamplerInformation = 25,
    EventTraceUnifiedStackCachingInformation = 26,
    EventTraceContextRegisterTraceInformation = 27,
    MaxEventTraceInfoClass = 28,
};
enum IEObjectType
{
    IE_EPM_OBJECT_EVENT = 0,
    IE_EPM_OBJECT_MUTEX = 1,
    IE_EPM_OBJECT_SEMAPHORE = 2,
    IE_EPM_OBJECT_SHARED_MEMORY = 3,
    IE_EPM_OBJECT_WAITABLE_TIMER = 4,
    IE_EPM_OBJECT_FILE = 5,
    IE_EPM_OBJECT_NAMED_PIPE = 6,
    IE_EPM_OBJECT_REGISTRY = 7,
};
enum _TIMER_TYPE
{
    NotificationTimer = 0,
    SynchronizationTimer = 1,
};
enum _TIMER_SET_INFORMATION_CLASS
{
    TimerSetCoalescableTimer = 0,
    MaxTimerInfoClass = 1,
};
enum __MIDL_IBindStatusCallback_0001
{
    BINDVERB_GET = 0,
    BINDVERB_POST = 1,
    BINDVERB_PUT = 2,
    BINDVERB_CUSTOM = 3,
    BINDVERB_RESERVED1 = 4,
};
enum __MIDL_IBindStatusCallback_0002
{
    BINDINFOF_URLENCODESTGMEDDATA = 1,
    BINDINFOF_URLENCODEDEXTRAINFO = 2,
};
enum __MIDL_IBindStatusCallback_0003
{
    BINDF_ASYNCHRONOUS = 1,
    BINDF_ASYNCSTORAGE = 2,
    BINDF_NOPROGRESSIVERENDERING = 4,
    BINDF_OFFLINEOPERATION = 8,
    BINDF_GETNEWESTVERSION = 16,
    BINDF_NOWRITECACHE = 32,
    BINDF_NEEDFILE = 64,
    BINDF_PULLDATA = 128,
    BINDF_IGNORESECURITYPROBLEM = 256,
    BINDF_RESYNCHRONIZE = 512,
    BINDF_HYPERLINK = 1024,
    BINDF_NO_UI = 2048,
    BINDF_SILENTOPERATION = 4096,
    BINDF_PRAGMA_NO_CACHE = 8192,
    BINDF_GETCLASSOBJECT = 16384,
    BINDF_RESERVED_1 = 32768,
    BINDF_FREE_THREADED = 65536,
    BINDF_DIRECT_READ = 131072,
    BINDF_FORMS_SUBMIT = 262144,
    BINDF_GETFROMCACHE_IF_NET_FAIL = 524288,
    BINDF_FROMURLMON = 1048576,
    BINDF_FWD_BACK = 2097152,
    BINDF_PREFERDEFAULTHANDLER = 4194304,
    BINDF_ENFORCERESTRICTED = 8388608,
    BINDF_RESERVED_2 = -2147483648,
    BINDF_RESERVED_3 = 16777216,
    BINDF_RESERVED_4 = 33554432,
    BINDF_RESERVED_5 = 67108864,
    BINDF_RESERVED_6 = 134217728,
    BINDF_RESERVED_7 = 1073741824,
    BINDF_RESERVED_8 = 536870912,
};
enum tagBINDSTATUS
{
    BINDSTATUS_FINDINGRESOURCE = 1,
    BINDSTATUS_CONNECTING = 2,
    BINDSTATUS_REDIRECTING = 3,
    BINDSTATUS_BEGINDOWNLOADDATA = 4,
    BINDSTATUS_DOWNLOADINGDATA = 5,
    BINDSTATUS_ENDDOWNLOADDATA = 6,
    BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 7,
    BINDSTATUS_INSTALLINGCOMPONENTS = 8,
    BINDSTATUS_ENDDOWNLOADCOMPONENTS = 9,
    BINDSTATUS_USINGCACHEDCOPY = 10,
    BINDSTATUS_SENDINGREQUEST = 11,
    BINDSTATUS_CLASSIDAVAILABLE = 12,
    BINDSTATUS_MIMETYPEAVAILABLE = 13,
    BINDSTATUS_CACHEFILENAMEAVAILABLE = 14,
    BINDSTATUS_BEGINSYNCOPERATION = 15,
    BINDSTATUS_ENDSYNCOPERATION = 16,
    BINDSTATUS_BEGINUPLOADDATA = 17,
    BINDSTATUS_UPLOADINGDATA = 18,
    BINDSTATUS_ENDUPLOADDATA = 19,
    BINDSTATUS_PROTOCOLCLASSID = 20,
    BINDSTATUS_ENCODING = 21,
    BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 22,
    BINDSTATUS_CLASSINSTALLLOCATION = 23,
    BINDSTATUS_DECODING = 24,
    BINDSTATUS_LOADINGMIMEHANDLER = 25,
    BINDSTATUS_CONTENTDISPOSITIONATTACH = 26,
    BINDSTATUS_FILTERREPORTMIMETYPE = 27,
    BINDSTATUS_CLSIDCANINSTANTIATE = 28,
    BINDSTATUS_IUNKNOWNAVAILABLE = 29,
    BINDSTATUS_DIRECTBIND = 30,
    BINDSTATUS_RAWMIMETYPE = 31,
    BINDSTATUS_PROXYDETECTING = 32,
    BINDSTATUS_ACCEPTRANGES = 33,
    BINDSTATUS_COOKIE_SENT = 34,
    BINDSTATUS_COMPACT_POLICY_RECEIVED = 35,
    BINDSTATUS_COOKIE_SUPPRESSED = 36,
    BINDSTATUS_COOKIE_STATE_UNKNOWN = 37,
    BINDSTATUS_COOKIE_STATE_ACCEPT = 38,
    BINDSTATUS_COOKIE_STATE_REJECT = 39,
    BINDSTATUS_COOKIE_STATE_PROMPT = 40,
    BINDSTATUS_COOKIE_STATE_LEASH = 41,
    BINDSTATUS_COOKIE_STATE_DOWNGRADE = 42,
    BINDSTATUS_POLICY_HREF = 43,
    BINDSTATUS_P3P_HEADER = 44,
    BINDSTATUS_SESSION_COOKIE_RECEIVED = 45,
    BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 46,
    BINDSTATUS_SESSION_COOKIES_ALLOWED = 47,
    BINDSTATUS_CACHECONTROL = 48,
    BINDSTATUS_CONTENTDISPOSITIONFILENAME = 49,
    BINDSTATUS_MIMETEXTPLAINMISMATCH = 50,
    BINDSTATUS_PUBLISHERAVAILABLE = 51,
    BINDSTATUS_DISPLAYNAMEAVAILABLE = 52,
    BINDSTATUS_SSLUX_NAVBLOCKED = 53,
    BINDSTATUS_SERVER_MIMETYPEAVAILABLE = 54,
    BINDSTATUS_SNIFFED_CLASSIDAVAILABLE = 55,
    BINDSTATUS_64BIT_PROGRESS = 56,
    BINDSTATUS_LAST = 56,
    BINDSTATUS_RESERVED_0 = 57,
    BINDSTATUS_RESERVED_1 = 58,
    BINDSTATUS_RESERVED_2 = 59,
    BINDSTATUS_RESERVED_3 = 60,
    BINDSTATUS_RESERVED_4 = 61,
    BINDSTATUS_RESERVED_5 = 62,
    BINDSTATUS_RESERVED_6 = 63,
    BINDSTATUS_RESERVED_7 = 64,
    BINDSTATUS_RESERVED_8 = 65,
    BINDSTATUS_RESERVED_9 = 66,
    BINDSTATUS_RESERVED_A = 67,
    BINDSTATUS_RESERVED_B = 68,
    BINDSTATUS_RESERVED_C = 69,
    BINDSTATUS_RESERVED_D = 70,
    BINDSTATUS_RESERVED_E = 71,
    BINDSTATUS_RESERVED_F = 72,
    BINDSTATUS_RESERVED_10 = 73,
    BINDSTATUS_RESERVED_11 = 74,
    BINDSTATUS_RESERVED_12 = 75,
    BINDSTATUS_RESERVED_13 = 76,
    BINDSTATUS_RESERVED_14 = 77,
    BINDSTATUS_LAST_PRIVATE = 77,
};
enum __MIDL_IBindStatusCallbackEx_0001
{
    BINDF2_DISABLEBASICOVERHTTP = 1,
    BINDF2_DISABLEAUTOCOOKIEHANDLING = 2,
    BINDF2_READ_DATA_GREATER_THAN_4GB = 4,
    BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 8,
    BINDF2_SETDOWNLOADMODE = 32,
    BINDF2_DISABLE_HTTP_REDIRECT_CACHING = 64,
    BINDF2_KEEP_CALLBACK_MODULE_LOADED = 128,
    BINDF2_ALLOW_PROXY_CRED_PROMPT = 256,
    BINDF2_RESERVED_17 = 512,
    BINDF2_RESERVED_16 = 1024,
    BINDF2_RESERVED_15 = 2048,
    BINDF2_RESERVED_14 = 4096,
    BINDF2_RESERVED_13 = 8192,
    BINDF2_RESERVED_12 = 16384,
    BINDF2_RESERVED_11 = 32768,
    BINDF2_RESERVED_10 = 65536,
    BINDF2_RESERVED_F = 131072,
    BINDF2_RESERVED_E = 262144,
    BINDF2_RESERVED_D = 524288,
    BINDF2_RESERVED_C = 1048576,
    BINDF2_RESERVED_B = 2097152,
    BINDF2_RESERVED_A = 4194304,
    BINDF2_RESERVED_9 = 8388608,
    BINDF2_RESERVED_8 = 16777216,
    BINDF2_RESERVED_7 = 33554432,
    BINDF2_RESERVED_6 = 67108864,
    BINDF2_RESERVED_5 = 134217728,
    BINDF2_RESERVED_4 = 268435456,
    BINDF2_RESERVED_3 = 536870912,
    BINDF2_RESERVED_2 = 1073741824,
    BINDF2_RESERVED_1 = -2147483648,
};
enum _SUITE_TYPE
{
    SmallBusiness = 0,
    Enterprise = 1,
    BackOffice = 2,
    CommunicationServer = 3,
    TerminalServer = 4,
    SmallBusinessRestricted = 5,
    EmbeddedNT = 6,
    DataCenter = 7,
    SingleUserTS = 8,
    Personal = 9,
    Blade = 10,
    EmbeddedRestricted = 11,
    SecurityAppliance = 12,
    StorageServer = 13,
    ComputeServer = 14,
    WHServer = 15,
    PhoneNT = 16,
    MaxSuiteType = 17,
};
enum _COVERAGE_REQUEST_CODES
{
    CoverageAllModules = 0,
    CoverageSearchByHash = 1,
    CoverageSearchByName = 2,
};
enum __MIDL_IAuthenticateEx_0001
{
    AUTHENTICATEF_PROXY = 1,
    AUTHENTICATEF_BASIC = 2,
    AUTHENTICATEF_HTTP = 4,
};
enum __MIDL_ICodeInstall_0001
{
    CIP_DISK_FULL = 0,
    CIP_ACCESS_DENIED = 1,
    CIP_NEWER_VERSION_EXISTS = 2,
    CIP_OLDER_VERSION_EXISTS = 3,
    CIP_NAME_CONFLICT = 4,
    CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 5,
    CIP_EXE_SELF_REGISTERATION_TIMEOUT = 6,
    CIP_UNSAFE_TO_ABORT = 7,
    CIP_NEED_REBOOT = 8,
    CIP_NEED_REBOOT_UI_PERMISSION = 9,
};
enum __MIDL_IUri_0002
{
    Uri_HOST_UNKNOWN = 0,
    Uri_HOST_DNS = 1,
    Uri_HOST_IPV4 = 2,
    Uri_HOST_IPV6 = 3,
    Uri_HOST_IDN = 4,
};
enum _WNF_STATE_NAME_INFORMATION
{
    WnfInfoStateNameExist = 0,
    WnfInfoSubscribersPresent = 1,
    WnfInfoIsQuiescent = 2,
};
enum _tagPARSEACTION
{
    PARSE_CANONICALIZE = 1,
    PARSE_FRIENDLY = 2,
    PARSE_SECURITY_URL = 3,
    PARSE_ROOTDOCUMENT = 4,
    PARSE_DOCUMENT = 5,
    PARSE_ANCHOR = 6,
    PARSE_ENCODE_IS_UNESCAPE = 7,
    PARSE_DECODE_IS_ESCAPE = 8,
    PARSE_PATH_FROM_URL = 9,
    PARSE_URL_FROM_PATH = 10,
    PARSE_MIME = 11,
    PARSE_SERVER = 12,
    PARSE_SCHEMA = 13,
    PARSE_SITE = 14,
    PARSE_DOMAIN = 15,
    PARSE_LOCATION = 16,
    PARSE_SECURITY_DOMAIN = 17,
    PARSE_ESCAPE = 18,
    PARSE_UNESCAPE = 19,
};
enum _tagPSUACTION
{
    PSU_DEFAULT = 1,
    PSU_SECURITY_URL_ONLY = 2,
};
enum _tagINTERNETFEATURELIST
{
    FEATURE_OBJECT_CACHING = 0,
    FEATURE_ZONE_ELEVATION = 1,
    FEATURE_MIME_HANDLING = 2,
    FEATURE_MIME_SNIFFING = 3,
    FEATURE_WINDOW_RESTRICTIONS = 4,
    FEATURE_WEBOC_POPUPMANAGEMENT = 5,
    FEATURE_BEHAVIORS = 6,
    FEATURE_DISABLE_MK_PROTOCOL = 7,
    FEATURE_LOCALMACHINE_LOCKDOWN = 8,
    FEATURE_SECURITYBAND = 9,
    FEATURE_RESTRICT_ACTIVEXINSTALL = 10,
    FEATURE_VALIDATE_NAVIGATE_URL = 11,
    FEATURE_RESTRICT_FILEDOWNLOAD = 12,
    FEATURE_ADDON_MANAGEMENT = 13,
    FEATURE_PROTOCOL_LOCKDOWN = 14,
    FEATURE_HTTP_USERNAME_PASSWORD_DISABLE = 15,
    FEATURE_SAFE_BINDTOOBJECT = 16,
    FEATURE_UNC_SAVEDFILECHECK = 17,
    FEATURE_GET_URL_DOM_FILEPATH_UNENCODED = 18,
    FEATURE_TABBED_BROWSING = 19,
    FEATURE_SSLUX = 20,
    FEATURE_DISABLE_NAVIGATION_SOUNDS = 21,
    FEATURE_DISABLE_LEGACY_COMPRESSION = 22,
    FEATURE_FORCE_ADDR_AND_STATUS = 23,
    FEATURE_XMLHTTP = 24,
    FEATURE_DISABLE_TELNET_PROTOCOL = 25,
    FEATURE_FEEDS = 26,
    FEATURE_BLOCK_INPUT_PROMPTS = 27,
    FEATURE_ENTRY_COUNT = 28,
};
enum tagURLZONE
{
    URLZONE_INVALID = -1,
    URLZONE_PREDEFINED_MIN = 0,
    URLZONE_LOCAL_MACHINE = 0,
    URLZONE_INTRANET = 1,
    URLZONE_TRUSTED = 2,
    URLZONE_INTERNET = 3,
    URLZONE_UNTRUSTED = 4,
    URLZONE_PREDEFINED_MAX = 999,
    URLZONE_USER_MIN = 1000,
    URLZONE_USER_MAX = 10000,
};
enum _URLZONEREG
{
    URLZONEREG_DEFAULT = 0,
    URLZONEREG_HKLM = 1,
    URLZONEREG_HKCU = 2,
};
enum __MIDL_IGetBindHandle_0001
{
    BINDHANDLETYPES_APPCACHE = 0,
    BINDHANDLETYPES_DEPENDENCY = 1,
    BINDHANDLETYPES_COUNT = 2,
};
enum _EVENT_TYPE
{
    NotificationEvent = 0,
    SynchronizationEvent = 1,
};
enum _WAIT_TYPE
{
    WaitAll = 0,
    WaitAny = 1,
    WaitNotification = 2,
    WaitDequeue = 3,
    WaitDpc = 4,
};
enum _STORE_INFORMATION_CLASS
{
    StorePageRequest = 1,
    StoreStatsRequest = 2,
    StoreCreateRequest = 3,
    StoreDeleteRequest = 4,
    StoreListRequest = 5,
    Available1 = 6,
    StoreEmptyRequest = 7,
    CacheListRequest = 8,
    CacheCreateRequest = 9,
    CacheDeleteRequest = 10,
    CacheStoreCreateRequest = 11,
    CacheStoreDeleteRequest = 12,
    CacheStatsRequest = 13,
    Available2 = 14,
    RegistrationRequest = 15,
    GlobalCacheStatsRequest = 16,
    StoreResizeRequest = 17,
    CacheStoreResizeRequest = 18,
    SmConfigRequest = 19,
    StoreHighMemoryPriorityRequest = 20,
    SystemStoreTrimRequest = 21,
    MemCompressionInfoRequest = 22,
    ProcessStoreInfoRequest = 23,
    StoreInformationMax = 24,
};
enum _SYSTEM_ENVIRONMENT_INFORMATION_CLASS
{
    SystemEnvironmentNameInformation = 1,
    SystemEnvironmentValueInformation = 2,
    MaxSystemEnvironmentInfoClass = 3,
};
enum _SM_STORE_TYPE
{
    StoreTypeInMemory = 0,
    StoreTypeFile = 1,
    StoreTypeMax = 2,
};
enum _NT_PRODUCT_TYPE
{
    NtProductWinNt = 1,
    NtProductLanManNt = 2,
    NtProductServer = 3,
};
enum _SYSTEM_MEMORY_LIST_COMMAND
{
    MemoryCaptureAccessedBits = 0,
    MemoryCaptureAndResetAccessedBits = 1,
    MemoryEmptyWorkingSets = 2,
    MemoryFlushModifiedList = 3,
    MemoryPurgeStandbyList = 4,
    MemoryPurgeLowPriorityStandbyList = 5,
    MemoryCommandMax = 6,
};
enum _WATCHDOG_HANDLER_ACTION
{
    WdActionSetTimeoutValue = 0,
    WdActionQueryTimeoutValue = 1,
    WdActionResetTimer = 2,
    WdActionStopTimer = 3,
    WdActionStartTimer = 4,
    WdActionSetTriggerAction = 5,
    WdActionQueryTriggerAction = 6,
    WdActionQueryState = 7,
};
enum _LDR_DDAG_STATE
{
    LdrModulesMerged = -5,
    LdrModulesInitError = -4,
    LdrModulesSnapError = -3,
    LdrModulesUnloaded = -2,
    LdrModulesUnloading = -1,
    LdrModulesPlaceHolder = 0,
    LdrModulesMapping = 1,
    LdrModulesMapped = 2,
    LdrModulesWaitingForDependencies = 3,
    LdrModulesSnapping = 4,
    LdrModulesSnapped = 5,
    LdrModulesCondensed = 6,
    LdrModulesReadyToInit = 7,
    LdrModulesInitializing = 8,
    LdrModulesReadyToRun = 9,
};
enum _FILTER_BOOT_OPTION_OPERATION
{
    FilterBootOptionOperationOpenSystemStore = 0,
    FilterBootOptionOperationSetElement = 1,
    FilterBootOptionOperationDeleteElement = 2,
    FilterBootOptionOperationMax = 3,
};
enum _SEMAPHORE_INFORMATION_CLASS
{
    SemaphoreBasicInformation = 0,
};
enum _TIMER_INFORMATION_CLASS
{
    TimerBasicInformation = 0,
};
enum _ST_STATS_LEVEL
{
    StStatsLevelBasic = 0,
    StStatsLevelIoStats = 1,
    StStatsLevelRegionSpace = 2,
    StStatsLevelSpaceBitmap = 3,
    StStatsLevelMax = 4,
};
enum _WNF_STATE_NAME_LIFETIME
{
    WnfWellKnownStateName = 0,
    WnfPermanentStateName = 1,
    WnfPersistentStateName = 2,
    WnfTemporaryStateName = 3,
};
enum _SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS
{
    SystemCrashDumpDisable = 0,
    SystemCrashDumpReconfigure = 1,
    SystemCrashDumpInitializationComplete = 2,
};
enum _SM_STORE_MANAGER_TYPE
{
    SmStoreManagerTypePhysical = 0,
    SmStoreManagerTypeVirtual = 1,
    SmStoreManagerTypeMax = 2,
};
enum _SM_CONFIG_TYPE
{
    SmConfigDirtyPageCompression = 0,
    SmConfigAsyncInswap = 1,
    SmConfigPrefetchSeekThreshold = 2,
    SmConfigTypeMax = 3,
};
enum _BOOT_ENTROPY_SOURCE_RESULT_CODE
{
    BootEntropySourceStructureUninitialized = 0,
    BootEntropySourceDisabledByPolicy = 1,
    BootEntropySourceNotPresent = 2,
    BootEntropySourceError = 3,
    BootEntropySourceSuccess = 4,
};
enum _BOOT_ENTROPY_SOURCE_ID
{
    BootEntropySourceNone = 0,
    BootEntropySourceSeedfile = 1,
    BootEntropySourceExternal = 2,
    BootEntropySourceTpm = 3,
    BootEntropySourceRdrand = 4,
    BootEntropySourceTime = 5,
    BootEntropySourceAcpiOem0 = 6,
    BootEntropySourceUefi = 7,
    BootEntropySourceCng = 8,
    BootEntropySourceTcbTpm = 9,
    BootEntropySourceTcbRdrand = 10,
    BootMaxEntropySources = 10,
};
enum _SYSTEM_PIXEL_FORMAT
{
    SystemPixelFormatUnknown = 0,
    SystemPixelFormatR8G8B8 = 1,
    SystemPixelFormatR8G8B8X8 = 2,
    SystemPixelFormatB8G8R8 = 3,
    SystemPixelFormatB8G8R8X8 = 4,
};
enum _SECURE_SETTING_VALUE_TYPE
{
    SecureSettingValueTypeBoolean = 0,
    SecureSettingValueTypeUlong = 1,
    SecureSettingValueTypeBinary = 2,
    SecureSettingValueTypeString = 3,
    SecureSettingValueTypeUnknown = 4,
};
enum _SYSTEM_PROCESS_CLASSIFICATION
{
    SystemProcessClassificationNormal = 0,
    SystemProcessClassificationSystem = 1,
    SystemProcessClassificationSecureSystem = 2,
    SystemProcessClassificationMemCompression = 3,
    SystemProcessClassificationRegistry = 4,
    SystemProcessClassificationMaximum = 5,
};
enum _SYSTEM_ACTIVITY_MODERATION_STATE
{
    SystemActivityModerationStateSystemManaged = 0,
    SystemActivityModerationStateUserManagedAllowThrottling = 1,
    SystemActivityModerationStateUserManagedDisableThrottling = 2,
    MaxSystemActivityModerationState = 3,
};
enum _SYSTEM_ACTIVITY_MODERATION_APP_TYPE
{
    SystemActivityModerationAppTypeClassic = 0,
    SystemActivityModerationAppTypePackaged = 1,
    MaxSystemActivityModerationAppType = 2,
};
enum _FSINFOCLASS
{
    FileFsVolumeInformation = 1,
    FileFsLabelInformation = 2,
    FileFsSizeInformation = 3,
    FileFsDeviceInformation = 4,
    FileFsAttributeInformation = 5,
    FileFsControlInformation = 6,
    FileFsFullSizeInformation = 7,
    FileFsObjectIdInformation = 8,
    FileFsDriverPathInformation = 9,
    FileFsVolumeFlagsInformation = 10,
    FileFsSectorSizeInformation = 11,
    FileFsDataCopyInformation = 12,
    FileFsMetadataSizeInformation = 13,
    FileFsFullSizeInformationEx = 14,
    FileFsGuidInformation = 15,
    FileFsMaximumInformation = 16,
};
enum _SYSTEM_IOMMU_STATE
{
    IommuStateBlock = 0,
    IommuStateUnblock = 1,
};
enum _BCD_ELEMENT_DATATYPE_CLASS
{
    BCD_ELEMENT_DATATYPE_CLASS_NONE = 0,
    BCD_ELEMENT_DATATYPE_CLASS_LIBRARY = 1,
    BCD_ELEMENT_DATATYPE_CLASS_APPLICATION = 2,
    BCD_ELEMENT_DATATYPE_CLASS_DEVICE = 3,
    BCD_ELEMENT_DATATYPE_CLASS_SETUPTEMPLATE = 4,
    BCD_ELEMENT_DATATYPE_CLASS_OEM = 5,
};
enum _SYSTEM_MEMORY_NUMA_PERFORMANCE_QUERY_DATA_TYPES
{
    SystemMemoryNumaPerformanceQuery_ReadLatency = 0,
    SystemMemoryNumaPerformanceQuery_ReadBandwidth = 1,
    SystemMemoryNumaPerformanceQuery_WriteLatency = 2,
    SystemMemoryNumaPerformanceQuery_WriteBandwidth = 3,
    SystemMemoryNumaPerformanceQuery_Latency = 4,
    SystemMemoryNumaPerformanceQuery_Bandwidth = 5,
    SystemMemoryNumaPerformanceQuery_AllDataTypes = 6,
    SystemMemoryNumaPerformanceQuery_MaxDataType = 7,
};
enum _SYSDBG_COMMAND
{
    SysDbgQueryModuleInformation = 0,
    SysDbgQueryTraceInformation = 1,
    SysDbgSetTracepoint = 2,
    SysDbgSetSpecialCall = 3,
    SysDbgClearSpecialCalls = 4,
    SysDbgQuerySpecialCalls = 5,
    SysDbgBreakPoint = 6,
    SysDbgQueryVersion = 7,
    SysDbgReadVirtual = 8,
    SysDbgWriteVirtual = 9,
    SysDbgReadPhysical = 10,
    SysDbgWritePhysical = 11,
    SysDbgReadControlSpace = 12,
    SysDbgWriteControlSpace = 13,
    SysDbgReadIoSpace = 14,
    SysDbgWriteIoSpace = 15,
    SysDbgReadMsr = 16,
    SysDbgWriteMsr = 17,
    SysDbgReadBusData = 18,
    SysDbgWriteBusData = 19,
    SysDbgCheckLowMemory = 20,
    SysDbgEnableKernelDebugger = 21,
    SysDbgDisableKernelDebugger = 22,
    SysDbgGetAutoKdEnable = 23,
    SysDbgSetAutoKdEnable = 24,
    SysDbgGetPrintBufferSize = 25,
    SysDbgSetPrintBufferSize = 26,
    SysDbgGetKdUmExceptionEnable = 27,
    SysDbgSetKdUmExceptionEnable = 28,
    SysDbgGetTriageDump = 29,
    SysDbgGetKdBlockEnable = 30,
    SysDbgSetKdBlockEnable = 31,
    SysDbgRegisterForUmBreakInfo = 32,
    SysDbgGetUmBreakPid = 33,
    SysDbgClearUmBreakPid = 34,
    SysDbgGetUmAttachPid = 35,
    SysDbgClearUmAttachPid = 36,
    SysDbgGetLiveKernelDump = 37,
    SysDbgKdPullRemoteFile = 38,
    SysDbgMaxInfoClass = 39,
};
enum _PS_ATTRIBUTE_NUM
{
    PsAttributeParentProcess = 0,
    PsAttributeDebugObject = 1,
    PsAttributeToken = 2,
    PsAttributeClientId = 3,
    PsAttributeTebAddress = 4,
    PsAttributeImageName = 5,
    PsAttributeImageInfo = 6,
    PsAttributeMemoryReserve = 7,
    PsAttributePriorityClass = 8,
    PsAttributeErrorMode = 9,
    PsAttributeStdHandleInfo = 10,
    PsAttributeHandleList = 11,
    PsAttributeGroupAffinity = 12,
    PsAttributePreferredNode = 13,
    PsAttributeIdealProcessor = 14,
    PsAttributeUmsThread = 15,
    PsAttributeMitigationOptions = 16,
    PsAttributeProtectionLevel = 17,
    PsAttributeSecureProcess = 18,
    PsAttributeJobList = 19,
    PsAttributeChildProcessPolicy = 20,
    PsAttributeAllApplicationPackagesPolicy = 21,
    PsAttributeWin32kFilter = 22,
    PsAttributeSafeOpenPromptOriginClaim = 23,
    PsAttributeBnoIsolation = 24,
    PsAttributeDesktopAppPolicy = 25,
    PsAttributeChpe = 26,
    PsAttributeMitigationAuditOptions = 27,
    PsAttributeMachineType = 28,
    PsAttributeComponentFilter = 29,
    PsAttributeEnableOptionalXStateFeatures = 30,
    PsAttributeSupportedMachines = 31,
    PsAttributeSveVectorLength = 32,
    PsAttributeMax = 33,
};
enum _INTERFACE_TYPE
{
    InterfaceTypeUndefined = -1,
    Internal = 0,
    Isa = 1,
    Eisa = 2,
    MicroChannel = 3,
    TurboChannel = 4,
    PCIBus = 5,
    VMEBus = 6,
    NuBus = 7,
    PCMCIABus = 8,
    CBus = 9,
    MPIBus = 10,
    MPSABus = 11,
    ProcessorInternal = 12,
    InternalPowerBus = 13,
    PNPISABus = 14,
    PNPBus = 15,
    Vmcs = 16,
    ACPIBus = 17,
    MaximumInterfaceType = 18,
};
enum _BUS_DATA_TYPE
{
    ConfigurationSpaceUndefined = -1,
    Cmos = 0,
    EisaConfiguration = 1,
    Pos = 2,
    CbusConfiguration = 3,
    PCIConfiguration = 4,
    VMEConfiguration = 5,
    NuBusConfiguration = 6,
    PCMCIAConfiguration = 7,
    MPIConfiguration = 8,
    MPSAConfiguration = 9,
    PNPISAConfiguration = 10,
    SgiInternalConfiguration = 11,
    MaximumBusDataType = 12,
};
enum _HARDERROR_RESPONSE_OPTION
{
    OptionAbortRetryIgnore = 0,
    OptionOk = 1,
    OptionOkCancel = 2,
    OptionRetryCancel = 3,
    OptionYesNo = 4,
    OptionYesNoCancel = 5,
    OptionShutdownSystem = 6,
    OptionOkNoWait = 7,
    OptionCancelTryContinue = 8,
};
enum _HARDERROR_RESPONSE
{
    ResponseReturnToCaller = 0,
    ResponseNotHandled = 1,
    ResponseAbort = 2,
    ResponseCancel = 3,
    ResponseIgnore = 4,
    ResponseNo = 5,
    ResponseOk = 6,
    ResponseRetry = 7,
    ResponseYes = 8,
    ResponseTryAgain = 9,
    ResponseContinue = 10,
};
enum _ALTERNATIVE_ARCHITECTURE_TYPE
{
    StandardDesign = 0,
    NEC98x86 = 1,
    EndAlternatives = 2,
};
enum _ATOM_INFORMATION_CLASS
{
    AtomBasicInformation = 0,
    AtomTableInformation = 1,
};
enum _SHUTDOWN_ACTION
{
    ShutdownNoReboot = 0,
    ShutdownReboot = 1,
    ShutdownPowerOff = 2,
    ShutdownRebootForRecovery = 3,
};
enum _BCD_MESSAGE_TYPE
{
    BCD_MESSAGE_TYPE_NONE = 0,
    BCD_MESSAGE_TYPE_TRACE = 1,
    BCD_MESSAGE_TYPE_INFORMATION = 2,
    BCD_MESSAGE_TYPE_WARNING = 3,
    BCD_MESSAGE_TYPE_ERROR = 4,
    BCD_MESSAGE_TYPE_MAXIMUM = 5,
};
enum _BCD_IMPORT_FLAGS
{
    BCD_IMPORT_NONE = 0,
    BCD_IMPORT_DELETE_FIRMWARE_OBJECTS = 1,
};
enum _BCD_OPEN_FLAGS
{
    BCD_OPEN_NONE = 0,
    BCD_OPEN_OPEN_STORE_OFFLINE = 1,
    BCD_OPEN_SYNC_FIRMWARE_ENTRIES = 2,
};
enum _BCD_OBJECT_TYPE
{
    BCD_OBJECT_TYPE_NONE = 0,
    BCD_OBJECT_TYPE_APPLICATION = 1,
    BCD_OBJECT_TYPE_INHERITED = 2,
    BCD_OBJECT_TYPE_DEVICE = 3,
};
enum _BCD_APPLICATION_OBJECT_TYPE
{
    BCD_APPLICATION_OBJECT_NONE = 0,
    BCD_APPLICATION_OBJECT_FIRMWARE_BOOT_MANAGER = 1,
    BCD_APPLICATION_OBJECT_WINDOWS_BOOT_MANAGER = 2,
    BCD_APPLICATION_OBJECT_WINDOWS_BOOT_LOADER = 3,
    BCD_APPLICATION_OBJECT_WINDOWS_RESUME_APPLICATION = 4,
    BCD_APPLICATION_OBJECT_MEMORY_TESTER = 5,
    BCD_APPLICATION_OBJECT_LEGACY_NTLDR = 6,
    BCD_APPLICATION_OBJECT_LEGACY_SETUPLDR = 7,
    BCD_APPLICATION_OBJECT_BOOT_SECTOR = 8,
    BCD_APPLICATION_OBJECT_STARTUP_MODULE = 9,
    BCD_APPLICATION_OBJECT_GENERIC_APPLICATION = 10,
    BCD_APPLICATION_OBJECT_RESERVED = 1048575,
};
enum _BCD_APPLICATION_IMAGE_TYPE
{
    BCD_APPLICATION_IMAGE_NONE = 0,
    BCD_APPLICATION_IMAGE_FIRMWARE_APPLICATION = 1,
    BCD_APPLICATION_IMAGE_BOOT_APPLICATION = 2,
    BCD_APPLICATION_IMAGE_LEGACY_LOADER = 3,
    BCD_APPLICATION_IMAGE_REALMODE_CODE = 4,
};
enum _BCD_INHERITED_CLASS_TYPE
{
    BCD_INHERITED_CLASS_NONE = 0,
    BCD_INHERITED_CLASS_LIBRARY = 1,
    BCD_INHERITED_CLASS_APPLICATION = 2,
    BCD_INHERITED_CLASS_DEVICE = 3,
};
enum _PORT_INFORMATION_CLASS
{
    PortBasicInformation = 0,
    PortDumpInformation = 1,
};
enum _BCD_COPY_FLAGS
{
    BCD_COPY_NONE = 0,
    BCD_COPY_COPY_CREATE_NEW_OBJECT_IDENTIFIER = 1,
    BCD_COPY_COPY_DELETE_EXISTING_OBJECT = 2,
    BCD_COPY_COPY_UNKNOWN_FIRMWARE_APPLICATION = 4,
    BCD_COPY_IGNORE_SETUP_TEMPLATE_ELEMENTS = 8,
    BCD_COPY_RETAIN_ELEMENT_DATA = 16,
    BCD_COPY_MIGRATE_ELEMENT_DATA = 32,
};
enum _BCD_ELEMENT_DATATYPE_FORMAT
{
    BCD_ELEMENT_DATATYPE_FORMAT_UNKNOWN = 0,
    BCD_ELEMENT_DATATYPE_FORMAT_DEVICE = 1,
    BCD_ELEMENT_DATATYPE_FORMAT_STRING = 2,
    BCD_ELEMENT_DATATYPE_FORMAT_OBJECT = 3,
    BCD_ELEMENT_DATATYPE_FORMAT_OBJECTLIST = 4,
    BCD_ELEMENT_DATATYPE_FORMAT_INTEGER = 5,
    BCD_ELEMENT_DATATYPE_FORMAT_BOOLEAN = 6,
    BCD_ELEMENT_DATATYPE_FORMAT_INTEGERLIST = 7,
    BCD_ELEMENT_DATATYPE_FORMAT_BINARY = 8,
};
enum _BCD_ELEMENT_DEVICE_TYPE
{
    BCD_ELEMENT_DEVICE_TYPE_NONE = 0,
    BCD_ELEMENT_DEVICE_TYPE_BOOT_DEVICE = 1,
    BCD_ELEMENT_DEVICE_TYPE_PARTITION = 2,
    BCD_ELEMENT_DEVICE_TYPE_FILE = 3,
    BCD_ELEMENT_DEVICE_TYPE_RAMDISK = 4,
    BCD_ELEMENT_DEVICE_TYPE_UNKNOWN = 5,
    BCD_ELEMENT_DEVICE_TYPE_QUALIFIED_PARTITION = 6,
    BCD_ELEMENT_DEVICE_TYPE_VMBUS = 7,
    BCD_ELEMENT_DEVICE_TYPE_LOCATE_DEVICE = 8,
    BCD_ELEMENT_DEVICE_TYPE_URI = 9,
    BCD_ELEMENT_DEVICE_TYPE_COMPOSITE = 10,
};
enum _BCD_FLAGS
{
    BCD_FLAG_NONE = 0,
    BCD_FLAG_QUALIFIED_PARTITION = 1,
    BCD_FLAG_NO_DEVICE_TRANSLATION = 2,
    BCD_FLAG_ENUMERATE_INHERITED_OBJECTS = 4,
    BCD_FLAG_ENUMERATE_DEVICE_OPTIONS = 8,
    BCD_FLAG_OBSERVE_PRECEDENCE = 16,
    BCD_FLAG_DISABLE_VHD_NT_TRANSLATION = 32,
    BCD_FLAG_DISABLE_VHD_DEVICE_DETECTION = 64,
    BCD_FLAG_DISABLE_POLICY_CHECKS = 128,
};
enum _BcdBootMgrElementTypes
{
    BcdBootMgrObjectList_DisplayOrder = 603979777,
    BcdBootMgrObjectList_BootSequence = 603979778,
    BcdBootMgrObject_DefaultObject = 587202563,
    BcdBootMgrInteger_Timeout = 620756996,
    BcdBootMgrBoolean_AttemptResume = 637534213,
    BcdBootMgrObject_ResumeObject = 587202566,
    BcdBootMgrObjectList_StartupSequence = 603979783,
    BcdBootMgrObjectList_ToolsDisplayOrder = 603979792,
    BcdBootMgrBoolean_DisplayBootMenu = 637534240,
    BcdBootMgrBoolean_NoErrorDisplay = 637534241,
    BcdBootMgrDevice_BcdDevice = 553648162,
    BcdBootMgrString_BcdFilePath = 570425379,
    BcdBootMgrBoolean_HormEnabled = 637534244,
    BcdBootMgrBoolean_HiberRoot = 637534245,
    BcdBootMgrString_PasswordOverride = 570425382,
    BcdBootMgrString_PinpassPhraseOverride = 570425383,
    BcdBootMgrBoolean_ProcessCustomActionsFirst = 637534248,
    BcdBootMgrIntegerList_CustomActionsList = 654311472,
    BcdBootMgrBoolean_PersistBootSequence = 637534257,
    BcdBootMgrBoolean_SkipStartupSequence = 637534258,
};
enum _BcdLibrary_FirstMegabytePolicy
{
    FirstMegabytePolicyUseNone = 0,
    FirstMegabytePolicyUseAll = 1,
    FirstMegabytePolicyUsePrivate = 2,
};
enum _BcdLibrary_DebuggerType
{
    DebuggerSerial = 0,
    Debugger1394 = 1,
    DebuggerUsb = 2,
    DebuggerNet = 3,
    DebuggerLocal = 4,
};
enum _BcdLibrary_DebuggerStartPolicy
{
    DebuggerStartActive = 0,
    DebuggerStartAutoEnable = 1,
    DebuggerStartDisable = 2,
};
enum _BcdLibrary_ConfigAccessPolicy
{
    ConfigAccessPolicyDefault = 0,
    ConfigAccessPolicyDisallowMmConfig = 1,
};
enum _BcdLibrary_UxDisplayMessageType
{
    DisplayMessageTypeDefault = 0,
    DisplayMessageTypeResume = 1,
    DisplayMessageTypeHyperV = 2,
    DisplayMessageTypeRecovery = 3,
    DisplayMessageTypeStartupRepair = 4,
    DisplayMessageTypeSystemImageRecovery = 5,
    DisplayMessageTypeCommandPrompt = 6,
    DisplayMessageTypeSystemRestore = 7,
    DisplayMessageTypePushButtonReset = 8,
};
enum BcdLibrary_SafeBoot
{
    SafemodeMinimal = 0,
    SafemodeNetwork = 1,
    SafemodeDsRepair = 2,
};
enum _BcdLibrary_BootUxPolicy
{
    BootUxPolicyDisabled = 0,
    BootUxPolicyBasic = 1,
    BootUxPolicyStandard = 2,
};
enum _BcdLibraryElementTypes
{
    BcdLibraryDevice_ApplicationDevice = 285212673,
    BcdLibraryString_ApplicationPath = 301989890,
    BcdLibraryString_Description = 301989892,
    BcdLibraryString_PreferredLocale = 301989893,
    BcdLibraryObjectList_InheritedObjects = 335544326,
    BcdLibraryInteger_TruncatePhysicalMemory = 352321543,
    BcdLibraryObjectList_RecoverySequence = 335544328,
    BcdLibraryBoolean_AutoRecoveryEnabled = 369098761,
    BcdLibraryIntegerList_BadMemoryList = 385875978,
    BcdLibraryBoolean_AllowBadMemoryAccess = 369098763,
    BcdLibraryInteger_FirstMegabytePolicy = 352321548,
    BcdLibraryInteger_RelocatePhysicalMemory = 352321549,
    BcdLibraryInteger_AvoidLowPhysicalMemory = 352321550,
    BcdLibraryBoolean_TraditionalKsegMappings = 369098767,
    BcdLibraryBoolean_DebuggerEnabled = 369098768,
    BcdLibraryInteger_DebuggerType = 352321553,
    BcdLibraryInteger_SerialDebuggerPortAddress = 352321554,
    BcdLibraryInteger_SerialDebuggerPort = 352321555,
    BcdLibraryInteger_SerialDebuggerBaudRate = 352321556,
    BcdLibraryInteger_1394DebuggerChannel = 352321557,
    BcdLibraryString_UsbDebuggerTargetName = 301989910,
    BcdLibraryBoolean_DebuggerIgnoreUsermodeExceptions = 369098775,
    BcdLibraryInteger_DebuggerStartPolicy = 352321560,
    BcdLibraryString_DebuggerBusParameters = 301989913,
    BcdLibraryInteger_DebuggerNetHostIP = 352321562,
    BcdLibraryInteger_DebuggerNetPort = 352321563,
    BcdLibraryBoolean_DebuggerNetDhcp = 369098780,
    BcdLibraryString_DebuggerNetKey = 301989917,
    BcdLibraryBoolean_DebuggerNetVM = 369098782,
    BcdLibraryString_DebuggerNetHostIpv6 = 301989919,
    BcdLibraryBoolean_EmsEnabled = 369098784,
    BcdLibraryInteger_EmsPort = 352321570,
    BcdLibraryInteger_EmsBaudRate = 352321571,
    BcdLibraryString_LoadOptionsString = 301989936,
    BcdLibraryBoolean_AttemptNonBcdStart = 369098801,
    BcdLibraryBoolean_DisplayAdvancedOptions = 369098816,
    BcdLibraryBoolean_DisplayOptionsEdit = 369098817,
    BcdLibraryInteger_FVEKeyRingAddress = 352321602,
    BcdLibraryDevice_BsdLogDevice = 285212739,
    BcdLibraryString_BsdLogPath = 301989956,
    BcdLibraryBoolean_BsdPreserveLog = 369098821,
    BcdLibraryBoolean_GraphicsModeDisabled = 369098822,
    BcdLibraryInteger_ConfigAccessPolicy = 352321607,
    BcdLibraryBoolean_DisableIntegrityChecks = 369098824,
    BcdLibraryBoolean_AllowPrereleaseSignatures = 369098825,
    BcdLibraryString_FontPath = 301989962,
    BcdLibraryInteger_SiPolicy = 352321611,
    BcdLibraryInteger_FveBandId = 352321612,
    BcdLibraryBoolean_ConsoleExtendedInput = 369098832,
    BcdLibraryInteger_InitialConsoleInput = 352321617,
    BcdLibraryInteger_GraphicsResolution = 352321618,
    BcdLibraryBoolean_RestartOnFailure = 369098835,
    BcdLibraryBoolean_GraphicsForceHighestMode = 369098836,
    BcdLibraryBoolean_IsolatedExecutionContext = 369098848,
    BcdLibraryInteger_BootUxDisplayMessage = 352321637,
    BcdLibraryInteger_BootUxDisplayMessageOverride = 352321638,
    BcdLibraryBoolean_BootUxLogoDisable = 369098855,
    BcdLibraryBoolean_BootUxTextDisable = 369098856,
    BcdLibraryBoolean_BootUxProgressDisable = 369098857,
    BcdLibraryBoolean_BootUxFadeDisable = 369098858,
    BcdLibraryBoolean_BootUxReservePoolDebug = 369098859,
    BcdLibraryBoolean_BootUxDisable = 369098860,
    BcdLibraryInteger_BootUxFadeFrames = 352321645,
    BcdLibraryBoolean_BootUxDumpStats = 369098862,
    BcdLibraryBoolean_BootUxShowStats = 369098863,
    BcdLibraryBoolean_MultiBootSystem = 369098865,
    BcdLibraryBoolean_ForceNoKeyboard = 369098866,
    BcdLibraryInteger_AliasWindowsKey = 352321651,
    BcdLibraryBoolean_BootShutdownDisabled = 369098868,
    BcdLibraryInteger_PerformanceFrequency = 352321653,
    BcdLibraryInteger_SecurebootRawPolicy = 352321654,
    BcdLibraryIntegerList_AllowedInMemorySettings = 352321655,
    BcdLibraryInteger_BootUxBitmapTransitionTime = 352321657,
    BcdLibraryBoolean_TwoBootImages = 369098874,
    BcdLibraryBoolean_ForceFipsCrypto = 369098875,
    BcdLibraryInteger_BootErrorUx = 352321661,
    BcdLibraryBoolean_AllowFlightSignatures = 369098878,
    BcdLibraryInteger_BootMeasurementLogFormat = 352321663,
    BcdLibraryInteger_DisplayRotation = 352321664,
    BcdLibraryInteger_LogControl = 352321665,
    BcdLibraryBoolean_NoFirmwareSync = 369098882,
    BcdLibraryDevice_WindowsSystemDevice = 285212804,
    BcdLibraryBoolean_NumLockOn = 369098887,
    BcdLibraryString_AdditionalCiPolicy = 301990024,
    BcdLibraryInteger_LinearAddress57 = 352321672,
};
enum _BcdTemplateElementTypes
{
    BcdSetupInteger_DeviceType = 1157627905,
    BcdSetupString_ApplicationRelativePath = 1107296258,
    BcdSetupString_RamdiskDeviceRelativePath = 1107296259,
    BcdSetupBoolean_OmitOsLoaderElements = 1174405124,
    BcdSetupIntegerList_ElementsToMigrateList = 1191182342,
    BcdSetupBoolean_RecoveryOs = 1174405136,
};
enum _BcdOSLoader_NxPolicy
{
    NxPolicyOptIn = 0,
    NxPolicyOptOut = 1,
    NxPolicyAlwaysOff = 2,
    NxPolicyAlwaysOn = 3,
};
enum _BcdOSLoader_PAEPolicy
{
    PaePolicyDefault = 0,
    PaePolicyForceEnable = 1,
    PaePolicyForceDisable = 2,
};
enum _BcdOSLoader_BootStatusPolicy
{
    BootStatusPolicyDisplayAllFailures = 0,
    BootStatusPolicyIgnoreAllFailures = 1,
    BootStatusPolicyIgnoreShutdownFailures = 2,
    BootStatusPolicyIgnoreBootFailures = 3,
    BootStatusPolicyIgnoreCheckpointFailures = 4,
    BootStatusPolicyDisplayShutdownFailures = 5,
    BootStatusPolicyDisplayBootFailures = 6,
    BootStatusPolicyDisplayCheckpointFailures = 7,
    BootStatusPolicyAlwaysDisplayStartupFailures = 8,
};
enum _BcdOSLoaderElementTypes
{
    BcdOSLoaderDevice_OSDevice = 553648129,
    BcdOSLoaderString_SystemRoot = 570425346,
    BcdOSLoaderObject_AssociatedResumeObject = 587202563,
    BcdOSLoaderBoolean_StampDisks = 637534212,
    BcdOSLoaderBoolean_DetectKernelAndHal = 637534224,
    BcdOSLoaderString_KernelPath = 570425361,
    BcdOSLoaderString_HalPath = 570425362,
    BcdOSLoaderString_DbgTransportPath = 570425363,
    BcdOSLoaderInteger_NxPolicy = 620757024,
    BcdOSLoaderInteger_PAEPolicy = 620757025,
    BcdOSLoaderBoolean_WinPEMode = 637534242,
    BcdOSLoaderBoolean_DisableCrashAutoReboot = 637534244,
    BcdOSLoaderBoolean_UseLastGoodSettings = 637534245,
    BcdOSLoaderBoolean_DisableCodeIntegrityChecks = 637534246,
    BcdOSLoaderBoolean_AllowPrereleaseSignatures = 637534247,
    BcdOSLoaderBoolean_NoLowMemory = 637534256,
    BcdOSLoaderInteger_RemoveMemory = 620757041,
    BcdOSLoaderInteger_IncreaseUserVa = 620757042,
    BcdOSLoaderInteger_PerformaceDataMemory = 620757043,
    BcdOSLoaderBoolean_UseVgaDriver = 637534272,
    BcdOSLoaderBoolean_DisableBootDisplay = 637534273,
    BcdOSLoaderBoolean_DisableVesaBios = 637534274,
    BcdOSLoaderBoolean_DisableVgaMode = 637534275,
    BcdOSLoaderInteger_ClusterModeAddressing = 620757072,
    BcdOSLoaderBoolean_UsePhysicalDestination = 637534289,
    BcdOSLoaderInteger_RestrictApicCluster = 620757074,
    BcdOSLoaderString_OSLoaderTypeEVStore = 570425427,
    BcdOSLoaderBoolean_UseLegacyApicMode = 637534292,
    BcdOSLoaderInteger_X2ApicPolicy = 620757077,
    BcdOSLoaderBoolean_UseBootProcessorOnly = 637534304,
    BcdOSLoaderInteger_NumberOfProcessors = 620757089,
    BcdOSLoaderBoolean_ForceMaximumProcessors = 637534306,
    BcdOSLoaderBoolean_ProcessorConfigurationFlags = 620757091,
    BcdOSLoaderBoolean_MaximizeGroupsCreated = 637534308,
    BcdOSLoaderBoolean_ForceGroupAwareness = 637534309,
    BcdOSLoaderInteger_GroupSize = 620757094,
    BcdOSLoaderInteger_UseFirmwarePciSettings = 637534320,
    BcdOSLoaderInteger_MsiPolicy = 620757105,
    BcdOSLoaderInteger_PciExpressPolicy = 620757106,
    BcdOSLoaderInteger_SafeBoot = 620757120,
    BcdOSLoaderBoolean_SafeBootAlternateShell = 637534337,
    BcdOSLoaderBoolean_BootLogInitialization = 637534352,
    BcdOSLoaderBoolean_VerboseObjectLoadMode = 637534353,
    BcdOSLoaderBoolean_KernelDebuggerEnabled = 637534368,
    BcdOSLoaderBoolean_DebuggerHalBreakpoint = 637534369,
    BcdOSLoaderBoolean_UsePlatformClock = 637534370,
    BcdOSLoaderBoolean_ForceLegacyPlatform = 637534371,
    BcdOSLoaderBoolean_UsePlatformTick = 637534372,
    BcdOSLoaderBoolean_DisableDynamicTick = 637534373,
    BcdOSLoaderInteger_TscSyncPolicy = 620757158,
    BcdOSLoaderBoolean_EmsEnabled = 637534384,
    BcdOSLoaderInteger_ForceFailure = 620757184,
    BcdOSLoaderInteger_DriverLoadFailurePolicy = 620757185,
    BcdOSLoaderInteger_BootMenuPolicy = 620757186,
    BcdOSLoaderBoolean_AdvancedOptionsOneTime = 637534403,
    BcdOSLoaderBoolean_OptionsEditOneTime = 637534404,
    BcdOSLoaderInteger_BootStatusPolicy = 620757216,
    BcdOSLoaderBoolean_DisableElamDrivers = 637534433,
    BcdOSLoaderInteger_HypervisorLaunchType = 620757232,
    BcdOSLoaderString_HypervisorPath = 620757233,
    BcdOSLoaderBoolean_HypervisorDebuggerEnabled = 637534450,
    BcdOSLoaderInteger_HypervisorDebuggerType = 620757235,
    BcdOSLoaderInteger_HypervisorDebuggerPortNumber = 620757236,
    BcdOSLoaderInteger_HypervisorDebuggerBaudrate = 620757237,
    BcdOSLoaderInteger_HypervisorDebugger1394Channel = 620757238,
    BcdOSLoaderInteger_BootUxPolicy = 620757239,
    BcdOSLoaderInteger_HypervisorSlatDisabled = 570425592,
    BcdOSLoaderString_HypervisorDebuggerBusParams = 570425593,
    BcdOSLoaderInteger_HypervisorNumProc = 620757242,
    BcdOSLoaderInteger_HypervisorRootProcPerNode = 620757243,
    BcdOSLoaderBoolean_HypervisorUseLargeVTlb = 637534460,
    BcdOSLoaderInteger_HypervisorDebuggerNetHostIp = 620757245,
    BcdOSLoaderInteger_HypervisorDebuggerNetHostPort = 620757246,
    BcdOSLoaderInteger_HypervisorDebuggerPages = 620757247,
    BcdOSLoaderInteger_TpmBootEntropyPolicy = 620757248,
    BcdOSLoaderString_HypervisorDebuggerNetKey = 570425616,
    BcdOSLoaderString_HypervisorProductSkuType = 570425618,
    BcdOSLoaderInteger_HypervisorRootProc = 570425619,
    BcdOSLoaderBoolean_HypervisorDebuggerNetDhcp = 637534484,
    BcdOSLoaderInteger_HypervisorIommuPolicy = 620757269,
    BcdOSLoaderBoolean_HypervisorUseVApic = 637534486,
    BcdOSLoaderString_HypervisorLoadOptions = 570425623,
    BcdOSLoaderInteger_HypervisorMsrFilterPolicy = 620757272,
    BcdOSLoaderInteger_HypervisorMmioNxPolicy = 620757273,
    BcdOSLoaderInteger_HypervisorSchedulerType = 620757274,
    BcdOSLoaderString_HypervisorRootProcNumaNodes = 570425627,
    BcdOSLoaderInteger_HypervisorPerfmon = 620757276,
    BcdOSLoaderInteger_HypervisorRootProcPerCore = 620757277,
    BcdOSLoaderString_HypervisorRootProcNumaNodeLps = 570425630,
    BcdOSLoaderInteger_XSavePolicy = 620757280,
    BcdOSLoaderInteger_XSaveAddFeature0 = 620757281,
    BcdOSLoaderInteger_XSaveAddFeature1 = 620757282,
    BcdOSLoaderInteger_XSaveAddFeature2 = 620757283,
    BcdOSLoaderInteger_XSaveAddFeature3 = 620757284,
    BcdOSLoaderInteger_XSaveAddFeature4 = 620757285,
    BcdOSLoaderInteger_XSaveAddFeature5 = 620757286,
    BcdOSLoaderInteger_XSaveAddFeature6 = 620757287,
    BcdOSLoaderInteger_XSaveAddFeature7 = 620757288,
    BcdOSLoaderInteger_XSaveRemoveFeature = 620757289,
    BcdOSLoaderInteger_XSaveProcessorsMask = 620757290,
    BcdOSLoaderInteger_XSaveDisable = 620757291,
    BcdOSLoaderInteger_KernelDebuggerType = 620757292,
    BcdOSLoaderString_KernelDebuggerBusParameters = 570425645,
    BcdOSLoaderInteger_KernelDebuggerPortAddress = 620757294,
    BcdOSLoaderInteger_KernelDebuggerPortNumber = 620757295,
    BcdOSLoaderInteger_ClaimedTpmCounter = 620757296,
    BcdOSLoaderInteger_KernelDebugger1394Channel = 620757297,
    BcdOSLoaderString_KernelDebuggerUsbTargetname = 570425650,
    BcdOSLoaderInteger_KernelDebuggerNetHostIp = 620757299,
    BcdOSLoaderInteger_KernelDebuggerNetHostPort = 620757300,
    BcdOSLoaderBoolean_KernelDebuggerNetDhcp = 637534517,
    BcdOSLoaderString_KernelDebuggerNetKey = 570425654,
    BcdOSLoaderString_IMCHiveName = 570425655,
    BcdOSLoaderDevice_IMCDevice = 553648440,
    BcdOSLoaderInteger_KernelDebuggerBaudrate = 620757305,
    BcdOSLoaderString_ManufacturingMode = 570425664,
    BcdOSLoaderBoolean_EventLoggingEnabled = 637534529,
    BcdOSLoaderInteger_VsmLaunchType = 620757314,
    BcdOSLoaderInteger_HypervisorEnforcedCodeIntegrity = 620757316,
    BcdOSLoaderBoolean_DtraceEnabled = 637534533,
    BcdOSLoaderDevice_SystemDataDevice = 553648464,
    BcdOSLoaderDevice_OsArcDevice = 553648465,
    BcdOSLoaderDevice_OsDataDevice = 553648467,
    BcdOSLoaderDevice_BspDevice = 553648468,
    BcdOSLoaderDevice_BspFilepath = 553648469,
    BcdOSLoaderString_KernelDebuggerNetHostIpv6 = 570425686,
    BcdOSLoaderString_HypervisorDebuggerNetHostIpv6 = 570425697,
};
enum _MEMORY_INFORMATION_CLASS
{
    MemoryBasicInformation = 0,
    MemoryWorkingSetInformation = 1,
    MemoryMappedFilenameInformation = 2,
    MemoryRegionInformation = 3,
    MemoryWorkingSetExInformation = 4,
    MemorySharedCommitInformation = 5,
    MemoryImageInformation = 6,
    MemoryRegionInformationEx = 7,
    MemoryPrivilegedBasicInformation = 8,
    MemoryEnclaveImageInformation = 9,
    MemoryBasicInformationCapped = 10,
    MemoryPhysicalContiguityInformation = 11,
    MemoryBadInformation = 12,
    MemoryBadInformationAllProcesses = 13,
    MemoryImageExtensionInformation = 14,
    MaxMemoryInfoClass = 15,
};
enum _MEMORY_WORKING_SET_EX_LOCATION
{
    MemoryLocationInvalid = 0,
    MemoryLocationResident = 1,
    MemoryLocationPagefile = 2,
    MemoryLocationReserved = 3,
};
enum _MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE
{
    MemoryNotContiguous = 0,
    MemoryAlignedAndContiguous = 1,
    MemoryNotResident = 2,
    MemoryNotEligibleToMakeContiguous = 3,
    MemoryContiguityStateMax = 4,
};
enum _RTL_SCP_CFG_PAGE_TYPE
{
    RtlScpCfgPageTypeNop = 0,
    RtlScpCfgPageTypeDefault = 1,
    RtlScpCfgPageTypeExportSuppression = 2,
    RtlScpCfgPageTypeFptr = 3,
    RtlScpCfgPageTypeMax = 4,
    RtlScpCfgPageTypeNone = 5,
};
enum _MEMORY_IMAGE_EXTENSION_TYPE
{
    MemoryImageExtensionCfgScp = 0,
    MemoryImageExtensionCfgEmulatedScp = 1,
    MemoryImageExtensionTypeMax = 2,
};
enum _SECTION_INFORMATION_CLASS
{
    SectionBasicInformation = 0,
    SectionImageInformation = 1,
    SectionRelocationInformation = 2,
    SectionOriginalBaseInformation = 3,
    SectionInternalImageInformation = 4,
    MaxSectionInfoClass = 5,
};
enum _SECTION_INHERIT
{
    ViewShare = 1,
    ViewUnmap = 2,
};
enum _VIRTUAL_MEMORY_INFORMATION_CLASS
{
    VmPrefetchInformation = 0,
    VmPagePriorityInformation = 1,
    VmCfgCallTargetInformation = 2,
    VmPageDirtyStateInformation = 3,
    VmImageHotPatchInformation = 4,
    VmPhysicalContiguityInformation = 5,
    VmVirtualMachinePrepopulateInformation = 6,
    VmRemoveFromWorkingSetInformation = 7,
    MaxVmInfoClass = 8,
};
enum _PARTITION_INFORMATION_CLASS
{
    SystemMemoryPartitionInformation = 0,
    SystemMemoryPartitionMoveMemory = 1,
    SystemMemoryPartitionAddPagefile = 2,
    SystemMemoryPartitionCombineMemory = 3,
    SystemMemoryPartitionInitialAddMemory = 4,
    SystemMemoryPartitionGetMemoryEvents = 5,
    SystemMemoryPartitionSetAttributes = 6,
    SystemMemoryPartitionNodeInformation = 7,
    SystemMemoryPartitionCreateLargePages = 8,
    SystemMemoryPartitionDedicatedMemoryInformation = 9,
    SystemMemoryPartitionOpenDedicatedMemory = 10,
    SystemMemoryPartitionMemoryChargeAttributes = 11,
    SystemMemoryPartitionClearAttributes = 12,
    SystemMemoryPartitionSetMemoryThresholds = 13,
    SystemMemoryPartitionMemoryListCommand = 14,
    SystemMemoryPartitionMax = 15,
};
enum _OBJECT_INFORMATION_CLASS
{
    ObjectBasicInformation = 0,
    ObjectNameInformation = 1,
    ObjectTypeInformation = 2,
    ObjectTypesInformation = 3,
    ObjectHandleFlagInformation = 4,
    ObjectSessionInformation = 5,
    ObjectSessionObjectInformation = 6,
    MaxObjectInfoClass = 7,
};
enum _ALPC_MESSAGE_INFORMATION_CLASS
{
    AlpcMessageSidInformation = 0,
    AlpcMessageTokenModifiedIdInformation = 1,
    AlpcMessageDirectStatusInformation = 2,
    AlpcMessageHandleInformation = 3,
    MaxAlpcMessageInfoClass = 4,
};
enum _PF_ENABLE_STATUS
{
    PfSvNotSpecified = 0,
    PfSvEnabled = 1,
    PfSvDisabled = 2,
    PfSvMaxEnableStatus = 3,
};
enum _BOUNDARY_ENTRY_TYPE
{
    OBNS_Invalid = 0,
    OBNS_Name = 1,
    OBNS_SID = 2,
    OBNS_IL = 3,
};
enum _SYMBOLIC_LINK_INFO_CLASS
{
    SymbolicLinkGlobalInformation = 1,
    SymbolicLinkAccessMask = 2,
    MaxnSymbolicLinkInfoClass = 3,
};
enum _PROCESS_TLS_INFORMATION_TYPE
{
    ProcessTlsReplaceIndex = 0,
    ProcessTlsReplaceVector = 1,
    MaxProcessTlsOperation = 2,
};
enum _PROCESSINFOCLASS
{
    ProcessBasicInformation = 0,
    ProcessQuotaLimits = 1,
    ProcessIoCounters = 2,
    ProcessVmCounters = 3,
    ProcessTimes = 4,
    ProcessBasePriority = 5,
    ProcessRaisePriority = 6,
    ProcessDebugPort = 7,
    ProcessExceptionPort = 8,
    ProcessAccessToken = 9,
    ProcessLdtInformation = 10,
    ProcessLdtSize = 11,
    ProcessDefaultHardErrorMode = 12,
    ProcessIoPortHandlers = 13,
    ProcessPooledUsageAndLimits = 14,
    ProcessWorkingSetWatch = 15,
    ProcessUserModeIOPL = 16,
    ProcessEnableAlignmentFaultFixup = 17,
    ProcessPriorityClass = 18,
    ProcessWx86Information = 19,
    ProcessHandleCount = 20,
    ProcessAffinityMask = 21,
    ProcessPriorityBoost = 22,
    ProcessDeviceMap = 23,
    ProcessSessionInformation = 24,
    ProcessForegroundInformation = 25,
    ProcessWow64Information = 26,
    ProcessImageFileName = 27,
    ProcessLUIDDeviceMapsEnabled = 28,
    ProcessBreakOnTermination = 29,
    ProcessDebugObjectHandle = 30,
    ProcessDebugFlags = 31,
    ProcessHandleTracing = 32,
    ProcessIoPriority = 33,
    ProcessExecuteFlags = 34,
    ProcessTlsInformation = 35,
    ProcessCookie = 36,
    ProcessImageInformation = 37,
    ProcessCycleTime = 38,
    ProcessPagePriority = 39,
    ProcessInstrumentationCallback = 40,
    ProcessThreadStackAllocation = 41,
    ProcessWorkingSetWatchEx = 42,
    ProcessImageFileNameWin32 = 43,
    ProcessImageFileMapping = 44,
    ProcessAffinityUpdateMode = 45,
    ProcessMemoryAllocationMode = 46,
    ProcessGroupInformation = 47,
    ProcessTokenVirtualizationEnabled = 48,
    ProcessConsoleHostProcess = 49,
    ProcessWindowInformation = 50,
    ProcessHandleInformation = 51,
    ProcessMitigationPolicy = 52,
    ProcessDynamicFunctionTableInformation = 53,
    ProcessHandleCheckingMode = 54,
    ProcessKeepAliveCount = 55,
    ProcessRevokeFileHandles = 56,
    ProcessWorkingSetControl = 57,
    ProcessHandleTable = 58,
    ProcessCheckStackExtentsMode = 59,
    ProcessCommandLineInformation = 60,
    ProcessProtectionInformation = 61,
    ProcessMemoryExhaustion = 62,
    ProcessFaultInformation = 63,
    ProcessTelemetryIdInformation = 64,
    ProcessCommitReleaseInformation = 65,
    ProcessDefaultCpuSetsInformation = 66,
    ProcessAllowedCpuSetsInformation = 67,
    ProcessSubsystemProcess = 68,
    ProcessJobMemoryInformation = 69,
    ProcessInPrivate = 70,
    ProcessRaiseUMExceptionOnInvalidHandleClose = 71,
    ProcessIumChallengeResponse = 72,
    ProcessChildProcessInformation = 73,
    ProcessHighGraphicsPriorityInformation = 74,
    ProcessSubsystemInformation = 75,
    ProcessEnergyValues = 76,
    ProcessPowerThrottlingState = 77,
    ProcessReserved3Information = 78,
    ProcessWin32kSyscallFilterInformation = 79,
    ProcessDisableSystemAllowedCpuSets = 80,
    ProcessWakeInformation = 81,
    ProcessEnergyTrackingState = 82,
    ProcessManageWritesToExecutableMemory = 83,
    ProcessCaptureTrustletLiveDump = 84,
    ProcessTelemetryCoverage = 85,
    ProcessEnclaveInformation = 86,
    ProcessEnableReadWriteVmLogging = 87,
    ProcessUptimeInformation = 88,
    ProcessImageSection = 89,
    ProcessDebugAuthInformation = 90,
    ProcessSystemResourceManagement = 91,
    ProcessSequenceNumber = 92,
    ProcessLoaderDetour = 93,
    ProcessSecurityDomainInformation = 94,
    ProcessCombineSecurityDomainsInformation = 95,
    ProcessEnableLogging = 96,
    ProcessLeapSecondInformation = 97,
    ProcessFiberShadowStackAllocation = 98,
    ProcessFreeFiberShadowStackAllocation = 99,
    ProcessAltSystemCallInformation = 100,
    ProcessDynamicEHContinuationTargets = 101,
    ProcessDynamicEnforcedCetCompatibleRanges = 102,
    ProcessCreateStateChange = 103,
    ProcessApplyStateChange = 104,
    ProcessEnableOptionalXStateFeatures = 105,
    ProcessAltPrefetchParam = 106,
    ProcessAssignCpuPartitions = 107,
    ProcessPriorityClassEx = 108,
    ProcessMembershipInformation = 109,
    ProcessEffectiveIoPriority = 110,
    ProcessEffectivePagePriority = 111,
    ProcessSchedulerSharedData = 112,
    ProcessSlistRollbackInformation = 113,
    ProcessNetworkIoCounters = 114,
    ProcessFindFirstThreadByTebValue = 115,
    MaxProcessInfoClass = 116,
};
enum _THREADINFOCLASS
{
    ThreadBasicInformation = 0,
    ThreadTimes = 1,
    ThreadPriority = 2,
    ThreadBasePriority = 3,
    ThreadAffinityMask = 4,
    ThreadImpersonationToken = 5,
    ThreadDescriptorTableEntry = 6,
    ThreadEnableAlignmentFaultFixup = 7,
    ThreadEventPair = 8,
    ThreadQuerySetWin32StartAddress = 9,
    ThreadZeroTlsCell = 10,
    ThreadPerformanceCount = 11,
    ThreadAmILastThread = 12,
    ThreadIdealProcessor = 13,
    ThreadPriorityBoost = 14,
    ThreadSetTlsArrayAddress = 15,
    ThreadIsIoPending = 16,
    ThreadHideFromDebugger = 17,
    ThreadBreakOnTermination = 18,
    ThreadSwitchLegacyState = 19,
    ThreadIsTerminated = 20,
    ThreadLastSystemCall = 21,
    ThreadIoPriority = 22,
    ThreadCycleTime = 23,
    ThreadPagePriority = 24,
    ThreadActualBasePriority = 25,
    ThreadTebInformation = 26,
    ThreadCSwitchMon = 27,
    ThreadCSwitchPmu = 28,
    ThreadWow64Context = 29,
    ThreadGroupInformation = 30,
    ThreadUmsInformation = 31,
    ThreadCounterProfiling = 32,
    ThreadIdealProcessorEx = 33,
    ThreadCpuAccountingInformation = 34,
    ThreadSuspendCount = 35,
    ThreadHeterogeneousCpuPolicy = 36,
    ThreadContainerId = 37,
    ThreadNameInformation = 38,
    ThreadSelectedCpuSets = 39,
    ThreadSystemThreadInformation = 40,
    ThreadActualGroupAffinity = 41,
    ThreadDynamicCodePolicyInfo = 42,
    ThreadExplicitCaseSensitivity = 43,
    ThreadWorkOnBehalfTicket = 44,
    ThreadSubsystemInformation = 45,
    ThreadDbgkWerReportActive = 46,
    ThreadAttachContainer = 47,
    ThreadManageWritesToExecutableMemory = 48,
    ThreadPowerThrottlingState = 49,
    ThreadWorkloadClass = 50,
    ThreadCreateStateChange = 51,
    ThreadApplyStateChange = 52,
    ThreadStrongerBadHandleChecks = 53,
    ThreadEffectiveIoPriority = 54,
    ThreadEffectivePagePriority = 55,
    ThreadUpdateLockOwnership = 56,
    ThreadSchedulerSharedDataSlot = 57,
    ThreadTebInformationAtomic = 58,
    ThreadIndexInformation = 59,
    MaxThreadInfoClass = 60,
};
enum _IO_COMPLETION_INFORMATION_CLASS
{
    IoCompletionBasicInformation = 0,
};
enum _PROCESS_WORKING_SET_OPERATION
{
    ProcessWorkingSetSwap = 0,
    ProcessWorkingSetEmpty = 1,
    ProcessWorkingSetOperationMax = 2,
};
enum _PS_PROTECTED_TYPE
{
    PsProtectedTypeNone = 0,
    PsProtectedTypeProtectedLight = 1,
    PsProtectedTypeProtected = 2,
    PsProtectedTypeMax = 3,
};
enum _PS_PROTECTED_SIGNER
{
    PsProtectedSignerNone = 0,
    PsProtectedSignerAuthenticode = 1,
    PsProtectedSignerCodeGen = 2,
    PsProtectedSignerAntimalware = 3,
    PsProtectedSignerLsa = 4,
    PsProtectedSignerWindows = 5,
    PsProtectedSignerWinTcb = 6,
    PsProtectedSignerWinSystem = 7,
    PsProtectedSignerApp = 8,
    PsProtectedSignerMax = 9,
};
enum _SUPERFETCH_INFORMATION_CLASS
{
    SuperfetchRetrieveTrace = 1,
    SuperfetchSystemParameters = 2,
    SuperfetchLogEvent = 3,
    SuperfetchGenerateTrace = 4,
    SuperfetchPrefetch = 5,
    SuperfetchPfnQuery = 6,
    SuperfetchPfnSetPriority = 7,
    SuperfetchPrivSourceQuery = 8,
    SuperfetchSequenceNumberQuery = 9,
    SuperfetchScenarioPhase = 10,
    SuperfetchWorkerPriority = 11,
    SuperfetchScenarioQuery = 12,
    SuperfetchScenarioPrefetch = 13,
    SuperfetchRobustnessControl = 14,
    SuperfetchTimeControl = 15,
    SuperfetchMemoryListQuery = 16,
    SuperfetchMemoryRangesQuery = 17,
    SuperfetchTracingControl = 18,
    SuperfetchTrimWhileAgingControl = 19,
    SuperfetchRepurposedByPrefetch = 20,
    SuperfetchChannelPowerRequest = 21,
    SuperfetchMovePages = 22,
    SuperfetchVirtualQuery = 23,
    SuperfetchCombineStatsQuery = 24,
    SuperfetchSetMinWsAgeRate = 25,
    SuperfetchDeprioritizeOldPagesInWs = 26,
    SuperfetchFileExtentsQuery = 27,
    SuperfetchGpuUtilizationQuery = 28,
    SuperfetchPfnSet = 29,
    SuperfetchInformationMax = 30,
};
enum _SCHEDULER_SHARED_DATA_SLOT_ACTION
{
    SchedulerSharedSlotAssign = 0,
    SchedulerSharedSlotFree = 1,
    SchedulerSharedSlotQuery = 2,
};
enum _THREAD_UMS_INFORMATION_COMMAND
{
    UmsInformationCommandInvalid = 0,
    UmsInformationCommandAttach = 1,
    UmsInformationCommandDetach = 2,
    UmsInformationCommandQuery = 3,
};
enum _SUBSYSTEM_INFORMATION_TYPE
{
    SubsystemInformationTypeWin32 = 0,
    SubsystemInformationTypeWSL = 1,
    MaxSubsystemInformationType = 2,
};
enum _THREAD_WORKLOAD_CLASS
{
    ThreadWorkloadClassDefault = 0,
    ThreadWorkloadClassGraphics = 1,
    MaxThreadWorkloadClass = 2,
};
enum _PROCESS_STATE_CHANGE_TYPE
{
    ProcessStateChangeSuspend = 0,
    ProcessStateChangeResume = 1,
    ProcessStateChangeMax = 2,
};
enum _THREAD_STATE_CHANGE_TYPE
{
    ThreadStateChangeSuspend = 0,
    ThreadStateChangeResume = 1,
    ThreadStateChangeMax = 2,
};
enum _SE_SAFE_OPEN_PROMPT_EXPERIENCE_RESULTS
{
    SeSafeOpenExperienceNone = 0,
    SeSafeOpenExperienceCalled = 1,
    SeSafeOpenExperienceAppRepCalled = 2,
    SeSafeOpenExperiencePromptDisplayed = 4,
    SeSafeOpenExperienceUAC = 8,
    SeSafeOpenExperienceUninstaller = 16,
    SeSafeOpenExperienceIgnoreUnknownOrBad = 32,
    SeSafeOpenExperienceDefenderTrustedInstaller = 64,
    SeSafeOpenExperienceMOTWPresent = 128,
    SeSafeOpenExperienceElevatedNoPropagation = 256,
};
enum _PS_STD_HANDLE_STATE
{
    PsNeverDuplicate = 0,
    PsRequestDuplicate = 1,
    PsAlwaysDuplicate = 2,
    PsMaxStdHandleStates = 3,
};
enum _PS_MITIGATION_OPTION
{
    PS_MITIGATION_OPTION_NX = 0,
    PS_MITIGATION_OPTION_SEHOP = 1,
    PS_MITIGATION_OPTION_FORCE_RELOCATE_IMAGES = 2,
    PS_MITIGATION_OPTION_HEAP_TERMINATE = 3,
    PS_MITIGATION_OPTION_BOTTOM_UP_ASLR = 4,
    PS_MITIGATION_OPTION_HIGH_ENTROPY_ASLR = 5,
    PS_MITIGATION_OPTION_STRICT_HANDLE_CHECKS = 6,
    PS_MITIGATION_OPTION_WIN32K_SYSTEM_CALL_DISABLE = 7,
    PS_MITIGATION_OPTION_EXTENSION_POINT_DISABLE = 8,
    PS_MITIGATION_OPTION_PROHIBIT_DYNAMIC_CODE = 9,
    PS_MITIGATION_OPTION_CONTROL_FLOW_GUARD = 10,
    PS_MITIGATION_OPTION_BLOCK_NON_MICROSOFT_BINARIES = 11,
    PS_MITIGATION_OPTION_FONT_DISABLE = 12,
    PS_MITIGATION_OPTION_IMAGE_LOAD_NO_REMOTE = 13,
    PS_MITIGATION_OPTION_IMAGE_LOAD_NO_LOW_LABEL = 14,
    PS_MITIGATION_OPTION_IMAGE_LOAD_PREFER_SYSTEM32 = 15,
    PS_MITIGATION_OPTION_RETURN_FLOW_GUARD = 16,
    PS_MITIGATION_OPTION_LOADER_INTEGRITY_CONTINUITY = 17,
    PS_MITIGATION_OPTION_STRICT_CONTROL_FLOW_GUARD = 18,
    PS_MITIGATION_OPTION_RESTRICT_SET_THREAD_CONTEXT = 19,
    PS_MITIGATION_OPTION_ROP_STACKPIVOT = 20,
    PS_MITIGATION_OPTION_ROP_CALLER_CHECK = 21,
    PS_MITIGATION_OPTION_ROP_SIMEXEC = 22,
    PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER = 23,
    PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER_PLUS = 24,
    PS_MITIGATION_OPTION_RESTRICT_CHILD_PROCESS_CREATION = 25,
    PS_MITIGATION_OPTION_IMPORT_ADDRESS_FILTER = 26,
    PS_MITIGATION_OPTION_MODULE_TAMPERING_PROTECTION = 27,
    PS_MITIGATION_OPTION_RESTRICT_INDIRECT_BRANCH_PREDICTION = 28,
    PS_MITIGATION_OPTION_SPECULATIVE_STORE_BYPASS_DISABLE = 29,
    PS_MITIGATION_OPTION_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY = 30,
    PS_MITIGATION_OPTION_CET_USER_SHADOW_STACKS = 31,
    PS_MITIGATION_OPTION_USER_CET_SET_CONTEXT_IP_VALIDATION = 32,
    PS_MITIGATION_OPTION_BLOCK_NON_CET_BINARIES = 33,
    PS_MITIGATION_OPTION_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY = 34,
    PS_MITIGATION_OPTION_REDIRECTION_TRUST = 35,
    PS_MITIGATION_OPTION_RESTRICT_CORE_SHARING = 36,
    PS_MITIGATION_OPTION_FSCTL_SYSTEM_CALL_DISABLE = 37,
};
enum _PS_CREATE_STATE
{
    PsCreateInitialState = 0,
    PsCreateFailOnFileOpen = 1,
    PsCreateFailOnSectionCreate = 2,
    PsCreateFailExeFormat = 3,
    PsCreateFailMachineMismatch = 4,
    PsCreateFailExeName = 5,
    PsCreateSuccess = 6,
    PsCreateMaximumStates = 7,
};
enum _JOBOBJECT_IO_PRIORITY_LIMIT_FLAGS
{
    JOBOBJECT_IO_PRIORITY_LIMIT_ENABLE = 1,
    JOBOBJECT_IO_PRIORITY_LIMIT_VALID_FLAGS = 1,
};
enum _JOBOBJECT_PAGE_PRIORITY_LIMIT_FLAGS
{
    JOBOBJECT_PAGE_PRIORITY_LIMIT_ENABLE = 1,
    JOBOBJECT_PAGE_PRIORITY_LIMIT_VALID_FLAGS = 1,
};
enum _MEMORY_RESERVE_TYPE
{
    MemoryReserveUserApc = 0,
    MemoryReserveIoCompletion = 1,
    MemoryReserveTypeMax = 2,
};
enum _PSSNT_CAPTURE_FLAGS
{
    PSSNT_CAPTURE_NONE = 0,
    PSSNT_CAPTURE_VA_CLONE = 1,
    PSSNT_CAPTURE_RESERVED_00000002 = 2,
    PSSNT_CAPTURE_HANDLES = 4,
    PSSNT_CAPTURE_HANDLE_NAME_INFORMATION = 8,
    PSSNT_CAPTURE_HANDLE_BASIC_INFORMATION = 16,
    PSSNT_CAPTURE_HANDLE_TYPE_SPECIFIC_INFORMATION = 32,
    PSSNT_CAPTURE_HANDLE_TRACE = 64,
    PSSNT_CAPTURE_THREADS = 128,
    PSSNT_CAPTURE_THREAD_CONTEXT = 256,
    PSSNT_CAPTURE_THREAD_CONTEXT_EXTENDED = 512,
    PSSNT_CAPTURE_RESERVED_00000400 = 1024,
    PSSNT_CAPTURE_VA_SPACE = 2048,
    PSSNT_CAPTURE_VA_SPACE_SECTION_INFORMATION = 4096,
    PSSNT_CAPTURE_IPT_TRACE = 8192,
    PSSNT_CAPTURE_RESERVED_00004000 = 16384,
    PSSNT_CREATE_BREAKAWAY_OPTIONAL = 67108864,
    PSSNT_CREATE_BREAKAWAY = 134217728,
    PSSNT_CREATE_FORCE_BREAKAWAY = 268435456,
    PSSNT_CREATE_USE_VM_ALLOCATIONS = 536870912,
    PSSNT_CREATE_MEASURE_PERFORMANCE = 1073741824,
    PSSNT_CREATE_RELEASE_SECTION = -2147483648,
};
enum _PSSNT_DUPLICATE_FLAGS
{
    PSSNT_DUPLICATE_NONE = 0,
    PSSNT_DUPLICATE_CLOSE_SOURCE = 1,
};
enum _PSSNT_QUERY_INFORMATION_CLASS
{
    PSSNT_QUERY_PROCESS_INFORMATION = 0,
    PSSNT_QUERY_VA_CLONE_INFORMATION = 1,
    PSSNT_QUERY_AUXILIARY_PAGES_INFORMATION = 2,
    PSSNT_QUERY_VA_SPACE_INFORMATION = 3,
    PSSNT_QUERY_HANDLE_INFORMATION = 4,
    PSSNT_QUERY_THREAD_INFORMATION = 5,
    PSSNT_QUERY_HANDLE_TRACE_INFORMATION = 6,
    PSSNT_QUERY_PERFORMANCE_COUNTERS = 7,
};
enum _DBG_STATE
{
    DbgIdle = 0,
    DbgReplyPending = 1,
    DbgCreateThreadStateChange = 2,
    DbgCreateProcessStateChange = 3,
    DbgExitThreadStateChange = 4,
    DbgExitProcessStateChange = 5,
    DbgExceptionStateChange = 6,
    DbgBreakpointStateChange = 7,
    DbgSingleStepStateChange = 8,
    DbgLoadDllStateChange = 9,
    DbgUnloadDllStateChange = 10,
};
enum _DEBUGOBJECTINFOCLASS
{
    DebugObjectUnusedInformation = 0,
    DebugObjectKillProcessOnExitInformation = 1,
    MaxDebugObjectInfoClass = 2,
};
enum _FILE_INFORMATION_CLASS
{
    FileDirectoryInformation = 1,
    FileFullDirectoryInformation = 2,
    FileBothDirectoryInformation = 3,
    FileBasicInformation = 4,
    FileStandardInformation = 5,
    FileInternalInformation = 6,
    FileEaInformation = 7,
    FileAccessInformation = 8,
    FileNameInformation = 9,
    FileRenameInformation = 10,
    FileLinkInformation = 11,
    FileNamesInformation = 12,
    FileDispositionInformation = 13,
    FilePositionInformation = 14,
    FileFullEaInformation = 15,
    FileModeInformation = 16,
    FileAlignmentInformation = 17,
    FileAllInformation = 18,
    FileAllocationInformation = 19,
    FileEndOfFileInformation = 20,
    FileAlternateNameInformation = 21,
    FileStreamInformation = 22,
    FilePipeInformation = 23,
    FilePipeLocalInformation = 24,
    FilePipeRemoteInformation = 25,
    FileMailslotQueryInformation = 26,
    FileMailslotSetInformation = 27,
    FileCompressionInformation = 28,
    FileObjectIdInformation = 29,
    FileCompletionInformation = 30,
    FileMoveClusterInformation = 31,
    FileQuotaInformation = 32,
    FileReparsePointInformation = 33,
    FileNetworkOpenInformation = 34,
    FileAttributeTagInformation = 35,
    FileTrackingInformation = 36,
    FileIdBothDirectoryInformation = 37,
    FileIdFullDirectoryInformation = 38,
    FileValidDataLengthInformation = 39,
    FileShortNameInformation = 40,
    FileIoCompletionNotificationInformation = 41,
    FileIoStatusBlockRangeInformation = 42,
    FileIoPriorityHintInformation = 43,
    FileSfioReserveInformation = 44,
    FileSfioVolumeInformation = 45,
    FileHardLinkInformation = 46,
    FileProcessIdsUsingFileInformation = 47,
    FileNormalizedNameInformation = 48,
    FileNetworkPhysicalNameInformation = 49,
    FileIdGlobalTxDirectoryInformation = 50,
    FileIsRemoteDeviceInformation = 51,
    FileUnusedInformation = 52,
    FileNumaNodeInformation = 53,
    FileStandardLinkInformation = 54,
    FileRemoteProtocolInformation = 55,
    FileRenameInformationBypassAccessCheck = 56,
    FileLinkInformationBypassAccessCheck = 57,
    FileVolumeNameInformation = 58,
    FileIdInformation = 59,
    FileIdExtdDirectoryInformation = 60,
    FileReplaceCompletionInformation = 61,
    FileHardLinkFullIdInformation = 62,
    FileIdExtdBothDirectoryInformation = 63,
    FileDispositionInformationEx = 64,
    FileRenameInformationEx = 65,
    FileRenameInformationExBypassAccessCheck = 66,
    FileDesiredStorageClassInformation = 67,
    FileStatInformation = 68,
    FileMemoryPartitionInformation = 69,
    FileStatLxInformation = 70,
    FileCaseSensitiveInformation = 71,
    FileLinkInformationEx = 72,
    FileLinkInformationExBypassAccessCheck = 73,
    FileStorageReserveIdInformation = 74,
    FileCaseSensitiveInformationForceAccessCheck = 75,
    FileKnownFolderInformation = 76,
    FileStatBasicInformation = 77,
    FileId64ExtdDirectoryInformation = 78,
    FileId64ExtdBothDirectoryInformation = 79,
    FileIdAllExtdDirectoryInformation = 80,
    FileIdAllExtdBothDirectoryInformation = 81,
    FileStreamReservationInformation = 82,
    FileMupProviderInfo = 83,
    FileMaximumInformation = 84,
};
enum _MOUNTMGR_AUTO_MOUNT_STATE
{
    Disabled = 0,
    Enabled = 1,
};
enum _CM_EXTENDED_PARAMETER_TYPE
{
    CmExtendedParameterInvalidType = 0,
    CmExtendedParameterTrustClassKey = 1,
    CmExtendedParameterEvent = 2,
    CmExtendedParameterFileAccessToken = 3,
    CmExtendedParameterMax = 4,
};
enum _IO_PRIORITY_HINT
{
    IoPriorityVeryLow = 0,
    IoPriorityLow = 1,
    IoPriorityNormal = 2,
    IoPriorityHigh = 3,
    IoPriorityCritical = 4,
    MaxIoPriorityTypes = 5,
};
enum _FILE_KNOWN_FOLDER_TYPE
{
    KnownFolderNone = 0,
    KnownFolderDesktop = 1,
    KnownFolderDocuments = 2,
    KnownFolderDownloads = 3,
    KnownFolderMusic = 4,
    KnownFolderPictures = 5,
    KnownFolderVideos = 6,
    KnownFolderOther = 7,
    KnownFolderMax = 8,
};
enum _DIRECTORY_NOTIFY_INFORMATION_CLASS
{
    DirectoryNotifyInformation = 1,
    DirectoryNotifyExtendedInformation = 2,
    DirectoryNotifyFullInformation = 3,
    DirectoryNotifyMaximumInformation = 4,
};
enum _IO_SESSION_EVENT
{
    IoSessionEventIgnore = 0,
    IoSessionEventCreated = 1,
    IoSessionEventTerminated = 2,
    IoSessionEventConnected = 3,
    IoSessionEventDisconnected = 4,
    IoSessionEventLogon = 5,
    IoSessionEventLogoff = 6,
    IoSessionEventMax = 7,
};
enum _IO_SESSION_STATE
{
    IoSessionStateCreated = 1,
    IoSessionStateInitialized = 2,
    IoSessionStateConnected = 3,
    IoSessionStateDisconnected = 4,
    IoSessionStateDisconnectedLoggedOn = 5,
    IoSessionStateLoggedOn = 6,
    IoSessionStateLoggedOff = 7,
    IoSessionStateTerminated = 8,
    IoSessionStateMax = 9,
};
enum _DMA_WIDTH
{
    Width8Bits = 0,
    Width16Bits = 1,
    Width32Bits = 2,
    Width64Bits = 3,
    WidthNoWrap = 4,
    MaximumDmaWidth = 5,
};
enum _DMA_SPEED
{
    Compatible = 0,
    TypeA = 1,
    TypeB = 2,
    TypeC = 3,
    TypeF = 4,
    MaximumDmaSpeed = 5,
};
enum _FLT_LINK_TYPE
{
    FILTER = 0,
    FILTER_INSTANCE = 1,
    FILTER_VOLUME = 2,
    FILTER_MANAGER = 3,
    FILTER_MANAGER_VOLUME = 4,
};
enum _ATTACH_TYPE
{
    AltitudeBased = 0,
    InstanceNameBased = 1,
};
enum _FS_FILTER_SECTION_SYNC_TYPE
{
    SyncTypeOther = 0,
    SyncTypeCreateSection = 1,
};
enum _CREATE_FILE_TYPE
{
    CreateFileTypeNone = 0,
    CreateFileTypeNamedPipe = 1,
    CreateFileTypeMailslot = 2,
};
enum _DEVICE_USAGE_NOTIFICATION_TYPE
{
    DeviceUsageTypeUndefined = 0,
    DeviceUsageTypePaging = 1,
    DeviceUsageTypeHibernation = 2,
    DeviceUsageTypeDumpFile = 3,
    DeviceUsageTypeBoot = 4,
    DeviceUsageTypePostDisplay = 5,
    DeviceUsageTypeGuestAssigned = 6,
};
enum _ALPC_PORT_INFORMATION_CLASS
{
    AlpcBasicInformation = 0,
    AlpcPortInformation = 1,
    AlpcAssociateCompletionPortInformation = 2,
    AlpcConnectedSIDInformation = 3,
    AlpcServerInformation = 4,
    AlpcMessageZoneInformation = 5,
    AlpcRegisterCompletionListInformation = 6,
    AlpcUnregisterCompletionListInformation = 7,
    AlpcAdjustCompletionListConcurrencyCountInformation = 8,
    AlpcRegisterCallbackInformation = 9,
    AlpcCompletionListRundownInformation = 10,
    AlpcWaitForPortReferences = 11,
    AlpcServerSessionInformation = 12,
};
enum _PF_BOOT_PHASE_ID
{
    PfKernelInitPhase = 0,
    PfBootDriverInitPhase = 90,
    PfSystemDriverInitPhase = 120,
    PfSessionManagerInitPhase = 150,
    PfSMRegistryInitPhase = 180,
    PfVideoInitPhase = 210,
    PfPostVideoInitPhase = 240,
    PfBootAcceptedRegistryInitPhase = 270,
    PfUserShellReadyPhase = 300,
    PfMaxBootPhaseId = 900,
};
enum _PREFETCHER_INFORMATION_CLASS
{
    PrefetcherRetrieveTrace = 1,
    PrefetcherSystemParameters = 2,
    PrefetcherBootPhase = 3,
    PrefetcherSpare1 = 4,
    PrefetcherBootControl = 5,
    PrefetcherScenarioPolicyControl = 6,
    PrefetcherSpare2 = 7,
    PrefetcherAppLaunchScenarioControl = 8,
    PrefetcherInformationMax = 9,
};
enum _PF_EVENT_TYPE
{
    PfEventTypeImageLoad = 0,
    PfEventTypeAppLaunch = 1,
    PfEventTypeStartTrace = 2,
    PfEventTypeEndTrace = 3,
    PfEventTypeTimestamp = 4,
    PfEventTypeOperation = 5,
    PfEventTypeRepurpose = 6,
    PfEventTypeForegroundProcess = 7,
    PfEventTypeTimeRange = 8,
    PfEventTypeUserInput = 9,
    PfEventTypeFileAccess = 10,
    PfEventTypeUnmap = 11,
    PfEventTypeUtilization = 11,
    PfEventTypeMemInfo = 12,
    PfEventTypeFileDelete = 13,
    PfEventTypeAppExit = 14,
    PfEventTypeSystemTime = 15,
    PfEventTypePower = 16,
    PfEventTypeSessionChange = 17,
    PfEventTypeHardFaultTimeStamp = 18,
    PfEventTypeVirtualFree = 19,
    PfEventTypePerfInfo = 20,
    PfEventTypeProcessSnapshot = 21,
    PfEventTypeUserSnapshot = 22,
    PfEventTypeStreamSequenceNumber = 23,
    PfEventTypeFileTruncate = 24,
    PfEventTypeFileRename = 25,
    PfEventTypeFileCreate = 26,
    PfEventTypeAgCxContext = 27,
    PfEventTypePowerAction = 28,
    PfEventTypeHardFaultTS = 29,
    PfEventTypeRobustInfo = 30,
    PfEventTypeFileDefrag = 31,
    PfEventTypeMax = 32,
};
enum _PFS_PRIVATE_PAGE_SOURCE_TYPE
{
    PfsPrivateSourceKernel = 0,
    PfsPrivateSourceSession = 1,
    PfsPrivateSourceProcess = 2,
    PfsPrivateSourceMax = 3,
};
enum _PF_PHASED_SCENARIO_TYPE
{
    PfScenarioTypeNone = 0,
    PfScenarioTypeStandby = 1,
    PfScenarioTypeHibernate = 2,
    PfScenarioTypeFUS = 3,
    PfScenarioTypeMax = 4,
};
enum _PF_ROBUSTNESS_CONTROL_COMMAND
{
    PfRpControlUpdate = 0,
    PfRpControlReset = 1,
    PfRpControlRobustAllStart = 2,
    PfRpControlRobustAllStop = 3,
    PfRpControlCommandMax = 4,
};
enum _PNP_VETO_TYPE
{
    PNP_VetoTypeUnknown = 0,
    PNP_VetoLegacyDevice = 1,
    PNP_VetoPendingClose = 2,
    PNP_VetoWindowsApp = 3,
    PNP_VetoWindowsService = 4,
    PNP_VetoOutstandingOpen = 5,
    PNP_VetoDevice = 6,
    PNP_VetoDriver = 7,
    PNP_VetoIllegalDeviceRequest = 8,
    PNP_VetoInsufficientPower = 9,
    PNP_VetoNonDisableable = 10,
    PNP_VetoLegacyDriver = 11,
    PNP_VetoInsufficientRights = 12,
    PNP_VetoAlreadyRemoved = 13,
};
enum _PLUGPLAY_EVENT_CATEGORY
{
    HardwareProfileChangeEvent = 0,
    TargetDeviceChangeEvent = 1,
    DeviceClassChangeEvent = 2,
    CustomDeviceEvent = 3,
    DeviceInstallEvent = 4,
    DeviceArrivalEvent = 5,
    PowerEvent = 6,
    VetoEvent = 7,
    BlockedDriverEvent = 8,
    InvalidIDEvent = 9,
    MaxPlugEventCategory = 10,
};
enum _PLUGPLAY_CONTROL_CLASS
{
    PlugPlayControlEnumerateDevice = 0,
    PlugPlayControlRegisterNewDevice = 1,
    PlugPlayControlDeregisterDevice = 2,
    PlugPlayControlInitializeDevice = 3,
    PlugPlayControlStartDevice = 4,
    PlugPlayControlUnlockDevice = 5,
    PlugPlayControlQueryAndRemoveDevice = 6,
    PlugPlayControlUserResponse = 7,
    PlugPlayControlGenerateLegacyDevice = 8,
    PlugPlayControlGetInterfaceDeviceList = 9,
    PlugPlayControlProperty = 10,
    PlugPlayControlDeviceClassAssociation = 11,
    PlugPlayControlGetRelatedDevice = 12,
    PlugPlayControlGetInterfaceDeviceAlias = 13,
    PlugPlayControlDeviceStatus = 14,
    PlugPlayControlGetDeviceDepth = 15,
    PlugPlayControlQueryDeviceRelations = 16,
    PlugPlayControlTargetDeviceRelation = 17,
    PlugPlayControlQueryConflictList = 18,
    PlugPlayControlRetrieveDock = 19,
    PlugPlayControlResetDevice = 20,
    PlugPlayControlHaltDevice = 21,
    PlugPlayControlGetBlockedDriverList = 22,
    PlugPlayControlGetDeviceInterfaceEnabled = 23,
    MaxPlugPlayControl = 24,
};
enum _DEVICE_RELATION_TYPE
{
    BusRelations = 0,
    EjectionRelations = 1,
    PowerRelations = 2,
    RemovalRelations = 3,
    TargetDeviceRelation = 4,
    SingleBusRelations = 5,
    TransportRelations = 6,
};
enum _BUS_QUERY_ID_TYPE
{
    BusQueryDeviceID = 0,
    BusQueryHardwareIDs = 1,
    BusQueryCompatibleIDs = 2,
    BusQueryInstanceID = 3,
    BusQueryDeviceSerialNumber = 4,
    BusQueryContainerID = 5,
};
enum _DEVICE_TEXT_TYPE
{
    DeviceTextDescription = 0,
    DeviceTextLocationInformation = 1,
};
enum _POWER_STATE_DISABLED_TYPE
{
    PoDisabledStateSleeping1 = 0,
    PoDisabledStateSleeping2 = 1,
    PoDisabledStateSleeping3 = 2,
    PoDisabledStateSleeping4 = 3,
    PoDisabledStateSleeping0Idle = 4,
    PoDisabledStateReserved5 = 5,
    PoDisabledStateSleeping4Firmware = 6,
    PoDisabledStateMaximum = 7,
};
enum _POWER_REQUEST_TYPE_INTERNAL
{
    PowerRequestDisplayRequiredInternal = 0,
    PowerRequestSystemRequiredInternal = 1,
    PowerRequestAwayModeRequiredInternal = 2,
    PowerRequestExecutionRequiredInternal = 3,
    PowerRequestPerfBoostRequiredInternal = 4,
    PowerRequestActiveLockScreenInternal = 5,
    PowerRequestInternalInvalid = 6,
    PowerRequestInternalUnknown = 7,
    PowerRequestFullScreenVideoRequired = 8,
};
enum _POWER_STATE_TYPE
{
    SystemPowerState = 0,
    DevicePowerState = 1,
};
enum _REQUESTER_TYPE
{
    KernelRequester = 0,
    UserProcessRequester = 1,
    UserSharedServiceRequester = 2,
};
enum _PO_WAKE_SOURCE_TYPE
{
    DeviceWakeSourceType = 0,
    FixedWakeSourceType = 1,
    TimerWakeSourceType = 2,
    TimerPresumedWakeSourceType = 3,
    InternalWakeSourceType = 4,
};
enum _PO_INTERNAL_WAKE_SOURCE_TYPE
{
    InternalWakeSourceDozeToHibernate = 0,
    InternalWakeSourcePredictedUserPresence = 1,
};
enum _PO_FIXED_WAKE_SOURCE_TYPE
{
    FixedWakeSourcePowerButton = 0,
    FixedWakeSourceSleepButton = 1,
    FixedWakeSourceRtc = 2,
    FixedWakeSourceDozeToHibernate = 3,
};
enum _POWER_STATE_HANDLER_TYPE
{
    PowerStateSleeping1 = 0,
    PowerStateSleeping2 = 1,
    PowerStateSleeping3 = 2,
    PowerStateSleeping4 = 3,
    PowerStateShutdownOff = 4,
    PowerStateShutdownReset = 5,
    PowerStateSleeping4Firmware = 6,
    PowerStateMaximum = 7,
};
enum _POWER_INFORMATION_LEVEL_INTERNAL
{
    PowerInternalAcpiInterfaceRegister = 0,
    PowerInternalS0LowPowerIdleInfo = 1,
    PowerInternalReapplyBrightnessSettings = 2,
    PowerInternalUserAbsencePrediction = 3,
    PowerInternalUserAbsencePredictionCapability = 4,
    PowerInternalPoProcessorLatencyHint = 5,
    PowerInternalStandbyNetworkRequest = 6,
    PowerInternalDirtyTransitionInformation = 7,
    PowerInternalSetBackgroundTaskState = 8,
    PowerInternalTtmOpenTerminal = 9,
    PowerInternalTtmCreateTerminal = 10,
    PowerInternalTtmEvacuateDevices = 11,
    PowerInternalTtmCreateTerminalEventQueue = 12,
    PowerInternalTtmGetTerminalEvent = 13,
    PowerInternalTtmSetDefaultDeviceAssignment = 14,
    PowerInternalTtmAssignDevice = 15,
    PowerInternalTtmSetDisplayState = 16,
    PowerInternalTtmSetDisplayTimeouts = 17,
    PowerInternalBootSessionStandbyActivationInformation = 18,
    PowerInternalSessionPowerState = 19,
    PowerInternalSessionTerminalInput = 20,
    PowerInternalSetWatchdog = 21,
    PowerInternalPhysicalPowerButtonPressInfoAtBoot = 22,
    PowerInternalExternalMonitorConnected = 23,
    PowerInternalHighPrecisionBrightnessSettings = 24,
    PowerInternalWinrtScreenToggle = 25,
    PowerInternalPpmQosDisable = 26,
    PowerInternalTransitionCheckpoint = 27,
    PowerInternalInputControllerState = 28,
    PowerInternalFirmwareResetReason = 29,
    PowerInternalPpmSchedulerQosSupport = 30,
    PowerInternalBootStatGet = 31,
    PowerInternalBootStatSet = 32,
    PowerInternalCallHasNotReturnedWatchdog = 33,
    PowerInternalBootStatCheckIntegrity = 34,
    PowerInternalBootStatRestoreDefaults = 35,
    PowerInternalHostEsStateUpdate = 36,
    PowerInternalGetPowerActionState = 37,
    PowerInternalBootStatUnlock = 38,
    PowerInternalWakeOnVoiceState = 39,
    PowerInternalDeepSleepBlock = 40,
    PowerInternalIsPoFxDevice = 41,
    PowerInternalPowerTransitionExtensionAtBoot = 42,
    PowerInternalProcessorBrandedFrequency = 43,
    PowerInternalTimeBrokerExpirationReason = 44,
    PowerInternalNotifyUserShutdownStatus = 45,
    PowerInternalPowerRequestTerminalCoreWindow = 46,
    PowerInternalProcessorIdleVeto = 47,
    PowerInternalPlatformIdleVeto = 48,
    PowerInternalIsLongPowerButtonBugcheckEnabled = 49,
    PowerInternalAutoChkCausedReboot = 50,
    PowerInternalSetWakeAlarmOverride = 51,
    PowerInternalDirectedFxAddTestDevice = 53,
    PowerInternalDirectedFxRemoveTestDevice = 54,
    PowerInternalDirectedFxSetMode = 56,
    PowerInternalRegisterPowerPlane = 57,
    PowerInternalSetDirectedDripsFlags = 58,
    PowerInternalClearDirectedDripsFlags = 59,
    PowerInternalRetrieveHiberFileResumeContext = 60,
    PowerInternalReadHiberFilePage = 61,
    PowerInternalLastBootSucceeded = 62,
    PowerInternalQuerySleepStudyHelperRoutineBlock = 63,
    PowerInternalDirectedDripsQueryCapabilities = 64,
    PowerInternalClearConstraints = 65,
    PowerInternalSoftParkVelocityEnabled = 66,
    PowerInternalQueryIntelPepCapabilities = 67,
    PowerInternalGetSystemIdleLoopEnablement = 68,
    PowerInternalGetVmPerfControlSupport = 69,
    PowerInternalGetVmPerfControlConfig = 70,
    PowerInternalSleepDetailedDiagUpdate = 71,
    PowerInternalProcessorClassFrequencyBandsStats = 72,
    PowerInternalHostGlobalUserPresenceStateUpdate = 73,
    PowerInternalCpuNodeIdleIntervalStats = 74,
    PowerInternalClassIdleIntervalStats = 75,
    PowerInternalCpuNodeConcurrencyStats = 76,
    PowerInternalClassConcurrencyStats = 77,
    PowerInternalQueryProcMeasurementCapabilities = 78,
    PowerInternalQueryProcMeasurementValues = 79,
    PowerInternalPrepareForSystemInitiatedReboot = 80,
    PowerInternalGetAdaptiveSessionState = 81,
    PowerInternalSetConsoleLockedState = 82,
    PowerInternalOverrideSystemInitiatedRebootState = 83,
    PowerInternalFanImpactStats = 84,
    PowerInternalFanRpmBuckets = 85,
    PowerInternalPowerBootAppDiagInfo = 86,
    PowerInternalUnregisterShutdownNotification = 87,
    PowerInternalManageTransitionStateRecord = 88,
    PowerInternalGetAcpiTimeAndAlarmCapabilities = 89,
    PowerInternalSuspendResumeRequest = 90,
    PowerInternalEnergyEstimationInfo = 91,
    PowerInternalProvSocIdentifierOperation = 92,
    PowerInternalGetVmPerfPrioritySupport = 93,
    PowerInternalGetVmPerfPriorityConfig = 94,
    PowerInternalNotifyWin32kPowerRequestQueued = 95,
    PowerInternalNotifyWin32kPowerRequestCompleted = 96,
    PowerInformationInternalMaximum = 97,
};
enum _POWER_S0_DISCONNECTED_REASON
{
    PoS0DisconnectedReasonNone = 0,
    PoS0DisconnectedReasonNonCompliantNic = 1,
    PoS0DisconnectedReasonSettingPolicy = 2,
    PoS0DisconnectedReasonEnforceDsPolicy = 3,
    PoS0DisconnectedReasonCsChecksFailed = 4,
    PoS0DisconnectedReasonSmartStandby = 5,
    PoS0DisconnectedReasonMaximum = 6,
};
enum _KEY_INFORMATION_CLASS
{
    KeyBasicInformation = 0,
    KeyNodeInformation = 1,
    KeyFullInformation = 2,
    KeyNameInformation = 3,
    KeyCachedInformation = 4,
    KeyFlagsInformation = 5,
    KeyVirtualizationInformation = 6,
    KeyHandleTagsInformation = 7,
    KeyTrustInformation = 8,
    KeyLayerInformation = 9,
    MaxKeyInfoClass = 10,
};
enum _KEY_SET_INFORMATION_CLASS
{
    KeyWriteTimeInformation = 0,
    KeyWow64FlagsInformation = 1,
    KeyControlFlagsInformation = 2,
    KeySetVirtualizationInformation = 3,
    KeySetDebugInformation = 4,
    KeySetHandleTagsInformation = 5,
    KeySetLayerInformation = 6,
    MaxKeySetInfoClass = 7,
};
enum _KEY_VALUE_INFORMATION_CLASS
{
    KeyValueBasicInformation = 0,
    KeyValueFullInformation = 1,
    KeyValuePartialInformation = 2,
    KeyValueFullInformationAlign64 = 3,
    KeyValuePartialInformationAlign64 = 4,
    KeyValueLayerInformation = 5,
    MaxKeyValueInfoClass = 6,
};
enum _REG_ACTION
{
    KeyAdded = 0,
    KeyRemoved = 1,
    KeyModified = 2,
};
enum _TABLE_SEARCH_RESULT
{
    TableEmptyTree = 0,
    TableFoundNode = 1,
    TableInsertAsLeft = 2,
    TableInsertAsRight = 3,
};
enum _RTL_GENERIC_COMPARE_RESULTS
{
    GenericLessThan = 0,
    GenericGreaterThan = 1,
    GenericEqual = 2,
};
enum _RTL_NORM_FORM
{
    NormOther = 0,
    NormC = 1,
    NormD = 2,
    NormKC = 5,
    NormKD = 6,
    NormIdna = 13,
    DisallowUnassigned = 256,
    NormCDisallowUnassigned = 257,
    NormDDisallowUnassigned = 258,
    NormKCDisallowUnassigned = 261,
    NormKDDisallowUnassigned = 262,
    NormIdnaDisallowUnassigned = 269,
};
enum _FUNCTION_TABLE_TYPE
{
    RF_SORTED = 0,
    RF_UNSORTED = 1,
    RF_CALLBACK = 2,
    RF_KERNEL_DYNAMIC = 3,
};
enum _RTL_PATH_TYPE
{
    RtlPathTypeUnknown = 0,
    RtlPathTypeUncAbsolute = 1,
    RtlPathTypeDriveAbsolute = 2,
    RtlPathTypeDriveRelative = 3,
    RtlPathTypeRooted = 4,
    RtlPathTypeRelative = 5,
    RtlPathTypeLocalDevice = 6,
    RtlPathTypeRootLocalDevice = 7,
};
enum _DOMAIN_SERVER_ROLE
{
    DomainServerRoleBackup = 2,
    DomainServerRolePrimary = 3,
};
enum _DOMAIN_SERVER_ENABLE_STATE
{
    DomainServerEnabled = 1,
    DomainServerDisabled = 2,
};
enum _RTL_MEMORY_TYPE
{
    MemoryTypePaged = 0,
    MemoryTypeNonPaged = 1,
    MemoryType64KPage = 2,
    MemoryTypeLargePage = 3,
    MemoryTypeHugePage = 4,
    MemoryTypeCustom = 5,
    MemoryTypeMax = 6,
};
enum _HEAP_MEMORY_INFO_CLASS
{
    HeapMemoryBasicInformation = 0,
};
enum _HEAP_COMPATIBILITY_MODE
{
    HEAP_COMPATIBILITY_STANDARD = 0,
    HEAP_COMPATIBILITY_LAL = 1,
    HEAP_COMPATIBILITY_LFH = 2,
};
enum _IMAGE_MITIGATION_POLICY
{
    ImageDepPolicy = 0,
    ImageAslrPolicy = 1,
    ImageDynamicCodePolicy = 2,
    ImageStrictHandleCheckPolicy = 3,
    ImageSystemCallDisablePolicy = 4,
    ImageMitigationOptionsMask = 5,
    ImageExtensionPointDisablePolicy = 6,
    ImageControlFlowGuardPolicy = 7,
    ImageSignaturePolicy = 8,
    ImageFontDisablePolicy = 9,
    ImageImageLoadPolicy = 10,
    ImagePayloadRestrictionPolicy = 11,
    ImageChildProcessPolicy = 12,
    ImageSehopPolicy = 13,
    ImageHeapPolicy = 14,
    ImageUserShadowStackPolicy = 15,
    ImageRedirectionTrustPolicy = 16,
    ImageUserPointerAuthPolicy = 17,
    MaxImageMitigationPolicy = 18,
};
enum _RTL_IMAGE_MITIGATION_OPTION_STATE
{
    RtlMitigationOptionStateNotConfigured = 0,
    RtlMitigationOptionStateOn = 1,
    RtlMitigationOptionStateOff = 2,
    RtlMitigationOptionStateForce = 3,
    RtlMitigationOptionStateOption = 4,
};
enum _APPCONTAINER_SID_TYPE
{
    NotAppContainerSidType = 0,
    ChildAppContainerSidType = 1,
    ParentAppContainerSidType = 2,
    InvalidAppContainerSidType = 3,
    MaxAppContainerSidType = 4,
};
enum _STATE_LOCATION_TYPE
{
    LocationTypeRegistry = 0,
    LocationTypeFileSystem = 1,
    LocationTypeMaximum = 2,
};
enum _RTL_BSD_ITEM_TYPE
{
    RtlBsdItemVersionNumber = 0,
    RtlBsdItemProductType = 1,
    RtlBsdItemAabEnabled = 2,
    RtlBsdItemAabTimeout = 3,
    RtlBsdItemBootGood = 4,
    RtlBsdItemBootShutdown = 5,
    RtlBsdSleepInProgress = 6,
    RtlBsdPowerTransition = 7,
    RtlBsdItemBootAttemptCount = 8,
    RtlBsdItemBootCheckpoint = 9,
    RtlBsdItemBootId = 10,
    RtlBsdItemShutdownBootId = 11,
    RtlBsdItemReportedAbnormalShutdownBootId = 12,
    RtlBsdItemErrorInfo = 13,
    RtlBsdItemPowerButtonPressInfo = 14,
    RtlBsdItemChecksum = 15,
    RtlBsdPowerTransitionExtension = 16,
    RtlBsdItemFeatureConfigurationState = 17,
    RtlBsdItemRevocationListInfo = 18,
    RtlBsdItemMax = 19,
};
enum _RTL_FEATURE_CONFIGURATION_TYPE
{
    RtlFeatureConfigurationBoot = 0,
    RtlFeatureConfigurationRuntime = 1,
    RtlFeatureConfigurationCount = 2,
};
enum _RTL_FEATURE_CONFIGURATION_PRIORITY
{
    FeatureConfigurationPriorityImageDefault = 0,
    FeatureConfigurationPriorityEKB = 1,
    FeatureConfigurationPrioritySafeguard = 2,
    FeatureConfigurationPriorityPersistent = 2,
    FeatureConfigurationPriorityReserved3 = 3,
    FeatureConfigurationPriorityService = 4,
    FeatureConfigurationPriorityReserved5 = 5,
    FeatureConfigurationPriorityDynamic = 6,
    FeatureConfigurationPriorityReserved7 = 7,
    FeatureConfigurationPriorityUser = 8,
    FeatureConfigurationPrioritySecurity = 9,
    FeatureConfigurationPriorityUserPolicy = 10,
    FeatureConfigurationPriorityReserved11 = 11,
    FeatureConfigurationPriorityTest = 12,
    FeatureConfigurationPriorityReserved13 = 13,
    FeatureConfigurationPriorityReserved14 = 14,
    FeatureConfigurationPriorityImageOverride = 15,
    FeatureConfigurationPriorityMax = 15,
};
enum _RTL_FEATURE_ENABLED_STATE
{
    FeatureEnabledStateDefault = 0,
    FeatureEnabledStateDisabled = 1,
    FeatureEnabledStateEnabled = 2,
};
enum _RTL_FEATURE_ENABLED_STATE_OPTIONS
{
    FeatureEnabledStateOptionsNone = 0,
    FeatureEnabledStateOptionsWexpConfig = 1,
};
enum _RTL_FEATURE_VARIANT_PAYLOAD_KIND
{
    FeatureVariantPayloadKindNone = 0,
    FeatureVariantPayloadKindResident = 1,
    FeatureVariantPayloadKindExternal = 2,
};
enum _RTL_FEATURE_CONFIGURATION_OPERATION
{
    FeatureConfigurationOperationNone = 0,
    FeatureConfigurationOperationFeatureState = 1,
    FeatureConfigurationOperationVariantState = 2,
    FeatureConfigurationOperationResetState = 4,
};
enum _SYSTEM_FEATURE_CONFIGURATION_UPDATE_TYPE
{
    SystemFeatureConfigurationUpdateTypeUpdate = 0,
    SystemFeatureConfigurationUpdateTypeOverwrite = 1,
    SystemFeatureConfigurationUpdateTypeCount = 2,
};
enum _SYSTEM_FEATURE_CONFIGURATION_SECTION_TYPE
{
    SystemFeatureConfigurationSectionTypeBoot = 0,
    SystemFeatureConfigurationSectionTypeRuntime = 1,
    SystemFeatureConfigurationSectionTypeUsageTriggers = 2,
    SystemFeatureConfigurationSectionTypeCount = 3,
};
enum _TOKEN_SECURITY_ATTRIBUTE_OPERATION
{
    TOKEN_SECURITY_ATTRIBUTE_OPERATION_NONE = 0,
    TOKEN_SECURITY_ATTRIBUTE_OPERATION_REPLACE_ALL = 1,
    TOKEN_SECURITY_ATTRIBUTE_OPERATION_ADD = 2,
    TOKEN_SECURITY_ATTRIBUTE_OPERATION_DELETE = 3,
    TOKEN_SECURITY_ATTRIBUTE_OPERATION_REPLACE = 4,
};
enum _TP_TRACE_TYPE
{
    TpTraceThreadPriority = 1,
    TpTraceThreadAffinity = 2,
    MaxTpTraceType = 3,
};
enum _KCONTINUE_TYPE
{
    KCONTINUE_UNWIND = 0,
    KCONTINUE_RESUME = 1,
    KCONTINUE_LONGJUMP = 2,
    KCONTINUE_SET = 3,
    KCONTINUE_LAST = 4,
};
enum _WOW64_SHARED_INFORMATION
{
    SharedNtdll32LdrInitializeThunk = 0,
    SharedNtdll32KiUserExceptionDispatcher = 1,
    SharedNtdll32KiUserApcDispatcher = 2,
    SharedNtdll32KiUserCallbackDispatcher = 3,
    SharedNtdll32ExpInterlockedPopEntrySListFault = 4,
    SharedNtdll32ExpInterlockedPopEntrySListResume = 5,
    SharedNtdll32ExpInterlockedPopEntrySListEnd = 6,
    SharedNtdll32RtlUserThreadStart = 7,
    SharedNtdll32pQueryProcessDebugInformationRemote = 8,
    SharedNtdll32BaseAddress = 9,
    SharedNtdll32LdrSystemDllInitBlock = 10,
    Wow64SharedPageEntriesCount = 11,
};
enum _ETW_RT_EVENT_LOSS
{
    EtwRtEventNoLoss = 0,
    EtwRtEventLost = 1,
    EtwRtBufferLost = 2,
    EtwRtBackupLost = 3,
    EtwRtEventLossMax = 4,
};
enum _LSA_LOOKUP_DOMAIN_INFO_CLASS
{
    AccountDomainInformation = 5,
    DnsDomainInformation = 12,
};
enum _SECURITY_LOGON_TYPE
{
    UndefinedLogonType = 0,
    Interactive = 2,
    Network = 3,
    Batch = 4,
    Service = 5,
    Proxy = 6,
    Unlock = 7,
    NetworkCleartext = 8,
    NewCredentials = 9,
    RemoteInteractive = 10,
    CachedInteractive = 11,
    CachedRemoteInteractive = 12,
    CachedUnlock = 13,
};
enum _SE_ADT_PARAMETER_TYPE
{
    SeAdtParmTypeNone = 0,
    SeAdtParmTypeString = 1,
    SeAdtParmTypeFileSpec = 2,
    SeAdtParmTypeUlong = 3,
    SeAdtParmTypeSid = 4,
    SeAdtParmTypeLogonId = 5,
    SeAdtParmTypeNoLogonId = 6,
    SeAdtParmTypeAccessMask = 7,
    SeAdtParmTypePrivs = 8,
    SeAdtParmTypeObjectTypes = 9,
    SeAdtParmTypeHexUlong = 10,
    SeAdtParmTypePtr = 11,
    SeAdtParmTypeTime = 12,
    SeAdtParmTypeGuid = 13,
    SeAdtParmTypeLuid = 14,
    SeAdtParmTypeHexInt64 = 15,
    SeAdtParmTypeStringList = 16,
    SeAdtParmTypeSidList = 17,
    SeAdtParmTypeDuration = 18,
    SeAdtParmTypeUserAccountControl = 19,
    SeAdtParmTypeNoUac = 20,
    SeAdtParmTypeMessage = 21,
    SeAdtParmTypeDateTime = 22,
    SeAdtParmTypeSockAddr = 23,
    SeAdtParmTypeSD = 24,
    SeAdtParmTypeLogonHours = 25,
    SeAdtParmTypeLogonIdNoSid = 26,
    SeAdtParmTypeUlongNoConv = 27,
    SeAdtParmTypeSockAddrNoPort = 28,
    SeAdtParmTypeAccessReason = 29,
    SeAdtParmTypeStagingReason = 30,
    SeAdtParmTypeResourceAttribute = 31,
    SeAdtParmTypeClaims = 32,
    SeAdtParmTypeLogonIdAsSid = 33,
    SeAdtParmTypeMultiSzString = 34,
    SeAdtParmTypeLogonIdEx = 35,
};
enum _POLICY_AUDIT_EVENT_TYPE_EX
{
    iSystem_SecurityStateChange = 100,
    iSystem_SecuritySubsystemExtension = 101,
    iSystem_Integrity = 102,
    iSystem_IPSecDriverEvents = 103,
    iSystem_Others = 104,
    iLogon_Logon = 105,
    iLogon_Logoff = 106,
    iLogon_AccountLockout = 107,
    iLogon_IPSecMainMode = 108,
    iLogon_SpecialLogon = 109,
    iLogon_IPSecQuickMode = 110,
    iLogon_IPSecUsermode = 111,
    iLogon_Others = 112,
    iLogon_NPS = 113,
    iLogon_Claims = 114,
    iLogon_Groups = 115,
    iObjectAccess_FileSystem = 116,
    iObjectAccess_Registry = 117,
    iObjectAccess_Kernel = 118,
    iObjectAccess_Sam = 119,
    iObjectAccess_Other = 120,
    iObjectAccess_CertificationAuthority = 121,
    iObjectAccess_ApplicationGenerated = 122,
    iObjectAccess_HandleBasedAudits = 123,
    iObjectAccess_Share = 124,
    iObjectAccess_FirewallPacketDrops = 125,
    iObjectAccess_FirewallConnection = 126,
    iObjectAccess_DetailedFileShare = 127,
    iObjectAccess_RemovableStorage = 128,
    iObjectAccess_CbacStaging = 129,
    iPrivilegeUse_Sensitive = 130,
    iPrivilegeUse_NonSensitive = 131,
    iPrivilegeUse_Others = 132,
    iDetailedTracking_ProcessCreation = 133,
    iDetailedTracking_ProcessTermination = 134,
    iDetailedTracking_DpapiActivity = 135,
    iDetailedTracking_RpcCall = 136,
    iDetailedTracking_PnpActivity = 137,
    iDetailedTracking_TokenRightAdjusted = 138,
    iPolicyChange_AuditPolicy = 139,
    iPolicyChange_AuthenticationPolicy = 140,
    iPolicyChange_AuthorizationPolicy = 141,
    iPolicyChange_MpsscvRulePolicy = 142,
    iPolicyChange_WfpIPSecPolicy = 143,
    iPolicyChange_Others = 144,
    iAccountManagement_UserAccount = 145,
    iAccountManagement_ComputerAccount = 146,
    iAccountManagement_SecurityGroup = 147,
    iAccountManagement_DistributionGroup = 148,
    iAccountManagement_ApplicationGroup = 149,
    iAccountManagement_Others = 150,
    iDSAccess_DSAccess = 151,
    iDSAccess_AdAuditChanges = 152,
    iDS_Replication = 153,
    iDS_DetailedReplication = 154,
    iAccountLogon_CredentialValidation = 155,
    iAccountLogon_Kerberos = 156,
    iAccountLogon_Others = 157,
    iAccountLogon_KerbCredentialValidation = 158,
    iUnknownSubCategory = 999,
};
enum _POLICY_AUDIT_EVENT_TYPE
{
    AuditCategorySystem = 0,
    AuditCategoryLogon = 1,
    AuditCategoryObjectAccess = 2,
    AuditCategoryPrivilegeUse = 3,
    AuditCategoryDetailedTracking = 4,
    AuditCategoryPolicyChange = 5,
    AuditCategoryAccountManagement = 6,
    AuditCategoryDirectoryServiceAccess = 7,
    AuditCategoryAccountLogon = 8,
};
enum _LSA_TOKEN_INFORMATION_TYPE
{
    LsaTokenInformationNull = 0,
    LsaTokenInformationV1 = 1,
    LsaTokenInformationV2 = 2,
    LsaTokenInformationV3 = 3,
};
enum LSA_FOREST_TRUST_COLLISION_RECORD_TYPE
{
    CollisionTdo = 0,
    CollisionXref = 1,
    CollisionOther = 2,
};
enum _POLICY_LSA_SERVER_ROLE
{
    PolicyServerRoleBackup = 2,
    PolicyServerRolePrimary = 3,
};
enum _POLICY_INFORMATION_CLASS
{
    PolicyAuditLogInformation = 1,
    PolicyAuditEventsInformation = 2,
    PolicyPrimaryDomainInformation = 3,
    PolicyPdAccountInformation = 4,
    PolicyAccountDomainInformation = 5,
    PolicyLsaServerRoleInformation = 6,
    PolicyReplicaSourceInformation = 7,
    PolicyDefaultQuotaInformation = 8,
    PolicyModificationInformation = 9,
    PolicyAuditFullSetInformation = 10,
    PolicyAuditFullQueryInformation = 11,
    PolicyDnsDomainInformation = 12,
    PolicyDnsDomainInformationInt = 13,
    PolicyLocalAccountDomainInformation = 14,
    PolicyMachineAccountInformation = 15,
    PolicyMachineAccountInformation2 = 16,
    PolicyLastEntry = 17,
};
enum _POLICY_DOMAIN_INFORMATION_CLASS
{
    PolicyDomainEfsInformation = 2,
    PolicyDomainKerberosTicketInformation = 3,
};
enum _POLICY_NOTIFICATION_INFORMATION_CLASS
{
    PolicyNotifyAuditEventsInformation = 1,
    PolicyNotifyAccountDomainInformation = 2,
    PolicyNotifyServerRoleInformation = 3,
    PolicyNotifyDnsDomainInformation = 4,
    PolicyNotifyDomainEfsInformation = 5,
    PolicyNotifyDomainKerberosTicketInformation = 6,
    PolicyNotifyMachineAccountPasswordInformation = 7,
    PolicyNotifyGlobalSaclInformation = 8,
    PolicyNotifyMax = 9,
};
enum _TRUSTED_INFORMATION_CLASS
{
    TrustedDomainNameInformation = 1,
    TrustedControllersInformation = 2,
    TrustedPosixOffsetInformation = 3,
    TrustedPasswordInformation = 4,
    TrustedDomainInformationBasic = 5,
    TrustedDomainInformationEx = 6,
    TrustedDomainAuthInformation = 7,
    TrustedDomainFullInformation = 8,
    TrustedDomainAuthInformationInternal = 9,
    TrustedDomainFullInformationInternal = 10,
    TrustedDomainInformationEx2Internal = 11,
    TrustedDomainFullInformation2Internal = 12,
    TrustedDomainSupportedEncryptionTypes = 13,
    TrustedDomainAuthInformationInternalAes = 14,
    TrustedDomainFullInformationInternalAes = 15,
};
enum LSA_FOREST_TRUST_RECORD_TYPE
{
    ForestTrustTopLevelName = 0,
    ForestTrustTopLevelNameEx = 1,
    ForestTrustDomainInfo = 2,
    ForestTrustBinaryInfo = 3,
    ForestTrustScannerInfo = 4,
    ForestTrustRecordTypeLast = 4,
};
enum NEGOTIATE_MESSAGES
{
    NegEnumPackagePrefixes = 0,
    NegGetCallerName = 1,
    NegTransferCredentials = 2,
    NegEnumPackageNames = 3,
    NegCallPackageMax = 4,
};
enum _LSA_CREDENTIAL_KEY_SOURCE_TYPE
{
    eFromPrecomputed = 1,
    eFromClearPassword = 2,
    eFromNtOwf = 3,
};
enum _DOMAIN_INFORMATION_CLASS
{
    DomainPasswordInformation = 1,
    DomainGeneralInformation = 2,
    DomainLogoffInformation = 3,
    DomainOemInformation = 4,
    DomainNameInformation = 5,
    DomainReplicationInformation = 6,
    DomainServerRoleInformation = 7,
    DomainModifiedInformation = 8,
    DomainStateInformation = 9,
    DomainUasInformation = 10,
    DomainGeneralInformation2 = 11,
    DomainLockoutInformation = 12,
    DomainModifiedInformation2 = 13,
};
enum _DOMAIN_PASSWORD_CONSTRUCTION
{
    DomainPasswordSimple = 1,
    DomainPasswordComplex = 2,
};
enum _DOMAIN_DISPLAY_INFORMATION
{
    DomainDisplayUser = 1,
    DomainDisplayMachine = 2,
    DomainDisplayGroup = 3,
    DomainDisplayOemUser = 4,
    DomainDisplayOemGroup = 5,
    DomainDisplayServer = 6,
};
enum _DOMAIN_LOCALIZABLE_ACCOUNTS_INFORMATION
{
    DomainLocalizableAccountsBasic = 1,
};
enum _GROUP_INFORMATION_CLASS
{
    GroupGeneralInformation = 1,
    GroupNameInformation = 2,
    GroupAttributeInformation = 3,
    GroupAdminCommentInformation = 4,
    GroupReplicationInformation = 5,
};
enum _ALIAS_INFORMATION_CLASS
{
    AliasGeneralInformation = 1,
    AliasNameInformation = 2,
    AliasAdminCommentInformation = 3,
    AliasReplicationInformation = 4,
    AliasExtendedInformation = 5,
};
enum _USER_INFORMATION_CLASS
{
    UserGeneralInformation = 1,
    UserPreferencesInformation = 2,
    UserLogonInformation = 3,
    UserLogonHoursInformation = 4,
    UserAccountInformation = 5,
    UserNameInformation = 6,
    UserAccountNameInformation = 7,
    UserFullNameInformation = 8,
    UserPrimaryGroupInformation = 9,
    UserHomeInformation = 10,
    UserScriptInformation = 11,
    UserProfileInformation = 12,
    UserAdminCommentInformation = 13,
    UserWorkStationsInformation = 14,
    UserSetPasswordInformation = 15,
    UserControlInformation = 16,
    UserExpiresInformation = 17,
    UserInternal1Information = 18,
    UserInternal2Information = 19,
    UserParametersInformation = 20,
    UserAllInformation = 21,
    UserInternal3Information = 22,
    UserInternal4Information = 23,
    UserInternal5Information = 24,
    UserInternal4InformationNew = 25,
    UserInternal5InformationNew = 26,
    UserInternal6Information = 27,
    UserExtendedInformation = 28,
    UserLogonUIInformation = 29,
    UserUnknownTodoInformation = 30,
    UserInternal7Information = 31,
    UserInternal8Information = 32,
};
enum _ETW_BUFFER_STATE
{
    EtwBufferStateFree = 0,
    EtwBufferStateGeneralLogging = 1,
    EtwBufferStateCSwitch = 2,
    EtwBufferStateFlush = 3,
    EtwBufferStateMaximum = 4,
};
enum _SECURITY_DB_DELTA_TYPE
{
    SecurityDbNew = 1,
    SecurityDbRename = 2,
    SecurityDbDelete = 3,
    SecurityDbChangeMemberAdd = 4,
    SecurityDbChangeMemberSet = 5,
    SecurityDbChangeMemberDel = 6,
    SecurityDbChange = 7,
    SecurityDbChangePassword = 8,
};
enum _SECURITY_DB_OBJECT_TYPE
{
    SecurityDbObjectSamDomain = 1,
    SecurityDbObjectSamUser = 2,
    SecurityDbObjectSamGroup = 3,
    SecurityDbObjectSamAlias = 4,
    SecurityDbObjectLsaPolicy = 5,
    SecurityDbObjectLsaTDomain = 6,
    SecurityDbObjectLsaAccount = 7,
    SecurityDbObjectLsaSecret = 8,
};
enum _SAM_ACCOUNT_TYPE
{
    SamObjectUser = 1,
    SamObjectGroup = 2,
    SamObjectAlias = 3,
};
enum _PASSWORD_POLICY_VALIDATION_TYPE
{
    SamValidateAuthentication = 1,
    SamValidatePasswordChange = 2,
    SamValidatePasswordReset = 3,
};
enum _SAM_VALIDATE_VALIDATION_STATUS
{
    SamValidateSuccess = 0,
    SamValidatePasswordMustChange = 1,
    SamValidateAccountLockedOut = 2,
    SamValidatePasswordExpired = 3,
    SamValidatePasswordIncorrect = 4,
    SamValidatePasswordIsInHistory = 5,
    SamValidatePasswordTooShort = 6,
    SamValidatePasswordTooLong = 7,
    SamValidatePasswordNotComplexEnough = 8,
    SamValidatePasswordTooRecent = 9,
    SamValidatePasswordFilterError = 10,
};
enum _SAM_GENERIC_OPERATION_TYPE
{
    SamObjectChangeNotificationOperation = 0,
};
enum _VDMSERVICECLASS
{
    VdmStartExecution = 0,
    VdmQueueInterrupt = 1,
    VdmDelayInterrupt = 2,
    VdmInitialize = 3,
    VdmFeatures = 4,
    VdmSetInt21Handler = 5,
    VdmQueryDir = 6,
    VdmPrinterDirectIoOpen = 7,
    VdmPrinterDirectIoClose = 8,
    VdmPrinterInitialize = 9,
    VdmSetLdtEntries = 10,
    VdmSetProcessLdtInfo = 11,
    VdmAdlibEmulation = 12,
    VdmPMCliControl = 13,
    VdmQueryVdmProcess = 14,
    VdmPreInitialize = 15,
};
enum _PROCESS_ACTIVITY_TYPE
{
    ProcessActivityTypeAudio = 0,
    ProcessActivityTypeMax = 1,
};
enum _PERFINFO_DYNAMIC_TICK_VETO_REASON
{
    DynamicTickVetoNone = 0,
    DynamicTickVetoProcBusy = 1,
    DynamicTickVetoSoftwareTimer = 2,
    DynamicTickVetoClockConstraint = 3,
    DynamicTickVetoClockOutOfSync = 4,
    DynamicTickVetoClockUpdateFailed = 5,
    DynamicTickVetoMax = 6,
};
enum _PERFINFO_DYNAMIC_TICK_DISABLE_REASON
{
    DynamicTickDisableReasonNone = 0,
    DynamicTickDisableReasonBcdOverride = 1,
    DynamicTickDisableReasonNoHwSupport = 2,
    DynamicTickDisableReasonEmOverride = 3,
    DynamicTickDisableReasonMax = 4,
};
enum _PERFINFO_KERNELMEMORY_USAGE_TYPE
{
    PerfInfoMemUsagePfnMetadata = 0,
    PerfInfoMemUsageMax = 1,
};
enum _PERFINFO_MM_STAT
{
    PerfInfoMMStatNotUsed = 0,
    PerfInfoMMStatAggregatePageCombine = 1,
    PerfInfoMMStatIterationPageCombine = 2,
    PerfInfoMMStatMax = 3,
};
enum _PERFINFO_MEM_RESET_INFO_TYPE
{
    PerfInfoMemReset = 0,
    PerfInfoMemResetUndo = 1,
    PerfInfoMemResetUndoFailed = 2,
    PerfInfoMemResetMax = 3,
};
enum _PERFINFO_DEBUG_EVENT_REASON
{
    PerfInfoDebugEventReceived = 1,
    PerfInfoDebugEventContinued = 2,
    PerfInfoDebugEventMax = 3,
};
enum _PERFINFO_CCSWAP_TYPE
{
    PerfCSwapIdleShort = 0,
    PerfCSwapIdle = 1,
    PerfCSwapLite = 2,
    PerfCSwapFull = 3,
};
enum _ETW_NOTIFICATION_TYPE
{
    EtwNotificationTypeNoReply = 1,
    EtwNotificationTypeLegacyEnable = 2,
    EtwNotificationTypeEnable = 3,
    EtwNotificationTypePrivateLogger = 4,
    EtwNotificationTypePerflib = 5,
    EtwNotificationTypeAudio = 6,
    EtwNotificationTypeSession = 7,
    EtwNotificationTypeReserved = 8,
    EtwNotificationTypeCredentialUI = 9,
    EtwNotificationTypeInProcSession = 10,
    EtwNotificationTypeMax = 11,
};
enum _ETW_SESSION_NOTIFICATION_TYPE
{
    EtwSessionNotificationMediaChanged = 1,
    EtwSessionNotificationSessionTerminated = 2,
    EtwSessionNotificationLogfileError = 3,
    EtwSessionNotificationRealtimeError = 4,
    EtwSessionNotificationSessionStarted = 5,
    EtwSessionNotificationMax = 6,
};
enum _EVENT_INFO_CLASS
{
};
enum _ETWTRACECONTROLCODE
{
    EtwStartLoggerCode = 1,
    EtwStopLoggerCode = 2,
    EtwQueryLoggerCode = 3,
    EtwUpdateLoggerCode = 4,
    EtwFlushLoggerCode = 5,
    EtwIncrementLoggerFile = 6,
    EtwRealtimeTransition = 7,
    EtwRealtimeConnectCode = 11,
    EtwActivityIdCreate = 12,
    EtwWdiScenarioCode = 13,
    EtwRealtimeDisconnectCode = 14,
    EtwRegisterGuidsCode = 15,
    EtwReceiveNotification = 16,
    EtwSendDataBlock = 17,
    EtwSendReplyDataBlock = 18,
    EtwReceiveReplyDataBlock = 19,
    EtwWdiSemUpdate = 20,
    EtwEnumTraceGuidList = 21,
    EtwGetTraceGuidInfo = 22,
    EtwEnumerateTraceGuids = 23,
    EtwRegisterSecurityProv = 24,
    EtwReferenceTimeCode = 25,
    EtwTrackBinaryCode = 26,
    EtwAddNotificationEvent = 27,
    EtwUpdateDisallowList = 28,
    EtwSetEnableAllKeywordsCode = 29,
    EtwSetProviderTraitsCode = 30,
    EtwUseDescriptorTypeCode = 31,
    EtwEnumTraceGroupList = 32,
    EtwGetTraceGroupInfo = 33,
    EtwGetDisallowList = 34,
    EtwSetCompressionSettings = 35,
    EtwGetCompressionSettings = 36,
    EtwUpdatePeriodicCaptureState = 37,
    EtwGetPrivateSessionTraceHandle = 38,
    EtwRegisterPrivateSession = 39,
    EtwQuerySessionDemuxObject = 40,
    EtwSetProviderBinaryTracking = 41,
    EtwMaxLoggers = 42,
    EtwMaxPmcCounter = 43,
    EtwQueryUsedProcessorCount = 44,
    EtwGetPmcOwnership = 45,
    EtwGetPmcSessions = 46,
};
union alignas( 8 ) _LARGE_INTEGER
{
    struct alignas( 4 )
    {
        DWORD LowPart;
        LONG HighPart;
    };
    struct alignas( 4 )
    {
        DWORD LowPart;
        LONG HighPart;
    } u;
    LONGLONG QuadPart;
};
struct alignas( 8 ) _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
{
    LARGE_INTEGER TotalUserTime;
    LARGE_INTEGER TotalKernelTime;
    LARGE_INTEGER ThisPeriodTotalUserTime;
    LARGE_INTEGER ThisPeriodTotalKernelTime;
    DWORD TotalPageFaultCount;
    DWORD TotalProcesses;
    DWORD ActiveProcesses;
    DWORD TotalTerminatedProcesses;
};
struct alignas( 4 ) _SECURITY_DESCRIPTOR_RELATIVE
{
    BYTE Revision;
    BYTE Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    DWORD Owner;
    DWORD Group;
    DWORD Sacl;
    DWORD Dacl;
};
struct alignas( 4 ) _LUID
{
    DWORD LowPart;
    LONG HighPart;
};
struct alignas( 4 ) _TOKEN_SOURCE
{
    CHAR SourceName[8];
    LUID SourceIdentifier;
};
struct alignas( 8 ) _SECURITY_DESCRIPTOR
{
    BYTE Revision;
    BYTE Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    PSID Owner;
    PSID Group;
    PACL Sacl;
    PACL Dacl;
};
struct alignas( 8 ) _EVENT_TRACE_GROUPMASK_INFORMATION
{
    EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
    TRACEHANDLE TraceHandle;
    ULONG EventTraceGroupMasks[8];
};
struct alignas( 4 ) CM_Power_Data_s
{
    DWORD PD_Size;
    DEVICE_POWER_STATE PD_MostRecentPowerState;
    DWORD PD_Capabilities;
    DWORD PD_D1Latency;
    DWORD PD_D2Latency;
    DWORD PD_D3Latency;
    DEVICE_POWER_STATE PD_PowerStateMapping[7];
    SYSTEM_POWER_STATE PD_DeepestSystemWake;
};
struct alignas( 8 ) _LIST_ENTRY
{
    _LIST_ENTRY* Flink;
    _LIST_ENTRY* Blink;
};
struct alignas( 8 ) _TOKEN_STATISTICS
{
    LUID TokenId;
    LUID AuthenticationId;
    LARGE_INTEGER ExpirationTime;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    DWORD DynamicCharged;
    DWORD DynamicAvailable;
    DWORD GroupCount;
    DWORD PrivilegeCount;
    LUID ModifiedId;
};
struct alignas( 8 ) _SERVICE_TRIGGER
{
    DWORD dwTriggerType;
    DWORD dwAction;
    GUID* pTriggerSubtype;
    DWORD cDataItems;
    PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM pDataItems;
};
struct alignas( 2 ) _ACE_HEADER
{
    BYTE AceType;
    BYTE AceFlags;
    WORD AceSize;
};
struct alignas( 4 ) _ACCESS_DENIED_CALLBACK_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
};
struct alignas( 8 ) _REARRANGE_FILE_DATA32
{
    ULONGLONG SourceStartingOffset;
    ULONGLONG TargetOffset;
    UINT32 SourceFileHandle;
    DWORD Length;
    DWORD Flags;
};
struct alignas( 4 ) _SYSTEM_AUDIT_CALLBACK_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
};
struct alignas( 4 ) _TAPE_ERASE
{
    DWORD Type;
    BOOLEAN Immediate;
};
struct alignas( 8 ) _SINGLE_LIST_ENTRY
{
    _SINGLE_LIST_ENTRY* Next;
};
struct alignas( 4 ) _SYSTEM_ALARM_CALLBACK_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
};
struct alignas( 4 ) _TOKEN_ORIGIN
{
    LUID OriginatingLogonSession;
};
struct alignas( 8 ) _SHUFFLE_FILE_DATA
{
    LONGLONG StartingOffset;
    LONGLONG Length;
    DWORD Flags;
};
struct alignas( 4 ) _TAPE_PREPARE
{
    DWORD Operation;
    BOOLEAN Immediate;
};
struct alignas( 8 ) _EXCEPTION_RECORD
{
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    _EXCEPTION_RECORD* ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[15];
};
struct alignas( 16 ) _M128A
{
    ULONGLONG Low;
    LONGLONG High;
};
struct alignas( 16 ) _XSAVE_FORMAT
{
    WORD ControlWord;
    WORD StatusWord;
    BYTE TagWord;
    BYTE Reserved1;
    WORD ErrorOpcode;
    DWORD ErrorOffset;
    WORD ErrorSelector;
    WORD Reserved2;
    DWORD DataOffset;
    WORD DataSelector;
    WORD Reserved3;
    DWORD MxCsr;
    DWORD MxCsr_Mask;
    M128A FloatRegisters[8];
    M128A XmmRegisters[16];
    BYTE Reserved4[96];
};
struct alignas( 16 ) _CONTEXT
{
    DWORD64 P1Home;
    DWORD64 P2Home;
    DWORD64 P3Home;
    DWORD64 P4Home;
    DWORD64 P5Home;
    DWORD64 P6Home;
    DWORD ContextFlags;
    DWORD MxCsr;
    WORD SegCs;
    WORD SegDs;
    WORD SegEs;
    WORD SegFs;
    WORD SegGs;
    WORD SegSs;
    DWORD EFlags;
    DWORD64 Dr0;
    DWORD64 Dr1;
    DWORD64 Dr2;
    DWORD64 Dr3;
    DWORD64 Dr6;
    DWORD64 Dr7;
    DWORD64 Rax;
    DWORD64 Rcx;
    DWORD64 Rdx;
    DWORD64 Rbx;
    DWORD64 Rsp;
    DWORD64 Rbp;
    DWORD64 Rsi;
    DWORD64 Rdi;
    DWORD64 R8;
    DWORD64 R9;
    DWORD64 R10;
    DWORD64 R11;
    DWORD64 R12;
    DWORD64 R13;
    DWORD64 R14;
    DWORD64 R15;
    DWORD64 Rip;
    union alignas( 16 )
    {
        XMM_SAVE_AREA32 FltSave;
        struct alignas( 16 )
        {
            M128A Header[2];
            M128A Legacy[8];
            M128A Xmm0;
            M128A Xmm1;
            M128A Xmm2;
            M128A Xmm3;
            M128A Xmm4;
            M128A Xmm5;
            M128A Xmm6;
            M128A Xmm7;
            M128A Xmm8;
            M128A Xmm9;
            M128A Xmm10;
            M128A Xmm11;
            M128A Xmm12;
            M128A Xmm13;
            M128A Xmm14;
            M128A Xmm15;
        };
    };
    M128A VectorRegister[26];
    DWORD64 VectorControl;
    DWORD64 DebugControl;
    DWORD64 LastBranchToRip;
    DWORD64 LastBranchFromRip;
    DWORD64 LastExceptionToRip;
    DWORD64 LastExceptionFromRip;
};
struct alignas( 8 ) _XSAVE_CET_U_FORMAT
{
    DWORD64 Ia32CetUMsr;
    DWORD64 Ia32Pl3SspMsr;
};
struct alignas( 8 ) _DISPATCHER_CONTEXT
{
    DWORD64 ControlPc;
    DWORD64 ImageBase;
    PRUNTIME_FUNCTION FunctionEntry;
    DWORD64 EstablisherFrame;
    DWORD64 TargetIp;
    PCONTEXT ContextRecord;
    PEXCEPTION_ROUTINE LanguageHandler;
    PVOID HandlerData;
    _UNWIND_HISTORY_TABLE* HistoryTable;
    DWORD ScopeIndex;
    DWORD Fill0;
};
struct alignas( 4 ) _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY
{
    union alignas( 4 )
    {
        DWORD Flags;
        struct alignas( 4 )
        {
            DWORD EnableExportAddressFilter : 1;
            DWORD AuditExportAddressFilter : 1;
            DWORD EnableExportAddressFilterPlus : 1;
            DWORD AuditExportAddressFilterPlus : 1;
            DWORD EnableImportAddressFilter : 1;
            DWORD AuditImportAddressFilter : 1;
            DWORD EnableRopStackPivot : 1;
            DWORD AuditRopStackPivot : 1;
            DWORD EnableRopCallerCheck : 1;
            DWORD AuditRopCallerCheck : 1;
            DWORD EnableRopSimExec : 1;
            DWORD AuditRopSimExec : 1;
            DWORD ReservedFlags : 20;
        };
    };
};
struct alignas( 4 ) _GUID
{
    unsigned long Data1;
    unsigned short Data2;
    unsigned short Data3;
    unsigned char Data4[8];
};
struct alignas( 8 ) _TOKEN_GROUPS_AND_PRIVILEGES
{
    DWORD SidCount;
    DWORD SidLength;
    PSID_AND_ATTRIBUTES Sids;
    DWORD RestrictedSidCount;
    DWORD RestrictedSidLength;
    PSID_AND_ATTRIBUTES RestrictedSids;
    DWORD PrivilegeCount;
    DWORD PrivilegeLength;
    PLUID_AND_ATTRIBUTES Privileges;
    LUID AuthenticationId;
};
struct alignas( 8 ) tagIMEMENUITEMINFOA
{
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    CHAR szString[80];
    HBITMAP hbmpItem;
};
struct alignas( 8 ) _EXCEPTION_POINTERS
{
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
};
struct alignas( 8 ) LIST_ENTRY64
{
    ULONGLONG Flink;
    ULONGLONG Blink;
};
;
struct alignas( 4 ) _IMAGE_DEBUG_MISC
{
    DWORD DataType;
    DWORD Length;
    BOOLEAN Unicode;
    BYTE Reserved[3];
    BYTE Data[1];
};
struct alignas( 4 ) _REPARSE_GUID_DATA_BUFFER
{
    DWORD ReparseTag;
    WORD ReparseDataLength;
    WORD Reserved;
    GUID ReparseGuid;
    struct alignas( 1 )
    {
        BYTE DataBuffer[1];
    } GenericReparseBuffer;
};
struct alignas( 4 ) LIST_ENTRY32
{
    DWORD Flink;
    DWORD Blink;
};
struct alignas( 16 ) _MEMORY_BASIC_INFORMATION64
{
    ULONGLONG BaseAddress;
    ULONGLONG AllocationBase;
    DWORD AllocationProtect;
    DWORD __alignment1;
    ULONGLONG RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
    DWORD __alignment2;
};
struct alignas( 8 ) _MEMORY_BASIC_INFORMATION
{
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    WORD PartitionId;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
};
struct alignas( 8 ) _ACTIVATION_CONTEXT_DETAILED_INFORMATION
{
    DWORD dwFlags;
    DWORD ulFormatVersion;
    DWORD ulAssemblyCount;
    DWORD ulRootManifestPathType;
    DWORD ulRootManifestPathChars;
    DWORD ulRootConfigurationPathType;
    DWORD ulRootConfigurationPathChars;
    DWORD ulAppDirPathType;
    DWORD ulAppDirPathChars;
    PCWSTR lpRootManifestPath;
    PCWSTR lpRootConfigurationPath;
    PCWSTR lpAppDirPath;
};
struct alignas( 4 ) _XSTATE_FEATURE
{
    DWORD Offset;
    DWORD Size;
};
struct alignas( 4 ) _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY
{
    union alignas( 4 )
    {
        DWORD Flags;
        struct alignas( 4 )
        {
            DWORD DisallowWin32kSystemCalls : 1;
            DWORD AuditDisallowWin32kSystemCalls : 1;
            DWORD ReservedFlags : 30;
        };
    };
};
struct alignas( 8 ) _RTL_SRWLOCK
{
    PVOID Ptr;
};
struct alignas( 4 ) _SYSTEM_MANDATORY_LABEL_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
};
struct alignas( 4 ) _SCRUB_DATA_INPUT
{
    DWORD Size;
    DWORD Flags;
    DWORD MaximumIos;
    DWORD ObjectId[4];
    DWORD Reserved[41];
    BYTE ResumeContext[1040];
};
struct alignas( 4 ) tagMONITORINFOEXA
{
    CHAR szDevice[32];
};
struct alignas( 4 ) _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY
{
    union alignas( 4 )
    {
        DWORD Flags;
        struct alignas( 4 )
        {
            DWORD ProhibitDynamicCode : 1;
            DWORD AllowThreadOptOut : 1;
            DWORD AllowRemoteDowngrade : 1;
            DWORD AuditProhibitDynamicCode : 1;
            DWORD ReservedFlags : 28;
        };
    };
};
struct alignas( 4 ) _SYSTEM_PROCESS_TRUST_LABEL_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
};
struct alignas( 4 ) _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY
{
    union alignas( 4 )
    {
        DWORD Flags;
        struct alignas( 4 )
        {
            DWORD DisableExtensionPoints : 1;
            DWORD ReservedFlags : 31;
        };
    };
};
struct alignas( 4 ) tagMONITORINFOEXW
{
    WCHAR szDevice[32];
};
struct alignas( 4 ) SERVICE_STATUS_HANDLE__
{
    int unused;
};
struct alignas( 8 ) _SID_AND_ATTRIBUTES
{
    PSID Sid;
    DWORD Attributes;
};
struct alignas( 8 ) _TOKEN_USER
{
    SID_AND_ATTRIBUTES User;
};
struct alignas( 1 ) _SID_IDENTIFIER_AUTHORITY
{
    BYTE Value[6];
};
struct alignas( 4 ) _SID
{
    BYTE Revision;
    BYTE SubAuthorityCount;
    SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
    DWORD SubAuthority[1];
};
struct alignas( 8 ) _SE_TOKEN_USER
{
    union alignas( 8 )
    {
        TOKEN_USER TokenUser;
        SID_AND_ATTRIBUTES User;
    };
    union alignas( 4 )
    {
        SID Sid;
        BYTE Buffer[68];
    };
};
struct alignas( 4 ) _IMAGE_SEPARATE_DEBUG_HEADER
{
    WORD Signature;
    WORD Flags;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD ImageBase;
    DWORD SizeOfImage;
    DWORD NumberOfSections;
    DWORD ExportedNamesSize;
    DWORD DebugDirectorySize;
    DWORD SectionAlignment;
    DWORD Reserved[2];
};
struct alignas( 8 ) _RTL_CRITICAL_SECTION
{
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount;
};
struct alignas( 8 ) _LDR_SOFTWARE_ENCLAVE
{
    LIST_ENTRY Links;
    RTL_CRITICAL_SECTION CriticalSection;
    ULONG EnclaveType;
    LONG ReferenceCount;
    ULONG EnclaveState;
    PVOID BaseAddress;
    SIZE_T Size;
    PVOID PreviousBaseAddress;
    LIST_ENTRY Modules;
    PLDR_DATA_TABLE_ENTRY PrimaryModule;
    PLDR_DATA_TABLE_ENTRY BCryptModule;
    PLDR_DATA_TABLE_ENTRY BCryptPrimitivesModule;
};
struct alignas( 4 ) _IMAGE_FUNCTION_ENTRY64
{
    ULONGLONG StartingAddress;
    ULONGLONG EndingAddress;
    union alignas( 4 )
    {
        ULONGLONG EndOfPrologue;
        ULONGLONG UnwindInfoAddress;
    };
};
struct alignas( 4 ) _ACL_REVISION_INFORMATION
{
    DWORD AclRevision;
};
struct alignas( 8 ) _CFG_CALL_TARGET_INFO
{
    ULONG_PTR Offset;
    ULONG_PTR Flags;
};
struct alignas( 4 ) _IMAGE_FUNCTION_ENTRY
{
    DWORD StartingAddress;
    DWORD EndingAddress;
    DWORD EndOfPrologue;
};
struct alignas( 8 ) _TOKEN_GROUPS
{
    DWORD GroupCount;
    SID_AND_ATTRIBUTES Groups[1];
};
struct alignas( 4 ) _ACL_SIZE_INFORMATION
{
    DWORD AceCount;
    DWORD AclBytesInUse;
    DWORD AclBytesFree;
};
struct alignas( 8 ) _IO_STATUS_BLOCK
{
    union alignas( 8 )
    {
        NTSTATUS Status;
        PVOID Pointer;
    };
    ULONG_PTR Information;
};
struct alignas( 8 ) _FILE_IO_COMPLETION_INFORMATION
{
    PVOID KeyContext;
    PVOID ApcContext;
    IO_STATUS_BLOCK IoStatusBlock;
};
struct alignas( 4 ) _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY
{
    union alignas( 4 )
    {
        DWORD Flags;
        struct alignas( 4 )
        {
            DWORD EnforceRedirectionTrust : 1;
            DWORD AuditRedirectionTrust : 1;
            DWORD ReservedFlags : 30;
        };
    };
};
struct alignas( 8 ) _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION
{
    DWORD NextEntryOffset;
    DWORD SizeOfInformation;
    DWORD Flags;
    DWORD AttributesOffset;
    DWORD AttributeCount;
    DWORD Reserved;
    DWORD64 TypeId;
};
union alignas( 4 ) _EVENT_TRACE_PROFILE_ADD_INFORMATION_V3
{
    struct alignas( 1 )
    {
        UCHAR PerfEvtEventSelect;
        UCHAR PerfEvtUnitSelect;
        UCHAR PerfEvtCMask;
        UCHAR PerfEvtCInv;
        UCHAR PerfEvtAnyThread;
        UCHAR PerfEvtEdgeDetect;
    } Intel;
    struct alignas( 2 )
    {
        USHORT PerfEvtEventSelect;
        UCHAR PerfEvtUnitSelect;
        UCHAR PerfEvtCMask;
        UCHAR PerfEvtCInv;
        UCHAR PerfEvtEdgeDetect;
        UCHAR PerfEvtHostGuest;
        UCHAR PerfPmuType;
    } Amd;
    struct alignas( 4 )
    {
        ULONG PerfEvtType;
        UCHAR AllowsHalt;
    } Arm;
};
struct alignas( 8 ) _SE_ACCESS_REPLY
{
    DWORD Size;
    DWORD ResultListCount;
    PACCESS_MASK GrantedAccess;
    PDWORD AccessStatus;
    PACCESS_REASONS AccessReason;
    PPRIVILEGE_SET* Privileges;
};
struct alignas( 1 ) _TOKEN_AUDIT_POLICY
{
    BYTE PerUserPolicy[30];
};
struct alignas( 4 ) _POWER_MONITOR_INVOCATION
{
    BOOLEAN Console;
    POWER_MONITOR_REQUEST_REASON RequestReason;
};
struct alignas( 4 ) _OBJECTID
{
    GUID Lineage;
    DWORD Uniquifier;
};
struct alignas( 2 ) _COORD
{
    SHORT X;
    SHORT Y;
};
struct alignas( 4 ) _MOUSE_EVENT_RECORD
{
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
};
struct alignas( 8 ) _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION
{
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
    DWORD LimitFlags;
};
struct alignas( 4 ) _PACKEDEVENTINFO
{
    DWORD ulSize;
    DWORD ulNumEventsForLogFile;
    DWORD ulOffsets[0];
};
struct alignas( 8 ) JOBOBJECT_IO_RATE_CONTROL_INFORMATION
{
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PCWSTR VolumeName;
    ULONG BaseIoSize;
    ULONG ControlFlags;
};
struct alignas( 4 ) HACCEL__
{
    int unused;
};
struct alignas( 4 ) _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1
{
    DWORD Name;
    WORD ValueType;
    WORD Reserved;
    DWORD Flags;
    DWORD ValueCount;
    union alignas( 4 )
    {
        DWORD pInt64[1];
        DWORD pUint64[1];
        DWORD ppString[1];
        DWORD pFqbn[1];
        DWORD pOctetString[1];
    } Values;
};
struct alignas( 8 ) _EXCEPTION_DEBUG_INFO
{
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
};
struct alignas( 8 ) _CREATE_THREAD_DEBUG_INFO
{
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
};
struct alignas( 8 ) _CREATE_PROCESS_DEBUG_INFO
{
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
};
struct alignas( 4 ) _EXIT_THREAD_DEBUG_INFO
{
    DWORD dwExitCode;
};
struct alignas( 4 ) _EXIT_PROCESS_DEBUG_INFO
{
    DWORD dwExitCode;
};
struct alignas( 8 ) _LOAD_DLL_DEBUG_INFO
{
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
};
struct alignas( 8 ) _UNLOAD_DLL_DEBUG_INFO
{
    LPVOID lpBaseOfDll;
};
struct alignas( 8 ) _OUTPUT_DEBUG_STRING_INFO
{
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
};
struct alignas( 4 ) _RIP_INFO
{
    DWORD dwError;
    DWORD dwType;
};
struct alignas( 8 ) _DEBUG_EVENT
{
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union alignas( 8 )
    {
        EXCEPTION_DEBUG_INFO Exception;
        CREATE_THREAD_DEBUG_INFO CreateThread;
        CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        EXIT_THREAD_DEBUG_INFO ExitThread;
        EXIT_PROCESS_DEBUG_INFO ExitProcess;
        LOAD_DLL_DEBUG_INFO LoadDll;
        UNLOAD_DLL_DEBUG_INFO UnloadDll;
        OUTPUT_DEBUG_STRING_INFO DebugString;
        RIP_INFO RipInfo;
    } u;
};
struct alignas( 4 ) _MENU_EVENT_RECORD
{
    UINT dwCommandId;
};
struct alignas( 8 ) _SMC_CACHE_PARAMETERS
{
    SIZE_T CacheFileSize;
    ULONG StoreAlignment;
    ULONG PerformsFileIo : 1;
    ULONG VdlNotSet : 1;
    ULONG Spare : 30;
    ULONG CacheFlags;
    ULONG Priority;
};
struct alignas( 8 ) _SMC_CACHE_CREATE_PARAMETERS
{
    SMC_CACHE_PARAMETERS CacheParameters;
    WCHAR TemplateFilePath[512];
};
struct alignas( 8 ) _SMC_CACHE_CREATE_REQUEST
{
    ULONG Version : 8;
    ULONG Spare : 24;
    ULONG CacheId;
    SMC_CACHE_CREATE_PARAMETERS CacheCreateParams;
};
struct alignas( 8 ) _FILE_NOTIFY_EXTENDED_INFORMATION
{
    DWORD NextEntryOffset;
    DWORD Action;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastModificationTime;
    LARGE_INTEGER LastChangeTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER AllocatedLength;
    LARGE_INTEGER FileSize;
    DWORD FileAttributes;
    union alignas( 4 )
    {
        DWORD ReparsePointTag;
        DWORD EaSize;
    };
    LARGE_INTEGER FileId;
    LARGE_INTEGER ParentFileId;
    DWORD FileNameLength;
    WCHAR FileName[1];
};
struct alignas( 4 ) _SERVICE_STATUS
{
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
};
struct alignas( 8 ) _ENUM_SERVICE_STATUSW
{
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
};
struct alignas( 8 ) _SID_AND_ATTRIBUTES_HASH
{
    DWORD SidCount;
    PSID_AND_ATTRIBUTES SidAttr;
    SID_HASH_ENTRY Hash[32];
};
struct alignas( 4 ) _SECURITY_OBJECT_AI_PARAMS
{
    DWORD Size;
    DWORD ConstraintMask;
};
struct alignas( 4 ) tagRAWMOUSE
{
    USHORT usFlags;
    union alignas( 4 )
    {
        ULONG ulButtons;
        struct alignas( 2 )
        {
            USHORT usButtonFlags;
            USHORT usButtonData;
        };
    };
    ULONG ulRawButtons;
    LONG lLastX;
    LONG lLastY;
    ULONG ulExtraInformation;
};
struct alignas( 4 ) tagRAWKEYBOARD
{
    USHORT MakeCode;
    USHORT Flags;
    USHORT Reserved;
    USHORT VKey;
    UINT Message;
    ULONG ExtraInformation;
};
struct alignas( 4 ) tagRAWHID
{
    DWORD dwSizeHid;
    DWORD dwCount;
    BYTE bRawData[1];
};
struct alignas( 8 ) _CLAIM_SECURITY_ATTRIBUTES_INFORMATION
{
    WORD Version;
    WORD Reserved;
    DWORD AttributeCount;
    union alignas( 8 )
    {
        PCLAIM_SECURITY_ATTRIBUTE_V1 pAttributeV1;
    } Attribute;
};
struct alignas( 8 ) _JOBOBJECT_BASIC_PROCESS_ID_LIST
{
    DWORD NumberOfAssignedProcesses;
    DWORD NumberOfProcessIdsInList;
    ULONG_PTR ProcessIdList[1];
};
struct alignas( 8 ) _OBJECT_TYPE_LIST
{
    WORD Level;
    WORD Sbz;
    GUID* ObjectType;
};
struct alignas( 8 ) _TRANSACTION_NOTIFICATION
{
    PVOID TransactionKey;
    ULONG TransactionNotification;
    LARGE_INTEGER TmVirtualClock;
    ULONG ArgumentLength;
};
struct alignas( 4 ) _MESSAGE_RESOURCE_BLOCK
{
    DWORD LowId;
    DWORD HighId;
    DWORD OffsetToEntries;
};
struct alignas( 8 ) _JOBOBJECT_BASIC_LIMIT_INFORMATION
{
    LARGE_INTEGER PerProcessUserTimeLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD LimitFlags;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    DWORD ActiveProcessLimit;
    ULONG_PTR Affinity;
    DWORD PriorityClass;
    DWORD SchedulingClass;
};
struct alignas( 8 ) _IO_COUNTERS
{
    ULONGLONG ReadOperationCount;
    ULONGLONG WriteOperationCount;
    ULONGLONG OtherOperationCount;
    ULONGLONG ReadTransferCount;
    ULONGLONG WriteTransferCount;
    ULONGLONG OtherTransferCount;
};
struct alignas( 8 ) _JOBOBJECT_EXTENDED_LIMIT_INFORMATION
{
    JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
    IO_COUNTERS IoInfo;
    SIZE_T ProcessMemoryLimit;
    SIZE_T JobMemoryLimit;
    SIZE_T PeakProcessMemoryUsed;
    SIZE_T PeakJobMemoryUsed;
};
struct alignas( 8 ) __crt_locale_data_public
{
    unsigned short* _locale_pctype;
    int _locale_mb_cur_max;
    unsigned int _locale_lc_codepage;
};
struct alignas( 2 ) _ACL
{
    BYTE AclRevision;
    BYTE Sbz1;
    WORD AclSize;
    WORD AceCount;
    WORD Sbz2;
};
struct alignas( 4 ) HRGN__
{
    int unused;
};
struct alignas( 8 ) __crt_locale_pointers
{
    __crt_locale_data* locinfo;
    __crt_multibyte_data* mbcinfo;
};
struct alignas( 4 ) _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT
{
    GUID EnlistmentId;
    UOW UOW;
};
struct alignas( 4 ) _JOBOBJECT_BASIC_UI_RESTRICTIONS
{
    DWORD UIRestrictionsClass;
};
;
;
struct alignas( 8 ) _DEVICE_COPY_OFFLOAD_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    DWORD MaximumTokenLifetime;
    DWORD DefaultTokenLifetime;
    DWORDLONG MaximumTransferSize;
    DWORDLONG OptimalTransferCount;
    DWORD MaximumDataDescriptors;
    DWORD MaximumTransferLengthPerDescriptor;
    DWORD OptimalTransferLengthPerDescriptor;
    WORD OptimalTransferLengthGranularity;
    BYTE Reserved[2];
};
struct alignas( 4 ) _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY
{
    union alignas( 4 )
    {
        DWORD Flags;
        struct alignas( 4 )
        {
            DWORD SmtBranchTargetIsolation : 1;
            DWORD IsolateSecurityDomain : 1;
            DWORD DisablePageCombine : 1;
            DWORD SpeculativeStoreBypassDisable : 1;
            DWORD RestrictCoreSharing : 1;
            DWORD ReservedFlags : 27;
        };
    };
};
struct alignas( 4 ) _ACCESS_DENIED_CALLBACK_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
};
struct alignas( 8 ) _TAPE_GET_POSITION
{
    DWORD Type;
    DWORD Partition;
    LARGE_INTEGER Offset;
};
struct alignas( 4 ) _PROCESS_MITIGATION_CHILD_PROCESS_POLICY
{
    union alignas( 4 )
    {
        DWORD Flags;
        struct alignas( 4 )
        {
            DWORD NoChildProcessCreation : 1;
            DWORD AuditNoChildProcessCreation : 1;
            DWORD AllowSecureProcessCreation : 1;
            DWORD ReservedFlags : 29;
        };
    };
};
struct alignas( 4 ) _MEMORY_PRIORITY_INFORMATION
{
    ULONG MemoryPriority;
};
struct alignas( 4 ) _Mbstatet
{
    unsigned long _Wchar;
    unsigned short _Byte;
    unsigned short _State;
};
struct alignas( 8 ) _XSTATE_CONTEXT
{
    DWORD64 Mask;
    DWORD Length;
    DWORD Reserved1;
    PXSAVE_AREA Area;
    PVOID Buffer;
};
struct alignas( 4 ) _TOKEN_ELEVATION
{
    DWORD TokenIsElevated;
};
struct alignas( 4 ) _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
};
struct alignas( 8 ) _XSAVE_AREA_HEADER
{
    DWORD64 Mask;
    DWORD64 CompactionMask;
    DWORD64 Reserved2[6];
};
struct alignas( 16 ) _XSAVE_AREA
{
    XSAVE_FORMAT LegacyState;
    XSAVE_AREA_HEADER Header;
};
struct alignas( 8 ) _TAPE_SET_POSITION
{
    DWORD Method;
    DWORD Partition;
    LARGE_INTEGER Offset;
    BOOLEAN Immediate;
};
struct alignas( 4 ) _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY
{
    union alignas( 4 )
    {
        DWORD Flags;
        struct alignas( 4 )
        {
            DWORD EnableUserShadowStack : 1;
            DWORD AuditUserShadowStack : 1;
            DWORD SetContextIpValidation : 1;
            DWORD AuditSetContextIpValidation : 1;
            DWORD EnableUserShadowStackStrictMode : 1;
            DWORD BlockNonCetBinaries : 1;
            DWORD BlockNonCetBinariesNonEhcont : 1;
            DWORD AuditBlockNonCetBinaries : 1;
            DWORD CetDynamicApisOutOfProcOnly : 1;
            DWORD SetContextIpValidationRelaxedMode : 1;
            DWORD ReservedFlags : 22;
        };
    };
};
struct alignas( 4 ) _SYSTEM_ALARM_CALLBACK_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
};
struct alignas( 8 ) _KERNEL_CET_CONTEXT
{
    DWORD64 Ssp;
    DWORD64 Rip;
    WORD SegCs;
    union alignas( 2 )
    {
        WORD AllFlags;
        struct alignas( 2 )
        {
            WORD UseWrss : 1;
            WORD PopShadowStackOne : 1;
            WORD Unused : 14;
        };
    };
    WORD Fill[2];
};
struct alignas( 8 ) _SE_SECURITY_DESCRIPTOR
{
    DWORD Size;
    DWORD Flags;
    PSECURITY_DESCRIPTOR SecurityDescriptor;
};
struct alignas( 4 ) _TOKEN_MANDATORY_POLICY
{
    DWORD Policy;
};
struct alignas( 4 ) _FILETIME
{
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
};
struct alignas( 4 ) _BOOT_OPTIONS
{
    ULONG Version;
    ULONG Length;
    ULONG Timeout;
    ULONG CurrentBootEntryId;
    ULONG NextBootEntryId;
    WCHAR HeadlessRedirection[1];
};
struct alignas( 8 ) _HARDWARE_COUNTER_DATA
{
    HARDWARE_COUNTER_TYPE Type;
    DWORD Reserved;
    DWORD64 Value;
};
struct alignas( 8 ) _PERFORMANCE_DATA
{
    WORD Size;
    BYTE Version;
    BYTE HwCountersCount;
    DWORD ContextSwitchCount;
    DWORD64 WaitReasonBitMap;
    DWORD64 CycleTime;
    DWORD RetryCount;
    DWORD Reserved;
    HARDWARE_COUNTER_DATA HwCounters[16];
};
struct alignas( 8 ) WIN32_MEMORY_REGION_INFORMATION
{
    PVOID AllocationBase;
    ULONG AllocationProtect;
    union alignas( 4 )
    {
        ULONG Flags;
        struct alignas( 4 )
        {
            ULONG Private : 1;
            ULONG MappedDataFile : 1;
            ULONG MappedImage : 1;
            ULONG MappedPageFile : 1;
            ULONG MappedPhysical : 1;
            ULONG DirectMapped : 1;
            ULONG Reserved : 26;
        };
    };
    SIZE_T RegionSize;
    SIZE_T CommitSize;
};
struct alignas( 8 ) _TOKEN_ACCESS_INFORMATION
{
    PSID_AND_ATTRIBUTES_HASH SidHash;
    PSID_AND_ATTRIBUTES_HASH RestrictedSidHash;
    PTOKEN_PRIVILEGES Privileges;
    LUID AuthenticationId;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    TOKEN_MANDATORY_POLICY MandatoryPolicy;
    DWORD Flags;
    DWORD AppContainerNumber;
    PSID PackageSid;
    PSID_AND_ATTRIBUTES_HASH CapabilitiesHash;
    PSID TrustLevelSid;
    PSECURITY_ATTRIBUTES_OPAQUE SecurityAttributes;
};
struct alignas( 8 ) _SE_ACCESS_REQUEST
{
    DWORD Size;
    PSE_SECURITY_DESCRIPTOR SeSecurityDescriptor;
    ACCESS_MASK DesiredAccess;
    ACCESS_MASK PreviouslyGrantedAccess;
    PSID PrincipalSelfSid;
    PGENERIC_MAPPING GenericMapping;
    DWORD ObjectTypeListCount;
    POBJECT_TYPE_LIST ObjectTypeList;
};
struct alignas( 4 ) _EVENTLOGRECORD
{
    DWORD Length;
    DWORD Reserved;
    DWORD RecordNumber;
    DWORD TimeGenerated;
    DWORD TimeWritten;
    DWORD EventID;
    WORD EventType;
    WORD NumStrings;
    WORD EventCategory;
    WORD ReservedFlags;
    DWORD ClosingRecordNumber;
    DWORD StringOffset;
    DWORD UserSidLength;
    DWORD UserSidOffset;
    DWORD DataLength;
    DWORD DataOffset;
};
struct alignas( 4 ) _EFI_DRIVER_ENTRY
{
    ULONG Version;
    ULONG Length;
    ULONG Id;
    ULONG FriendlyNameOffset;
    ULONG DriverFilePathOffset;
};
struct alignas( 4 ) _JOBOBJECT_JOBSET_INFORMATION
{
    DWORD MemberLevel;
};
union alignas( 4 ) _RATE_QUOTA_LIMIT
{
    DWORD RateData;
    struct alignas( 4 )
    {
        DWORD RatePercent : 7;
        DWORD Reserved0 : 25;
    };
};
struct alignas( 8 ) _SYSTEM_CALL_TIME_INFORMATION
{
    ULONG Length;
    ULONG TotalCalls;
    LARGE_INTEGER TimeOfCalls[1];
};
struct alignas( 8 ) _QUOTA_LIMITS_EX
{
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
    SIZE_T WorkingSetLimit;
    SIZE_T Reserved2;
    SIZE_T Reserved3;
    SIZE_T Reserved4;
    DWORD Flags;
    RATE_QUOTA_LIMIT CpuRateLimit;
};
struct alignas( 4 ) _ENCLAVE_INIT_INFO_VBS
{
    DWORD Length;
    DWORD ThreadCount;
};
struct alignas( 4 ) _TRANSACTION_ENLISTMENT_PAIR
{
    GUID EnlistmentId;
    GUID ResourceManagerId;
};
struct alignas( 4 ) _TRANSACTION_ENLISTMENTS_INFORMATION
{
    DWORD NumberOfEnlistments;
    TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1];
};
struct alignas( 4 ) _WNF_STATE_NAME
{
    ULONG Data[2];
};
struct alignas( 4 ) _WNF_TYPE_ID
{
    GUID TypeId;
};
struct alignas( 8 ) _WNF_DELIVERY_DESCRIPTOR
{
    ULONGLONG SubscriptionId;
    WNF_STATE_NAME StateName;
    WNF_CHANGE_STAMP ChangeStamp;
    ULONG StateDataSize;
    ULONG EventMask;
    WNF_TYPE_ID TypeId;
    ULONG StateDataOffset;
};
struct alignas( 4 ) _SYSTEM_ACCESS_FILTER_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
};
struct alignas( 4 ) _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY
{
    union alignas( 4 )
    {
        DWORD Flags;
        struct alignas( 4 )
        {
            DWORD EnableControlFlowGuard : 1;
            DWORD EnableExportSuppression : 1;
            DWORD StrictMode : 1;
            DWORD EnableXfg : 1;
            DWORD EnableXfgAuditMode : 1;
            DWORD ReservedFlags : 27;
        };
    };
};
struct alignas( 8 ) _SCRUB_PARITY_EXTENT
{
    LONGLONG Offset;
    ULONGLONG Length;
};
struct alignas( 8 ) _SCRUB_PARITY_EXTENT_DATA
{
    WORD Size;
    WORD Flags;
    WORD NumberOfParityExtents;
    WORD MaximumNumberOfParityExtents;
    SCRUB_PARITY_EXTENT ParityExtents[1];
};
struct alignas( 4 ) _ACCESS_ALLOWED_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
};
struct alignas( 8 ) _SE_IMPERSONATION_STATE
{
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL Level;
};
struct alignas( 4 ) _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT
{
    ULONG PropagationCookie;
    GUID UOW;
    GUID TmIdentity;
    ULONG BufferLength;
};
struct alignas( 4 ) _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY
{
    union alignas( 4 )
    {
        DWORD Flags;
        struct alignas( 4 )
        {
            DWORD MicrosoftSignedOnly : 1;
            DWORD StoreSignedOnly : 1;
            DWORD MitigationOptIn : 1;
            DWORD AuditMicrosoftSignedOnly : 1;
            DWORD AuditStoreSignedOnly : 1;
            DWORD ReservedFlags : 27;
        };
    };
};
struct alignas( 8 ) _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE
{
    DWORD64 Version;
    PWSTR Name;
};
struct alignas( 8 ) _TOKEN_APPCONTAINER_INFORMATION
{
    PSID TokenAppContainer;
};
struct alignas( 4 ) _CONSOLE_CURSOR_INFO
{
    DWORD dwSize;
    BOOL bVisible;
};
struct alignas( 4 ) _PROCESS_MITIGATION_ASLR_POLICY
{
    union alignas( 4 )
    {
        DWORD Flags;
        struct alignas( 4 )
        {
            DWORD EnableBottomUpRandomization : 1;
            DWORD EnableForceRelocateImages : 1;
            DWORD EnableHighEntropy : 1;
            DWORD DisallowStrippedImages : 1;
            DWORD ReservedFlags : 28;
        };
    };
};
struct alignas( 1 ) _FILE_ID_128
{
    BYTE Identifier[16];
};
struct alignas( 4 ) SERVICE_TRIGGER_CUSTOM_STATE_ID
{
    DWORD Data[2];
};
struct alignas( 4 ) _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM
{
    union alignas( 4 )
    {
        SERVICE_TRIGGER_CUSTOM_STATE_ID CustomStateId;
        struct alignas( 4 )
        {
            DWORD DataOffset;
            BYTE Data[1];
        } s;
    } u;
};
struct alignas( 4 ) _POWER_SESSION_TIMEOUTS
{
    DWORD InputTimeout;
    DWORD DisplayTimeout;
};
struct alignas( 4 ) _ACCESS_ALLOWED_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
};
struct alignas( 4 ) _BY_HANDLE_FILE_INFORMATION
{
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
};
struct alignas( 4 ) HSTR__
{
    int unused;
};
struct alignas( 8 ) _MEMORYSTATUSEX
{
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORDLONG ullTotalPhys;
    DWORDLONG ullAvailPhys;
    DWORDLONG ullTotalPageFile;
    DWORDLONG ullAvailPageFile;
    DWORDLONG ullTotalVirtual;
    DWORDLONG ullAvailVirtual;
    DWORDLONG ullAvailExtendedVirtual;
};
struct alignas( 4 ) _POWER_SESSION_WINLOGON
{
    DWORD SessionId;
    BOOLEAN Console;
    BOOLEAN Locked;
};
struct alignas( 8 ) _JOBOBJECT_ASSOCIATE_COMPLETION_PORT
{
    PVOID CompletionKey;
    HANDLE CompletionPort;
};
struct alignas( 4 ) _ACCESS_DENIED_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
};
struct alignas( 4 ) _ENLISTMENT_CRM_INFORMATION
{
    GUID CrmTransactionManagerId;
    GUID CrmResourceManagerId;
    GUID CrmEnlistmentId;
};
struct alignas( 4 ) _JOBOBJECT_END_OF_JOB_TIME_INFORMATION
{
    DWORD EndOfJobTimeAction;
};
struct alignas( 4 ) _PROCESS_MITIGATION_DEP_POLICY
{
    union alignas( 4 )
    {
        DWORD Flags;
        struct alignas( 4 )
        {
            DWORD Enable : 1;
            DWORD DisableAtlThunkEmulation : 1;
            DWORD ReservedFlags : 30;
        };
    };
    BOOLEAN Permanent;
};
struct alignas( 4 ) _POWER_USER_PRESENCE
{
    POWER_USER_PRESENCE_TYPE UserPresence;
};
struct alignas( 8 ) _SERVICE_DESCRIPTIONW
{
    LPWSTR lpDescription;
};
struct alignas( 4 ) _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT
{
    GUID TmIdentity;
    ULONG Flags;
};
struct alignas( 8 ) _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION
{
    WORD NumberOfRanges;
    WORD Reserved;
    DWORD Reserved2;
    PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE Ranges;
};
struct alignas( 4 ) _ENCLAVE_CREATE_INFO_VBS_BASIC
{
    DWORD Flags;
    BYTE OwnerID[32];
};
struct alignas( 8 ) _UNICODE_STRING
{
    USHORT Length;
    USHORT MaximumLength;
    PWCH Buffer;
};
struct alignas( 8 ) _COVERAGE_MODULE_REQUEST
{
    COVERAGE_REQUEST_CODES RequestType;
    union alignas( 8 )
    {
        UCHAR MD5Hash[16];
        UNICODE_STRING ModuleName;
    } SearchInfo;
};
struct alignas( 8 ) _COVERAGE_MODULE_INFO
{
    ULONG ModuleInfoSize;
    ULONG IsBinaryLoaded;
    UNICODE_STRING ModulePathName;
    ULONG CoverageSectionSize;
    UCHAR CoverageSection[1];
};
struct alignas( 8 ) _COVERAGE_MODULES
{
    ULONG ListAndReset;
    ULONG NumberOfModules;
    COVERAGE_MODULE_REQUEST ModuleRequestInfo;
    COVERAGE_MODULE_INFO Modules[1];
};
struct alignas( 8 ) _numberfmtW
{
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
};
struct alignas( 4 ) tagVS_FIXEDFILEINFO
{
    DWORD dwSignature;
    DWORD dwStrucVersion;
    DWORD dwFileVersionMS;
    DWORD dwFileVersionLS;
    DWORD dwProductVersionMS;
    DWORD dwProductVersionLS;
    DWORD dwFileFlagsMask;
    DWORD dwFileFlags;
    DWORD dwFileOS;
    DWORD dwFileType;
    DWORD dwFileSubtype;
    DWORD dwFileDateMS;
    DWORD dwFileDateLS;
};
struct alignas( 4 ) _SYSTEM_SCOPED_POLICY_ID_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
};
struct alignas( 8 ) JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE
{
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PWSTR VolumeName;
    DWORD BaseIoSize;
    JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
    WORD VolumeNameLength;
};
struct alignas( 2 ) _PROCESSOR_NUMBER
{
    WORD Group;
    BYTE Number;
    BYTE Reserved;
};
struct alignas( 4 ) _COMPONENT_FILTER
{
    DWORD ComponentFlags;
};
union alignas( 8 ) _ULARGE_INTEGER
{
    struct alignas( 4 )
    {
        DWORD LowPart;
        DWORD HighPart;
    };
    struct alignas( 4 )
    {
        DWORD LowPart;
        DWORD HighPart;
    } u;
    ULONGLONG QuadPart;
};
struct alignas( 1 ) _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER
{
    BYTE PrologueByteCount;
};
struct alignas( 4 ) _TRANSACTIONMANAGER_LOG_INFORMATION
{
    GUID LogIdentity;
};
struct alignas( 8 ) _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION
{
    WORD NumberOfTargets;
    WORD Reserved;
    DWORD Reserved2;
    PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET Targets;
};
struct alignas( 4 ) HMENU__
{
    int unused;
};
struct alignas( 8 ) _UMS_CREATE_THREAD_ATTRIBUTES
{
    DWORD UmsVersion;
    PVOID UmsContext;
    PVOID UmsCompletionList;
};
struct alignas( 4 ) tagHELPWININFOA
{
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    CHAR rgchMember[2];
};
struct alignas( 4 ) _SYSTEM_CALL_COUNT_INFORMATION
{
    ULONG Length;
    ULONG NumberOfTables;
};
struct alignas( 8 ) JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3
{
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PWSTR VolumeName;
    DWORD BaseIoSize;
    JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
    WORD VolumeNameLength;
    LONG64 CriticalReservationIops;
    LONG64 ReservationBandwidth;
    LONG64 CriticalReservationBandwidth;
    LONG64 MaxTimePercent;
    LONG64 ReservationTimePercent;
    LONG64 CriticalReservationTimePercent;
    LONG64 SoftMaxIops;
    LONG64 SoftMaxBandwidth;
    LONG64 SoftMaxTimePercent;
    LONG64 LimitExcessNotifyIops;
    LONG64 LimitExcessNotifyBandwidth;
    LONG64 LimitExcessNotifyTimePercent;
};
struct alignas( 8 ) _JOBOBJECT_IO_ATTRIBUTION_STATS
{
    ULONG_PTR IoCount;
    ULONGLONG TotalNonOverlappedQueueTime;
    ULONGLONG TotalNonOverlappedServiceTime;
    ULONGLONG TotalSize;
};
struct alignas( 8 ) _JOBOBJECT_IO_ATTRIBUTION_INFORMATION
{
    DWORD ControlFlags;
    JOBOBJECT_IO_ATTRIBUTION_STATS ReadStats;
    JOBOBJECT_IO_ATTRIBUTION_STATS WriteStats;
};
struct alignas( 8 ) _GROUP_AFFINITY
{
    KAFFINITY Mask;
    WORD Group;
    WORD Reserved[3];
};
struct alignas( 1 ) _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION
{
    WORD PageRelativeOffset : 12;
    WORD IndirectCall : 1;
    WORD RexWPrefix : 1;
    WORD CfgCheck : 1;
    WORD Reserved : 1;
};
struct alignas( 4 ) _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY
{
    union alignas( 4 )
    {
        DWORD Flags;
        struct alignas( 4 )
        {
            DWORD EnablePointerAuthUserIp : 1;
            DWORD ReservedFlags : 31;
        };
    };
};
struct alignas( 4 ) _SERVICE_DELAYED_AUTO_START_INFO
{
    BOOL fDelayedAutostart;
};
struct alignas( 4 ) _TRANSACTIONMANAGER_OLDEST_INFORMATION
{
    GUID OldestTransactionGuid;
};
struct alignas( 4 ) _KCRM_TRANSACTION_BLOB
{
    UOW UOW;
    GUID TmIdentity;
    ULONG IsolationLevel;
    ULONG IsolationFlags;
    ULONG Timeout;
    WCHAR Description[64];
};
struct alignas( 4 ) tagTouchPredictionParameters
{
    UINT cbSize;
    UINT dwLatency;
    UINT dwSampleTime;
    UINT bUseHWTimeStamp;
};
struct alignas( 8 ) _JOB_SET_ARRAY
{
    HANDLE JobHandle;
    DWORD MemberLevel;
    DWORD Flags;
};
struct alignas( 4 ) HMONITOR__
{
    int unused;
};
struct alignas( 4 ) HPALETTE__
{
    int unused;
};
;
struct alignas( 8 ) provider_info
{
    PQUERYHANDLER pi_R0_1val;
    PQUERYHANDLER pi_R0_allvals;
    PQUERYHANDLER pi_R3_1val;
    PQUERYHANDLER pi_R3_allvals;
    DWORD pi_flags;
    LPVOID pi_key_context;
};
struct alignas( 4 ) _SYSTEM_AUDIT_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
};
struct alignas( 4 ) _CONSOLE_FONT_INFOEX
{
    ULONG cbSize;
    DWORD nFont;
    COORD dwFontSize;
    UINT FontFamily;
    UINT FontWeight;
    WCHAR FaceName[32];
};
struct alignas( 8 ) _SERVICE_REQUIRED_PRIVILEGES_INFOW
{
    LPWSTR pmszRequiredPrivileges;
};
struct alignas( 4 ) _SYSTEM_ALARM_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
};
struct alignas( 8 ) _TOKEN_BNO_ISOLATION_INFORMATION
{
    PWSTR IsolationPrefix;
    BOOLEAN IsolationEnabled;
};
struct alignas( 8 ) _STARTUPINFOA
{
    DWORD cb;
    LPSTR lpReserved;
    LPSTR lpDesktop;
    LPSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
};
struct alignas( 4 ) _TAPE_SET_MEDIA_PARAMETERS
{
    DWORD BlockSize;
};
struct alignas( 4 ) _PROCESS_MITIGATION_FONT_DISABLE_POLICY
{
    union alignas( 4 )
    {
        DWORD Flags;
        struct alignas( 4 )
        {
            DWORD DisableNonSystemFonts : 1;
            DWORD AuditNonSystemFontLoading : 1;
            DWORD ReservedFlags : 30;
        };
    };
};
struct alignas( 4 ) _ACCESS_ALLOWED_CALLBACK_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
};
struct alignas( 8 ) _FLOAT128
{
    long long LowPart;
    long long HighPart;
};
struct alignas( 8 ) _CLAIM_SECURITY_ATTRIBUTE_V1
{
    PWSTR Name;
    WORD ValueType;
    WORD Reserved;
    DWORD Flags;
    DWORD ValueCount;
    union alignas( 8 )
    {
        PLONG64 pInt64;
        PDWORD64 pUint64;
        PWSTR* ppString;
        PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE pFqbn;
        PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE pOctetString;
    } Values;
};
struct alignas( 4 ) _PROCESS_MITIGATION_IMAGE_LOAD_POLICY
{
    union alignas( 4 )
    {
        DWORD Flags;
        struct alignas( 4 )
        {
            DWORD NoRemoteImages : 1;
            DWORD NoLowMandatoryLabelImages : 1;
            DWORD PreferSystem32Images : 1;
            DWORD AuditNoRemoteImages : 1;
            DWORD AuditNoLowMandatoryLabelImages : 1;
            DWORD ReservedFlags : 27;
        };
    };
};
struct alignas( 4 ) _SYSTEM_AUDIT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
};
struct alignas( 8 ) _FILE_NOTIFY_FULL_INFORMATION
{
    DWORD NextEntryOffset;
    DWORD Action;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastModificationTime;
    LARGE_INTEGER LastChangeTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER AllocatedLength;
    LARGE_INTEGER FileSize;
    DWORD FileAttributes;
    union alignas( 4 )
    {
        DWORD ReparsePointTag;
        DWORD EaSize;
    };
    LARGE_INTEGER FileId;
    LARGE_INTEGER ParentFileId;
    WORD FileNameLength;
    BYTE FileNameFlags;
    BYTE Reserved;
    WCHAR FileName[1];
};
struct alignas( 4 ) _NT_TIB32
{
    DWORD ExceptionList;
    DWORD StackBase;
    DWORD StackLimit;
    DWORD SubSystemTib;
    union alignas( 4 )
    {
        DWORD FiberData;
        DWORD Version;
    };
    DWORD ArbitraryUserPointer;
    DWORD Self;
};
struct alignas( 8 ) _WIN32_FIND_STREAM_DATA
{
    LARGE_INTEGER StreamSize;
    WCHAR cStreamName[296];
};
struct alignas( 4 ) _PROCESS_MITIGATION_SEHOP_POLICY
{
    union alignas( 4 )
    {
        DWORD Flags;
        struct alignas( 4 )
        {
            DWORD EnableSehop : 1;
            DWORD ReservedFlags : 31;
        };
    };
};
struct alignas( 4 ) _SYSTEM_ALARM_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
};
union alignas( 8 ) _FILE_SEGMENT_ELEMENT
{
    void* Buffer;
    ULONGLONG Alignment;
};
struct alignas( 4 ) _SYSTEM_RESOURCE_ATTRIBUTE_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
};
struct alignas( 8 ) _NT_TIB
{
    _EXCEPTION_REGISTRATION_RECORD* ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;
    union alignas( 8 )
    {
        PVOID FiberData;
        DWORD Version;
    };
    PVOID ArbitraryUserPointer;
    _NT_TIB* Self;
};
struct alignas( 4 ) _TRANSACTION_LIST_ENTRY
{
    UOW UOW;
};
struct alignas( 4 ) _TRANSACTION_LIST_INFORMATION
{
    DWORD NumberOfTransactions;
    TRANSACTION_LIST_ENTRY TransactionInformation[1];
};
struct alignas( 4 ) _WOW64_FLOATING_SAVE_AREA
{
    DWORD ControlWord;
    DWORD StatusWord;
    DWORD TagWord;
    DWORD ErrorOffset;
    DWORD ErrorSelector;
    DWORD DataOffset;
    DWORD DataSelector;
    BYTE RegisterArea[80];
    DWORD Cr0NpxState;
};
struct alignas( 4 ) _WOW64_CONTEXT
{
    DWORD ContextFlags;
    DWORD Dr0;
    DWORD Dr1;
    DWORD Dr2;
    DWORD Dr3;
    DWORD Dr6;
    DWORD Dr7;
    WOW64_FLOATING_SAVE_AREA FloatSave;
    DWORD SegGs;
    DWORD SegFs;
    DWORD SegEs;
    DWORD SegDs;
    DWORD Edi;
    DWORD Esi;
    DWORD Ebx;
    DWORD Edx;
    DWORD Ecx;
    DWORD Eax;
    DWORD Ebp;
    DWORD Eip;
    DWORD SegCs;
    DWORD EFlags;
    DWORD Esp;
    DWORD SegSs;
    BYTE ExtendedRegisters[512];
};
struct alignas( 8 ) _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION
{
    DWORD64 CycleTime;
};
struct alignas( 4 ) _WOW64_LDT_ENTRY
{
    WORD LimitLow;
    WORD BaseLow;
    union alignas( 4 )
    {
        struct alignas( 1 )
        {
            BYTE BaseMid;
            BYTE Flags1;
            BYTE Flags2;
            BYTE BaseHi;
        } Bytes;
        struct alignas( 4 )
        {
            DWORD BaseMid : 8;
            DWORD Type : 5;
            DWORD Dpl : 2;
            DWORD Pres : 1;
            DWORD LimitHi : 4;
            DWORD Sys : 1;
            DWORD Reserved_0 : 1;
            DWORD Default_Big : 1;
            DWORD Granularity : 1;
            DWORD BaseHi : 8;
        } Bits;
    } HighWord;
};
struct alignas( 4 ) _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY
{
    DWORD BeginAddress;
    union alignas( 4 )
    {
        DWORD UnwindData;
        struct alignas( 4 )
        {
            DWORD Flag : 2;
            DWORD FunctionLength : 11;
            DWORD RegF : 3;
            DWORD RegI : 4;
            DWORD H : 1;
            DWORD CR : 2;
            DWORD FrameSize : 9;
        };
    };
};
union alignas( 8 ) _DISPATCHER_CONTEXT_NONVOLREG_ARM64
{
    BYTE Buffer[152];
    struct alignas( 8 )
    {
        DWORD64 GpNvRegs[11];
        double FpNvRegs[8];
    };
};
struct alignas( 8 ) _PROCESSOR_GROUP_INFO
{
    BYTE MaximumProcessorCount;
    BYTE ActiveProcessorCount;
    BYTE Reserved[38];
    KAFFINITY ActiveProcessorMask;
};
struct alignas( 8 ) _DISPATCHER_CONTEXT_ARM64
{
    ULONG_PTR ControlPc;
    ULONG_PTR ImageBase;
    PARM64_RUNTIME_FUNCTION FunctionEntry;
    ULONG_PTR EstablisherFrame;
    ULONG_PTR TargetPc;
    PARM64_NT_CONTEXT ContextRecord;
    PEXCEPTION_ROUTINE LanguageHandler;
    PVOID HandlerData;
    _UNWIND_HISTORY_TABLE* HistoryTable;
    DWORD ScopeIndex;
    BOOLEAN ControlPcIsUnwound;
    PBYTE NonVolatileRegisters;
};
struct alignas( 8 ) _STORAGE_LB_PROVISIONING_MAP_RESOURCES
{
    DWORD Size;
    DWORD Version;
    BYTE AvailableMappingResourcesValid : 1;
    BYTE UsedMappingResourcesValid : 1;
    BYTE Reserved0 : 6;
    BYTE Reserved1[3];
    BYTE AvailableMappingResourcesScope : 2;
    BYTE UsedMappingResourcesScope : 2;
    BYTE Reserved2 : 4;
    BYTE Reserved3[3];
    DWORDLONG AvailableMappingResources;
    DWORDLONG UsedMappingResources;
};
struct alignas( 8 ) _RTL_CONDITION_VARIABLE
{
    PVOID Ptr;
};
struct alignas( 8 ) _POWER_SESSION_RIT_STATE
{
    BOOLEAN Active;
    DWORD64 LastInputTime;
};
struct alignas( 4 ) _HEAP_OPTIMIZE_RESOURCES_INFORMATION
{
    DWORD Version;
    DWORD Flags;
};
struct alignas( 1 ) _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES
{
    BOOLEAN IsAllowed;
};
struct alignas( 8 ) _currencyfmtA
{
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPSTR lpCurrencySymbol;
};
struct alignas( 4 ) tagSTYLEBUFA
{
    DWORD dwStyle;
    CHAR szDescription[32];
};
struct alignas( 4 ) _LUID_AND_ATTRIBUTES
{
    LUID Luid;
    DWORD Attributes;
};
struct alignas( 8 ) _TOKEN_PRIMARY_GROUP
{
    PSID PrimaryGroup;
};
struct alignas( 8 ) _RTL_CRITICAL_SECTION_DEBUG
{
    WORD Type;
    WORD CreatorBackTraceIndex;
    _RTL_CRITICAL_SECTION* CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Flags;
    WORD CreatorBackTraceIndexHigh;
    WORD Identifier;
};
struct alignas( 8 ) _TOKEN_USER_CLAIMS
{
    PCLAIMS_BLOB UserClaims;
};
struct alignas( 8 ) _NETRESOURCEA
{
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    LPSTR lpComment;
    LPSTR lpProvider;
};
struct alignas( 2 ) _SUPPORTED_OS_INFO
{
    WORD MajorVersion;
    WORD MinorVersion;
};
struct alignas( 8 ) _COMPATIBILITY_CONTEXT_ELEMENT
{
    GUID Id;
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
    ULONGLONG MaxVersionTested;
};
struct alignas( 8 ) _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION
{
    DWORD ElementCount;
    COMPATIBILITY_CONTEXT_ELEMENT Elements[0];
};
struct alignas( 8 ) _SECURITY_CAPABILITIES
{
    PSID AppContainerSid;
    PSID_AND_ATTRIBUTES Capabilities;
    DWORD CapabilityCount;
    DWORD Reserved;
};
struct alignas( 8 ) _PROCESSOR_RELATIONSHIP
{
    BYTE Flags;
    BYTE EfficiencyClass;
    BYTE Reserved[20];
    WORD GroupCount;
    GROUP_AFFINITY GroupMask[1];
};
struct alignas( 8 ) _KNONVOLATILE_CONTEXT_POINTERS_ARM64
{
    PDWORD64 X19;
    PDWORD64 X20;
    PDWORD64 X21;
    PDWORD64 X22;
    PDWORD64 X23;
    PDWORD64 X24;
    PDWORD64 X25;
    PDWORD64 X26;
    PDWORD64 X27;
    PDWORD64 X28;
    PDWORD64 Fp;
    PDWORD64 Lr;
    PDWORD64 D8;
    PDWORD64 D9;
    PDWORD64 D10;
    PDWORD64 D11;
    PDWORD64 D12;
    PDWORD64 D13;
    PDWORD64 D14;
    PDWORD64 D15;
};
struct alignas( 4 ) _GENERIC_MAPPING
{
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
};
struct alignas( 4 ) _STORAGE_DEVICE_NUMBER
{
    DWORD DeviceType;
    DWORD DeviceNumber;
    DWORD PartitionNumber;
};
struct alignas( 4 ) _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION
{
    DWORD ControlFlags;
    union alignas( 4 )
    {
        DWORD CpuRate;
        DWORD Weight;
        struct alignas( 2 )
        {
            WORD MinRate;
            WORD MaxRate;
        };
    };
};
struct alignas( 4 ) HENHMETAFILE__
{
    int unused;
};
struct alignas( 4 ) _IMAGE_RUNTIME_FUNCTION_ENTRY
{
    DWORD BeginAddress;
    DWORD EndAddress;
    union alignas( 4 )
    {
        DWORD UnwindInfoAddress;
        DWORD UnwindData;
    };
};
struct alignas( 4 ) _SERVICE_STATUS_PROCESS
{
    DWORD dwServiceType;
    DWORD dwCurrentState;
    DWORD dwControlsAccepted;
    DWORD dwWin32ExitCode;
    DWORD dwServiceSpecificExitCode;
    DWORD dwCheckPoint;
    DWORD dwWaitHint;
    DWORD dwProcessId;
    DWORD dwServiceFlags;
};
struct alignas( 8 ) _SERVICE_NOTIFY_2A
{
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
    PVOID pContext;
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
    DWORD dwNotificationTriggered;
    LPSTR pszServiceNames;
};
struct alignas( 4 ) _TOKEN_PRIVILEGES
{
    DWORD PrivilegeCount;
    LUID_AND_ATTRIBUTES Privileges[1];
};
struct alignas( 4 ) _CACHE_DESCRIPTOR
{
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD Size;
    PROCESSOR_CACHE_TYPE Type;
};
struct alignas( 8 ) _SYSTEM_LOGICAL_PROCESSOR_INFORMATION
{
    ULONG_PTR ProcessorMask;
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    union alignas( 8 )
    {
        struct alignas( 1 )
        {
            BYTE Flags;
        } ProcessorCore;
        struct alignas( 4 )
        {
            DWORD NodeNumber;
        } NumaNode;
        CACHE_DESCRIPTOR Cache;
        ULONGLONG Reserved[2];
    };
};
struct alignas( 8 ) _UNWIND_HISTORY_TABLE_ENTRY
{
    ULONG_PTR ImageBase;
    PRUNTIME_FUNCTION FunctionEntry;
};
struct alignas( 8 ) _UNWIND_HISTORY_TABLE
{
    DWORD Count;
    BYTE LocalHint;
    BYTE GlobalHint;
    BYTE Search;
    BYTE Once;
    ULONG_PTR LowAddress;
    ULONG_PTR HighAddress;
    UNWIND_HISTORY_TABLE_ENTRY Entry[12];
};
struct alignas( 8 ) _TOKEN_DEVICE_CLAIMS
{
    PCLAIMS_BLOB DeviceClaims;
};
struct alignas( 8 ) _EXCEPTION_REGISTRATION_RECORD
{
    _EXCEPTION_REGISTRATION_RECORD* Next;
    PEXCEPTION_ROUTINE Handler;
};
struct alignas( 8 ) _EXCEPTION_RECORD64
{
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD64 ExceptionRecord;
    DWORD64 ExceptionAddress;
    DWORD NumberParameters;
    DWORD __unusedAlignment;
    DWORD64 ExceptionInformation[15];
};
struct alignas( 4 ) HUMPD__
{
    int unused;
};
struct alignas( 8 ) JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2
{
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    union alignas( 8 )
    {
        DWORD64 JobHighMemoryLimit;
        DWORD64 JobMemoryLimit;
    };
    union alignas( 4 )
    {
        JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
        JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
    };
    union alignas( 4 )
    {
        JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
        JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL CpuRateControlToleranceInterval;
    };
    DWORD LimitFlags;
    JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
    DWORD64 JobLowMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL IoRateControlToleranceInterval;
    JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL NetRateControlToleranceInterval;
};
struct alignas( 4 ) _SCOPE_TABLE_AMD64
{
    DWORD Count;
    struct alignas( 4 )
    {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
};
struct alignas( 4 ) HCOLORSPACE__
{
    int unused;
};
struct alignas( 4 ) _SCOPE_TABLE_ARM
{
    DWORD Count;
    struct alignas( 4 )
    {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
};
struct alignas( 4 ) _SCOPE_TABLE_ARM64
{
    DWORD Count;
    struct alignas( 4 )
    {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
};
struct alignas( 8 ) _RTL_BARRIER
{
    DWORD Reserved1;
    DWORD Reserved2;
    ULONG_PTR Reserved3[2];
    DWORD Reserved4;
    DWORD Reserved5;
};
struct alignas( 2 ) _MESSAGE_RESOURCE_ENTRY
{
    WORD Length;
    WORD Flags;
    BYTE Text[1];
};
union alignas( 8 ) _ARM64_NT_NEON128
{
    struct alignas( 8 )
    {
        ULONGLONG Low;
        LONGLONG High;
    };
    double D[2];
    float S[4];
    WORD H[8];
    BYTE B[16];
};
struct alignas( 1 ) _SYSTEM_POOL_ZEROING_INFORMATION
{
    BOOLEAN PoolZeroingSupportPresent;
};
struct alignas( 4 ) _WIN32_FILE_ATTRIBUTE_DATA
{
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
};
struct alignas( 16 ) _ARM64_NT_CONTEXT
{
    DWORD ContextFlags;
    DWORD Cpsr;
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            DWORD64 X0;
            DWORD64 X1;
            DWORD64 X2;
            DWORD64 X3;
            DWORD64 X4;
            DWORD64 X5;
            DWORD64 X6;
            DWORD64 X7;
            DWORD64 X8;
            DWORD64 X9;
            DWORD64 X10;
            DWORD64 X11;
            DWORD64 X12;
            DWORD64 X13;
            DWORD64 X14;
            DWORD64 X15;
            DWORD64 X16;
            DWORD64 X17;
            DWORD64 X18;
            DWORD64 X19;
            DWORD64 X20;
            DWORD64 X21;
            DWORD64 X22;
            DWORD64 X23;
            DWORD64 X24;
            DWORD64 X25;
            DWORD64 X26;
            DWORD64 X27;
            DWORD64 X28;
            DWORD64 Fp;
            DWORD64 Lr;
        };
        DWORD64 X[31];
    };
    DWORD64 Sp;
    DWORD64 Pc;
    ARM64_NT_NEON128 V[32];
    DWORD Fpcr;
    DWORD Fpsr;
    DWORD Bcr[8];
    DWORD64 Bvr[8];
    DWORD Wcr[2];
    DWORD64 Wvr[2];
};
struct alignas( 16 ) _ARM64EC_NT_CONTEXT
{
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            DWORD64 AMD64_P1Home;
            DWORD64 AMD64_P2Home;
            DWORD64 AMD64_P3Home;
            DWORD64 AMD64_P4Home;
            DWORD64 AMD64_P5Home;
            DWORD64 AMD64_P6Home;
            DWORD ContextFlags;
            DWORD AMD64_MxCsr_copy;
            WORD AMD64_SegCs;
            WORD AMD64_SegDs;
            WORD AMD64_SegEs;
            WORD AMD64_SegFs;
            WORD AMD64_SegGs;
            WORD AMD64_SegSs;
            DWORD AMD64_EFlags;
            DWORD64 AMD64_Dr0;
            DWORD64 AMD64_Dr1;
            DWORD64 AMD64_Dr2;
            DWORD64 AMD64_Dr3;
            DWORD64 AMD64_Dr6;
            DWORD64 AMD64_Dr7;
            DWORD64 X8;
            DWORD64 X0;
            DWORD64 X1;
            DWORD64 X27;
            DWORD64 Sp;
            DWORD64 Fp;
            DWORD64 X25;
            DWORD64 X26;
            DWORD64 X2;
            DWORD64 X3;
            DWORD64 X4;
            DWORD64 X5;
            DWORD64 X19;
            DWORD64 X20;
            DWORD64 X21;
            DWORD64 X22;
            DWORD64 Pc;
            struct alignas( 8 )
            {
                WORD AMD64_ControlWord;
                WORD AMD64_StatusWord;
                BYTE AMD64_TagWord;
                BYTE AMD64_Reserved1;
                WORD AMD64_ErrorOpcode;
                DWORD AMD64_ErrorOffset;
                WORD AMD64_ErrorSelector;
                WORD AMD64_Reserved2;
                DWORD AMD64_DataOffset;
                WORD AMD64_DataSelector;
                WORD AMD64_Reserved3;
                DWORD AMD64_MxCsr;
                DWORD AMD64_MxCsr_Mask;
                DWORD64 Lr;
                WORD X16_0;
                WORD AMD64_St0_Reserved1;
                DWORD AMD64_St0_Reserved2;
                DWORD64 X6;
                WORD X16_1;
                WORD AMD64_St1_Reserved1;
                DWORD AMD64_St1_Reserved2;
                DWORD64 X7;
                WORD X16_2;
                WORD AMD64_St2_Reserved1;
                DWORD AMD64_St2_Reserved2;
                DWORD64 X9;
                WORD X16_3;
                WORD AMD64_St3_Reserved1;
                DWORD AMD64_St3_Reserved2;
                DWORD64 X10;
                WORD X17_0;
                WORD AMD64_St4_Reserved1;
                DWORD AMD64_St4_Reserved2;
                DWORD64 X11;
                WORD X17_1;
                WORD AMD64_St5_Reserved1;
                DWORD AMD64_St5_Reserved2;
                DWORD64 X12;
                WORD X17_2;
                WORD AMD64_St6_Reserved1;
                DWORD AMD64_St6_Reserved2;
                DWORD64 X15;
                WORD X17_3;
                WORD AMD64_St7_Reserved1;
                DWORD AMD64_St7_Reserved2;
                ARM64_NT_NEON128 V[16];
                BYTE AMD64_XSAVE_FORMAT_Reserved4[96];
            };
            ARM64_NT_NEON128 AMD64_VectorRegister[26];
            DWORD64 AMD64_VectorControl;
            DWORD64 AMD64_DebugControl;
            DWORD64 AMD64_LastBranchToRip;
            DWORD64 AMD64_LastBranchFromRip;
            DWORD64 AMD64_LastExceptionToRip;
            DWORD64 AMD64_LastExceptionFromRip;
        };
    };
};
struct alignas( 4 ) tagRECT
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
};
struct alignas( 8 ) _KNONVOLATILE_CONTEXT_POINTERS
{
    union alignas( 8 )
    {
        PM128A FloatingContext[16];
        struct alignas( 8 )
        {
            PM128A Xmm0;
            PM128A Xmm1;
            PM128A Xmm2;
            PM128A Xmm3;
            PM128A Xmm4;
            PM128A Xmm5;
            PM128A Xmm6;
            PM128A Xmm7;
            PM128A Xmm8;
            PM128A Xmm9;
            PM128A Xmm10;
            PM128A Xmm11;
            PM128A Xmm12;
            PM128A Xmm13;
            PM128A Xmm14;
            PM128A Xmm15;
        };
    };
    union alignas( 8 )
    {
        PDWORD64 IntegerContext[16];
        struct alignas( 8 )
        {
            PDWORD64 Rax;
            PDWORD64 Rcx;
            PDWORD64 Rdx;
            PDWORD64 Rbx;
            PDWORD64 Rsp;
            PDWORD64 Rbp;
            PDWORD64 Rsi;
            PDWORD64 Rdi;
            PDWORD64 R8;
            PDWORD64 R9;
            PDWORD64 R10;
            PDWORD64 R11;
            PDWORD64 R12;
            PDWORD64 R13;
            PDWORD64 R14;
            PDWORD64 R15;
        };
    };
};
struct alignas( 4 ) _SM_STORE_BASIC_PARAMS
{
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            ULONG StoreType : 8;
            ULONG NoDuplication : 1;
            ULONG FailNoCompression : 1;
            ULONG NoCompression : 1;
            ULONG NoEncryption : 1;
            ULONG NoEvictOnAdd : 1;
            ULONG PerformsFileIo : 1;
            ULONG VdlNotSet : 1;
            ULONG UseIntermediateAddBuffer : 1;
            ULONG CompressNoHuff : 1;
            ULONG LockActiveRegions : 1;
            ULONG VirtualRegions : 1;
            ULONG Spare : 13;
        };
        ULONG StoreFlags;
    };
    ULONG Granularity;
    ULONG RegionSize;
    ULONG RegionCountMax;
};
struct alignas( 4 ) PROCESS_PROTECTION_LEVEL_INFORMATION
{
    DWORD ProtectionLevel;
};
struct alignas( 4 ) _ST_IO_STATS_PERIOD
{
    ULONG PageCounts[5];
};
struct alignas( 8 ) _PROC_THREAD_ATTRIBUTE
{
    ULONG_PTR Attribute;
    SIZE_T Size;
    ULONG_PTR Value;
};
struct alignas( 8 ) _PROC_THREAD_ATTRIBUTE_LIST
{
    ULONG PresentFlags;
    ULONG AttributeCount;
    ULONG LastAttribute;
    ULONG SpareUlong0;
    PPROC_THREAD_ATTRIBUTE ExtendedFlagsAttribute;
    PROC_THREAD_ATTRIBUTE Attributes[1];
};
struct alignas( 4 ) _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY
{
    union alignas( 4 )
    {
        DWORD Flags;
        struct alignas( 4 )
        {
            DWORD FilterId : 4;
            DWORD ReservedFlags : 28;
        };
    };
};
;
struct alignas( 4 ) _NETWORK_APP_INSTANCE_EA
{
    GUID AppInstanceID;
    DWORD CsvFlags;
};
struct alignas( 2 ) _SERVICE_PREFERRED_NODE_INFO
{
    USHORT usPreferredNode;
    BOOLEAN fDelete;
};
struct alignas( 4 ) BATTERY_REPORTING_SCALE
{
    DWORD Granularity;
    DWORD Capacity;
};
struct alignas( 4 ) SYSTEM_POWER_CAPABILITIES
{
    BOOLEAN PowerButtonPresent;
    BOOLEAN SleepButtonPresent;
    BOOLEAN LidPresent;
    BOOLEAN SystemS1;
    BOOLEAN SystemS2;
    BOOLEAN SystemS3;
    BOOLEAN SystemS4;
    BOOLEAN SystemS5;
    BOOLEAN HiberFilePresent;
    BOOLEAN FullWake;
    BOOLEAN VideoDimPresent;
    BOOLEAN ApmPresent;
    BOOLEAN UpsPresent;
    BOOLEAN ThermalControl;
    BOOLEAN ProcessorThrottle;
    BYTE ProcessorMinThrottle;
    BYTE ProcessorMaxThrottle;
    BOOLEAN FastSystemS4;
    BOOLEAN Hiberboot;
    BOOLEAN WakeAlarmPresent;
    BOOLEAN AoAc;
    BOOLEAN DiskSpinDown;
    BYTE HiberFileType;
    BOOLEAN AoAcConnectivitySupported;
    BYTE spare3[6];
    BOOLEAN SystemBatteriesPresent;
    BOOLEAN BatteriesAreShortTerm;
    BATTERY_REPORTING_SCALE BatteryScale[3];
    SYSTEM_POWER_STATE AcOnLineWake;
    SYSTEM_POWER_STATE SoftLidWake;
    SYSTEM_POWER_STATE RtcWake;
    SYSTEM_POWER_STATE MinDeviceWakeState;
    SYSTEM_POWER_STATE DefaultLowLatencyWake;
};
struct alignas( 8 ) _HIBERFILE_BUCKET
{
    DWORD64 MaxPhysicalMemory;
    DWORD PhysicalMemoryPercent[3];
};
struct alignas( 8 ) tagUPDATELAYEREDWINDOWINFO
{
    DWORD cbSize;
    HDC hdcDst;
    const POINT* pptDst;
    const SIZE* psize;
    HDC hdcSrc;
    const POINT* pptSrc;
    COLORREF crKey;
    const BLENDFUNCTION* pblend;
    DWORD dwFlags;
    const RECT* prcDirty;
};
struct alignas( 2 ) _IMAGE_OS2_HEADER
{
    WORD ne_magic;
    CHAR ne_ver;
    CHAR ne_rev;
    WORD ne_enttab;
    WORD ne_cbenttab;
    LONG ne_crc;
    WORD ne_flags;
    WORD ne_autodata;
    WORD ne_heap;
    WORD ne_stack;
    LONG ne_csip;
    LONG ne_sssp;
    WORD ne_cseg;
    WORD ne_cmod;
    WORD ne_cbnrestab;
    WORD ne_segtab;
    WORD ne_rsrctab;
    WORD ne_restab;
    WORD ne_modtab;
    WORD ne_imptab;
    LONG ne_nrestab;
    WORD ne_cmovent;
    WORD ne_align;
    WORD ne_cres;
    BYTE ne_exetyp;
    BYTE ne_flagsothers;
    WORD ne_pretthunks;
    WORD ne_psegrefbytes;
    WORD ne_swaparea;
    WORD ne_expver;
};
struct alignas( 2 ) _IMAGE_DOS_HEADER
{
    WORD e_magic;
    WORD e_cblp;
    WORD e_cp;
    WORD e_crlc;
    WORD e_cparhdr;
    WORD e_minalloc;
    WORD e_maxalloc;
    WORD e_ss;
    WORD e_sp;
    WORD e_csum;
    WORD e_ip;
    WORD e_cs;
    WORD e_lfarlc;
    WORD e_ovno;
    WORD e_res[4];
    WORD e_oemid;
    WORD e_oeminfo;
    WORD e_res2[10];
    LONG e_lfanew;
};
struct alignas( 4 ) _PROCESS_MACHINE_INFORMATION
{
    USHORT ProcessMachine;
    USHORT Res0;
    MACHINE_ATTRIBUTES MachineAttributes;
};
struct alignas( 4 ) _DEVICE_WRITE_AGGREGATION_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    BOOLEAN BenefitsFromWriteAggregation;
};
struct alignas( 8 ) tagENUMUILANG
{
    ULONG NumOfEnumUILang;
    ULONG SizeOfEnumUIBuffer;
    LANGID* pEnumUIBuffer;
};
struct alignas( 8 ) _RESUME_PERFORMANCE
{
    DWORD PostTimeMs;
    ULONGLONG TotalResumeTimeMs;
    ULONGLONG ResumeCompleteTimestamp;
};
struct alignas( 4 ) HHOOK__
{
    int unused;
};
struct alignas( 4 ) SET_POWER_SETTING_VALUE
{
    DWORD Version;
    GUID Guid;
    SYSTEM_POWER_CONDITION PowerCondition;
    DWORD DataLength;
    BYTE Data[1];
};
struct alignas( 8 ) _ENUM_SERVICE_STATUS_PROCESSW
{
    LPWSTR lpServiceName;
    LPWSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
};
struct alignas( 4 ) _THREAD_POWER_THROTTLING_STATE
{
    ULONG Version;
    ULONG ControlMask;
    ULONG StateMask;
};
struct alignas( 8 ) _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION
{
    JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
    IO_COUNTERS IoInfo;
};
struct alignas( 4 ) HKL__
{
    int unused;
};
struct alignas( 4 ) _STORAGE_CRYPTO_CAPABILITY
{
    DWORD Version;
    DWORD Size;
    DWORD CryptoCapabilityIndex;
    STORAGE_CRYPTO_ALGORITHM_ID AlgorithmId;
    STORAGE_CRYPTO_KEY_SIZE KeySize;
    DWORD DataUnitSizeBitmask;
};
struct alignas( 8 ) _QUERY_SERVICE_CONFIGW
{
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPWSTR lpBinaryPathName;
    LPWSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPWSTR lpDependencies;
    LPWSTR lpServiceStartName;
    LPWSTR lpDisplayName;
};
struct alignas( 8 ) _QUOTA_LIMITS
{
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
};
struct alignas( 4 ) _CLASS_MEDIA_CHANGE_CONTEXT
{
    DWORD MediaChangeCount;
    DWORD NewState;
};
struct alignas( 4 ) _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION
{
    TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
};
struct alignas( 4 ) _TAPE_GET_STATISTICS
{
    DWORD Operation;
};
struct alignas( 4 ) _LDT_ENTRY
{
    WORD LimitLow;
    WORD BaseLow;
    union alignas( 4 )
    {
        struct alignas( 1 )
        {
            BYTE BaseMid;
            BYTE Flags1;
            BYTE Flags2;
            BYTE BaseHi;
        } Bytes;
        struct alignas( 4 )
        {
            DWORD BaseMid : 8;
            DWORD Type : 5;
            DWORD Dpl : 2;
            DWORD Pres : 1;
            DWORD LimitHi : 4;
            DWORD Sys : 1;
            DWORD Reserved_0 : 1;
            DWORD Default_Big : 1;
            DWORD Granularity : 1;
            DWORD BaseHi : 8;
        } Bits;
    } HighWord;
};
struct alignas( 8 ) _SCRUB_DATA_OUTPUT
{
    DWORD Size;
    DWORD Flags;
    DWORD Status;
    ULONGLONG ErrorFileOffset;
    ULONGLONG ErrorLength;
    ULONGLONG NumberOfBytesRepaired;
    ULONGLONG NumberOfBytesFailed;
    ULONGLONG InternalFileReference;
    WORD ResumeContextLength;
    WORD ParityExtentDataOffset;
    DWORD Reserved[9];
    ULONGLONG NumberOfMetadataBytesProcessed;
    ULONGLONG NumberOfDataBytesProcessed;
    ULONGLONG TotalNumberOfMetadataBytesInUse;
    ULONGLONG TotalNumberOfDataBytesInUse;
    ULONGLONG DataBytesSkippedDueToNoAllocation;
    ULONGLONG DataBytesSkippedDueToInvalidRun;
    ULONGLONG DataBytesSkippedDueToIntegrityStream;
    ULONGLONG DataBytesSkippedDueToRegionBeingClean;
    ULONGLONG DataBytesSkippedDueToLockConflict;
    ULONGLONG DataBytesSkippedDueToNoScrubDataFlag;
    ULONGLONG DataBytesSkippedDueToNoScrubNonIntegrityStreamFlag;
    ULONGLONG DataBytesScrubbed;
    BYTE ResumeContext[1040];
};
struct alignas( 8 ) _JOBOBJECT_SECURITY_LIMIT_INFORMATION
{
    DWORD SecurityLimitFlags;
    HANDLE JobToken;
    PTOKEN_GROUPS SidsToDisable;
    PTOKEN_PRIVILEGES PrivilegesToDelete;
    PTOKEN_GROUPS RestrictedSids;
};
struct alignas( 4 ) HLSURF__
{
    int unused;
};
struct alignas( 8 ) _DEVICE_MEDIA_INFO
{
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            LARGE_INTEGER Cylinders;
            STORAGE_MEDIA_TYPE MediaType;
            DWORD TracksPerCylinder;
            DWORD SectorsPerTrack;
            DWORD BytesPerSector;
            DWORD NumberMediaSides;
            DWORD MediaCharacteristics;
        } DiskInfo;
        struct alignas( 8 )
        {
            LARGE_INTEGER Cylinders;
            STORAGE_MEDIA_TYPE MediaType;
            DWORD TracksPerCylinder;
            DWORD SectorsPerTrack;
            DWORD BytesPerSector;
            DWORD NumberMediaSides;
            DWORD MediaCharacteristics;
        } RemovableDiskInfo;
        struct alignas( 4 )
        {
            STORAGE_MEDIA_TYPE MediaType;
            DWORD MediaCharacteristics;
            DWORD CurrentBlockSize;
            STORAGE_BUS_TYPE BusType;
            union alignas( 1 )
            {
                struct alignas( 1 )
                {
                    BYTE MediumType;
                    BYTE DensityCode;
                } ScsiInformation;
            } BusSpecificData;
        } TapeInfo;
    } DeviceSpecific;
};
struct alignas( 8 ) _GET_MEDIA_TYPES
{
    DWORD DeviceType;
    DWORD MediaInfoCount;
    DEVICE_MEDIA_INFO MediaInfo[1];
};
struct alignas( 8 ) _RTL_PROCESS_LOCK_INFORMATION
{
    PVOID Address;
    USHORT Type;
    USHORT CreatorBackTraceIndex;
    HANDLE OwningThread;
    LONG LockCount;
    ULONG ContentionCount;
    ULONG EntryCount;
    LONG RecursionCount;
    ULONG NumberOfWaitingShared;
    ULONG NumberOfWaitingExclusive;
};
struct alignas( 4 ) _WOW64_DESCRIPTOR_TABLE_ENTRY
{
    DWORD Selector;
    WOW64_LDT_ENTRY Descriptor;
};
struct alignas( 4 ) PPM_WMI_IDLE_STATE
{
    DWORD Latency;
    DWORD Power;
    DWORD TimeCheck;
    BYTE PromotePercent;
    BYTE DemotePercent;
    BYTE StateType;
    BYTE Reserved;
    DWORD StateFlags;
    DWORD Context;
    DWORD IdleHandler;
    DWORD Reserved1;
};
struct alignas( 4 ) _SYSTEM_PROCESSOR_PERFORMANCE_DISTRIBUTION
{
    ULONG ProcessorCount;
    ULONG Offsets[1];
};
struct alignas( 4 ) _EXCEPTION_RECORD32
{
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    DWORD ExceptionRecord;
    DWORD ExceptionAddress;
    DWORD NumberParameters;
    DWORD ExceptionInformation[15];
};
struct alignas( 4 ) PPM_WMI_LEGACY_PERFSTATE
{
    DWORD Frequency;
    DWORD Flags;
    DWORD PercentFrequency;
};
struct alignas( 8 ) tagWNDCLASSEXW
{
    UINT cbSize;
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
    HICON hIconSm;
};
struct alignas( 4 ) _SERVICE_FAILURE_ACTIONS_FLAG
{
    BOOL fFailureActionsOnNonCrashFailures;
};
struct alignas( 8 ) PPM_WMI_PERF_STATE
{
    DWORD Frequency;
    DWORD Power;
    BYTE PercentFrequency;
    BYTE IncreaseLevel;
    BYTE DecreaseLevel;
    BYTE Type;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD64 Control;
    DWORD64 Status;
    DWORD HitCount;
    DWORD Reserved1;
    DWORD64 Reserved2;
    DWORD64 Reserved3;
};
struct alignas( 4 ) _STORAGE_PROPERTY_QUERY
{
    STORAGE_PROPERTY_ID PropertyId;
    STORAGE_QUERY_TYPE QueryType;
    BYTE AdditionalParameters[1];
};
struct alignas( 8 ) _CLIENT_ID
{
    HANDLE UniqueProcess;
    HANDLE UniqueThread;
};
struct alignas( 8 ) _ACTIVATION_CONTEXT_STACK
{
    PRTL_ACTIVATION_CONTEXT_STACK_FRAME ActiveFrame;
    LIST_ENTRY FrameListCache;
    ULONG Flags;
    ULONG NextCookieSequenceNumber;
    ULONG StackId;
};
struct alignas( 8 ) _GDI_TEB_BATCH
{
    ULONG Offset;
    ULONG_PTR HDC;
    ULONG Buffer[310];
};
struct alignas( 8 ) _TEB
{
    NT_TIB NtTib;
    PVOID EnvironmentPointer;
    CLIENT_ID ClientId;
    PVOID ActiveRpcHandle;
    PVOID ThreadLocalStoragePointer;
    PPEB ProcessEnvironmentBlock;
    ULONG LastErrorValue;
    ULONG CountOfOwnedCriticalSections;
    PVOID CsrClientThread;
    PVOID Win32ThreadInfo;
    ULONG User32Reserved[26];
    ULONG UserReserved[5];
    PVOID WOW32Reserved;
    LCID CurrentLocale;
    ULONG FpSoftwareStatusRegister;
    PVOID ReservedForDebuggerInstrumentation[16];
    PVOID SystemReserved1[25];
    PVOID HeapFlsData;
    ULONG_PTR RngState[4];
    CHAR PlaceholderCompatibilityMode;
    BOOLEAN PlaceholderHydrationAlwaysExplicit;
    CHAR PlaceholderReserved[10];
    ULONG ProxiedProcessId;
    ACTIVATION_CONTEXT_STACK ActivationStack;
    UCHAR WorkingOnBehalfTicket[8];
    NTSTATUS ExceptionCode;
    PACTIVATION_CONTEXT_STACK ActivationContextStackPointer;
    ULONG_PTR InstrumentationCallbackSp;
    ULONG_PTR InstrumentationCallbackPreviousPc;
    ULONG_PTR InstrumentationCallbackPreviousSp;
    ULONG TxFsContext;
    BOOLEAN InstrumentationCallbackDisabled;
    BOOLEAN UnalignedLoadStoreExceptions;
    GDI_TEB_BATCH GdiTebBatch;
    CLIENT_ID RealClientId;
    HANDLE GdiCachedProcessHandle;
    ULONG GdiClientPID;
    ULONG GdiClientTID;
    PVOID GdiThreadLocalInfo;
    ULONG_PTR Win32ClientInfo[62];
    PVOID glDispatchTable[233];
    ULONG_PTR glReserved1[29];
    PVOID glReserved2;
    PVOID glSectionInfo;
    PVOID glSection;
    PVOID glTable;
    PVOID glCurrentRC;
    PVOID glContext;
    NTSTATUS LastStatusValue;
    UNICODE_STRING StaticUnicodeString;
    WCHAR StaticUnicodeBuffer[261];
    PVOID DeallocationStack;
    PVOID TlsSlots[64];
    LIST_ENTRY TlsLinks;
    PVOID Vdm;
    PVOID ReservedForNtRpc;
    PVOID DbgSsReserved[2];
    ULONG HardErrorMode;
    PVOID Instrumentation[11];
    GUID ActivityId;
    PVOID SubProcessTag;
    PVOID PerflibData;
    PVOID EtwTraceData;
    HANDLE WinSockData;
    ULONG GdiBatchCount;
    union alignas( 4 )
    {
        PROCESSOR_NUMBER CurrentIdealProcessor;
        ULONG IdealProcessorValue;
        struct alignas( 1 )
        {
            UCHAR ReservedPad0;
            UCHAR ReservedPad1;
            UCHAR ReservedPad2;
            UCHAR IdealProcessor;
        };
    };
    ULONG GuaranteedStackBytes;
    PVOID ReservedForPerf;
    PVOID ReservedForOle;
    ULONG WaitingOnLoaderLock;
    PVOID SavedPriorityState;
    ULONG_PTR ReservedForCodeCoverage;
    PVOID ThreadPoolData;
    PVOID* TlsExpansionSlots;
    PVOID ChpeV2CpuAreaInfo;
    PVOID Unused;
    ULONG MuiGeneration;
    ULONG IsImpersonating;
    PVOID NlsCache;
    PVOID pShimData;
    ULONG HeapData;
    HANDLE CurrentTransactionHandle;
    PTEB_ACTIVE_FRAME ActiveFrame;
    PVOID FlsData;
    PVOID PreferredLanguages;
    PVOID UserPrefLanguages;
    PVOID MergedPrefLanguages;
    ULONG MuiImpersonation;
    union alignas( 2 )
    {
        USHORT CrossTebFlags;
        USHORT SpareCrossTebBits : 16;
    };
    union alignas( 2 )
    {
        USHORT SameTebFlags;
        struct alignas( 2 )
        {
            USHORT SafeThunkCall : 1;
            USHORT InDebugPrint : 1;
            USHORT HasFiberData : 1;
            USHORT SkipThreadAttach : 1;
            USHORT WerInShipAssertCode : 1;
            USHORT RanProcessInit : 1;
            USHORT ClonedThread : 1;
            USHORT SuppressDebugMsg : 1;
            USHORT DisableUserStackWalk : 1;
            USHORT RtlExceptionAttached : 1;
            USHORT InitialThread : 1;
            USHORT SessionAware : 1;
            USHORT LoadOwner : 1;
            USHORT LoaderWorker : 1;
            USHORT SkipLoaderInit : 1;
            USHORT SkipFileAPIBrokering : 1;
        };
    };
    PVOID TxnScopeEnterCallback;
    PVOID TxnScopeExitCallback;
    PVOID TxnScopeContext;
    ULONG LockCount;
    LONG WowTebOffset;
    PVOID ResourceRetValue;
    PVOID ReservedForWdf;
    ULONGLONG ReservedForCrt;
    GUID EffectiveContainerId;
    ULONGLONG LastSleepCounter;
    ULONG SpinCallCount;
    ULONGLONG ExtendedFeatureDisableMask;
    PVOID SchedulerSharedDataSlot;
    PVOID HeapWalkContext;
    GROUP_AFFINITY PrimaryGroupAffinity;
    ULONG Rcu[2];
};
struct alignas( 8 ) PPM_WMI_IDLE_STATES_EX
{
    DWORD Type;
    DWORD Count;
    DWORD TargetState;
    DWORD OldState;
    PVOID TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
};
struct alignas( 8 ) _APP_MEMORY_INFORMATION
{
    ULONG64 AvailableCommit;
    ULONG64 PrivateCommitUsage;
    ULONG64 PeakPrivateCommitUsage;
    ULONG64 TotalCommitUsage;
};
struct alignas( 4 ) _SHARED_VIRTUAL_DISK_SUPPORT
{
    SharedVirtualDiskSupportType SharedVirtualDiskSupport;
    SharedVirtualDiskHandleState HandleState;
};
struct alignas( 8 ) _ASSEMBLY_STORAGE_MAP
{
    ULONG Flags;
    ULONG AssemblyCount;
    PASSEMBLY_STORAGE_MAP_ENTRY* AssemblyArray;
};
struct alignas( 8 ) _ACTIVATION_CONTEXT
{
    LONG RefCount;
    ULONG Flags;
    PACTIVATION_CONTEXT_DATA ActivationContextData;
    PACTIVATION_CONTEXT_NOTIFY_ROUTINE NotificationRoutine;
    PVOID NotificationContext;
    ULONG SentNotifications[8];
    ULONG DisabledNotifications[8];
    ASSEMBLY_STORAGE_MAP StorageMap;
    PASSEMBLY_STORAGE_MAP_ENTRY InlineStorageMapEntries[32];
};
struct alignas( 8 ) _REARRANGE_FILE_DATA
{
    ULONGLONG SourceStartingOffset;
    ULONGLONG TargetOffset;
    HANDLE SourceFileHandle;
    DWORD Length;
    DWORD Flags;
};
struct alignas( 4 ) _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY
{
    union alignas( 4 )
    {
        DWORD Flags;
        struct alignas( 4 )
        {
            DWORD RaiseExceptionOnInvalidHandleReference : 1;
            DWORD HandleExceptionsPermanentlyEnabled : 1;
            DWORD ReservedFlags : 30;
        };
    };
};
struct alignas( 8 ) _SYSTEM_FIRMWARE_TABLE_HANDLER
{
    ULONG ProviderSignature;
    BOOLEAN Register;
    PFNFTH FirmwareTableHandler;
    PVOID DriverObject;
};
union alignas( 4 ) _SE_SID
{
    SID Sid;
    BYTE Buffer[68];
};
struct alignas( 4 ) _SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION
{
    DWORD Machine : 16;
    DWORD KernelMode : 1;
    DWORD UserMode : 1;
    DWORD Native : 1;
    DWORD Process : 1;
    DWORD WoW64Container : 1;
    DWORD ReservedZero0 : 11;
};
struct alignas( 4 ) _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT
{
    SAVEPOINT_ID SavepointId;
};
struct alignas( 8 ) _SYSTEM_POOLTAG
{
    union alignas( 4 )
    {
        UCHAR Tag[4];
        ULONG TagUlong;
    };
    ULONG PagedAllocs;
    ULONG PagedFrees;
    SIZE_T PagedUsed;
    ULONG NonPagedAllocs;
    ULONG NonPagedFrees;
    SIZE_T NonPagedUsed;
};
struct alignas( 8 ) _SYSTEM_SESSION_POOLTAG_INFORMATION
{
    SIZE_T NextEntryOffset;
    ULONG SessionId;
    ULONG Count;
    SYSTEM_POOLTAG TagInfo[1];
};
struct alignas( 4 ) tagPOINT
{
    LONG x;
    LONG y;
};
struct alignas( 4 ) tagCANDIDATEFORM
{
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
};
struct alignas( 8 ) _OVERLAPPED_ENTRY
{
    ULONG_PTR lpCompletionKey;
    LPOVERLAPPED lpOverlapped;
    ULONG_PTR Internal;
    DWORD dwNumberOfBytesTransferred;
};
struct alignas( 8 ) _TAPE_GET_MEDIA_PARAMETERS
{
    LARGE_INTEGER Capacity;
    LARGE_INTEGER Remaining;
    DWORD BlockSize;
    DWORD PartitionCount;
    BOOLEAN WriteProtected;
};
struct alignas( 8 ) _GROUP_RELATIONSHIP
{
    WORD MaximumGroupCount;
    WORD ActiveGroupCount;
    BYTE Reserved[20];
    PROCESSOR_GROUP_INFO GroupInfo[1];
};
struct alignas( 2 ) _SMALL_RECT
{
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
};
struct alignas( 4 ) _CONSOLE_SCREEN_BUFFER_INFOEX
{
    ULONG cbSize;
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
    WORD wPopupAttributes;
    BOOL bFullscreenSupported;
    COLORREF ColorTable[16];
};
struct alignas( 4 ) _IMAGE_IMPORT_DESCRIPTOR
{
    union alignas( 4 )
    {
        DWORD Characteristics;
        DWORD OriginalFirstThunk;
    };
    DWORD TimeDateStamp;
    DWORD ForwarderChain;
    DWORD Name;
    DWORD FirstThunk;
};
struct alignas( 4 ) _POINTL
{
    LONG x;
    LONG y;
};
struct alignas( 4 ) _IMAGE_BOUND_IMPORT_DESCRIPTOR
{
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD NumberOfModuleForwarderRefs;
};
struct alignas( 2 ) MENUITEMTEMPLATEHEADER
{
    WORD versionNumber;
    WORD offset;
};
struct alignas( 8 ) _SYSTEM_CPU_SET_INFORMATION
{
    DWORD Size;
    CPU_SET_INFORMATION_TYPE Type;
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            DWORD Id;
            WORD Group;
            BYTE LogicalProcessorIndex;
            BYTE CoreIndex;
            BYTE LastLevelCacheIndex;
            BYTE NumaNodeIndex;
            BYTE EfficiencyClass;
            union alignas( 1 )
            {
                BYTE AllFlags;
                struct alignas( 1 )
                {
                    BYTE Parked : 1;
                    BYTE Allocated : 1;
                    BYTE AllocatedToTargetProcess : 1;
                    BYTE RealTime : 1;
                    BYTE ReservedFlags : 4;
                };
            };
            union alignas( 4 )
            {
                DWORD Reserved;
                BYTE SchedulingClass;
            };
            DWORD64 AllocationTag;
        } CpuSet;
    };
};
struct alignas( 4 ) _IMAGE_BOUND_FORWARDER_REF
{
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD Reserved;
};
struct alignas( 4 ) tagSTYLEBUFW
{
    DWORD dwStyle;
    WCHAR szDescription[32];
};
struct alignas( 8 ) pvalueA
{
    LPSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
};
struct alignas( 8 ) _TRANSACTIONMANAGER_RECOVERY_INFORMATION
{
    ULONGLONG LastRecoveredLsn;
};
struct alignas( 8 ) _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET
{
    ULONG_PTR TargetAddress;
    ULONG_PTR Flags;
};
struct alignas( 1 ) _ENCLAVE_CREATE_INFO_SGX
{
    BYTE Secs[4096];
};
struct alignas( 8 ) _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION
{
    LARGE_INTEGER IdleTime;
    LARGE_INTEGER KernelTime;
    LARGE_INTEGER UserTime;
    LARGE_INTEGER DpcTime;
    LARGE_INTEGER InterruptTime;
    ULONG InterruptCount;
};
struct alignas( 8 ) _PROCESS_HEAP_ENTRY
{
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            HANDLE hMem;
            DWORD dwReserved[3];
        } Block;
        struct alignas( 8 )
        {
            DWORD dwCommittedSize;
            DWORD dwUnCommittedSize;
            LPVOID lpFirstBlock;
            LPVOID lpLastBlock;
        } Region;
    };
};
struct alignas( 8 ) _TOKEN_DEFAULT_DACL
{
    PACL DefaultDacl;
};
struct alignas( 8 ) _NUMA_NODE_RELATIONSHIP
{
    DWORD NodeNumber;
    BYTE Reserved[18];
    WORD GroupCount;
    union alignas( 8 )
    {
        GROUP_AFFINITY GroupMask;
        GROUP_AFFINITY GroupMasks[1];
    };
};
struct alignas( 8 ) _CACHE_RELATIONSHIP
{
    BYTE Level;
    BYTE Associativity;
    WORD LineSize;
    DWORD CacheSize;
    PROCESSOR_CACHE_TYPE Type;
    BYTE Reserved[18];
    WORD GroupCount;
    union alignas( 8 )
    {
        GROUP_AFFINITY GroupMask;
        GROUP_AFFINITY GroupMasks[1];
    };
};
struct alignas( 8 ) _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
{
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    DWORD Size;
    union alignas( 8 )
    {
        PROCESSOR_RELATIONSHIP Processor;
        NUMA_NODE_RELATIONSHIP NumaNode;
        CACHE_RELATIONSHIP Cache;
        GROUP_RELATIONSHIP Group;
    };
};
struct alignas( 8 ) _TAPE_WMI_OPERATIONS
{
    DWORD Method;
    DWORD DataBufferSize;
    PVOID DataBuffer;
};
struct alignas( 4 ) _WIN32_FIND_DATAA
{
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    CHAR cFileName[260];
    CHAR cAlternateFileName[14];
};
struct alignas( 4 ) _ACCESS_DENIED_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
};
struct alignas( 8 ) _TRANSACTIONMANAGER_BASIC_INFORMATION
{
    GUID TmIdentity;
    LARGE_INTEGER VirtualClock;
};
struct alignas( 8 ) _NT_TIB64
{
    DWORD64 ExceptionList;
    DWORD64 StackBase;
    DWORD64 StackLimit;
    DWORD64 SubSystemTib;
    union alignas( 8 )
    {
        DWORD64 FiberData;
        DWORD Version;
    };
    DWORD64 ArbitraryUserPointer;
    DWORD64 Self;
};
struct alignas( 8 ) MEM_EXTENDED_PARAMETER
{
    struct alignas( 8 )
    {
        DWORD64 Type : 8;
        DWORD64 Reserved : 56;
    };
    union alignas( 8 )
    {
        DWORD64 ULong64;
        PVOID Pointer;
        SIZE_T Size;
        HANDLE Handle;
        DWORD ULong;
    };
};
struct alignas( 8 ) _CONNECTDLGSTRUCTW
{
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
};
struct alignas( 4 ) _SYSTEM_EXCEPTION_INFORMATION
{
    ULONG AlignmentFixupCount;
    ULONG ExceptionDispatchCount;
    ULONG FloatingEmulationCount;
    ULONG ByteWordEmulationCount;
};
struct alignas( 4 ) HDESK__
{
    int unused;
};
struct alignas( 4 ) _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
};
struct alignas( 8 ) JOBOBJECT_NET_RATE_CONTROL_INFORMATION
{
    DWORD64 MaxBandwidth;
    JOB_OBJECT_NET_RATE_CONTROL_FLAGS ControlFlags;
    BYTE DscpTag;
};
struct alignas( 8 ) _SERVICE_NOTIFY_1
{
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
    PVOID pContext;
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
};
struct alignas( 4 ) _KCRM_PROTOCOL_BLOB
{
    CRM_PROTOCOL_ID ProtocolId;
    ULONG StaticInfoLength;
    ULONG TransactionIdInfoLength;
    ULONG Unused1;
    ULONG Unused2;
};
struct alignas( 8 ) _JOBOBJECT_LIMIT_VIOLATION_INFORMATION
{
    DWORD LimitFlags;
    DWORD ViolationLimitFlags;
    DWORD64 IoReadBytes;
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytes;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTime;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemory;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
};
struct alignas( 4 ) _EVENT_TRACE_PROFILE_REMOVE_INFORMATION
{
    EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
    KPROFILE_SOURCE ProfileSource;
    ULONG CpuInfoHierarchy[3];
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION
{
    DWORD ulFlags;
    ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
    DWORD UiAccess;
};
struct alignas( 8 ) JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2
{
    DWORD LimitFlags;
    DWORD ViolationLimitFlags;
    DWORD64 IoReadBytes;
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytes;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTime;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemory;
    union alignas( 8 )
    {
        DWORD64 JobHighMemoryLimit;
        DWORD64 JobMemoryLimit;
    };
    union alignas( 4 )
    {
        JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
        JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
    };
    union alignas( 4 )
    {
        JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
        JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlToleranceLimit;
    };
    DWORD64 JobLowMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlToleranceLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlToleranceLimit;
};
struct alignas( 4 ) HBRUSH__
{
    int unused;
};
struct alignas( 8 ) _PORT_MESSAGE
{
    union alignas( 4 )
    {
        struct alignas( 2 )
        {
            CSHORT DataLength;
            CSHORT TotalLength;
        } s1;
        ULONG Length;
    } u1;
    union alignas( 4 )
    {
        struct alignas( 2 )
        {
            CSHORT Type;
            CSHORT DataInfoOffset;
        } s2;
        ULONG ZeroInit;
    } u2;
    union alignas( 8 )
    {
        CLIENT_ID ClientId;
        double DoNotUseThisField;
    };
    ULONG MessageId;
    union alignas( 8 )
    {
        SIZE_T ClientViewSize;
        ULONG CallbackId;
    };
};
struct alignas( 4 ) _NETCONNECTINFOSTRUCT
{
    DWORD cbStructure;
    DWORD dwFlags;
    DWORD dwSpeed;
    DWORD dwDelay;
    DWORD dwOptDataSize;
};
struct alignas( 8 ) _SYSTEM_GDI_DRIVER_INFORMATION
{
    UNICODE_STRING DriverName;
    PVOID ImageAddress;
    PVOID SectionPointer;
    PVOID EntryPoint;
    PIMAGE_EXPORT_DIRECTORY ExportSectionPointer;
    ULONG ImageLength;
};
struct alignas( 4 ) ANON_OBJECT_HEADER_BIGOBJ
{
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
    DWORD Flags;
    DWORD MetaDataSize;
    DWORD MetaDataOffset;
    DWORD NumberOfSections;
    DWORD PointerToSymbolTable;
    DWORD NumberOfSymbols;
};
struct alignas( 4 ) _PRIVILEGE_SET
{
    DWORD PrivilegeCount;
    DWORD Control;
    LUID_AND_ATTRIBUTES Privilege[1];
};
struct alignas( 4 ) _FOCUS_EVENT_RECORD
{
    BOOL bSetFocus;
};
struct alignas( 4 ) _ACCESS_REASONS
{
    ACCESS_REASON Data[32];
};
struct alignas( 2 ) _IMAGE_SYMBOL
{
    union alignas( 2 )
    {
        BYTE ShortName[8];
        struct alignas( 2 )
        {
            DWORD Short;
            DWORD Long;
        } Name;
        DWORD LongName[2];
    } N;
    DWORD Value;
    SHORT SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
};
struct alignas( 2 ) _IMAGE_SYMBOL_EX
{
    union alignas( 2 )
    {
        BYTE ShortName[8];
        struct alignas( 2 )
        {
            DWORD Short;
            DWORD Long;
        } Name;
        DWORD LongName[2];
    } N;
    DWORD Value;
    LONG SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
};
struct alignas( 4 ) _WIN32_FIND_DATAW
{
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    WCHAR cFileName[260];
    WCHAR cAlternateFileName[14];
};
struct alignas( 1 ) APP_LOCAL_DEVICE_ID
{
    BYTE value[32];
};
struct alignas( 8 ) _SYSTEM_VERIFIER_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG Level;
    ULONG RuleClasses[2];
    ULONG TriageContext;
    ULONG AreAllDriversBeingVerified;
    UNICODE_STRING DriverName;
    ULONG RaiseIrqls;
    ULONG AcquireSpinLocks;
    ULONG SynchronizeExecutions;
    ULONG AllocationsAttempted;
    ULONG AllocationsSucceeded;
    ULONG AllocationsSucceededSpecialPool;
    ULONG AllocationsWithNoTag;
    ULONG TrimRequests;
    ULONG Trims;
    ULONG AllocationsFailed;
    ULONG AllocationsFailedDeliberately;
    ULONG Loads;
    ULONG Unloads;
    ULONG UnTrackedPool;
    ULONG CurrentPagedPoolAllocations;
    ULONG CurrentNonPagedPoolAllocations;
    ULONG PeakPagedPoolAllocations;
    ULONG PeakNonPagedPoolAllocations;
    SIZE_T PagedPoolUsageInBytes;
    SIZE_T NonPagedPoolUsageInBytes;
    SIZE_T PeakPagedPoolUsageInBytes;
    SIZE_T PeakNonPagedPoolUsageInBytes;
};
struct alignas( 4 ) tagCOMPOSITIONFORM
{
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
};
struct alignas( 8 ) _TOKEN_MANDATORY_LABEL
{
    SID_AND_ATTRIBUTES Label;
};
struct alignas( 4 ) _EFI_DRIVER_ENTRY_LIST
{
    ULONG NextEntryOffset;
    EFI_DRIVER_ENTRY DriverEntry;
};
struct alignas( 8 ) _SERVERSILO_BASIC_INFORMATION
{
    DWORD ServiceSessionId;
    SERVERSILO_STATE State;
    DWORD ExitStatus;
    BOOLEAN IsDownlevelContainer;
    PVOID ApiSetSchema;
    PVOID HostApiSetSchema;
};
struct alignas( 8 ) _IMAGE_THUNK_DATA64
{
    union alignas( 8 )
    {
        ULONGLONG ForwarderString;
        ULONGLONG Function;
        ULONGLONG Ordinal;
        ULONGLONG AddressOfData;
    } u1;
};
struct alignas( 8 ) _LDR_RESOURCE_INFO
{
    ULONG_PTR Type;
    ULONG_PTR Name;
    ULONG_PTR Language;
};
struct alignas( 4 ) tagTPMPARAMS
{
    UINT cbSize;
    RECT rcExclude;
};
struct alignas( 1 ) _IMAGE_ARCHIVE_MEMBER_HEADER
{
    BYTE Name[16];
    BYTE Date[12];
    BYTE UserID[6];
    BYTE GroupID[6];
    BYTE Mode[8];
    BYTE Size[10];
    BYTE EndHeader[2];
};
struct alignas( 8 ) _TOKEN_OWNER
{
    PSID Owner;
};
struct alignas( 4 ) tagAUDIODESCRIPTION
{
    UINT cbSize;
    BOOL Enabled;
    LCID Locale;
};
struct alignas( 2 ) IMAGE_AUX_SYMBOL_TOKEN_DEF
{
    BYTE bAuxType;
    BYTE bReserved;
    DWORD SymbolTableIndex;
    BYTE rgbReserved[12];
};
union alignas( 2 ) _IMAGE_AUX_SYMBOL
{
    struct alignas( 2 )
    {
        DWORD TagIndex;
        union alignas( 2 )
        {
            struct alignas( 2 )
            {
                WORD Linenumber;
                WORD Size;
            } LnSz;
            DWORD TotalSize;
        } Misc;
        union alignas( 2 )
        {
            struct alignas( 2 )
            {
                DWORD PointerToLinenumber;
                DWORD PointerToNextFunction;
            } Function;
            struct alignas( 2 )
            {
                WORD Dimension[4];
            } Array;
        } FcnAry;
        WORD TvIndex;
    } Sym;
    struct alignas( 1 )
    {
        BYTE Name[18];
    } File;
    struct alignas( 2 )
    {
        DWORD Length;
        WORD NumberOfRelocations;
        WORD NumberOfLinenumbers;
        DWORD CheckSum;
        SHORT Number;
        BYTE Selection;
        BYTE bReserved;
        SHORT HighNumber;
    } Section;
    IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
    struct alignas( 2 )
    {
        DWORD crc;
        BYTE rgbReserved[14];
    } CRC;
};
struct alignas( 4 ) _OSVERSIONINFOEXW
{
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR szCSDVersion[128];
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
};
struct alignas( 4 ) _IMAGE_TLS_DIRECTORY64
{
    ULONGLONG StartAddressOfRawData;
    ULONGLONG EndAddressOfRawData;
    ULONGLONG AddressOfIndex;
    ULONGLONG AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    union alignas( 4 )
    {
        DWORD Characteristics;
        struct alignas( 4 )
        {
            DWORD Reserved0 : 20;
            DWORD Alignment : 4;
            DWORD Reserved1 : 8;
        };
    };
};
struct alignas( 4 ) tagDRAWTEXTPARAMS
{
    UINT cbSize;
    int iTabLength;
    int iLeftMargin;
    int iRightMargin;
    UINT uiLengthDrawn;
};
struct alignas( 4 ) tagIMECHARPOSITION
{
    DWORD dwSize;
    DWORD dwCharPos;
    POINT pt;
    UINT cLineHeight;
    RECT rcDocument;
};
struct alignas( 8 ) _TOKEN_LINKED_TOKEN
{
    HANDLE LinkedToken;
};
struct alignas( 4 ) _tagDATAINFO
{
    ULONG ulTotalSize;
    ULONG ulavrPacketSize;
    ULONG ulConnectSpeed;
    ULONG ulProcessorSpeed;
};
struct alignas( 4 ) _IMAGE_LOAD_CONFIG_CODE_INTEGRITY
{
    WORD Flags;
    WORD Catalog;
    DWORD CatalogOffset;
    DWORD Reserved;
};
struct alignas( 8 ) _ASSEMBLY_FILE_DETAILED_INFORMATION
{
    DWORD ulFlags;
    DWORD ulFilenameLength;
    DWORD ulPathLength;
    PCWSTR lpFileName;
    PCWSTR lpFilePath;
};
struct alignas( 8 ) _MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE
{
    MEM_DEDICATED_ATTRIBUTE_TYPE Type;
    DWORD Reserved;
    DWORD64 Value;
};
struct alignas( 1 ) _POWER_SESSION_CONNECT
{
    BOOLEAN Connected;
    BOOLEAN Console;
};
struct alignas( 4 ) ANON_OBJECT_HEADER_V2
{
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
    DWORD Flags;
    DWORD MetaDataSize;
    DWORD MetaDataOffset;
};
struct alignas( 4 ) _TOKEN_CONTROL
{
    LUID TokenId;
    LUID AuthenticationId;
    LUID ModifiedId;
    TOKEN_SOURCE TokenSource;
};
struct alignas( 4 ) _POWER_IDLE_RESILIENCY
{
    DWORD CoalescingTimeout;
    DWORD IdleResiliencyPeriod;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_QUERY_INDEX
{
    DWORD ulAssemblyIndex;
    DWORD ulFileIndexInAssembly;
};
struct alignas( 4 ) _IMAGE_RESOURCE_DIRECTORY_ENTRY
{
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            DWORD NameOffset : 31;
            DWORD NameIsString : 1;
        };
        DWORD Name;
        WORD Id;
    };
    union alignas( 4 )
    {
        DWORD OffsetToData;
        struct alignas( 4 )
        {
            DWORD OffsetToDirectory : 31;
            DWORD DataIsDirectory : 1;
        };
    };
};
struct alignas( 8 ) _ICONINFOEXW
{
    DWORD cbSize;
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD wResID;
    WCHAR szModName[260];
    WCHAR szResName[260];
};
struct alignas( 4 ) _nlsversioninfoex
{
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
    DWORD dwEffectiveId;
    GUID guidCustomVersion;
};
struct alignas( 4 ) _ENCLAVE_LOAD_DATA_VBS_BASIC
{
    DWORD PageType;
};
struct alignas( 8 ) _TOKEN_SID_INFORMATION
{
    PSID Sid;
};
struct alignas( 8 ) _ENCLAVE_INIT_INFO_VBS_BASIC
{
    BYTE FamilyId[16];
    BYTE ImageId[16];
    ULONGLONG EnclaveSize;
    DWORD EnclaveSvn;
    DWORD Reserved;
    union alignas( 8 )
    {
        HANDLE SignatureInfoHandle;
        ULONGLONG Unused;
    };
};
struct alignas( 8 ) tagRAWINPUTHEADER
{
    DWORD dwType;
    DWORD dwSize;
    HANDLE hDevice;
    WPARAM wParam;
};
struct alignas( 8 ) _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
{
    PVOID pValue;
    DWORD ValueLength;
};
struct alignas( 4 ) tagHARDWAREINPUT
{
    DWORD uMsg;
    WORD wParamL;
    WORD wParamH;
};
union alignas( 2 ) _IMAGE_AUX_SYMBOL_EX
{
    struct alignas( 2 )
    {
        DWORD WeakDefaultSymIndex;
        DWORD WeakSearchType;
        BYTE rgbReserved[12];
    } Sym;
    struct alignas( 1 )
    {
        BYTE Name[20];
    } File;
    struct alignas( 2 )
    {
        DWORD Length;
        WORD NumberOfRelocations;
        WORD NumberOfLinenumbers;
        DWORD CheckSum;
        SHORT Number;
        BYTE Selection;
        BYTE bReserved;
        SHORT HighNumber;
        BYTE rgbReserved[2];
    } Section;
    struct alignas( 2 )
    {
        IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
        BYTE rgbReserved[2];
    };
    struct alignas( 2 )
    {
        DWORD crc;
        BYTE rgbReserved[16];
    } CRC;
};
struct alignas( 4 ) _FILE_NOTIFY_INFORMATION
{
    DWORD NextEntryOffset;
    DWORD Action;
    DWORD FileNameLength;
    WCHAR FileName[1];
};
struct alignas( 1 ) _ENCLAVE_INIT_INFO_SGX
{
    BYTE SigStruct[1808];
    BYTE Reserved1[240];
    BYTE EInitToken[304];
    BYTE Reserved2[1744];
};
struct alignas( 4 ) _SECURITY_QUALITY_OF_SERVICE
{
    DWORD Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
};
struct alignas( 4 ) _ENCLAVE_CREATE_INFO_VBS
{
    DWORD Flags;
    BYTE OwnerID[32];
};
struct alignas( 4 ) _IMAGE_FILE_HEADER
{
    WORD Machine;
    WORD NumberOfSections;
    DWORD TimeDateStamp;
    DWORD PointerToSymbolTable;
    DWORD NumberOfSymbols;
    WORD SizeOfOptionalHeader;
    WORD Characteristics;
};
struct alignas( 8 ) _CPTABLEINFO
{
    USHORT CodePage;
    USHORT MaximumCharacterSize;
    USHORT DefaultChar;
    USHORT UniDefaultChar;
    USHORT TransDefaultChar;
    USHORT TransUniDefaultChar;
    USHORT DBCSCodePage;
    UCHAR LeadByte[12];
    PUSHORT MultiByteTable;
    PVOID WideCharTable;
    PUSHORT DBCSRanges;
    PUSHORT DBCSOffsets;
};
struct alignas( 8 ) tagPOINTER_INFO
{
    POINTER_INPUT_TYPE pointerType;
    UINT32 pointerId;
    UINT32 frameId;
    POINTER_FLAGS pointerFlags;
    HANDLE sourceDevice;
    HWND hwndTarget;
    POINT ptPixelLocation;
    POINT ptHimetricLocation;
    POINT ptPixelLocationRaw;
    POINT ptHimetricLocationRaw;
    DWORD dwTime;
    UINT32 historyCount;
    INT32 InputData;
    DWORD dwKeyStates;
    UINT64 PerformanceCount;
    POINTER_BUTTON_CHANGE_TYPE ButtonChangeType;
};
struct alignas( 8 ) tagPOINTER_PEN_INFO
{
    POINTER_INFO pointerInfo;
    PEN_FLAGS penFlags;
    PEN_MASK penMask;
    UINT32 pressure;
    UINT32 rotation;
    INT32 tiltX;
    INT32 tiltY;
};
struct alignas( 1 ) _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER
{
    DWORD EpilogueCount;
    BYTE EpilogueByteCount;
    BYTE BranchDescriptorElementSize;
    WORD BranchDescriptorCount;
};
struct alignas( 8 ) tagRAWINPUTDEVICE
{
    USHORT usUsagePage;
    USHORT usUsage;
    DWORD dwFlags;
    HWND hwndTarget;
};
struct alignas( 8 ) tagPOINTER_TOUCH_INFO
{
    POINTER_INFO pointerInfo;
    TOUCH_FLAGS touchFlags;
    TOUCH_MASK touchMask;
    RECT rcContact;
    RECT rcContactRaw;
    UINT32 orientation;
    UINT32 pressure;
};
struct alignas( 1 ) _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION
{
    DWORD PageRelativeOffset : 12;
    DWORD IndirectCall : 1;
    DWORD IATIndex : 19;
};
struct alignas( 4 ) _IMAGE_THUNK_DATA32
{
    union alignas( 4 )
    {
        DWORD ForwarderString;
        DWORD Function;
        DWORD Ordinal;
        DWORD AddressOfData;
    } u1;
};
struct alignas( 4 ) tagTOUCH_HIT_TESTING_INPUT
{
    UINT32 pointerId;
    POINT point;
    RECT boundingBox;
    RECT nonOccludedBoundingBox;
    UINT32 orientation;
};
struct alignas( 8 ) _NV_MEMORY_RANGE
{
    void* BaseAddress;
    SIZE_T Length;
};
struct alignas( 2 ) _IMAGE_RELOCATION
{
    union alignas( 2 )
    {
        DWORD VirtualAddress;
        DWORD RelocCount;
    };
    DWORD SymbolTableIndex;
    WORD Type;
};
struct alignas( 4 ) tagCHANGEFILTERSTRUCT
{
    DWORD cbSize;
    DWORD ExtStatus;
};
struct alignas( 8 ) IBindStatusCallbackEx
{
};
struct alignas( 4 ) _OSVERSIONINFOW
{
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR szCSDVersion[128];
};
struct alignas( 8 ) IXMLDOMProcessingInstruction
{
};
struct alignas( 8 ) _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE
{
    ULONG_PTR BaseAddress;
    SIZE_T Size;
    DWORD Flags;
};
struct alignas( 4 ) _ADMINISTRATOR_POWER_POLICY
{
    SYSTEM_POWER_STATE MinSleep;
    SYSTEM_POWER_STATE MaxSleep;
    DWORD MinVideoTimeout;
    DWORD MaxVideoTimeout;
    DWORD MinSpindownTimeout;
    DWORD MaxSpindownTimeout;
};
struct alignas( 8 ) tagOLEVERB
{
    LONG lVerb;
    LPOLESTR lpszVerbName;
    DWORD fuFlags;
    DWORD grfAttribs;
};
struct alignas( 4 ) _STRING32
{
    USHORT Length;
    USHORT MaximumLength;
    ULONG Buffer;
};
struct alignas( 2 ) tagACCEL
{
    BYTE fVirt;
    WORD key;
    WORD cmd;
};
struct alignas( 4 ) POWER_ACTION_POLICY
{
    POWER_ACTION Action;
    DWORD Flags;
    DWORD EventCode;
};
struct alignas( 4 ) SYSTEM_POWER_LEVEL
{
    BOOLEAN Enable;
    BYTE Spare[3];
    DWORD BatteryLevel;
    POWER_ACTION_POLICY PowerPolicy;
    SYSTEM_POWER_STATE MinSystemState;
};
struct alignas( 4 ) _SYSTEM_POWER_POLICY
{
    DWORD Revision;
    POWER_ACTION_POLICY PowerButton;
    POWER_ACTION_POLICY SleepButton;
    POWER_ACTION_POLICY LidClose;
    SYSTEM_POWER_STATE LidOpenWake;
    DWORD Reserved;
    POWER_ACTION_POLICY Idle;
    DWORD IdleTimeout;
    BYTE IdleSensitivity;
    BYTE DynamicThrottle;
    BYTE Spare2[2];
    SYSTEM_POWER_STATE MinSleep;
    SYSTEM_POWER_STATE MaxSleep;
    SYSTEM_POWER_STATE ReducedLatencySleep;
    DWORD WinLogonFlags;
    DWORD Spare3;
    DWORD DozeS4Timeout;
    DWORD BroadcastCapacityResolution;
    SYSTEM_POWER_LEVEL DischargePolicy[4];
    DWORD VideoTimeout;
    BOOLEAN VideoDimDisplay;
    DWORD VideoReserved[3];
    DWORD SpindownTimeout;
    BOOLEAN OptimizeForPower;
    BYTE FanThrottleTolerance;
    BYTE ForcedThrottle;
    BYTE MinThrottle;
    POWER_ACTION_POLICY OverThrottled;
};
struct alignas( 4 ) _cpinfoexW
{
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    WCHAR CodePageName[260];
};
struct alignas( 8 ) PPM_IDLE_STATE_BUCKET_EX
{
    DWORD64 TotalTimeUs;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD Count;
};
struct alignas( 8 ) PPM_IDLE_STATE_ACCOUNTING_EX
{
    DWORD64 TotalTime;
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD CancelledTransitions;
    PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
};
struct alignas( 4 ) _PROCESS_LEAP_SECOND_INFO
{
    ULONG Flags;
    ULONG Reserved;
};
struct alignas( 1 ) _IMAGE_BDD_DYNAMIC_RELOCATION
{
    WORD Left;
    WORD Right;
    DWORD Value;
};
struct alignas( 4 ) _STORAGE_DEVICE_RESILIENCY_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    DWORD NameOffset;
    DWORD NumberOfLogicalCopies;
    DWORD NumberOfPhysicalCopies;
    DWORD PhysicalDiskRedundancy;
    DWORD NumberOfColumns;
    DWORD Interleave;
};
struct alignas( 8 ) tagNMHDR
{
    HWND hwndFrom;
    UINT_PTR idFrom;
    UINT code;
};
struct alignas( 4 ) _PROCESSOR_POWER_POLICY_INFO
{
    DWORD TimeCheck;
    DWORD DemoteLimit;
    DWORD PromoteLimit;
    BYTE DemotePercent;
    BYTE PromotePercent;
    BYTE Spare[2];
    DWORD AllowDemotion : 1;
    DWORD AllowPromotion : 1;
    DWORD Reserved : 30;
};
struct alignas( 4 ) _PROCESSOR_POWER_POLICY
{
    DWORD Revision;
    BYTE DynamicThrottle;
    BYTE Spare[3];
    DWORD DisableCStates : 1;
    DWORD Reserved : 31;
    DWORD PolicyCount;
    PROCESSOR_POWER_POLICY_INFO Policy[3];
};
struct alignas( 8 ) tagSOUNDSENTRYA
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
};
struct alignas( 8 ) IXMLError
{
};
struct alignas( 4 ) _IMAGE_ROM_OPTIONAL_HEADER
{
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;
    DWORD BaseOfBss;
    DWORD GprMask;
    DWORD CprMask[4];
    DWORD GpValue;
};
struct alignas( 8 ) IXMLDOMParseError
{
};
struct alignas( 4 ) _CLIENT_ID32
{
    ULONG UniqueProcess;
    ULONG UniqueThread;
};
struct alignas( 8 ) _XSTATE_CONFIGURATION
{
    DWORD64 EnabledFeatures;
    DWORD64 EnabledVolatileFeatures;
    DWORD Size;
    union alignas( 4 )
    {
        DWORD ControlFlags;
        struct alignas( 4 )
        {
            DWORD OptimizedSave : 1;
            DWORD CompactionEnabled : 1;
            DWORD ExtendedFeatureDisable : 1;
        };
    };
    XSTATE_FEATURE Features[64];
    DWORD64 EnabledSupervisorFeatures;
    DWORD64 AlignedFeatures;
    DWORD AllFeatureSize;
    DWORD AllFeatures[64];
    DWORD64 EnabledUserVisibleSupervisorFeatures;
    DWORD64 ExtendedFeatureDisableFeatures;
    DWORD AllNonLargeFeatureSize;
    DWORD Spare;
};
struct alignas( 8 ) JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2
{
    LONG64 MaxIops;
    LONG64 MaxBandwidth;
    LONG64 ReservationIops;
    PWSTR VolumeName;
    DWORD BaseIoSize;
    JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
    WORD VolumeNameLength;
    LONG64 CriticalReservationIops;
    LONG64 ReservationBandwidth;
    LONG64 CriticalReservationBandwidth;
    LONG64 MaxTimePercent;
    LONG64 ReservationTimePercent;
    LONG64 CriticalReservationTimePercent;
};
struct alignas( 4 ) _MEMORY_BASIC_INFORMATION32
{
    DWORD BaseAddress;
    DWORD AllocationBase;
    DWORD AllocationProtect;
    DWORD RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
};
struct alignas( 4 ) PROCESSOR_IDLESTATE_INFO
{
    DWORD TimeCheck;
    BYTE DemotePercent;
    BYTE PromotePercent;
    BYTE Spare[2];
};
struct alignas( 4 ) PROCESSOR_IDLESTATE_POLICY
{
    WORD Revision;
    union alignas( 2 )
    {
        WORD AsWORD;
        struct alignas( 2 )
        {
            WORD AllowScaling : 1;
            WORD Disabled : 1;
            WORD Reserved : 14;
        };
    } Flags;
    DWORD PolicyCount;
    PROCESSOR_IDLESTATE_INFO Policy[3];
};
struct alignas( 8 ) FLASHWINFO
{
    UINT cbSize;
    HWND hwnd;
    DWORD dwFlags;
    UINT uCount;
    DWORD dwTimeout;
};
struct alignas( 4 ) _IMAGE_DATA_DIRECTORY
{
    DWORD VirtualAddress;
    DWORD Size;
};
struct alignas( 4 ) _ImageArchitectureHeader
{
    unsigned int AmaskValue : 1;
    int : 7;
    unsigned int AmaskShift : 8;
    int : 16;
    DWORD FirstEntryRVA;
};
struct alignas( 2 ) DLGITEMTEMPLATE
{
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
};
struct alignas( 1 ) _IMAGE_DYNAMIC_RELOCATION64_V2
{
    DWORD HeaderSize;
    DWORD FixupInfoSize;
    ULONGLONG Symbol;
    DWORD SymbolGroup;
    DWORD Flags;
};
struct alignas( 1 ) _POWER_PLATFORM_INFORMATION
{
    BOOLEAN AoAc;
};
struct alignas( 4 ) tagMULTIKEYHELPW
{
    DWORD mkSize;
    WCHAR mkKeylist;
    WCHAR szKeyphrase[1];
};
struct alignas( 4 ) PPM_PERFSTATE_EVENT
{
    DWORD State;
    DWORD Status;
    DWORD Latency;
    DWORD Speed;
    DWORD Processor;
};
struct alignas( 8 ) _MEM_ADDRESS_REQUIREMENTS
{
    PVOID LowestStartingAddress;
    PVOID HighestEndingAddress;
    SIZE_T Alignment;
};
struct alignas( 4 ) _PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY
{
    union alignas( 4 )
    {
        DWORD Flags;
        struct alignas( 4 )
        {
            DWORD AssemblyManifestRedirectionTrust : 1;
            DWORD ReservedFlags : 31;
        };
    };
};
struct alignas( 1 ) _IMAGE_DYNAMIC_RELOCATION32
{
    DWORD Symbol;
    DWORD BaseRelocSize;
};
struct alignas( 8 ) _APPLICATIONLAUNCH_SETTING_VALUE
{
    LARGE_INTEGER ActivationTime;
    DWORD Flags;
    DWORD ButtonInstanceID;
};
struct alignas( 8 ) tagTYPEDESC
{
    union alignas( 8 )
    {
        tagTYPEDESC* lptdesc;
        tagARRAYDESC* lpadesc;
        HREFTYPE hreftype;
    };
    VARTYPE vt;
};
struct alignas( 8 ) PPM_IDLE_STATE_ACCOUNTING
{
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD64 TotalTime;
    DWORD IdleTimeBuckets[6];
};
struct alignas( 8 ) PPM_IDLE_ACCOUNTING
{
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD64 StartTime;
    PPM_IDLE_STATE_ACCOUNTING State[1];
};
struct alignas( 4 ) tagMINMAXINFO
{
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
};
struct alignas( 4 ) _OSVERSIONINFOA
{
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR szCSDVersion[128];
};
struct alignas( 4 ) _MESSAGE_RESOURCE_DATA
{
    DWORD NumberOfBlocks;
    MESSAGE_RESOURCE_BLOCK Blocks[1];
};
struct alignas( 8 ) tagWINDOWPOS
{
    HWND hwnd;
    HWND hwndInsertAfter;
    int x;
    int y;
    int cx;
    int cy;
    UINT flags;
};
struct alignas( 4 ) _IMAGE_CE_RUNTIME_FUNCTION_ENTRY
{
    DWORD FuncStart;
    DWORD PrologLen : 8;
    DWORD FuncLen : 22;
    DWORD ThirtyTwoBit : 1;
    DWORD ExceptionFlag : 1;
};
struct alignas( 8 ) PPM_THERMALCHANGE_EVENT
{
    DWORD ThermalConstraint;
    DWORD64 Processors;
};
struct alignas( 8 ) PPM_IDLESTATE_EVENT
{
    DWORD NewState;
    DWORD OldState;
    DWORD64 Processors;
};
struct alignas( 4 ) _SILOOBJECT_BASIC_INFORMATION
{
    DWORD SiloId;
    DWORD SiloParentId;
    DWORD NumberOfProcesses;
    BOOLEAN IsInServerSilo;
    BYTE Reserved[3];
};
struct alignas( 8 ) tagNCCALCSIZE_PARAMS
{
    RECT rgrc[3];
    PWINDOWPOS lppos;
};
struct alignas( 1 ) _IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION
{
    DWORD OriginalRva;
    DWORD BDDOffset;
    DWORD RvaSize;
    DWORD BaseRelocSize;
};
struct alignas( 8 ) _PS_MITIGATION_OPTIONS_MAP
{
    ULONG_PTR Map[3];
};
struct alignas( 8 ) _PS_MITIGATION_AUDIT_OPTIONS_MAP
{
    ULONG_PTR Map[3];
};
struct alignas( 8 ) _PS_SYSTEM_DLL_INIT_BLOCK
{
    ULONG Size;
    ULONG_PTR SystemDllWowRelocation;
    ULONG_PTR SystemDllNativeRelocation;
    ULONG_PTR Wow64SharedInformation[16];
    ULONG RngData;
    union alignas( 4 )
    {
        ULONG Flags;
        struct alignas( 4 )
        {
            ULONG CfgOverride : 1;
            ULONG Reserved : 31;
        };
    };
    PS_MITIGATION_OPTIONS_MAP MitigationOptionsMap;
    ULONG_PTR CfgBitMap;
    ULONG_PTR CfgBitMapSize;
    ULONG_PTR Wow64CfgBitMap;
    ULONG_PTR Wow64CfgBitMapSize;
    PS_MITIGATION_AUDIT_OPTIONS_MAP MitigationAuditOptionsMap;
    ULONG_PTR ScpCfgCheckFunction;
    ULONG_PTR ScpCfgCheckESFunction;
    ULONG_PTR ScpCfgDispatchFunction;
    ULONG_PTR ScpCfgDispatchESFunction;
    ULONG_PTR ScpArm64EcCallCheck;
    ULONG_PTR ScpArm64EcCfgCheckFunction;
    ULONG_PTR ScpArm64EcCfgCheckESFunction;
};
struct alignas( 8 ) _LDR_DLL_LOADED_NOTIFICATION_DATA
{
    ULONG Flags;
    PUNICODE_STRING FullDllName;
    PUNICODE_STRING BaseDllName;
    PVOID DllBase;
    ULONG SizeOfImage;
};
struct alignas( 4 ) _IMAGE_BASE_RELOCATION
{
    DWORD VirtualAddress;
    DWORD SizeOfBlock;
};
struct alignas( 4 ) _cpinfo
{
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
};
struct alignas( 8 ) _NETRESOURCEW
{
    DWORD dwScope;
    DWORD dwType;
    DWORD dwDisplayType;
    DWORD dwUsage;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    LPWSTR lpComment;
    LPWSTR lpProvider;
};
struct alignas( 8 ) tagDROPSTRUCT
{
    HWND hwndSource;
    HWND hwndSink;
    DWORD wFmt;
    ULONG_PTR dwData;
    POINT ptDrop;
    DWORD dwControlData;
};
struct alignas( 8 ) _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION
{
    DWORD ulFlags;
    DWORD ulEncodedAssemblyIdentityLength;
    DWORD ulManifestPathType;
    DWORD ulManifestPathLength;
    LARGE_INTEGER liManifestLastWriteTime;
    DWORD ulPolicyPathType;
    DWORD ulPolicyPathLength;
    LARGE_INTEGER liPolicyLastWriteTime;
    DWORD ulMetadataSatelliteRosterIndex;
    DWORD ulManifestVersionMajor;
    DWORD ulManifestVersionMinor;
    DWORD ulPolicyVersionMajor;
    DWORD ulPolicyVersionMinor;
    DWORD ulAssemblyDirectoryNameLength;
    PCWSTR lpAssemblyEncodedAssemblyIdentity;
    PCWSTR lpAssemblyManifestPath;
    PCWSTR lpAssemblyPolicyPath;
    PCWSTR lpAssemblyDirectoryName;
    DWORD ulFileCount;
};
struct alignas( 2 ) _IMAGE_IMPORT_BY_NAME
{
    WORD Hint;
    CHAR Name[1];
};
struct alignas( 8 ) _currencyfmtW
{
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPWSTR lpCurrencySymbol;
};
struct alignas( 8 ) tagCOMBOBOXINFO
{
    DWORD cbSize;
    RECT rcItem;
    RECT rcButton;
    DWORD stateButton;
    HWND hwndCombo;
    HWND hwndItem;
    HWND hwndList;
};
struct alignas( 16 ) _SLIST_ENTRY
{
    _SLIST_ENTRY* Next;
};
struct alignas( 8 ) tagMOUSEINPUT
{
    LONG dx;
    LONG dy;
    DWORD mouseData;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
};
struct alignas( 8 ) tagKEYBDINPUT
{
    WORD wVk;
    WORD wScan;
    DWORD dwFlags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
};
struct alignas( 8 ) tagINPUT
{
    DWORD type;
    union alignas( 8 )
    {
        MOUSEINPUT mi;
        KEYBDINPUT ki;
        HARDWAREINPUT hi;
    };
};
struct alignas( 4 ) _IMAGE_OPTIONAL_HEADER64
{
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    ULONGLONG ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    ULONGLONG SizeOfStackReserve;
    ULONGLONG SizeOfStackCommit;
    ULONGLONG SizeOfHeapReserve;
    ULONGLONG SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
};
struct alignas( 4 ) _IMAGE_NT_HEADERS64
{
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER64 OptionalHeader;
};
struct alignas( 4 ) tagRID_DEVICE_INFO_HID
{
    DWORD dwVendorId;
    DWORD dwProductId;
    DWORD dwVersionNumber;
    USHORT usUsagePage;
    USHORT usUsage;
};
struct alignas( 4 ) _FILEMUIINFO
{
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwFileType;
    BYTE pChecksum[16];
    BYTE pServiceChecksum[16];
    DWORD dwLanguageNameOffset;
    DWORD dwTypeIDMainSize;
    DWORD dwTypeIDMainOffset;
    DWORD dwTypeNameMainOffset;
    DWORD dwTypeIDMUISize;
    DWORD dwTypeIDMUIOffset;
    DWORD dwTypeNameMUIOffset;
    BYTE abBuffer[8];
};
struct alignas( 4 ) tagRID_DEVICE_INFO_MOUSE
{
    DWORD dwId;
    DWORD dwNumberOfButtons;
    DWORD dwSampleRate;
    BOOL fHasHorizontalWheel;
};
struct alignas( 4 ) tagRID_DEVICE_INFO_KEYBOARD
{
    DWORD dwType;
    DWORD dwSubType;
    DWORD dwKeyboardMode;
    DWORD dwNumberOfFunctionKeys;
    DWORD dwNumberOfIndicators;
    DWORD dwNumberOfKeysTotal;
};
struct alignas( 4 ) tagRID_DEVICE_INFO
{
    DWORD cbSize;
    DWORD dwType;
    union alignas( 4 )
    {
        RID_DEVICE_INFO_MOUSE mouse;
        RID_DEVICE_INFO_KEYBOARD keyboard;
        RID_DEVICE_INFO_HID hid;
    };
};
struct alignas( 8 ) _IMAGE_POLICY_ENTRY
{
    IMAGE_POLICY_ENTRY_TYPE Type;
    IMAGE_POLICY_ID PolicyId;
    union alignas( 8 )
    {
        void* None;
        BOOLEAN BoolValue;
        INT8 Int8Value;
        UINT8 UInt8Value;
        INT16 Int16Value;
        UINT16 UInt16Value;
        INT32 Int32Value;
        UINT32 UInt32Value;
        INT64 Int64Value;
        UINT64 UInt64Value;
        PCSTR AnsiStringValue;
        PCWSTR UnicodeStringValue;
    } u;
};
struct alignas( 8 ) _IMAGE_POLICY_METADATA
{
    BYTE Version;
    BYTE Reserved0[7];
    ULONGLONG ApplicationId;
    IMAGE_POLICY_ENTRY Policies[0];
};
struct alignas( 8 ) tagPOINTER_DEVICE_INFO
{
    DWORD displayOrientation;
    HANDLE device;
    POINTER_DEVICE_TYPE pointerDeviceType;
    HMONITOR monitor;
    ULONG startingCursorId;
    USHORT maxActiveContacts;
    WCHAR productString[520];
};
struct alignas( 4 ) tagLASTINPUTINFO
{
    UINT cbSize;
    DWORD dwTime;
};
struct alignas( 8 ) _LDRP_CSLIST
{
    PSINGLE_LIST_ENTRY Tail;
};
struct alignas( 4 ) _tagAUTHENTICATEINFO
{
    DWORD dwFlags;
    DWORD dwReserved;
};
struct alignas( 4 ) _IMAGE_DEBUG_DIRECTORY
{
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Type;
    DWORD SizeOfData;
    DWORD AddressOfRawData;
    DWORD PointerToRawData;
};
struct alignas( 4 ) PROCESSOR_PERFSTATE_POLICY
{
    DWORD Revision;
    BYTE MaxThrottle;
    BYTE MinThrottle;
    BYTE BusyAdjThreshold;
    union alignas( 1 )
    {
        BYTE Spare;
        union alignas( 1 )
        {
            BYTE AsBYTE;
            struct alignas( 1 )
            {
                BYTE NoDomainAccounting : 1;
                BYTE IncreasePolicy : 2;
                BYTE DecreasePolicy : 2;
                BYTE Reserved : 3;
            };
        } Flags;
    };
    DWORD TimeCheck;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD IncreasePercent;
    DWORD DecreasePercent;
};
struct alignas( 8 ) IXMLDOMNotation
{
};
struct alignas( 4 ) _VIDEOPARAMETERS
{
    GUID Guid;
    ULONG dwOffset;
    ULONG dwCommand;
    ULONG dwFlags;
    ULONG dwMode;
    ULONG dwTVStandard;
    ULONG dwAvailableModes;
    ULONG dwAvailableTVStandard;
    ULONG dwFlickerFilter;
    ULONG dwOverScanX;
    ULONG dwOverScanY;
    ULONG dwMaxUnscaledX;
    ULONG dwMaxUnscaledY;
    ULONG dwPositionX;
    ULONG dwPositionY;
    ULONG dwBrightness;
    ULONG dwContrast;
    ULONG dwCPType;
    ULONG dwCPCommand;
    ULONG dwCPStandard;
    ULONG dwCPKey;
    ULONG bCP_APSTriggerBits;
    UCHAR bOEMCopyProtection[256];
};
struct alignas( 8 ) tagCREATESTRUCTA
{
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCSTR lpszName;
    LPCSTR lpszClass;
    DWORD dwExStyle;
};
struct alignas( 4 ) HMETAFILE__
{
    int unused;
};
struct alignas( 4 ) _IMAGE_LOAD_CONFIG_DIRECTORY32
{
    DWORD Size;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    DWORD DeCommitFreeBlockThreshold;
    DWORD DeCommitTotalFreeThreshold;
    DWORD LockPrefixTable;
    DWORD MaximumAllocationSize;
    DWORD VirtualMemoryThreshold;
    DWORD ProcessHeapFlags;
    DWORD ProcessAffinityMask;
    WORD CSDVersion;
    WORD DependentLoadFlags;
    DWORD EditList;
    DWORD SecurityCookie;
    DWORD SEHandlerTable;
    DWORD SEHandlerCount;
    DWORD GuardCFCheckFunctionPointer;
    DWORD GuardCFDispatchFunctionPointer;
    DWORD GuardCFFunctionTable;
    DWORD GuardCFFunctionCount;
    DWORD GuardFlags;
    IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
    DWORD GuardAddressTakenIatEntryTable;
    DWORD GuardAddressTakenIatEntryCount;
    DWORD GuardLongJumpTargetTable;
    DWORD GuardLongJumpTargetCount;
    DWORD DynamicValueRelocTable;
    DWORD CHPEMetadataPointer;
    DWORD GuardRFFailureRoutine;
    DWORD GuardRFFailureRoutineFunctionPointer;
    DWORD DynamicValueRelocTableOffset;
    WORD DynamicValueRelocTableSection;
    WORD Reserved2;
    DWORD GuardRFVerifyStackPointerFunctionPointer;
    DWORD HotPatchTableOffset;
    DWORD Reserved3;
    DWORD EnclaveConfigurationPointer;
    DWORD VolatileMetadataPointer;
    DWORD GuardEHContinuationTable;
    DWORD GuardEHContinuationCount;
    DWORD GuardXFGCheckFunctionPointer;
    DWORD GuardXFGDispatchFunctionPointer;
    DWORD GuardXFGTableDispatchFunctionPointer;
    DWORD CastGuardOsDeterminedFailureMode;
    DWORD GuardMemcpyFunctionPointer;
};
struct alignas( 4 ) _IMAGE_DELAYLOAD_DESCRIPTOR
{
    union alignas( 4 )
    {
        DWORD AllAttributes;
        struct alignas( 4 )
        {
            DWORD RvaBased : 1;
            DWORD ReservedAttributes : 31;
        };
    } Attributes;
    DWORD DllNameRVA;
    DWORD ModuleHandleRVA;
    DWORD ImportAddressTableRVA;
    DWORD ImportNameTableRVA;
    DWORD BoundImportAddressTableRVA;
    DWORD UnloadInformationTableRVA;
    DWORD TimeDateStamp;
};
struct alignas( 4 ) _IMAGE_ENCLAVE_CONFIG32
{
    DWORD Size;
    DWORD MinimumRequiredConfigSize;
    DWORD PolicyFlags;
    DWORD NumberOfImports;
    DWORD ImportList;
    DWORD ImportEntrySize;
    BYTE FamilyID[16];
    BYTE ImageID[16];
    DWORD ImageVersion;
    DWORD SecurityVersion;
    DWORD EnclaveSize;
    DWORD NumberOfThreads;
    DWORD EnclaveFlags;
};
struct alignas( 8 ) tagSOUNDSENTRYW
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
};
struct alignas( 8 ) tagMEASUREITEMSTRUCT
{
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemWidth;
    UINT itemHeight;
    ULONG_PTR itemData;
};
struct alignas( 4 ) IMAGE_COR20_HEADER
{
    DWORD cb;
    WORD MajorRuntimeVersion;
    WORD MinorRuntimeVersion;
    IMAGE_DATA_DIRECTORY MetaData;
    DWORD Flags;
    union alignas( 4 )
    {
        DWORD EntryPointToken;
        DWORD EntryPointRVA;
    };
    IMAGE_DATA_DIRECTORY Resources;
    IMAGE_DATA_DIRECTORY StrongNameSignature;
    IMAGE_DATA_DIRECTORY CodeManagerTable;
    IMAGE_DATA_DIRECTORY VTableFixups;
    IMAGE_DATA_DIRECTORY ExportAddressTableJumps;
    IMAGE_DATA_DIRECTORY ManagedNativeHeader;
};
struct alignas( 4 ) _IMAGE_OPTIONAL_HEADER
{
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;
    DWORD ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    DWORD SizeOfStackReserve;
    DWORD SizeOfStackCommit;
    DWORD SizeOfHeapReserve;
    DWORD SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
};
struct alignas( 8 ) tagGUITHREADINFO
{
    DWORD cbSize;
    DWORD flags;
    HWND hwndActive;
    HWND hwndFocus;
    HWND hwndCapture;
    HWND hwndMenuOwner;
    HWND hwndMoveSize;
    HWND hwndCaret;
    RECT rcCaret;
};
struct alignas( 4 ) _ImageArchitectureEntry
{
    DWORD FixupInstRVA;
    DWORD NewInst;
};
struct alignas( 1 ) _IMAGE_DYNAMIC_RELOCATION32_V2
{
    DWORD HeaderSize;
    DWORD FixupInfoSize;
    DWORD Symbol;
    DWORD SymbolGroup;
    DWORD Flags;
};
struct alignas( 4 ) tagUSEROBJECTFLAGS
{
    BOOL fInherit;
    BOOL fReserved;
    DWORD dwFlags;
};
struct alignas( 4 ) tagMULTIKEYHELPA
{
    DWORD mkSize;
    CHAR mkKeylist;
    CHAR szKeyphrase[1];
};
struct alignas( 4 ) _IMAGE_HOT_PATCH_INFO
{
    DWORD Version;
    DWORD Size;
    DWORD SequenceNumber;
    DWORD BaseImageList;
    DWORD BaseImageCount;
    DWORD BufferOffset;
    DWORD ExtraPatchSize;
};
struct alignas( 8 ) IGetBindHandle
{
};
struct alignas( 4 ) _IMAGE_DYNAMIC_RELOCATION_TABLE
{
    DWORD Version;
    DWORD Size;
};
struct alignas( 4 ) tagLOGFONTW
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    WCHAR lfFaceName[32];
};
struct alignas( 4 ) tagNONCLIENTMETRICSW
{
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTW lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTW lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTW lfMenuFont;
    LOGFONTW lfStatusFont;
    LOGFONTW lfMessageFont;
    int iPaddedBorderWidth;
};
struct alignas( 8 ) _OLESTREAM
{
    LPOLESTREAMVTBL lpstbl;
};
struct alignas( 8 ) tagCOPYDATASTRUCT
{
    ULONG_PTR dwData;
    DWORD cbData;
    PVOID lpData;
};
struct alignas( 4 ) tagMINIMIZEDMETRICS
{
    UINT cbSize;
    int iWidth;
    int iHorzGap;
    int iVertGap;
    int iArrange;
};
struct alignas( 1 ) _IMAGE_HOT_PATCH_HASHES
{
    BYTE SHA256[32];
    BYTE SHA1[20];
};
struct alignas( 8 ) tagTRACKMOUSEEVENT
{
    DWORD cbSize;
    DWORD dwFlags;
    HWND hwndTrack;
    DWORD dwHoverTime;
};
struct alignas( 1 ) _IMAGE_FUNCTION_OVERRIDE_HEADER
{
    DWORD FuncOverrideSize;
};
struct alignas( 4 ) NOTIFY_USER_POWER_SETTING
{
    GUID Guid;
};
struct alignas( 4 ) HKEY__
{
    int unused;
};
struct alignas( 8 ) IOleCache2
{
};
struct alignas( 4 ) _RECTL
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
};
struct alignas( 4 ) tagEMRTEXT
{
    POINTL ptlReference;
    DWORD nChars;
    DWORD offString;
    DWORD fOptions;
    RECTL rcl;
    DWORD offDx;
};
struct alignas( 8 ) _TP_CALLBACK_ENVIRON_V3
{
    TP_VERSION Version;
    PTP_POOL Pool;
    PTP_CLEANUP_GROUP CleanupGroup;
    PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback;
    PVOID RaceDll;
    _ACTIVATION_CONTEXT* ActivationContext;
    PTP_SIMPLE_CALLBACK FinalizationCallback;
    union alignas( 4 )
    {
        DWORD Flags;
        struct alignas( 4 )
        {
            DWORD LongFunction : 1;
            DWORD Persistent : 1;
            DWORD Private : 30;
        } s;
    } u;
    TP_CALLBACK_PRIORITY CallbackPriority;
    DWORD Size;
};
struct alignas( 4 ) tagEMR
{
    DWORD iType;
    DWORD nSize;
};
struct alignas( 4 ) tagABORTPATH
{
    EMR emr;
};
;
struct alignas( 4 ) _OSVERSIONINFOEXA
{
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR szCSDVersion[128];
    WORD wServicePackMajor;
    WORD wServicePackMinor;
    WORD wSuiteMask;
    BYTE wProductType;
    BYTE wReserved;
};
struct alignas( 4 ) tagXFORM
{
    FLOAT eM11;
    FLOAT eM12;
    FLOAT eM21;
    FLOAT eM22;
    FLOAT eDx;
    FLOAT eDy;
};
struct alignas( 4 ) tagEMRPLGBLT
{
    EMR emr;
    RECTL rclBounds;
    POINTL aptlDest[3];
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
};
union alignas( 8 ) _RTL_RUN_ONCE
{
    PVOID Ptr;
};
struct alignas( 4 ) tagPELARRAY
{
    LONG paXCount;
    LONG paYCount;
    LONG paXExt;
    LONG paYExt;
    BYTE paRGBs;
};
struct alignas( 8 ) PPM_WMI_IDLE_STATES
{
    DWORD Type;
    DWORD Count;
    DWORD TargetState;
    DWORD OldState;
    DWORD64 TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
};
struct alignas( 4 ) tagNEWTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
};
struct alignas( 4 ) tagFONTSIGNATURE
{
    DWORD fsUsb[4];
    DWORD fsCsb[2];
};
struct alignas( 4 ) tagNEWTEXTMETRICEXA
{
    NEWTEXTMETRICA ntmTm;
    FONTSIGNATURE ntmFontSig;
};
struct alignas( 4 ) tagNEWTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
};
struct alignas( 4 ) tagNEWTEXTMETRICEXW
{
    NEWTEXTMETRICW ntmTm;
    FONTSIGNATURE ntmFontSig;
};
struct alignas( 8 ) PPM_WMI_PERF_STATES
{
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;
    DWORD MaxPerfState;
    DWORD MinPerfState;
    DWORD LowestPerfState;
    DWORD ThermalConstraint;
    BYTE BusyAdjThreshold;
    BYTE PolicyType;
    BYTE Type;
    BYTE Reserved;
    DWORD TimerInterval;
    DWORD64 TargetProcessors;
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
};
struct alignas( 8 ) _REASON_CONTEXT
{
    ULONG Version;
    DWORD Flags;
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            HMODULE LocalizedReasonModule;
            ULONG LocalizedReasonId;
            ULONG ReasonStringCount;
            LPWSTR* ReasonStrings;
        } Detailed;
        LPWSTR SimpleReasonString;
    } Reason;
};
struct alignas( 8 ) PPM_WMI_PERF_STATES_EX
{
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;
    DWORD MaxPerfState;
    DWORD MinPerfState;
    DWORD LowestPerfState;
    DWORD ThermalConstraint;
    BYTE BusyAdjThreshold;
    BYTE PolicyType;
    BYTE Type;
    BYTE Reserved;
    DWORD TimerInterval;
    PVOID TargetProcessors;
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
};
struct alignas( 4 ) HWND__
{
    int unused;
};
struct alignas( 4 ) HBITMAP__
{
    int unused;
};
struct alignas( 8 ) IEnumOLEVERB
{
};
struct alignas( 4 ) tagEMRSETMAPPERFLAGS
{
    EMR emr;
    DWORD dwFlags;
};
struct alignas( 4 ) _ENLISTMENT_BASIC_INFORMATION
{
    GUID EnlistmentId;
    GUID TransactionId;
    GUID ResourceManagerId;
};
struct alignas( 4 ) tagEMRSELECTPALETTE
{
    EMR emr;
    DWORD ihPal;
};
struct alignas( 4 ) HRSRC__
{
    int unused;
};
struct alignas( 4 ) tagWTSSESSION_NOTIFICATION
{
    DWORD cbSize;
    DWORD dwSessionId;
};
struct alignas( 8 ) PPM_IDLE_ACCOUNTING_EX
{
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD AbortCount;
    DWORD64 StartTime;
    PPM_IDLE_STATE_ACCOUNTING_EX State[1];
};
struct alignas( 8 ) PPM_PERFSTATE_DOMAIN_EVENT
{
    DWORD State;
    DWORD Latency;
    DWORD Speed;
    DWORD64 Processors;
};
;
struct alignas( 2 ) tagCOLORADJUSTMENT
{
    WORD caSize;
    WORD caFlags;
    WORD caIlluminantIndex;
    WORD caRedGamma;
    WORD caGreenGamma;
    WORD caBlueGamma;
    WORD caReferenceBlack;
    WORD caReferenceWhite;
    SHORT caContrast;
    SHORT caBrightness;
    SHORT caColorfulness;
    SHORT caRedGreenTint;
};
struct alignas( 4 ) tagEMRSETCOLORADJUSTMENT
{
    EMR emr;
    COLORADJUSTMENT ColorAdjustment;
};
struct alignas( 4 ) tagEMRLINETO
{
    EMR emr;
    POINTL ptl;
};
struct alignas( 8 ) PPM_THERMAL_POLICY_EVENT
{
    BYTE Mode;
    DWORD64 Processors;
};
union alignas( 16 ) _SLIST_HEADER
{
    struct alignas( 8 )
    {
        ULONGLONG Alignment;
        ULONGLONG Region;
    };
    struct alignas( 8 )
    {
        ULONGLONG Depth : 16;
        ULONGLONG Sequence : 48;
        ULONGLONG Reserved : 4;
        ULONGLONG NextEntry : 60;
    } HeaderX64;
};
struct alignas( 8 ) ICreateTypeLib2
{
};
struct alignas( 4 ) tagEMREXTESCAPE
{
    EMR emr;
    INT iEscape;
    INT cbEscData;
    BYTE EscData[1];
};
struct alignas( 4 ) _RESOURCEMANAGER_BASIC_INFORMATION
{
    GUID ResourceManagerId;
    DWORD DescriptionLength;
    WCHAR Description[1];
};
struct alignas( 8 ) _TP_POOL_STACK_INFORMATION
{
    SIZE_T StackReserve;
    SIZE_T StackCommit;
};
struct alignas( 4 ) _TRIVERTEX
{
    LONG x;
    LONG y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
};
struct alignas( 8 ) _CREATEFILE2_EXTENDED_PARAMETERS
{
    DWORD dwSize;
    DWORD dwFileAttributes;
    DWORD dwFileFlags;
    DWORD dwSecurityQosFlags;
    LPSECURITY_ATTRIBUTES lpSecurityAttributes;
    HANDLE hTemplateFile;
};
struct alignas( 4 ) HTASK__
{
    int unused;
};
struct alignas( 8 ) _TRANSACTION_BIND_INFORMATION
{
    HANDLE TmHandle;
};
struct alignas( 8 ) IEnumSTATPROPSETSTG
{
};
struct alignas( 4 ) tagEMRSCALEVIEWPORTEXTEX
{
    EMR emr;
    LONG xNum;
    LONG xDenom;
    LONG yNum;
    LONG yDenom;
};
struct alignas( 4 ) tagENHMETARECORD
{
    DWORD iType;
    DWORD nSize;
    DWORD dParm[1];
};
union alignas( 8 ) tagCY
{
    struct alignas( 4 )
    {
        ULONG Lo;
        LONG Hi;
    };
    LONGLONG int64;
};
struct alignas( 8 ) tagDEC
{
    USHORT wReserved;
    union alignas( 2 )
    {
        struct alignas( 1 )
        {
            BYTE scale;
            BYTE sign;
        };
        USHORT signscale;
    };
    ULONG Hi32;
    union alignas( 8 )
    {
        struct alignas( 4 )
        {
            ULONG Lo32;
            ULONG Mid32;
        };
        ULONGLONG Lo64;
    };
};
struct alignas( 8 ) _wireVARIANT
{
    DWORD clSize;
    DWORD rpcReserved;
    USHORT vt;
    USHORT wReserved1;
    USHORT wReserved2;
    USHORT wReserved3;
    union alignas( 8 )
    {
        LONGLONG llVal;
        LONG lVal;
        BYTE bVal;
        SHORT iVal;
        FLOAT fltVal;
        DOUBLE dblVal;
        VARIANT_BOOL boolVal;
        SCODE scode;
        CY cyVal;
        DATE date;
        wireBSTR bstrVal;
        IUnknown* punkVal;
        IDispatch* pdispVal;
        wirePSAFEARRAY parray;
        wireBRECORD brecVal;
        BYTE* pbVal;
        SHORT* piVal;
        LONG* plVal;
        LONGLONG* pllVal;
        FLOAT* pfltVal;
        DOUBLE* pdblVal;
        VARIANT_BOOL* pboolVal;
        SCODE* pscode;
        CY* pcyVal;
        DATE* pdate;
        wireBSTR* pbstrVal;
        IUnknown** ppunkVal;
        IDispatch** ppdispVal;
        wirePSAFEARRAY* pparray;
        wireVARIANT* pvarVal;
        CHAR cVal;
        USHORT uiVal;
        ULONG ulVal;
        ULONGLONG ullVal;
        INT intVal;
        UINT uintVal;
        DECIMAL decVal;
        DECIMAL* pdecVal;
        CHAR* pcVal;
        USHORT* puiVal;
        ULONG* pulVal;
        ULONGLONG* pullVal;
        INT* pintVal;
        UINT* puintVal;
    };
};
;
struct alignas( 4 ) HWINEVENTHOOK__
{
    int unused;
};
struct alignas( 4 ) tagLAYERPLANEDESCRIPTOR
{
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerPlane;
    BYTE bReserved;
    COLORREF crTransparent;
};
struct alignas( 4 ) SYSTEM_BATTERY_STATE
{
    BOOLEAN AcOnLine;
    BOOLEAN BatteryPresent;
    BOOLEAN Charging;
    BOOLEAN Discharging;
    BOOLEAN Spare1[3];
    BYTE Tag;
    DWORD MaxCapacity;
    DWORD RemainingCapacity;
    DWORD Rate;
    DWORD EstimatedTime;
    DWORD DefaultAlert1;
    DWORD DefaultAlert2;
};
struct alignas( 4 ) tagCIEXYZ
{
    FXPT2DOT30 ciexyzX;
    FXPT2DOT30 ciexyzY;
    FXPT2DOT30 ciexyzZ;
};
struct alignas( 4 ) tagICEXYZTRIPLE
{
    CIEXYZ ciexyzRed;
    CIEXYZ ciexyzGreen;
    CIEXYZ ciexyzBlue;
};
struct alignas( 4 ) tagLOGCOLORSPACEW
{
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR lcsFilename[260];
};
struct alignas( 4 ) BITMAPV4HEADER
{
    DWORD bV4Size;
    LONG bV4Width;
    LONG bV4Height;
    WORD bV4Planes;
    WORD bV4BitCount;
    DWORD bV4V4Compression;
    DWORD bV4SizeImage;
    LONG bV4XPelsPerMeter;
    LONG bV4YPelsPerMeter;
    DWORD bV4ClrUsed;
    DWORD bV4ClrImportant;
    DWORD bV4RedMask;
    DWORD bV4GreenMask;
    DWORD bV4BlueMask;
    DWORD bV4AlphaMask;
    DWORD bV4CSType;
    CIEXYZTRIPLE bV4Endpoints;
    DWORD bV4GammaRed;
    DWORD bV4GammaGreen;
    DWORD bV4GammaBlue;
};
struct alignas( 2 ) _IMAGE_VXD_HEADER
{
    WORD e32_magic;
    BYTE e32_border;
    BYTE e32_worder;
    DWORD e32_level;
    WORD e32_cpu;
    WORD e32_os;
    DWORD e32_ver;
    DWORD e32_mflags;
    DWORD e32_mpages;
    DWORD e32_startobj;
    DWORD e32_eip;
    DWORD e32_stackobj;
    DWORD e32_esp;
    DWORD e32_pagesize;
    DWORD e32_lastpagesize;
    DWORD e32_fixupsize;
    DWORD e32_fixupsum;
    DWORD e32_ldrsize;
    DWORD e32_ldrsum;
    DWORD e32_objtab;
    DWORD e32_objcnt;
    DWORD e32_objmap;
    DWORD e32_itermap;
    DWORD e32_rsrctab;
    DWORD e32_rsrccnt;
    DWORD e32_restab;
    DWORD e32_enttab;
    DWORD e32_dirtab;
    DWORD e32_dircnt;
    DWORD e32_fpagetab;
    DWORD e32_frectab;
    DWORD e32_impmod;
    DWORD e32_impmodcnt;
    DWORD e32_impproc;
    DWORD e32_pagesum;
    DWORD e32_datapage;
    DWORD e32_preload;
    DWORD e32_nrestab;
    DWORD e32_cbnrestab;
    DWORD e32_nressum;
    DWORD e32_autodata;
    DWORD e32_debuginfo;
    DWORD e32_debuglen;
    DWORD e32_instpreload;
    DWORD e32_instdemand;
    DWORD e32_heapsize;
    BYTE e32_res3[12];
    DWORD e32_winresoff;
    DWORD e32_winreslen;
    WORD e32_devid;
    WORD e32_ddkver;
};
struct alignas( 8 ) _STARTUPINFOW
{
    DWORD cb;
    LPWSTR lpReserved;
    LPWSTR lpDesktop;
    LPWSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
};
struct alignas( 1 ) CORRELATION_VECTOR
{
    CHAR Version;
    CHAR Vector[129];
};
struct alignas( 8 ) ITypeLibRegistration
{
};
struct alignas( 4 ) _KTMOBJECT_CURSOR
{
    GUID LastQuery;
    DWORD ObjectIdCount;
    GUID ObjectIds[1];
};
struct alignas( 8 ) IWinInetHttpInfo
{
};
struct alignas( 8 ) _userSTGMEDIUM
{
    IUnknown* pUnkForRelease;
};
struct alignas( 4 ) _IMAGE_ENCLAVE_CONFIG64
{
    DWORD Size;
    DWORD MinimumRequiredConfigSize;
    DWORD PolicyFlags;
    DWORD NumberOfImports;
    DWORD ImportList;
    DWORD ImportEntrySize;
    BYTE FamilyID[16];
    BYTE ImageID[16];
    DWORD ImageVersion;
    DWORD SecurityVersion;
    ULONGLONG EnclaveSize;
    DWORD NumberOfThreads;
    DWORD EnclaveFlags;
};
struct alignas( 4 ) _IMAGE_ENCLAVE_IMPORT
{
    DWORD MatchType;
    DWORD MinimumSecurityVersion;
    BYTE UniqueOrAuthorID[32];
    BYTE FamilyID[16];
    BYTE ImageID[16];
    DWORD ImportName;
    DWORD Reserved;
};
struct alignas( 4 ) _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT
{
    ULONG MarshalCookie;
    GUID UOW;
};
struct alignas( 4 ) _IMAGE_NT_HEADERS
{
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
};
struct alignas( 8 ) tagCALPWSTR
{
    ULONG cElems;
    LPWSTR* pElems;
};
struct alignas( 2 ) _FIXED
{
    WORD fract;
    short value;
};
struct alignas( 2 ) tagPOINTFX
{
    FIXED x;
    FIXED y;
};
struct alignas( 2 ) tagTTPOLYCURVE
{
    WORD wType;
    WORD cpfx;
    POINTFX apfx[1];
};
struct alignas( 4 ) _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY
{
    DWORD BeginAddress;
    union alignas( 4 )
    {
        DWORD UnwindData;
        struct alignas( 4 )
        {
            DWORD Flag : 2;
            DWORD FunctionLength : 11;
            DWORD Ret : 2;
            DWORD H : 1;
            DWORD Reg : 3;
            DWORD R : 1;
            DWORD L : 1;
            DWORD C : 1;
            DWORD StackAdjust : 10;
        };
    };
};
struct alignas( 4 ) _IMAGE_ROM_HEADERS
{
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
};
struct alignas( 4 ) _TAPE_SET_DRIVE_PARAMETERS
{
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD EOTWarningZoneSize;
};
struct alignas( 4 ) _TAPE_CREATE_PARTITION
{
    DWORD Method;
    DWORD Count;
    DWORD Size;
};
struct alignas( 4 ) ANON_OBJECT_HEADER
{
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    CLSID ClassID;
    DWORD SizeOfData;
};
struct alignas( 4 ) tagEMRINVERTRGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    BYTE RgnData[1];
};
struct alignas( 1 ) _IMAGE_BDD_INFO
{
    DWORD Version;
    DWORD BDDSize;
};
struct alignas( 4 ) _IMAGE_SECTION_HEADER
{
    BYTE Name[8];
    union alignas( 4 )
    {
        DWORD PhysicalAddress;
        DWORD VirtualSize;
    } Misc;
    DWORD VirtualAddress;
    DWORD SizeOfRawData;
    DWORD PointerToRawData;
    DWORD PointerToRelocations;
    DWORD PointerToLinenumbers;
    WORD NumberOfRelocations;
    WORD NumberOfLinenumbers;
    DWORD Characteristics;
};
struct alignas( 8 ) _SYSTEM_INFO
{
    union alignas( 4 )
    {
        DWORD dwOemId;
        struct alignas( 2 )
        {
            WORD wProcessorArchitecture;
            WORD wReserved;
        };
    };
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
};
struct alignas( 4 ) DISPLAYCONFIG_RATIONAL
{
    UINT32 Numerator;
    UINT32 Denominator;
};
struct alignas( 4 ) DISPLAYCONFIG_PATH_TARGET_INFO
{
    LUID adapterId;
    UINT32 id;
    union alignas( 4 )
    {
        UINT32 modeInfoIdx;
        struct alignas( 4 )
        {
            UINT32 desktopModeInfoIdx : 16;
            UINT32 targetModeInfoIdx : 16;
        };
    };
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
    DISPLAYCONFIG_ROTATION rotation;
    DISPLAYCONFIG_SCALING scaling;
    DISPLAYCONFIG_RATIONAL refreshRate;
    DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
    BOOL targetAvailable;
    UINT32 statusFlags;
};
struct alignas( 8 ) _WIN32_MEMORY_RANGE_ENTRY
{
    PVOID VirtualAddress;
    SIZE_T NumberOfBytes;
};
struct alignas( 4 ) IMPORT_OBJECT_HEADER
{
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    DWORD SizeOfData;
    union alignas( 2 )
    {
        WORD Ordinal;
        WORD Hint;
    };
    WORD Type : 2;
    WORD NameType : 3;
    WORD Reserved : 11;
};
struct alignas( 4 ) _TRANSACTIONMANAGER_LOGPATH_INFORMATION
{
    DWORD LogPathLength;
    WCHAR LogPath[1];
};
struct alignas( 8 ) tagSTGMEDIUM
{
    DWORD tymed;
    union alignas( 8 )
    {
        HBITMAP hBitmap;
        HMETAFILEPICT hMetaFilePict;
        HENHMETAFILE hEnhMetaFile;
        HGLOBAL hGlobal;
        LPOLESTR lpszFileName;
        IStream* pstm;
        IStorage* pstg;
    };
    IUnknown* pUnkForRelease;
};
struct alignas( 8 ) _FLAG_STGMEDIUM
{
    LONG ContextFlags;
    LONG fPassOwnership;
    STGMEDIUM Stgmed;
};
struct alignas( 8 ) _TRANSACTION_PROPERTIES_INFORMATION
{
    DWORD IsolationLevel;
    DWORD IsolationFlags;
    LARGE_INTEGER Timeout;
    DWORD Outcome;
    DWORD DescriptionLength;
    WCHAR Description[1];
};
struct alignas( 4 ) _KCRM_MARSHAL_HEADER
{
    ULONG VersionMajor;
    ULONG VersionMinor;
    ULONG NumProtocols;
    ULONG Unused;
};
struct alignas( 4 ) _IMAGE_COFF_SYMBOLS_HEADER
{
    DWORD NumberOfSymbols;
    DWORD LvaToFirstSymbol;
    DWORD NumberOfLinenumbers;
    DWORD LvaToFirstLinenumber;
    DWORD RvaToFirstByteOfCode;
    DWORD RvaToLastByteOfCode;
    DWORD RvaToFirstByteOfData;
    DWORD RvaToLastByteOfData;
};
struct alignas( 4 ) _FPO_DATA
{
    DWORD ulOffStart;
    DWORD cbProcSize;
    DWORD cdwLocals;
    WORD cdwParams;
    WORD cbProlog : 8;
    WORD cbRegs : 3;
    WORD fHasSEH : 1;
    WORD fUseBP : 1;
    WORD reserved : 1;
    WORD cbFrame : 2;
};
struct alignas( 4 ) HPEN__
{
    int unused;
};
struct alignas( 4 ) tagEMRSTRETCHDIBITS
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD dwRop;
    LONG cxDest;
    LONG cyDest;
};
struct alignas( 8 ) _MAXVERSIONTESTED_INFO
{
    ULONGLONG MaxVersionTested;
};
struct alignas( 2 ) _SYSTEMTIME
{
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
};
struct alignas( 4 ) _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY
{
    ULONGLONG BeginAddress;
    ULONGLONG EndAddress;
    ULONGLONG ExceptionHandler;
    ULONGLONG HandlerData;
    ULONGLONG PrologEndAddress;
};
struct alignas( 4 ) _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY
{
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD ExceptionHandler;
    DWORD HandlerData;
    DWORD PrologEndAddress;
};
struct alignas( 4 ) tagAXISINFOW
{
    LONG axMinValue;
    LONG axMaxValue;
    WCHAR axAxisName[16];
};
struct alignas( 4 ) _TRANSACTION_BASIC_INFORMATION
{
    GUID TransactionId;
    DWORD State;
    DWORD Outcome;
};
struct alignas( 2 ) _IMAGE_LINENUMBER
{
    union alignas( 2 )
    {
        DWORD SymbolTableIndex;
        DWORD VirtualAddress;
    } Type;
    WORD Linenumber;
};
struct alignas( 4 ) tagEMRCREATEMONOBRUSH
{
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
};
struct alignas( 4 ) DISPLAYCONFIG_DEVICE_INFO_HEADER
{
    DISPLAYCONFIG_DEVICE_INFO_TYPE type;
    UINT32 size;
    LUID adapterId;
    UINT32 id;
};
struct alignas( 4 ) _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            UINT32 advancedColorSupported : 1;
            UINT32 advancedColorEnabled : 1;
            UINT32 wideColorEnforced : 1;
            UINT32 advancedColorForceDisabled : 1;
            UINT32 reserved : 28;
        };
        UINT32 value;
    };
    DISPLAYCONFIG_COLOR_ENCODING colorEncoding;
    UINT32 bitsPerColorChannel;
};
struct alignas( 8 ) tagCLIPDATA
{
    ULONG cbSize;
    LONG ulClipFmt;
    BYTE* pClipData;
};
struct alignas( 4 ) HFONT__
{
    int unused;
};
struct alignas( 4 ) _IMAGE_EXPORT_DIRECTORY
{
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Name;
    DWORD Base;
    DWORD NumberOfFunctions;
    DWORD NumberOfNames;
    DWORD AddressOfFunctions;
    DWORD AddressOfNames;
    DWORD AddressOfNameOrdinals;
};
struct alignas( 4 ) _IMAGE_LOAD_CONFIG_DIRECTORY64
{
    DWORD Size;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    ULONGLONG DeCommitFreeBlockThreshold;
    ULONGLONG DeCommitTotalFreeThreshold;
    ULONGLONG LockPrefixTable;
    ULONGLONG MaximumAllocationSize;
    ULONGLONG VirtualMemoryThreshold;
    ULONGLONG ProcessAffinityMask;
    DWORD ProcessHeapFlags;
    WORD CSDVersion;
    WORD DependentLoadFlags;
    ULONGLONG EditList;
    ULONGLONG SecurityCookie;
    ULONGLONG SEHandlerTable;
    ULONGLONG SEHandlerCount;
    ULONGLONG GuardCFCheckFunctionPointer;
    ULONGLONG GuardCFDispatchFunctionPointer;
    ULONGLONG GuardCFFunctionTable;
    ULONGLONG GuardCFFunctionCount;
    DWORD GuardFlags;
    IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
    ULONGLONG GuardAddressTakenIatEntryTable;
    ULONGLONG GuardAddressTakenIatEntryCount;
    ULONGLONG GuardLongJumpTargetTable;
    ULONGLONG GuardLongJumpTargetCount;
    ULONGLONG DynamicValueRelocTable;
    ULONGLONG CHPEMetadataPointer;
    ULONGLONG GuardRFFailureRoutine;
    ULONGLONG GuardRFFailureRoutineFunctionPointer;
    DWORD DynamicValueRelocTableOffset;
    WORD DynamicValueRelocTableSection;
    WORD Reserved2;
    ULONGLONG GuardRFVerifyStackPointerFunctionPointer;
    DWORD HotPatchTableOffset;
    DWORD Reserved3;
    ULONGLONG EnclaveConfigurationPointer;
    ULONGLONG VolatileMetadataPointer;
    ULONGLONG GuardEHContinuationTable;
    ULONGLONG GuardEHContinuationCount;
    ULONGLONG GuardXFGCheckFunctionPointer;
    ULONGLONG GuardXFGDispatchFunctionPointer;
    ULONGLONG GuardXFGTableDispatchFunctionPointer;
    ULONGLONG CastGuardOsDeterminedFailureMode;
    ULONGLONG GuardMemcpyFunctionPointer;
};
struct alignas( 4 ) _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            UINT32 isSpecializationEnabled : 1;
            UINT32 isSpecializationAvailableForMonitor : 1;
            UINT32 isSpecializationAvailableForSystem : 1;
            UINT32 reserved : 29;
        };
        UINT32 value;
    };
};
struct alignas( 4 ) _TAPE_WRITE_MARKS
{
    DWORD Type;
    DWORD Count;
    BOOLEAN Immediate;
};
struct alignas( 2 ) tagPOINTS
{
    SHORT x;
    SHORT y;
};
struct alignas( 4 ) _IMAGE_HOT_PATCH_BASE
{
    DWORD SequenceNumber;
    DWORD Flags;
    DWORD OriginalTimeDateStamp;
    DWORD OriginalCheckSum;
    DWORD CodeIntegrityInfo;
    DWORD CodeIntegritySize;
    DWORD PatchTable;
    DWORD BufferOffset;
};
struct alignas( 1 ) _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION
{
    WORD PageRelativeOffset : 12;
    WORD RegisterNumber : 4;
};
struct alignas( 4 ) _IMAGE_TLS_DIRECTORY32
{
    DWORD StartAddressOfRawData;
    DWORD EndAddressOfRawData;
    DWORD AddressOfIndex;
    DWORD AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    union alignas( 4 )
    {
        DWORD Characteristics;
        struct alignas( 4 )
        {
            DWORD Reserved0 : 20;
            DWORD Alignment : 4;
            DWORD Reserved1 : 8;
        };
    };
};
struct alignas( 4 ) _ABCFLOAT
{
    FLOAT abcfA;
    FLOAT abcfB;
    FLOAT abcfC;
};
struct alignas( 4 ) HDC__
{
    int unused;
};
struct alignas( 1 ) _IMAGE_DYNAMIC_RELOCATION64
{
    ULONGLONG Symbol;
    DWORD BaseRelocSize;
};
struct alignas( 8 ) DISK_SPACE_INFORMATION
{
    ULONGLONG ActualTotalAllocationUnits;
    ULONGLONG ActualAvailableAllocationUnits;
    ULONGLONG ActualPoolUnavailableAllocationUnits;
    ULONGLONG CallerTotalAllocationUnits;
    ULONGLONG CallerAvailableAllocationUnits;
    ULONGLONG CallerPoolUnavailableAllocationUnits;
    ULONGLONG UsedAllocationUnits;
    ULONGLONG TotalReservedAllocationUnits;
    ULONGLONG VolumeStorageReserveAllocationUnits;
    ULONGLONG AvailableCommittedAllocationUnits;
    ULONGLONG PoolAvailableAllocationUnits;
    DWORD SectorsPerAllocationUnit;
    DWORD BytesPerSector;
};
struct alignas( 4 ) tagEMRPOLYLINE
{
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
};
struct alignas( 4 ) tagLOGFONTA
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    CHAR lfFaceName[32];
};
struct alignas( 4 ) tagENUMLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
};
struct alignas( 4 ) tagENUMLOGFONTEXA
{
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    BYTE elfScript[32];
};
struct alignas( 4 ) _IMAGE_RESOURCE_DIRECTORY
{
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    WORD NumberOfNamedEntries;
    WORD NumberOfIdEntries;
};
struct alignas( 4 ) DPI_AWARENESS_CONTEXT__
{
    int unused;
};
struct alignas( 2 ) _IMAGE_RESOURCE_DIRECTORY_STRING
{
    WORD Length;
    CHAR NameString[1];
};
struct alignas( 4 ) tagEMRPOLYPOLYLINE
{
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cptl;
    DWORD aPolyCounts[1];
    POINTL aptl[1];
};
struct alignas( 4 ) _TAPE_GET_DRIVE_PARAMETERS
{
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD DefaultBlockSize;
    DWORD MaximumBlockSize;
    DWORD MinimumBlockSize;
    DWORD MaximumPartitionCount;
    DWORD FeaturesLow;
    DWORD FeaturesHigh;
    DWORD EOTWarningZoneSize;
};
struct alignas( 2 ) _IMAGE_RESOURCE_DIR_STRING_U
{
    WORD Length;
    WCHAR NameString[1];
};
struct alignas( 4 ) _IMAGE_RESOURCE_DATA_ENTRY
{
    DWORD OffsetToData;
    DWORD Size;
    DWORD CodePage;
    DWORD Reserved;
};
struct alignas( 4 ) _EVENTSFORLOGFILE
{
    DWORD ulSize;
    WCHAR szLogicalLogFile[256];
    DWORD ulNumRecords;
    EVENTLOGRECORD pEventLogRecords[0];
};
struct alignas( 8 ) IBindCallbackRedirect
{
};
struct alignas( 4 ) _PROCESS_POWER_THROTTLING_STATE
{
    ULONG Version;
    ULONG ControlMask;
    ULONG StateMask;
};
struct alignas( 8 ) _PROCESS_MEMORY_EXHAUSTION_INFO
{
    USHORT Version;
    USHORT Reserved;
    PROCESS_MEMORY_EXHAUSTION_TYPE Type;
    ULONG_PTR Value;
};
struct alignas( 8 ) IInternetSecurityManager
{
};
struct alignas( 4 ) tagSAFEARRAYBOUND
{
    ULONG cElements;
    LONG lLbound;
};
struct alignas( 8 ) tagARRAYDESC
{
    TYPEDESC tdescElem;
    USHORT cDims;
    SAFEARRAYBOUND rgbounds[1];
};
struct alignas( 8 ) _APC_CALLBACK_DATA
{
    ULONG_PTR Parameter;
    PCONTEXT ContextRecord;
    ULONG_PTR Reserved0;
    ULONG_PTR Reserved1;
};
struct alignas( 8 ) tagCBT_CREATEWNDA
{
    tagCREATESTRUCTA* lpcs;
    HWND hwndInsertAfter;
};
struct alignas( 4 ) tagEMRSELECTCLIPPATH
{
    EMR emr;
    DWORD iMode;
};
struct alignas( 8 ) IDropTarget
{
};
struct alignas( 8 ) WIN32_MEMORY_PARTITION_INFORMATION
{
    ULONG Flags;
    ULONG NumaNode;
    ULONG Channel;
    ULONG NumberOfNumaNodes;
    ULONG64 ResidentAvailablePages;
    ULONG64 CommittedPages;
    ULONG64 CommitLimit;
    ULONG64 PeakCommitment;
    ULONG64 TotalNumberOfPages;
    ULONG64 AvailablePages;
    ULONG64 ZeroPages;
    ULONG64 FreePages;
    ULONG64 StandbyPages;
    ULONG64 Reserved[16];
    ULONG64 MaximumCommitLimit;
    ULONG64 Reserved2;
    ULONG PartitionId;
};
struct alignas( 8 ) IParseDisplayName
{
};
struct alignas( 8 ) SHELLHOOKINFO
{
    HWND hwnd;
    RECT rc;
};
struct alignas( 4 ) tagEMRSELECTOBJECT
{
    EMR emr;
    DWORD ihObject;
};
struct alignas( 4 ) HWINSTA__
{
    int unused;
};
struct alignas( 4 ) tagEMREOF
{
    EMR emr;
    DWORD nPalEntries;
    DWORD offPalEntries;
    DWORD nSizeLast;
};
struct alignas( 4 ) tagLOGCOLORSPACEA
{
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR lcsFilename[260];
};
struct alignas( 4 ) tagEMRCREATECOLORSPACE
{
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEA lcs;
};
struct alignas( 8 ) tagSTGOPTIONS
{
    USHORT usVersion;
    USHORT reserved;
    ULONG ulSectorSize;
    const WCHAR* pwcsTemplateFile;
};
union alignas( 4 ) IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA
{
    DWORD HeaderData;
    struct alignas( 4 )
    {
        DWORD FunctionLength : 18;
        DWORD Version : 2;
        DWORD ExceptionDataPresent : 1;
        DWORD EpilogInHeader : 1;
        DWORD EpilogCount : 5;
        DWORD CodeWords : 5;
    };
};
struct alignas( 4 ) tagEMRSETCOLORSPACE
{
    EMR emr;
    DWORD ihCS;
};
;
struct alignas( 4 ) tagEMRSETICMPROFILE
{
    EMR emr;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE Data[1];
};
struct alignas( 4 ) HSPRITE__
{
    int unused;
};
struct alignas( 8 ) IDispatch
{
};
struct alignas( 8 ) IWinInetInfo
{
};
struct alignas( 8 ) _REDIRECTION_DESCRIPTOR
{
    ULONG Version;
    ULONG FunctionCount;
    PCREDIRECTION_FUNCTION_DESCRIPTOR Redirections;
};
struct alignas( 4 ) _POINTFLOAT
{
    FLOAT x;
    FLOAT y;
};
struct alignas( 4 ) _GLYPHMETRICSFLOAT
{
    FLOAT gmfBlackBoxX;
    FLOAT gmfBlackBoxY;
    POINTFLOAT gmfptGlyphOrigin;
    FLOAT gmfCellIncX;
    FLOAT gmfCellIncY;
};
struct alignas( 4 ) _NON_PAGED_DEBUG_INFO
{
    WORD Signature;
    WORD Flags;
    DWORD Size;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD SizeOfImage;
    ULONGLONG ImageBase;
};
struct alignas( 8 ) IUriContainer
{
};
struct alignas( 8 ) _HEAP_SUMMARY
{
    DWORD cb;
    SIZE_T cbAllocated;
    SIZE_T cbCommitted;
    SIZE_T cbReserved;
    SIZE_T cbMaxReserve;
};
struct alignas( 8 ) _wireBRECORD
{
    ULONG fFlags;
    ULONG clSize;
    IRecordInfo* pRecInfo;
    byte* pRecord;
};
struct alignas( 8 ) tagCAPROPVARIANT
{
    ULONG cElems;
    PROPVARIANT* pElems;
};
struct alignas( 8 ) _OVERLAPPED
{
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    union alignas( 8 )
    {
        struct alignas( 4 )
        {
            DWORD Offset;
            DWORD OffsetHigh;
        };
        PVOID Pointer;
    };
    HANDLE hEvent;
};
struct alignas( 4 ) tagEMRFILLRGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    BYTE RgnData[1];
};
struct alignas( 8 ) tagGCP_RESULTSA
{
    DWORD lStructSize;
    LPSTR lpOutString;
    UINT* lpOrder;
    int* lpDx;
    int* lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
};
struct alignas( 4 ) tagSIZE
{
    LONG cx;
    LONG cy;
};
struct alignas( 8 ) FILE_ID_DESCRIPTOR
{
    DWORD dwSize;
    FILE_ID_TYPE Type;
    union alignas( 8 )
    {
        LARGE_INTEGER FileId;
        GUID ObjectId;
        FILE_ID_128 ExtendedFileId;
    };
};
struct alignas( 2 ) tagWCRANGE
{
    WCHAR wcLow;
    USHORT cGlyphs;
};
struct alignas( 4 ) tagGLYPHSET
{
    DWORD cbThis;
    DWORD flAccel;
    DWORD cGlyphsSupported;
    DWORD cRanges;
    WCRANGE ranges[1];
};
struct alignas( 4 ) tagEXTLOGPEN32
{
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
};
struct alignas( 4 ) tagEMRCREATEDIBPATTERNBRUSHPT
{
    EMR emr;
    DWORD ihBrush;
    DWORD iUsage;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
};
struct alignas( 8 ) _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG
{
    DWORD Size;
    PCWSTR TriggerId;
};
struct alignas( 4 ) tagEMRSETVIEWPORTORGEX
{
    EMR emr;
    POINTL ptlOrigin;
};
struct alignas( 4 ) HICON__
{
    int unused;
};
struct alignas( 4 ) _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            UINT32 isSpecializationEnabled : 1;
            UINT32 reserved : 31;
        };
        UINT32 value;
    };
    GUID specializationType;
    GUID specializationSubType;
    WCHAR specializationApplicationName[128];
};
struct alignas( 4 ) tagEMRSETVIEWPORTEXTEX
{
    EMR emr;
    SIZEL szlExtent;
};
struct alignas( 4 ) tagTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
};
struct alignas( 1 ) tagPANOSE
{
    BYTE bFamilyType;
    BYTE bSerifStyle;
    BYTE bWeight;
    BYTE bProportion;
    BYTE bContrast;
    BYTE bStrokeVariation;
    BYTE bArmStyle;
    BYTE bLetterform;
    BYTE bMidline;
    BYTE bXHeight;
};
struct alignas( 8 ) _OUTLINETEXTMETRICA
{
    UINT otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
    int otmsCharSlopeRise;
    int otmsCharSlopeRun;
    int otmItalicAngle;
    UINT otmEMSquare;
    int otmAscent;
    int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
    int otmMacAscent;
    int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
    int otmsStrikeoutPosition;
    int otmsUnderscoreSize;
    int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
};
struct alignas( 4 ) HGLRC__
{
    int unused;
};
struct alignas( 4 ) tagAXESLISTW
{
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOW axlAxisInfo[16];
};
struct alignas( 4 ) tagENUMTEXTMETRICW
{
    NEWTEXTMETRICEXW etmNewTextMetricEx;
    AXESLISTW etmAxesList;
};
struct alignas( 4 ) tagEMRARC
{
    EMR emr;
    RECTL rclBox;
    POINTL ptlStart;
    POINTL ptlEnd;
};
struct alignas( 8 ) ITypeInfo
{
};
struct alignas( 8 ) tagPOLYTEXTW
{
    int x;
    int y;
    UINT n;
    LPCWSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int* pdx;
};
struct alignas( 8 ) tagACTCTX_SECTION_KEYED_DATA_2600
{
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
};
struct alignas( 8 ) tagACTCTXW
{
    ULONG cbSize;
    DWORD dwFlags;
    LPCWSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCWSTR lpAssemblyDirectory;
    LPCWSTR lpResourceName;
    LPCWSTR lpApplicationName;
    HMODULE hModule;
};
struct alignas( 4 ) tagEMRPOLYLINE16
{
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
};
union alignas( 8 ) tagBINDPTR
{
    FUNCDESC* lpfuncdesc;
    VARDESC* lpvardesc;
    ITypeComp* lptcomp;
};
struct alignas( 4 ) tagEMRPOLYDRAW16
{
    EMR emr;
    RECTL rclBounds;
    DWORD cpts;
    POINTS apts[1];
    BYTE abTypes[1];
};
struct alignas( 8 ) AsyncIMultiQI
{
};
struct alignas( 4 ) _userBITMAP
{
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    ULONG cbSize;
    byte pBuffer[1];
};
struct alignas( 4 ) _FILE_DISPOSITION_INFO_EX
{
    DWORD Flags;
};
struct alignas( 4 ) _DISPLAY_DEVICEW
{
    DWORD cb;
    WCHAR DeviceName[32];
    WCHAR DeviceString[128];
    DWORD StateFlags;
    WCHAR DeviceID[128];
    WCHAR DeviceKey[128];
};
struct alignas( 4 ) tagEXTLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture;
    PANOSE elfPanose;
};
struct alignas( 4 ) tagEMREXTCREATEFONTINDIRECTW
{
    EMR emr;
    DWORD ihFont;
    EXTLOGFONTW elfw;
};
struct alignas( 4 ) _FILE_STORAGE_INFO
{
    ULONG LogicalBytesPerSector;
    ULONG PhysicalBytesPerSectorForAtomicity;
    ULONG PhysicalBytesPerSectorForPerformance;
    ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
    ULONG Flags;
    ULONG ByteOffsetForSectorAlignment;
    ULONG ByteOffsetForPartitionAlignment;
};
struct alignas( 1 ) tagPALETTEENTRY
{
    BYTE peRed;
    BYTE peGreen;
    BYTE peBlue;
    BYTE peFlags;
};
struct alignas( 2 ) tagLOGPALETTE
{
    WORD palVersion;
    WORD palNumEntries;
    PALETTEENTRY palPalEntry[1];
};
struct alignas( 4 ) tagEMRCREATEPALETTE
{
    EMR emr;
    DWORD ihPal;
    LOGPALETTE lgpl;
};
struct alignas( 8 ) ISynchronizeEvent
{
};
struct alignas( 8 ) IRpcChannelBuffer2
{
};
struct alignas( 4 ) _FILE_REMOTE_PROTOCOL_INFO
{
    USHORT StructureVersion;
    USHORT StructureSize;
    ULONG Protocol;
    USHORT ProtocolMajorVersion;
    USHORT ProtocolMinorVersion;
    USHORT ProtocolRevision;
    USHORT Reserved;
    ULONG Flags;
    struct alignas( 4 )
    {
        ULONG Reserved[8];
    } GenericReserved;
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            struct alignas( 4 )
            {
                ULONG Capabilities;
            } Server;
            struct alignas( 4 )
            {
                ULONG Capabilities;
                ULONG ShareFlags;
            } Share;
        } Smb2;
        ULONG Reserved[16];
    } ProtocolSpecific;
};
struct alignas( 4 ) _DRAWPATRECT
{
    POINT ptPosition;
    POINT ptSize;
    WORD wStyle;
    WORD wPattern;
};
struct alignas( 4 ) _TIME_DYNAMIC_ZONE_INFORMATION
{
    LONG Bias;
    WCHAR StandardName[32];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[32];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
    WCHAR TimeZoneKeyName[128];
    BOOLEAN DynamicDaylightTimeDisabled;
};
struct alignas( 4 ) _div_t
{
    int quot;
    int rem;
};
struct alignas( 8 ) tagACTCTXA
{
    ULONG cbSize;
    DWORD dwFlags;
    LPCSTR lpSource;
    USHORT wProcessorArchitecture;
    LANGID wLangId;
    LPCSTR lpAssemblyDirectory;
    LPCSTR lpResourceName;
    LPCSTR lpApplicationName;
    HMODULE hModule;
};
struct alignas( 8 ) tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
{
    PVOID lpInformation;
    PVOID lpSectionBase;
    ULONG ulSectionLength;
    PVOID lpSectionGlobalDataBase;
    ULONG ulSectionGlobalDataLength;
};
struct alignas( 8 ) IMoniker
{
};
struct alignas( 8 ) _ACTIVATION_CONTEXT_BASIC_INFORMATION
{
    HANDLE hActCtx;
    DWORD dwFlags;
};
struct alignas( 4 ) tagEMRMODIFYWORLDTRANSFORM
{
    EMR emr;
    XFORM xform;
    DWORD iMode;
};
struct alignas( 8 ) _PROCESS_INFORMATION
{
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
};
struct alignas( 4 ) _devicemodeW
{
    WCHAR dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union alignas( 4 )
    {
        struct alignas( 2 )
        {
            short dmOrientation;
            short dmPaperSize;
            short dmPaperLength;
            short dmPaperWidth;
            short dmScale;
            short dmCopies;
            short dmDefaultSource;
            short dmPrintQuality;
        };
        struct alignas( 4 )
        {
            POINTL dmPosition;
            DWORD dmDisplayOrientation;
            DWORD dmDisplayFixedOutput;
        };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    union alignas( 4 )
    {
        DWORD dmDisplayFlags;
        DWORD dmNup;
    };
    DWORD dmDisplayFrequency;
    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;
    DWORD dmPanningWidth;
    DWORD dmPanningHeight;
};
struct alignas( 8 ) _COAUTHINFO
{
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    LPWSTR pwszServerPrincName;
    DWORD dwAuthnLevel;
    DWORD dwImpersonationLevel;
    COAUTHIDENTITY* pAuthIdentityData;
    DWORD dwCapabilities;
};
struct alignas( 8 ) _FILE_END_OF_FILE_INFO
{
    LARGE_INTEGER EndOfFile;
};
struct alignas( 8 ) ITimeAndNoticeControl
{
};
struct alignas( 8 ) _NDR_CS_ROUTINES
{
    NDR_CS_SIZE_CONVERT_ROUTINES* pSizeConvertRoutines;
    CS_TAG_GETTING_ROUTINE* pTagGettingRoutines;
};
struct alignas( 4 ) _UMS_SYSTEM_THREAD_INFORMATION
{
    ULONG UmsVersion;
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            ULONG IsUmsSchedulerThread : 1;
            ULONG IsUmsWorkerThread : 1;
        };
        ULONG ThreadUmsFlags;
    };
};
struct alignas( 8 ) _SECURITY_ATTRIBUTES
{
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
};
struct alignas( 8 ) _RESOURCEMANAGER_COMPLETION_INFORMATION
{
    HANDLE IoCompletionPortHandle;
    ULONG_PTR CompletionKey;
};
struct alignas( 2 ) tagMETAHEADER
{
    WORD mtType;
    WORD mtHeaderSize;
    WORD mtVersion;
    DWORD mtSize;
    WORD mtNoObjects;
    DWORD mtMaxRecord;
    WORD mtNoParameters;
};
struct alignas( 4 ) DISPLAYCONFIG_DESKTOP_IMAGE_INFO
{
    POINTL PathSourceSize;
    RECTL DesktopImageRegion;
    RECTL DesktopImageClip;
};
struct alignas( 8 ) _STARTUPINFOEXW
{
    STARTUPINFOW StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
};
struct alignas( 8 ) tagEVENTMSG
{
    UINT message;
    UINT paramL;
    UINT paramH;
    DWORD time;
    HWND hwnd;
};
struct alignas( 4 ) tagTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
};
struct alignas( 8 ) _NDR_USER_MARSHAL_INFO_LEVEL1
{
    void* Buffer;
    unsigned long BufferSize;
    void* ( *pfnAllocate )( size_t );
    void ( *pfnFree )( void* );
    IRpcChannelBuffer* pRpcChannelBuffer;
    ULONG_PTR Reserved[5];
};
struct alignas( 8 ) _NDR_USER_MARSHAL_INFO
{
    unsigned long InformationLevel;
    union alignas( 8 )
    {
        NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
    };
};
struct alignas( 2 ) _RPC_VERSION
{
    unsigned short MajorVersion;
    unsigned short MinorVersion;
};
struct alignas( 4 ) _RPC_SYNTAX_IDENTIFIER
{
    GUID SyntaxGUID;
    RPC_VERSION SyntaxVersion;
};
struct alignas( 8 ) _MIDL_SYNTAX_INFO
{
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    RPC_DISPATCH_TABLE* DispatchTable;
    PFORMAT_STRING ProcString;
    unsigned short* FmtStringOffset;
    PFORMAT_STRING TypeString;
    void* aUserMarshalQuadruple;
    const MIDL_INTERFACE_METHOD_PROPERTIES* pMethodProperties;
    ULONG_PTR pReserved2;
};
struct alignas( 8 ) IEnumMoniker
{
};
struct alignas( 8 ) COPYFILE2_EXTENDED_PARAMETERS_V2
{
    DWORD dwSize;
    DWORD dwCopyFlags;
    BOOL* pfCancel;
    PCOPYFILE2_PROGRESS_ROUTINE pProgressRoutine;
    PVOID pvCallbackContext;
    DWORD dwCopyFlagsV2;
    ULONG ioDesiredSize;
    ULONG ioDesiredRate;
    PVOID reserved[8];
};
struct alignas( 4 ) tagHW_PROFILE_INFOA
{
    DWORD dwDockInfo;
    CHAR szHwProfileGuid[39];
    CHAR szHwProfileName[80];
};
struct alignas( 8 ) _REDIRECTION_FUNCTION_DESCRIPTOR
{
    PCSTR DllName;
    PCSTR FunctionName;
    PVOID RedirectionTarget;
};
struct alignas( 8 ) IAddrTrackingControl
{
};
struct alignas( 4 ) _DCB
{
    DWORD DCBlength;
    DWORD BaudRate;
    DWORD fBinary : 1;
    DWORD fParity : 1;
    DWORD fOutxCtsFlow : 1;
    DWORD fOutxDsrFlow : 1;
    DWORD fDtrControl : 2;
    DWORD fDsrSensitivity : 1;
    DWORD fTXContinueOnXoff : 1;
    DWORD fOutX : 1;
    DWORD fInX : 1;
    DWORD fErrorChar : 1;
    DWORD fNull : 1;
    DWORD fRtsControl : 2;
    DWORD fAbortOnError : 1;
    DWORD fDummy2 : 17;
    WORD wReserved;
    WORD XonLim;
    WORD XoffLim;
    BYTE ByteSize;
    BYTE Parity;
    BYTE StopBits;
    char XonChar;
    char XoffChar;
    char ErrorChar;
    char EofChar;
    char EvtChar;
    WORD wReserved1;
};
struct alignas( 4 ) _COMMCONFIG
{
    DWORD dwSize;
    WORD wVersion;
    WORD wReserved;
    DCB dcb;
    DWORD dwProviderSubType;
    DWORD dwProviderOffset;
    DWORD dwProviderSize;
    WCHAR wcProviderData[1];
};
struct alignas( 4 ) HINSTANCE__
{
    int unused;
};
struct alignas( 4 ) tagMETARECORD
{
    DWORD rdSize;
    WORD rdFunction;
    WORD rdParm[1];
};
struct alignas( 2 ) _COMM_FAULT_OFFSETS
{
    short CommOffset;
    short FaultOffset;
};
union alignas( 8 ) __MIDL_IWinTypes_0005
{
    LONG hInproc;
    remoteMETAFILEPICT* hRemote;
    long long hInproc64;
};
struct alignas( 8 ) ISequentialStream
{
};
struct alignas( 4 ) DISPLAYCONFIG_2DREGION
{
    UINT32 cx;
    UINT32 cy;
};
struct alignas( 4 ) tagDESIGNVECTOR
{
    DWORD dvReserved;
    DWORD dvNumAxes;
    LONG dvValues[16];
};
struct alignas( 4 ) _FILE_ALIGNMENT_INFO
{
    ULONG AlignmentRequirement;
};
union alignas( 8 ) __MIDL_IWinTypes_0007
{
    LONG hInproc;
    userBITMAP* hRemote;
    long long hInproc64;
};
struct alignas( 8 ) IAsyncManager
{
};
struct alignas( 4 ) DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS
{
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            UINT32 friendlyNameFromEdid : 1;
            UINT32 friendlyNameForced : 1;
            UINT32 edidIdsValid : 1;
            UINT32 reserved : 29;
        };
        UINT32 value;
    };
};
struct alignas( 4 ) DISPLAYCONFIG_TARGET_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS flags;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY outputTechnology;
    UINT16 edidManufactureId;
    UINT16 edidProductCodeId;
    UINT32 connectorInstance;
    WCHAR monitorFriendlyDeviceName[64];
    WCHAR monitorDevicePath[128];
};
struct alignas( 8 ) IPersistStream
{
};
struct alignas( 4 ) tagENUMLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
};
struct alignas( 8 ) _lldiv_t
{
    long long quot;
    long long rem;
};
struct alignas( 4 ) tagEXTLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE elfFullName[64];
    BYTE elfStyle[32];
    DWORD elfVersion;
    DWORD elfStyleSize;
    DWORD elfMatch;
    DWORD elfReserved;
    BYTE elfVendorId[4];
    DWORD elfCulture;
    PANOSE elfPanose;
};
struct alignas( 8 ) ILayoutStorage
{
};
struct alignas( 4 ) _RGNDATAHEADER
{
    DWORD dwSize;
    DWORD iType;
    DWORD nCount;
    DWORD nRgnSize;
    RECT rcBound;
};
struct alignas( 4 ) _RGNDATA
{
    RGNDATAHEADER rdh;
    char Buffer[1];
};
struct alignas( 8 ) _FILE_STREAM_INFO
{
    DWORD NextEntryOffset;
    DWORD StreamNameLength;
    LARGE_INTEGER StreamSize;
    LARGE_INTEGER StreamAllocationSize;
    WCHAR StreamName[1];
};
struct alignas( 8 ) IClassActivator
{
};
struct alignas( 8 ) ISurrogate
{
};
struct alignas( 8 ) SChannelHookCallInfo
{
    IID iid;
    DWORD cbSize;
    GUID uCausality;
    DWORD dwServerPid;
    DWORD iMethod;
    void* pObject;
};
struct alignas( 4 ) tagEMRRESIZEPALETTE
{
    EMR emr;
    DWORD ihPal;
    DWORD cEntries;
};
struct alignas( 8 ) IWaitMultiple
{
};
struct alignas( 4 ) tagBITMAPINFOHEADER
{
    DWORD biSize;
    LONG biWidth;
    LONG biHeight;
    WORD biPlanes;
    WORD biBitCount;
    DWORD biCompression;
    DWORD biSizeImage;
    LONG biXPelsPerMeter;
    LONG biYPelsPerMeter;
    DWORD biClrUsed;
    DWORD biClrImportant;
};
struct alignas( 4 ) tagLOCALESIGNATURE
{
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
};
struct alignas( 8 ) ISupportAllowLowerTrustActivation
{
};
struct alignas( 4 ) tagEMRRESTOREDC
{
    EMR emr;
    LONG iRelative;
};
struct alignas( 4 ) DISPLAYCONFIG_SOURCE_MODE
{
    UINT32 width;
    UINT32 height;
    DISPLAYCONFIG_PIXELFORMAT pixelFormat;
    POINTL position;
};
struct alignas( 4 ) _DISPLAY_DEVICEA
{
    DWORD cb;
    CHAR DeviceName[32];
    CHAR DeviceString[128];
    DWORD StateFlags;
    CHAR DeviceID[128];
    CHAR DeviceKey[128];
};
struct alignas( 8 ) tagBITMAP
{
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    LPVOID bmBits;
};
struct alignas( 8 ) tagDIBSECTION
{
    BITMAP dsBm;
    BITMAPINFOHEADER dsBmih;
    DWORD dsBitfields[3];
    HANDLE dshSection;
    DWORD dsOffset;
};
struct alignas( 4 ) tagEMRSETDIBITSTODEVICE
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG xSrc;
    LONG ySrc;
    LONG cxSrc;
    LONG cySrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    DWORD iUsageSrc;
    DWORD iStartScan;
    DWORD cScans;
};
struct alignas( 8 ) tagIMEMENUITEMINFOW
{
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    WCHAR szString[80];
    HBITMAP hbmpItem;
};
struct alignas( 4 ) _STORAGE_IDENTIFIER
{
    STORAGE_IDENTIFIER_CODE_SET CodeSet;
    STORAGE_IDENTIFIER_TYPE Type;
    WORD IdentifierSize;
    WORD NextOffset;
    STORAGE_ASSOCIATION_TYPE Association;
    BYTE Identifier[1];
};
struct alignas( 4 ) _COMMPROP
{
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
};
struct alignas( 4 ) tagLOGPEN
{
    UINT lopnStyle;
    POINT lopnWidth;
    COLORREF lopnColor;
};
struct alignas( 4 ) tagEMRCREATEPEN
{
    EMR emr;
    DWORD ihPen;
    LOGPEN lopn;
};
struct alignas( 8 ) DISPLAYCONFIG_VIDEO_SIGNAL_INFO
{
    UINT64 pixelRate;
    DISPLAYCONFIG_RATIONAL hSyncFreq;
    DISPLAYCONFIG_RATIONAL vSyncFreq;
    DISPLAYCONFIG_2DREGION activeSize;
    DISPLAYCONFIG_2DREGION totalSize;
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            UINT32 videoStandard : 16;
            UINT32 vSyncFreqDivider : 6;
            UINT32 reserved : 10;
        } AdditionalSignalInfo;
        UINT32 videoStandard;
    };
    DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
};
struct alignas( 4 ) _COMSTAT
{
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
};
struct alignas( 8 ) tagKBDLLHOOKSTRUCT
{
    DWORD vkCode;
    DWORD scanCode;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
};
struct alignas( 4 ) _STORAGE_CRYPTO_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    DWORD NumKeysSupported;
    DWORD NumCryptoCapabilities;
    STORAGE_CRYPTO_CAPABILITY CryptoCapabilities[1];
};
struct alignas( 8 ) DISPLAYCONFIG_TARGET_MODE
{
    DISPLAYCONFIG_VIDEO_SIGNAL_INFO targetVideoSignalInfo;
};
struct alignas( 8 ) DISPLAYCONFIG_TARGET_PREFERRED_MODE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    UINT32 width;
    UINT32 height;
    DISPLAYCONFIG_TARGET_MODE targetMode;
};
struct alignas( 4 ) _COMMTIMEOUTS
{
    DWORD ReadIntervalTimeout;
    DWORD ReadTotalTimeoutMultiplier;
    DWORD ReadTotalTimeoutConstant;
    DWORD WriteTotalTimeoutMultiplier;
    DWORD WriteTotalTimeoutConstant;
};
struct alignas( 8 ) tagMSLLHOOKSTRUCT
{
    POINT pt;
    DWORD mouseData;
    DWORD flags;
    DWORD time;
    ULONG_PTR dwExtraInfo;
};
struct alignas( 4 ) tagEMRFILLPATH
{
    EMR emr;
    RECTL rclBounds;
};
struct alignas( 4 ) DISPLAYCONFIG_TARGET_BASE_TYPE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY baseOutputTechnology;
};
struct alignas( 8 ) tagCBT_CREATEWNDW
{
    tagCREATESTRUCTW* lpcs;
    HWND hwndInsertAfter;
};
struct alignas( 4 ) tagEMRSETTEXTCOLOR
{
    EMR emr;
    COLORREF crColor;
};
struct alignas( 8 ) _MEMORYSTATUS
{
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
};
struct alignas( 8 ) _JIT_DEBUG_INFO
{
    DWORD dwSize;
    DWORD dwProcessorArchitecture;
    DWORD dwThreadID;
    DWORD dwReserved0;
    ULONG64 lpExceptionAddress;
    ULONG64 lpExceptionRecord;
    ULONG64 lpContextRecord;
};
struct alignas( 8 ) tagCBTACTIVATESTRUCT
{
    BOOL fMouse;
    HWND hWndActive;
};
struct alignas( 8 ) DISPLAYCONFIG_MODE_INFO
{
    DISPLAYCONFIG_MODE_INFO_TYPE infoType;
    UINT32 id;
    LUID adapterId;
    union alignas( 8 )
    {
        DISPLAYCONFIG_TARGET_MODE targetMode;
        DISPLAYCONFIG_SOURCE_MODE sourceMode;
        DISPLAYCONFIG_DESKTOP_IMAGE_INFO desktopImageInfo;
    };
};
struct alignas( 4 ) SC_HANDLE__
{
    int unused;
};
struct alignas( 2 ) _OFSTRUCT
{
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
};
struct alignas( 8 ) _UMS_SCHEDULER_STARTUP_INFO
{
    ULONG UmsVersion;
    PUMS_COMPLETION_LIST CompletionList;
    PUMS_SCHEDULER_ENTRY_POINT SchedulerProc;
    PVOID SchedulerParam;
};
struct alignas( 4 ) DISPLAYCONFIG_SOURCE_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    WCHAR viewGdiDeviceName[32];
};
struct alignas( 4 ) tagEMRGDICOMMENT
{
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
};
struct alignas( 4 ) _MINIDUMP_THREAD_NAME
{
    ULONG ThreadId;
    RVA64 RvaOfThreadName;
};
struct alignas( 4 ) _MINIDUMP_THREAD_NAME_LIST
{
    ULONG NumberOfThreadNames;
    MINIDUMP_THREAD_NAME ThreadNames[0];
};
struct alignas( 4 ) tagENUMLOGFONTEXW
{
    LOGFONTW elfLogFont;
    WCHAR elfFullName[64];
    WCHAR elfStyle[32];
    WCHAR elfScript[32];
};
struct alignas( 4 ) tagENUMLOGFONTEXDVW
{
    ENUMLOGFONTEXW elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
};
struct alignas( 8 ) _REMOTE_NAME_INFOW
{
    LPWSTR lpUniversalName;
    LPWSTR lpConnectionName;
    LPWSTR lpRemainingPath;
};
struct alignas( 4 ) tagAXISINFOA
{
    LONG axMinValue;
    LONG axMaxValue;
    BYTE axAxisName[16];
};
struct alignas( 4 ) tagAXESLISTA
{
    DWORD axlReserved;
    DWORD axlNumAxes;
    AXISINFOA axlAxisInfo[16];
};
struct alignas( 4 ) tagENUMTEXTMETRICA
{
    NEWTEXTMETRICEXA etmNewTextMetricEx;
    AXESLISTA etmAxesList;
};
struct alignas( 8 ) _DOCINFOA
{
    int cbSize;
    LPCSTR lpszDocName;
    LPCSTR lpszOutput;
    LPCSTR lpszDatatype;
    DWORD fwType;
};
struct alignas( 8 ) _WIN32_STREAM_ID
{
    DWORD dwStreamId;
    DWORD dwStreamAttributes;
    LARGE_INTEGER Size;
    DWORD dwStreamNameSize;
    WCHAR cStreamName[1];
};
struct alignas( 4 ) _STORAGE_DESCRIPTOR_HEADER
{
    DWORD Version;
    DWORD Size;
};
struct alignas( 8 ) _DOCINFOW
{
    int cbSize;
    LPCWSTR lpszDocName;
    LPCWSTR lpszOutput;
    LPCWSTR lpszDatatype;
    DWORD fwType;
};
struct alignas( 8 ) _STARTUPINFOEXA
{
    STARTUPINFOA StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
};
struct alignas( 4 ) _GRADIENT_TRIANGLE
{
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
};
struct alignas( 4 ) DISPLAYCONFIG_PATH_SOURCE_INFO
{
    LUID adapterId;
    UINT32 id;
    union alignas( 4 )
    {
        UINT32 modeInfoIdx;
        struct alignas( 4 )
        {
            UINT32 cloneGroupId : 16;
            UINT32 sourceModeInfoIdx : 16;
        };
    };
    UINT32 statusFlags;
};
struct alignas( 8 ) _QUERY_SERVICE_LOCK_STATUSW
{
    DWORD fIsLocked;
    LPWSTR lpLockOwner;
    DWORD dwLockDuration;
};
struct alignas( 4 ) tagEMRCREATECOLORSPACEW
{
    EMR emr;
    DWORD ihCS;
    LOGCOLORSPACEW lcs;
    DWORD dwFlags;
    DWORD cbData;
    BYTE Data[1];
};
struct alignas( 4 ) tagEMRSETPALETTEENTRIES
{
    EMR emr;
    DWORD ihPal;
    DWORD iStart;
    DWORD cEntries;
    PALETTEENTRY aPalEntries[1];
};
struct alignas( 4 ) _GRADIENT_RECT
{
    ULONG UpperLeft;
    ULONG LowerRight;
};
struct alignas( 4 ) tagEMRGLSBOUNDEDRECORD
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbData;
    BYTE Data[1];
};
struct alignas( 4 ) tagEMRSETWORLDTRANSFORM
{
    EMR emr;
    XFORM xform;
};
struct alignas( 8 ) COPYFILE2_MESSAGE
{
    COPYFILE2_MESSAGE_TYPE Type;
    DWORD dwPadding;
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            DWORD dwStreamNumber;
            DWORD dwReserved;
            HANDLE hSourceFile;
            HANDLE hDestinationFile;
            ULARGE_INTEGER uliChunkNumber;
            ULARGE_INTEGER uliChunkSize;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliTotalFileSize;
        } ChunkStarted;
        struct alignas( 8 )
        {
            DWORD dwStreamNumber;
            DWORD dwFlags;
            HANDLE hSourceFile;
            HANDLE hDestinationFile;
            ULARGE_INTEGER uliChunkNumber;
            ULARGE_INTEGER uliChunkSize;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliStreamBytesTransferred;
            ULARGE_INTEGER uliTotalFileSize;
            ULARGE_INTEGER uliTotalBytesTransferred;
        } ChunkFinished;
        struct alignas( 8 )
        {
            DWORD dwStreamNumber;
            DWORD dwReserved;
            HANDLE hSourceFile;
            HANDLE hDestinationFile;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliTotalFileSize;
        } StreamStarted;
        struct alignas( 8 )
        {
            DWORD dwStreamNumber;
            DWORD dwReserved;
            HANDLE hSourceFile;
            HANDLE hDestinationFile;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliStreamBytesTransferred;
            ULARGE_INTEGER uliTotalFileSize;
            ULARGE_INTEGER uliTotalBytesTransferred;
        } StreamFinished;
        struct alignas( 4 )
        {
            DWORD dwReserved;
        } PollContinue;
        struct alignas( 8 )
        {
            COPYFILE2_COPY_PHASE CopyPhase;
            DWORD dwStreamNumber;
            HRESULT hrFailure;
            DWORD dwReserved;
            ULARGE_INTEGER uliChunkNumber;
            ULARGE_INTEGER uliStreamSize;
            ULARGE_INTEGER uliStreamBytesTransferred;
            ULARGE_INTEGER uliTotalFileSize;
            ULARGE_INTEGER uliTotalBytesTransferred;
        } Error;
    } Info;
};
struct alignas( 4 ) _MINIDUMP_PROCESS_VM_COUNTERS_2
{
    USHORT Revision;
    USHORT Flags;
    ULONG PageFaultCount;
    ULONG64 PeakWorkingSetSize;
    ULONG64 WorkingSetSize;
    ULONG64 QuotaPeakPagedPoolUsage;
    ULONG64 QuotaPagedPoolUsage;
    ULONG64 QuotaPeakNonPagedPoolUsage;
    ULONG64 QuotaNonPagedPoolUsage;
    ULONG64 PagefileUsage;
    ULONG64 PeakPagefileUsage;
    ULONG64 PeakVirtualSize;
    ULONG64 VirtualSize;
    ULONG64 PrivateUsage;
    ULONG64 PrivateWorkingSetSize;
    ULONG64 SharedCommitUsage;
    ULONG64 JobSharedCommitUsage;
    ULONG64 JobPrivateCommitUsage;
    ULONG64 JobPeakPrivateCommitUsage;
    ULONG64 JobPrivateCommitLimit;
    ULONG64 JobTotalCommitLimit;
};
struct alignas( 8 ) _SERVICE_NOTIFY_2W
{
    DWORD dwVersion;
    PFN_SC_NOTIFY_CALLBACK pfnNotifyCallback;
    PVOID pContext;
    DWORD dwNotificationStatus;
    SERVICE_STATUS_PROCESS ServiceStatus;
    DWORD dwNotificationTriggered;
    LPWSTR pszServiceNames;
};
struct alignas( 8 ) _SERVICE_FAILURE_ACTIONSW
{
    DWORD dwResetPeriod;
    LPWSTR lpRebootMsg;
    LPWSTR lpCommand;
    DWORD cActions;
    SC_ACTION* lpsaActions;
};
struct alignas( 4 ) tagEMREXTFLOODFILL
{
    EMR emr;
    POINTL ptlStart;
    COLORREF crColor;
    DWORD iMode;
};
struct alignas( 4 ) tagHELPWININFOW
{
    int wStructSize;
    int x;
    int y;
    int dx;
    int dy;
    int wMax;
    WCHAR rgchMember[2];
};
struct alignas( 8 ) COPYFILE2_EXTENDED_PARAMETERS
{
    DWORD dwSize;
    DWORD dwCopyFlags;
    BOOL* pfCancel;
    PCOPYFILE2_PROGRESS_ROUTINE pProgressRoutine;
    PVOID pvCallbackContext;
};
struct alignas( 4 ) tagEMRELLIPSE
{
    EMR emr;
    RECTL rclBox;
};
struct alignas( 4 ) _EVENTLOG_FULL_INFORMATION
{
    DWORD dwFull;
};
struct alignas( 4 ) _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    DWORD BytesPerCacheLine;
    DWORD BytesOffsetForCacheAlignment;
    DWORD BytesPerLogicalSector;
    DWORD BytesPerPhysicalSector;
    DWORD BytesOffsetForSectorAlignment;
};
struct alignas( 4 ) tagKERNINGPAIR
{
    WORD wFirst;
    WORD wSecond;
    int iKernAmount;
};
struct alignas( 4 ) _OPERATION_START_PARAMETERS
{
    ULONG Version;
    OPERATION_ID OperationId;
    ULONG Flags;
};
struct alignas( 4 ) _SERVICE_PRESHUTDOWN_INFO
{
    DWORD dwPreshutdownTimeout;
};
struct alignas( 4 ) _OPERATION_END_PARAMETERS
{
    ULONG Version;
    OPERATION_ID OperationId;
    ULONG Flags;
};
struct alignas( 4 ) tagEMRALPHABLEND
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
};
struct alignas( 4 ) _MINIDUMP_SYSTEM_BASIC_INFORMATION
{
    ULONG TimerResolution;
    ULONG PageSize;
    ULONG NumberOfPhysicalPages;
    ULONG LowestPhysicalPageNumber;
    ULONG HighestPhysicalPageNumber;
    ULONG AllocationGranularity;
    ULONG64 MinimumUserModeAddress;
    ULONG64 MaximumUserModeAddress;
    ULONG64 ActiveProcessorsAffinityMask;
    ULONG NumberOfProcessors;
};
struct alignas( 4 ) _MINIDUMP_SYSTEM_FILECACHE_INFORMATION
{
    ULONG64 CurrentSize;
    ULONG64 PeakSize;
    ULONG PageFaultCount;
    ULONG64 MinimumWorkingSet;
    ULONG64 MaximumWorkingSet;
    ULONG64 CurrentSizeIncludingTransitionInPages;
    ULONG64 PeakSizeIncludingTransitionInPages;
    ULONG TransitionRePurposeCount;
    ULONG Flags;
};
struct alignas( 4 ) _MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION
{
    ULONG64 AvailablePages;
    ULONG64 CommittedPages;
    ULONG64 CommitLimit;
    ULONG64 PeakCommitment;
};
struct alignas( 4 ) _MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION
{
    ULONG64 IdleProcessTime;
    ULONG64 IoReadTransferCount;
    ULONG64 IoWriteTransferCount;
    ULONG64 IoOtherTransferCount;
    ULONG IoReadOperationCount;
    ULONG IoWriteOperationCount;
    ULONG IoOtherOperationCount;
    ULONG AvailablePages;
    ULONG CommittedPages;
    ULONG CommitLimit;
    ULONG PeakCommitment;
    ULONG PageFaultCount;
    ULONG CopyOnWriteCount;
    ULONG TransitionCount;
    ULONG CacheTransitionCount;
    ULONG DemandZeroCount;
    ULONG PageReadCount;
    ULONG PageReadIoCount;
    ULONG CacheReadCount;
    ULONG CacheIoCount;
    ULONG DirtyPagesWriteCount;
    ULONG DirtyWriteIoCount;
    ULONG MappedPagesWriteCount;
    ULONG MappedWriteIoCount;
    ULONG PagedPoolPages;
    ULONG NonPagedPoolPages;
    ULONG PagedPoolAllocs;
    ULONG PagedPoolFrees;
    ULONG NonPagedPoolAllocs;
    ULONG NonPagedPoolFrees;
    ULONG FreeSystemPtes;
    ULONG ResidentSystemCodePage;
    ULONG TotalSystemDriverPages;
    ULONG TotalSystemCodePages;
    ULONG NonPagedPoolLookasideHits;
    ULONG PagedPoolLookasideHits;
    ULONG AvailablePagedPoolPages;
    ULONG ResidentSystemCachePage;
    ULONG ResidentPagedPoolPage;
    ULONG ResidentSystemDriverPage;
    ULONG CcFastReadNoWait;
    ULONG CcFastReadWait;
    ULONG CcFastReadResourceMiss;
    ULONG CcFastReadNotPossible;
    ULONG CcFastMdlReadNoWait;
    ULONG CcFastMdlReadWait;
    ULONG CcFastMdlReadResourceMiss;
    ULONG CcFastMdlReadNotPossible;
    ULONG CcMapDataNoWait;
    ULONG CcMapDataWait;
    ULONG CcMapDataNoWaitMiss;
    ULONG CcMapDataWaitMiss;
    ULONG CcPinMappedDataCount;
    ULONG CcPinReadNoWait;
    ULONG CcPinReadWait;
    ULONG CcPinReadNoWaitMiss;
    ULONG CcPinReadWaitMiss;
    ULONG CcCopyReadNoWait;
    ULONG CcCopyReadWait;
    ULONG CcCopyReadNoWaitMiss;
    ULONG CcCopyReadWaitMiss;
    ULONG CcMdlReadNoWait;
    ULONG CcMdlReadWait;
    ULONG CcMdlReadNoWaitMiss;
    ULONG CcMdlReadWaitMiss;
    ULONG CcReadAheadIos;
    ULONG CcLazyWriteIos;
    ULONG CcLazyWritePages;
    ULONG CcDataFlushes;
    ULONG CcDataPages;
    ULONG ContextSwitches;
    ULONG FirstLevelTbFills;
    ULONG SecondLevelTbFills;
    ULONG SystemCalls;
    ULONG64 CcTotalDirtyPages;
    ULONG64 CcDirtyPageThreshold;
    LONG64 ResidentAvailablePages;
    ULONG64 SharedCommittedPages;
};
struct alignas( 4 ) _MINIDUMP_SYSTEM_MEMORY_INFO_1
{
    USHORT Revision;
    USHORT Flags;
    MINIDUMP_SYSTEM_BASIC_INFORMATION BasicInfo;
    MINIDUMP_SYSTEM_FILECACHE_INFORMATION FileCacheInfo;
    MINIDUMP_SYSTEM_BASIC_PERFORMANCE_INFORMATION BasicPerfInfo;
    MINIDUMP_SYSTEM_PERFORMANCE_INFORMATION PerfInfo;
};
struct alignas( 4 ) _STORAGE_FAILURE_PREDICTION_CONFIG
{
    DWORD Version;
    DWORD Size;
    BOOLEAN Set;
    BOOLEAN Enabled;
    WORD Reserved;
};
struct alignas( 4 ) tagHW_PROFILE_INFOW
{
    DWORD dwDockInfo;
    WCHAR szHwProfileGuid[39];
    WCHAR szHwProfileName[80];
};
union alignas( 8 ) _RPC_ASYNC_NOTIFICATION_INFO
{
    struct alignas( 8 )
    {
        PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
        HANDLE hThread;
    } APC;
    struct alignas( 8 )
    {
        HANDLE hIOPort;
        DWORD dwNumberOfBytesTransferred;
        DWORD_PTR dwCompletionKey;
        LPOVERLAPPED lpOverlapped;
    } IOC;
    struct alignas( 8 )
    {
        HWND hWnd;
        UINT Msg;
    } HWND;
    HANDLE hEvent;
    PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
};
struct alignas( 8 ) _RPC_ASYNC_STATE
{
    unsigned int Size;
    unsigned long Signature;
    long Lock;
    unsigned long Flags;
    void* StubInfo;
    void* UserInfo;
    void* RuntimeInfo;
    RPC_ASYNC_EVENT Event;
    RPC_NOTIFICATION_TYPES NotificationType;
    RPC_ASYNC_NOTIFICATION_INFO u;
    LONG_PTR Reserved[4];
};
struct alignas( 4 ) tagEMRBITBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
};
struct alignas( 4 ) _TIME_ZONE_INFORMATION
{
    LONG Bias;
    WCHAR StandardName[32];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[32];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
};
struct alignas( 4 ) _MINIDUMP_LOCATION_DESCRIPTOR
{
    ULONG32 DataSize;
    RVA Rva;
};
struct alignas( 4 ) _MINIDUMP_MODULE
{
    ULONG64 BaseOfImage;
    ULONG32 SizeOfImage;
    ULONG32 CheckSum;
    ULONG32 TimeDateStamp;
    RVA ModuleNameRva;
    VS_FIXEDFILEINFO VersionInfo;
    MINIDUMP_LOCATION_DESCRIPTOR CvRecord;
    MINIDUMP_LOCATION_DESCRIPTOR MiscRecord;
    ULONG64 Reserved0;
    ULONG64 Reserved1;
};
struct alignas( 4 ) _MINIDUMP_MODULE_LIST
{
    ULONG32 NumberOfModules;
    MINIDUMP_MODULE Modules[0];
};
struct alignas( 8 ) _UUID_VECTOR
{
    unsigned long Count;
    UUID* Uuid[1];
};
struct alignas( 4 ) _SYSTEM_POWER_STATUS
{
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE SystemStatusFlag;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
};
struct alignas( 4 ) tagTTPOLYGONHEADER
{
    DWORD cb;
    DWORD dwType;
    POINTFX pfxStart;
};
struct alignas( 2 ) _CONSOLE_SCREEN_BUFFER_INFO
{
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
};
struct alignas( 8 ) tagMETAFILEPICT
{
    LONG mm;
    LONG xExt;
    LONG yExt;
    HMETAFILE hMF;
};
struct alignas( 4 ) tagEMRPOLYPOLYLINE16
{
    EMR emr;
    RECTL rclBounds;
    DWORD nPolys;
    DWORD cpts;
    DWORD aPolyCounts[1];
    POINTS apts[1];
};
struct alignas( 8 ) _numberfmtA
{
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
};
struct alignas( 4 ) tagEMRANGLEARC
{
    EMR emr;
    POINTL ptlCenter;
    DWORD nRadius;
    FLOAT eStartAngle;
    FLOAT eSweepAngle;
};
struct alignas( 8 ) tagPOLYTEXTA
{
    int x;
    int y;
    UINT n;
    LPCSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int* pdx;
};
struct alignas( 1 ) tagRGBTRIPLE
{
    BYTE rgbtBlue;
    BYTE rgbtGreen;
    BYTE rgbtRed;
};
struct alignas( 2 ) tagBITMAPFILEHEADER
{
    WORD bfType;
    DWORD bfSize;
    WORD bfReserved1;
    WORD bfReserved2;
    DWORD bfOffBits;
};
struct alignas( 4 ) _STORAGE_RPMB_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    DWORD SizeInBytes;
    DWORD MaxReliableWriteSizeInBytes;
    STORAGE_RPMB_FRAME_TYPE FrameFormat;
};
struct alignas( 4 ) tagEMREXTTEXTOUTA
{
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    EMRTEXT emrtext;
};
struct alignas( 4 ) tagPIXELFORMATDESCRIPTOR
{
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerType;
    BYTE bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
};
struct alignas( 4 ) tagRECONVERTSTRING
{
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwStrLen;
    DWORD dwStrOffset;
    DWORD dwCompStrLen;
    DWORD dwCompStrOffset;
    DWORD dwTargetStrLen;
    DWORD dwTargetStrOffset;
};
struct alignas( 4 ) tagEMRPOLYTEXTOUTA
{
    EMR emr;
    RECTL rclBounds;
    DWORD iGraphicsMode;
    FLOAT exScale;
    FLOAT eyScale;
    LONG cStrings;
    EMRTEXT aemrtext[1];
};
struct alignas( 4 ) _XSTATE_CONFIG_FEATURE_MSC_INFO
{
    ULONG32 SizeOfInfo;
    ULONG32 ContextSize;
    ULONG64 EnabledFeatures;
    XSTATE_FEATURE Features[64];
};
struct alignas( 4 ) _MINIDUMP_MISC_INFO_5
{
    ULONG32 SizeOfInfo;
    ULONG32 Flags1;
    ULONG32 ProcessId;
    ULONG32 ProcessCreateTime;
    ULONG32 ProcessUserTime;
    ULONG32 ProcessKernelTime;
    ULONG32 ProcessorMaxMhz;
    ULONG32 ProcessorCurrentMhz;
    ULONG32 ProcessorMhzLimit;
    ULONG32 ProcessorMaxIdleState;
    ULONG32 ProcessorCurrentIdleState;
    ULONG32 ProcessIntegrityLevel;
    ULONG32 ProcessExecuteFlags;
    ULONG32 ProtectedProcess;
    ULONG32 TimeZoneId;
    TIME_ZONE_INFORMATION TimeZone;
    WCHAR BuildString[260];
    WCHAR DbgBldStr[40];
    XSTATE_CONFIG_FEATURE_MSC_INFO XStateData;
    ULONG32 ProcessCookie;
};
struct alignas( 8 ) tagACTCTX_SECTION_KEYED_DATA
{
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
    ULONG ulFlags;
    ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
};
struct alignas( 4 ) _STORAGE_DEVICE_NUMBERS
{
    DWORD Version;
    DWORD Size;
    DWORD NumberOfDevices;
    STORAGE_DEVICE_NUMBER Devices[1];
};
struct alignas( 8 ) _DISCDLGSTRUCTW
{
    DWORD cbStructure;
    HWND hwndOwner;
    LPWSTR lpLocalName;
    LPWSTR lpRemoteName;
    DWORD dwFlags;
};
struct alignas( 4 ) _MINIDUMP_FUNCTION_TABLE_STREAM
{
    ULONG32 SizeOfHeader;
    ULONG32 SizeOfDescriptor;
    ULONG32 SizeOfNativeDescriptor;
    ULONG32 SizeOfFunctionEntry;
    ULONG32 NumberOfDescriptors;
    ULONG32 SizeOfAlignPad;
};
struct alignas( 4 ) tagEMRFORMAT
{
    DWORD dSignature;
    DWORD nVersion;
    DWORD cbData;
    DWORD offData;
};
struct alignas( 8 ) value_entW
{
    LPWSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
};
struct alignas( 8 ) _FILE_BASIC_INFO
{
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    DWORD FileAttributes;
};
struct alignas( 8 ) _FILE_STANDARD_INFO
{
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    DWORD NumberOfLinks;
    BOOLEAN DeletePending;
    BOOLEAN Directory;
};
struct alignas( 8 ) tagGCP_RESULTSW
{
    DWORD lStructSize;
    LPWSTR lpOutString;
    UINT* lpOrder;
    int* lpDx;
    int* lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
};
struct alignas( 4 ) _FILE_NAME_INFO
{
    DWORD FileNameLength;
    WCHAR FileName[1];
};
struct alignas( 8 ) tagREGISTERWORDW
{
    LPWSTR lpReading;
    LPWSTR lpWord;
};
struct alignas( 4 ) _CONSOLE_SELECTION_INFO
{
    DWORD dwFlags;
    COORD dwSelectionAnchor;
    SMALL_RECT srSelection;
};
struct alignas( 4 ) tagENHMETAHEADER
{
    DWORD iType;
    DWORD nSize;
    RECTL rclBounds;
    RECTL rclFrame;
    DWORD dSignature;
    DWORD nVersion;
    DWORD nBytes;
    DWORD nRecords;
    WORD nHandles;
    WORD sReserved;
    DWORD nDescription;
    DWORD offDescription;
    DWORD nPalEntries;
    SIZEL szlDevice;
    SIZEL szlMillimeters;
    DWORD cbPixelFormat;
    DWORD offPixelFormat;
    DWORD bOpenGL;
    SIZEL szlMicrometers;
};
struct alignas( 4 ) _FILE_CASE_SENSITIVE_INFO
{
    ULONG Flags;
};
struct alignas( 4 ) tagEMRFRAMERGN
{
    EMR emr;
    RECTL rclBounds;
    DWORD cbRgnData;
    DWORD ihBrush;
    SIZEL szlStroke;
    BYTE RgnData[1];
};
struct alignas( 8 ) _FILE_RENAME_INFO
{
    union alignas( 4 )
    {
        BOOLEAN ReplaceIfExists;
        DWORD Flags;
    };
    HANDLE RootDirectory;
    DWORD FileNameLength;
    WCHAR FileName[1];
};
struct alignas( 4 ) tagEMREXTCREATEPEN
{
    EMR emr;
    DWORD ihPen;
    DWORD offBmi;
    DWORD cbBmi;
    DWORD offBits;
    DWORD cbBits;
    EXTLOGPEN32 elp;
};
struct alignas( 8 ) _FILE_ALLOCATION_INFO
{
    LARGE_INTEGER AllocationSize;
};
struct alignas( 4 ) tagLOGBRUSH32
{
    UINT lbStyle;
    COLORREF lbColor;
    ULONG lbHatch;
};
struct alignas( 4 ) tagEMRCREATEBRUSHINDIRECT
{
    EMR emr;
    DWORD ihBrush;
    LOGBRUSH32 lb;
};
struct alignas( 8 ) tagLOGBRUSH
{
    UINT lbStyle;
    COLORREF lbColor;
    ULONG_PTR lbHatch;
};
struct alignas( 4 ) _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            UINT32 enableAdvancedColor : 1;
            UINT32 reserved : 31;
        };
        UINT32 value;
    };
};
struct alignas( 8 ) _FILE_COMPRESSION_INFO
{
    LARGE_INTEGER CompressedFileSize;
    WORD CompressionFormat;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved[3];
};
struct alignas( 4 ) _FILE_ATTRIBUTE_TAG_INFO
{
    DWORD FileAttributes;
    DWORD ReparseTag;
};
struct alignas( 1 ) _FILE_DISPOSITION_INFO
{
    BOOLEAN DeleteFileW;
};
struct alignas( 4 ) tagCHARSETINFO
{
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
};
struct alignas( 8 ) _FILE_ID_BOTH_DIR_INFO
{
    DWORD NextEntryOffset;
    DWORD FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    DWORD FileAttributes;
    DWORD FileNameLength;
    DWORD EaSize;
    CCHAR ShortNameLength;
    WCHAR ShortName[12];
    LARGE_INTEGER FileId;
    WCHAR FileName[1];
};
struct alignas( 4 ) _KEY_EVENT_RECORD
{
    BOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union alignas( 2 )
    {
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    } uChar;
    DWORD dwControlKeyState;
};
struct alignas( 2 ) _WINDOW_BUFFER_SIZE_RECORD
{
    COORD dwSize;
};
struct alignas( 4 ) _INPUT_RECORD
{
    WORD EventType;
    union alignas( 4 )
    {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    } Event;
};
struct alignas( 8 ) _FILE_FULL_DIR_INFO
{
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    WCHAR FileName[1];
};
struct alignas( 4 ) tagEMRSETPIXELV
{
    EMR emr;
    POINTL ptlPixel;
    COLORREF crColor;
};
struct alignas( 8 ) _SERVICE_CONTROL_STATUS_REASON_PARAMSA
{
    DWORD dwReason;
    LPSTR pszComment;
    SERVICE_STATUS_PROCESS ServiceStatus;
};
struct alignas( 4 ) _FILE_IO_PRIORITY_HINT_INFO
{
    PRIORITY_HINT PriorityHint;
};
struct alignas( 8 ) _SERVICE_TABLE_ENTRYW
{
    LPWSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONW lpServiceProc;
};
struct alignas( 4 ) DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            UINT32 disableMonitorVirtualResolution : 1;
            UINT32 reserved : 31;
        };
        UINT32 value;
    };
};
struct alignas( 8 ) _FILE_ID_INFO
{
    ULONGLONG VolumeSerialNumber;
    FILE_ID_128 FileId;
};
struct alignas( 1 ) tagRGBQUAD
{
    BYTE rgbBlue;
    BYTE rgbGreen;
    BYTE rgbRed;
    BYTE rgbReserved;
};
struct alignas( 8 ) _FILE_ID_EXTD_DIR_INFO
{
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    ULONG ReparsePointTag;
    FILE_ID_128 FileId;
    WCHAR FileName[1];
};
struct alignas( 4 ) tagEMRNAMEDESCAPE
{
    EMR emr;
    INT iEscape;
    INT cbDriver;
    INT cbEscData;
    BYTE EscData[1];
};
struct alignas( 4 ) tagCOLORCORRECTPALETTE
{
    EMR emr;
    DWORD ihPalette;
    DWORD nFirstEntry;
    DWORD nPalEntries;
    DWORD nReserved;
};
struct alignas( 8 ) val_context
{
    int valuelen;
    LPVOID value_context;
    LPVOID val_buff_ptr;
};
struct alignas( 4 ) _GLYPHMETRICS
{
    UINT gmBlackBoxX;
    UINT gmBlackBoxY;
    POINT gmptGlyphOrigin;
    short gmCellIncX;
    short gmCellIncY;
};
struct alignas( 8 ) tagHANDLETABLE
{
    HGDIOBJ objectHandle[1];
};
struct alignas( 4 ) _PSINJECTDATA
{
    DWORD DataBytes;
    WORD InjectionPoint;
    WORD PageNumber;
};
struct alignas( 4 ) _PSFEATURE_OUTPUT
{
    BOOL bPageIndependent;
    BOOL bSetPageDevice;
};
struct alignas( 2 ) _CHAR_INFO
{
    union alignas( 2 )
    {
        WCHAR UnicodeChar;
        CHAR AsciiChar;
    } Char;
    WORD Attributes;
};
struct alignas( 4 ) _PSFEATURE_CUSTPAPER
{
    LONG lOrientation;
    LONG lWidth;
    LONG lHeight;
    LONG lWidthOffset;
    LONG lHeightOffset;
};
struct alignas( 4 ) tagEMRROUNDRECT
{
    EMR emr;
    RECTL rclBox;
    SIZEL szlCorner;
};
struct alignas( 4 ) BITMAPV5HEADER
{
    DWORD bV5Size;
    LONG bV5Width;
    LONG bV5Height;
    WORD bV5Planes;
    WORD bV5BitCount;
    DWORD bV5Compression;
    DWORD bV5SizeImage;
    LONG bV5XPelsPerMeter;
    LONG bV5YPelsPerMeter;
    DWORD bV5ClrUsed;
    DWORD bV5ClrImportant;
    DWORD bV5RedMask;
    DWORD bV5GreenMask;
    DWORD bV5BlueMask;
    DWORD bV5AlphaMask;
    DWORD bV5CSType;
    CIEXYZTRIPLE bV5Endpoints;
    DWORD bV5GammaRed;
    DWORD bV5GammaGreen;
    DWORD bV5GammaBlue;
    DWORD bV5Intent;
    DWORD bV5ProfileData;
    DWORD bV5ProfileSize;
    DWORD bV5Reserved;
};
struct alignas( 8 ) _OUTLINETEXTMETRICW
{
    UINT otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    UINT otmfsSelection;
    UINT otmfsType;
    int otmsCharSlopeRise;
    int otmsCharSlopeRun;
    int otmItalicAngle;
    UINT otmEMSquare;
    int otmAscent;
    int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
    int otmMacAscent;
    int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
    int otmsStrikeoutPosition;
    int otmsUnderscoreSize;
    int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
};
struct alignas( 4 ) tagBITMAPINFO
{
    BITMAPINFOHEADER bmiHeader;
    RGBQUAD bmiColors[1];
};
struct alignas( 8 ) _RPC_SECURITY_QOS_V3_W
{
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
    unsigned long AdditionalSecurityInfoType;
    union alignas( 8 )
    {
        RPC_HTTP_TRANSPORT_CREDENTIALS_W* HttpCredentials;
    } u;
    void* Sid;
};
struct alignas( 4 ) tagEMRSETMITERLIMIT
{
    EMR emr;
    FLOAT eMiterLimit;
};
struct alignas( 4 ) _DEVICE_TRIM_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    BOOLEAN TrimEnabled;
};
struct alignas( 8 ) _RPC_CALL_LOCAL_ADDRESS_V1
{
    unsigned int Version;
    void* Buffer;
    unsigned long BufferSize;
    RpcLocalAddressFormat AddressFormat;
};
struct alignas( 8 ) tagCREATESTRUCTW
{
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCWSTR lpszName;
    LPCWSTR lpszClass;
    DWORD dwExStyle;
};
struct alignas( 4 ) _STORAGE_MINIPORT_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    STORAGE_PORT_CODE_SET Portdriver;
    BOOLEAN LUNResetSupported;
    BOOLEAN TargetResetSupported;
    WORD IoTimeoutValue;
    BOOLEAN ExtraIoInfoSupported;
    union alignas( 1 )
    {
        struct alignas( 1 )
        {
            BYTE LogicalPoFxForDisk : 1;
            BYTE Reserved : 7;
        };
        BYTE AsBYTE;
    } Flags;
    BYTE Reserved0[2];
    DWORD Reserved1;
};
struct alignas( 8 ) BSMINFO
{
    UINT cbSize;
    HDESK hdesk;
    HWND hwnd;
    LUID luid;
};
struct alignas( 4 ) tagBITMAPCOREHEADER
{
    DWORD bcSize;
    WORD bcWidth;
    WORD bcHeight;
    WORD bcPlanes;
    WORD bcBitCount;
};
struct alignas( 1 ) _BLENDFUNCTION
{
    BYTE BlendOp;
    BYTE BlendFlags;
    BYTE SourceConstantAlpha;
    BYTE AlphaFormat;
};
struct alignas( 4 ) _STORAGE_DEVICE_ID_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    DWORD NumberOfIdentifiers;
    BYTE Identifiers[1];
};
struct alignas( 4 ) tagEMROFFSETCLIPRGN
{
    EMR emr;
    POINTL ptlOffset;
};
struct alignas( 8 ) tagDEBUGHOOKINFO
{
    DWORD idThread;
    DWORD idThreadInstaller;
    LPARAM lParam;
    WPARAM wParam;
    int code;
};
struct alignas( 4 ) RPC_STATS_VECTOR
{
    unsigned int Count;
    unsigned long Stats[1];
};
struct alignas( 4 ) tagBITMAPCOREINFO
{
    BITMAPCOREHEADER bmciHeader;
    RGBTRIPLE bmciColors[1];
};
struct alignas( 8 ) _ENUM_SERVICE_STATUS_PROCESSA
{
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS_PROCESS ServiceStatusProcess;
};
struct alignas( 8 ) _QUERY_SERVICE_CONFIGA
{
    DWORD dwServiceType;
    DWORD dwStartType;
    DWORD dwErrorControl;
    LPSTR lpBinaryPathName;
    LPSTR lpLoadOrderGroup;
    DWORD dwTagId;
    LPSTR lpDependencies;
    LPSTR lpServiceStartName;
    LPSTR lpDisplayName;
};
struct alignas( 8 ) _WGLSWAP
{
    HDC hdc;
    UINT uiFlags;
};
struct alignas( 8 ) _QUERY_SERVICE_LOCK_STATUSA
{
    DWORD fIsLocked;
    LPSTR lpLockOwner;
    DWORD dwLockDuration;
};
struct alignas( 4 ) _MINIDUMP_THREAD_INFO
{
    ULONG32 ThreadId;
    ULONG32 DumpFlags;
    ULONG32 DumpError;
    ULONG32 ExitStatus;
    ULONG64 CreateTime;
    ULONG64 ExitTime;
    ULONG64 KernelTime;
    ULONG64 UserTime;
    ULONG64 StartAddress;
    ULONG64 Affinity;
};
struct alignas( 8 ) tagWNDCLASSEXA
{
    UINT cbSize;
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
    HICON hIconSm;
};
struct alignas( 4 ) _STORAGE_ADAPTER_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    DWORD MaximumTransferLength;
    DWORD MaximumPhysicalPages;
    DWORD AlignmentMask;
    BOOLEAN AdapterUsesPio;
    BOOLEAN AdapterScansDown;
    BOOLEAN CommandQueueing;
    BOOLEAN AcceleratedTransfer;
    BYTE BusType;
    WORD BusMajorVersion;
    WORD BusMinorVersion;
    BYTE SrbType;
    BYTE AddressType;
};
struct alignas( 4 ) tagEMRGRADIENTFILL
{
    EMR emr;
    RECTL rclBounds;
    DWORD nVer;
    DWORD nTri;
    ULONG ulMode;
    TRIVERTEX Ver[1];
};
struct alignas( 4 ) _SC_ACTION
{
    SC_ACTION_TYPE Type;
    DWORD Delay;
};
struct alignas( 8 ) tagEXTLOGPEN
{
    DWORD elpPenStyle;
    DWORD elpWidth;
    UINT elpBrushStyle;
    COLORREF elpColor;
    ULONG_PTR elpHatch;
    DWORD elpNumEntries;
    DWORD elpStyleEntry[1];
};
struct alignas( 4 ) tagEMRTRANSPARENTBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
};
struct alignas( 4 ) _STORAGE_PREDICT_FAILURE
{
    DWORD PredictFailure;
    BYTE VendorSpecific[512];
};
struct alignas( 8 ) RPC_ENDPOINT_TEMPLATEW
{
    unsigned long Version;
    RPC_WSTR ProtSeq;
    RPC_WSTR Endpoint;
    void* SecurityDescriptor;
    unsigned long Backlog;
};
struct alignas( 4 ) tagEMRSTRETCHBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG cxSrc;
    LONG cySrc;
};
struct alignas( 8 ) pvalueW
{
    LPWSTR pv_valuename;
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
};
struct alignas( 4 ) _RPC_SECURITY_QOS
{
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
};
struct alignas( 8 ) tagMSGBOXPARAMSW
{
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCWSTR lpszText;
    LPCWSTR lpszCaption;
    DWORD dwStyle;
    LPCWSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
};
struct alignas( 2 ) MENUITEMTEMPLATE
{
    WORD mtOption;
    WORD mtID;
    WCHAR mtString[1];
};
struct alignas( 8 ) _RPC_SERVER_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    void* DefaultManagerEpv;
    void* InterpreterInfo;
    unsigned int Flags;
};
struct alignas( 4 ) _STORAGE_DEVICE_NUMBER_EX
{
    DWORD Version;
    DWORD Size;
    DWORD Flags;
    DWORD DeviceType;
    DWORD DeviceNumber;
    GUID DeviceGuid;
    DWORD PartitionNumber;
};
struct alignas( 8 ) RPC_INTERFACE_TEMPLATEW
{
    unsigned long Version;
    RPC_IF_HANDLE IfSpec;
    UUID* MgrTypeUuid;
    void* MgrEpv;
    unsigned int Flags;
    unsigned int MaxCalls;
    unsigned int MaxRpcSize;
    RPC_STATUS ( *IfCallback )( RPC_IF_HANDLE, void* );
    UUID_VECTOR* UuidVector;
    RPC_WSTR Annotation;
    void* SecurityDescriptor;
};
struct alignas( 4 ) tagEMRGLSRECORD
{
    EMR emr;
    DWORD cbData;
    BYTE Data[1];
};
struct alignas( 4 ) _MINIDUMP_MEMORY_INFO_LIST
{
    ULONG SizeOfHeader;
    ULONG SizeOfEntry;
    ULONG64 NumberOfEntries;
};
struct alignas( 8 ) value_entA
{
    LPSTR ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
};
struct alignas( 4 ) _devicemodeA
{
    BYTE dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union alignas( 4 )
    {
        struct alignas( 2 )
        {
            short dmOrientation;
            short dmPaperSize;
            short dmPaperLength;
            short dmPaperWidth;
            short dmScale;
            short dmCopies;
            short dmDefaultSource;
            short dmPrintQuality;
        };
        struct alignas( 4 )
        {
            POINTL dmPosition;
            DWORD dmDisplayOrientation;
            DWORD dmDisplayFixedOutput;
        };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    union alignas( 4 )
    {
        DWORD dmDisplayFlags;
        DWORD dmNup;
    };
    DWORD dmDisplayFrequency;
    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmReserved1;
    DWORD dmReserved2;
    DWORD dmPanningWidth;
    DWORD dmPanningHeight;
};
struct alignas( 2 ) _RASTERIZER_STATUS
{
    short nSize;
    short wFlags;
    short nLanguageID;
};
struct alignas( 4 ) tagEMREXTSELECTCLIPRGN
{
    EMR emr;
    DWORD cbRgnData;
    DWORD iMode;
    BYTE RgnData[1];
};
struct alignas( 4 ) _STORAGE_HOTPLUG_INFO
{
    DWORD Size;
    BOOLEAN MediaRemovable;
    BOOLEAN MediaHotplug;
    BOOLEAN DeviceHotplug;
    BOOLEAN WriteCacheEnableOverride;
};
struct alignas( 4 ) _MODEMSETTINGS
{
    DWORD dwActualSize;
    DWORD dwRequiredSize;
    DWORD dwDevSpecificOffset;
    DWORD dwDevSpecificSize;
    DWORD dwCallSetupFailTimer;
    DWORD dwInactivityTimeout;
    DWORD dwSpeakerVolume;
    DWORD dwSpeakerMode;
    DWORD dwPreferredModemOptions;
    DWORD dwNegotiatedModemOptions;
    DWORD dwNegotiatedDCERate;
    BYTE abVariablePortion[1];
};
struct alignas( 4 ) _MODEMDEVCAPS
{
    DWORD dwActualSize;
    DWORD dwRequiredSize;
    DWORD dwDevSpecificOffset;
    DWORD dwDevSpecificSize;
    DWORD dwModemProviderVersion;
    DWORD dwModemManufacturerOffset;
    DWORD dwModemManufacturerSize;
    DWORD dwModemModelOffset;
    DWORD dwModemModelSize;
    DWORD dwModemVersionOffset;
    DWORD dwModemVersionSize;
    DWORD dwDialOptions;
    DWORD dwCallSetupFailTimer;
    DWORD dwInactivityTimeout;
    DWORD dwSpeakerVolume;
    DWORD dwSpeakerMode;
    DWORD dwModemOptions;
    DWORD dwMaxDTERate;
    DWORD dwMaxDCERate;
    BYTE abVariablePortion[1];
};
struct alignas( 4 ) _ABC
{
    int abcA;
    UINT abcB;
    int abcC;
};
struct alignas( 4 ) DISPLAYCONFIG_SET_TARGET_PERSISTENCE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            UINT32 bootPersistenceOn : 1;
            UINT32 reserved : 31;
        };
        UINT32 value;
    };
};
struct alignas( 8 ) _ETW_TRACE_PARTITION_INFORMATION
{
    GUID PartitionId;
    GUID ParentId;
    LONG64 QpcOffsetFromRoot;
    ULONG PartitionType;
};
;
struct alignas( 8 ) tagTOUCHINPUT
{
    LONG x;
    LONG y;
    HANDLE hSource;
    DWORD dwID;
    DWORD dwFlags;
    DWORD dwMask;
    DWORD dwTime;
    ULONG_PTR dwExtraInfo;
    DWORD cxContact;
    DWORD cyContact;
};
struct alignas( 4 ) DISPLAYCONFIG_PATH_INFO
{
    DISPLAYCONFIG_PATH_SOURCE_INFO sourceInfo;
    DISPLAYCONFIG_PATH_TARGET_INFO targetInfo;
    UINT32 flags;
};
struct alignas( 4 ) tagEMRPOLYDRAW
{
    EMR emr;
    RECTL rclBounds;
    DWORD cptl;
    POINTL aptl[1];
    BYTE abTypes[1];
};
struct alignas( 4 ) _CONSOLE_FONT_INFO
{
    DWORD nFont;
    COORD dwFontSize;
};
struct alignas( 4 ) HIMCC__
{
    int unused;
};
struct alignas( 8 ) _RPC_SECURITY_QOS_V2_W
{
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
    unsigned long AdditionalSecurityInfoType;
    union alignas( 8 )
    {
        RPC_HTTP_TRANSPORT_CREDENTIALS_W* HttpCredentials;
    } u;
};
struct alignas( 4 ) DISPLAYCONFIG_ADAPTER_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    WCHAR adapterDevicePath[128];
};
struct alignas( 8 ) _REFS_SMR_VOLUME_GC_PARAMETERS
{
    DWORD Version;
    DWORD Flags;
    REFS_SMR_VOLUME_GC_ACTION Action;
    REFS_SMR_VOLUME_GC_METHOD Method;
    DWORD IoGranularity;
    DWORD CompressionFormat;
    DWORDLONG Unused[8];
};
struct alignas( 8 ) tagHELPINFO
{
    UINT cbSize;
    int iContextType;
    int iCtrlId;
    HANDLE hItemHandle;
    DWORD_PTR dwContextId;
    POINT MousePos;
};
struct alignas( 8 ) tagMENUINFO
{
    DWORD cbSize;
    DWORD fMask;
    DWORD dwStyle;
    UINT cyMax;
    HBRUSH hbrBack;
    DWORD dwContextHelpID;
    ULONG_PTR dwMenuData;
};
struct alignas( 4 ) _DISPLAYCONFIG_SDR_WHITE_LEVEL
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER header;
    ULONG SDRWhiteLevel;
};
struct alignas( 8 ) tagPOINTER_TYPE_INFO
{
    POINTER_INPUT_TYPE type;
    union alignas( 8 )
    {
        POINTER_TOUCH_INFO touchInfo;
        POINTER_PEN_INFO penInfo;
    };
};
struct alignas( 4 ) _WOF_EXTERNAL_INFO
{
    DWORD Version;
    DWORD Provider;
};
struct alignas( 4 ) tagSCROLLINFO
{
    UINT cbSize;
    UINT fMask;
    int nMin;
    int nMax;
    UINT nPage;
    int nPos;
    int nTrackPos;
};
struct alignas( 8 ) _QUERY_BAD_RANGES_INPUT_RANGE
{
    DWORDLONG StartOffset;
    DWORDLONG LengthInBytes;
};
struct alignas( 4 ) _TRACE_PROFILE_INTERVAL
{
    ULONG Source;
    ULONG Interval;
};
struct alignas( 8 ) tagMENUITEMINFOW
{
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPWSTR dwTypeData;
    UINT cch;
    HBITMAP hbmpItem;
};
struct alignas( 4 ) tagGESTURECONFIG
{
    DWORD dwID;
    DWORD dwWant;
    DWORD dwBlock;
};
struct alignas( 2 ) _MAT2
{
    FIXED eM11;
    FIXED eM12;
    FIXED eM21;
    FIXED eM22;
};
struct alignas( 8 ) tagCWPSTRUCT
{
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
};
struct alignas( 8 ) _ICONINFOEXA
{
    DWORD cbSize;
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD wResID;
    CHAR szModName[260];
    CHAR szResName[260];
};
struct alignas( 8 ) tagCWPRETSTRUCT
{
    LRESULT lResult;
    LPARAM lParam;
    WPARAM wParam;
    UINT message;
    HWND hwnd;
};
struct alignas( 4 ) tagALTTABINFO
{
    DWORD cbSize;
    int cItems;
    int cColumns;
    int cRows;
    int iColFocus;
    int iRowFocus;
    int cxItem;
    int cyItem;
    POINT ptStart;
};
struct alignas( 4 ) tagINPUT_INJECTION_VALUE
{
    USHORT page;
    USHORT usage;
    INT32 value;
    USHORT index;
};
struct alignas( 4 ) tagCOLORMATCHTOTARGET
{
    EMR emr;
    DWORD dwAction;
    DWORD dwFlags;
    DWORD cbName;
    DWORD cbData;
    BYTE Data[1];
};
struct alignas( 4 ) tagEMRPIXELFORMAT
{
    EMR emr;
    PIXELFORMATDESCRIPTOR pfd;
};
struct alignas( 4 ) tagGETCLIPBMETADATA
{
    UINT Version;
    BOOL IsDelayRendered;
    BOOL IsSynthetic;
};
struct alignas( 4 ) tagPOINTER_DEVICE_PROPERTY
{
    INT32 logicalMin;
    INT32 logicalMax;
    INT32 physicalMin;
    INT32 physicalMax;
    UINT32 unit;
    UINT32 unitExponent;
    USHORT usagePageId;
    USHORT usageId;
};
struct alignas( 4 ) tagENUMLOGFONTEXDVA
{
    ENUMLOGFONTEXA elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
};
struct alignas( 4 ) tagEMRMASKBLT
{
    EMR emr;
    RECTL rclBounds;
    LONG xDest;
    LONG yDest;
    LONG cxDest;
    LONG cyDest;
    DWORD dwRop;
    LONG xSrc;
    LONG ySrc;
    XFORM xformSrc;
    COLORREF crBkColorSrc;
    DWORD iUsageSrc;
    DWORD offBmiSrc;
    DWORD cbBmiSrc;
    DWORD offBitsSrc;
    DWORD cbBitsSrc;
    LONG xMask;
    LONG yMask;
    DWORD iUsageMask;
    DWORD offBmiMask;
    DWORD cbBmiMask;
    DWORD offBitsMask;
    DWORD cbBitsMask;
};
struct alignas( 8 ) _WNODE_HEADER
{
    ULONG BufferSize;
    ULONG ProviderId;
    union alignas( 8 )
    {
        ULONG64 HistoricalContext;
        struct alignas( 4 )
        {
            ULONG Version;
            ULONG Linkage;
        };
    };
    union alignas( 8 )
    {
        ULONG CountLost;
        HANDLE KernelHandle;
        LARGE_INTEGER TimeStamp;
    };
    GUID Guid;
    ULONG ClientContext;
    ULONG Flags;
};
struct alignas( 8 ) tagWNODE_SINGLE_INSTANCE
{
    _WNODE_HEADER WnodeHeader;
    ULONG OffsetInstanceName;
    ULONG InstanceIndex;
    ULONG DataBlockOffset;
    ULONG SizeDataBlock;
    UCHAR VariableData[0];
};
struct alignas( 8 ) tagHIGHCONTRASTA
{
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszDefaultScheme;
};
struct alignas( 4 ) _DEVICE_POWER_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    BOOLEAN DeviceAttentionSupported;
    BOOLEAN AsynchronousNotificationSupported;
    BOOLEAN IdlePowerManagementEnabled;
    BOOLEAN D3ColdEnabled;
    BOOLEAN D3ColdSupported;
    BOOLEAN NoVerifyDuringIdlePower;
    BYTE Reserved[2];
    DWORD IdleTimeoutInMS;
};
struct alignas( 4 ) tagMOUSEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
};
struct alignas( 4 ) _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER
{
    WORD ChecksumAlgorithm;
    WORD Reserved;
    DWORD Flags;
    DWORD ChecksumChunkSizeInBytes;
    DWORD ClusterSizeInBytes;
};
struct alignas( 4 ) tagTITLEBARINFO
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[6];
};
struct alignas( 8 ) _CLUSTER_RANGE
{
    LARGE_INTEGER StartingCluster;
    LARGE_INTEGER ClusterCount;
};
struct alignas( 4 ) tagWINDOWPLACEMENT
{
    UINT length;
    UINT flags;
    UINT showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT rcNormalPosition;
};
struct alignas( 8 ) _SD_ENUM_SDS_INPUT
{
    DWORDLONG StartingOffset;
    DWORDLONG MaxSDEntriesToReturn;
};
struct alignas( 8 ) tagMOUSEMOVEPOINT
{
    int x;
    int y;
    DWORD time;
    ULONG_PTR dwExtraInfo;
};
struct alignas( 8 ) tagHARDWAREHOOKSTRUCT
{
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
};
struct alignas( 4 ) tagICONMETRICSW
{
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTW lfFont;
};
struct alignas( 4 ) _SD_QUERY_STATS_INPUT
{
    DWORD Reserved;
};
struct alignas( 4 ) tagEMREXCLUDECLIPRECT
{
    EMR emr;
    RECTL rclClip;
};
struct alignas( 4 ) tagEMRSETARCDIRECTION
{
    EMR emr;
    DWORD iArcDirection;
};
struct alignas( 8 ) tagMSG
{
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
    DWORD time;
    POINT pt;
};
struct alignas( 8 ) tagRAWINPUT
{
    RAWINPUTHEADER header;
    union alignas( 4 )
    {
        RAWMOUSE mouse;
        RAWKEYBOARD keyboard;
        RAWHID hid;
    } data;
};
struct alignas( 4 ) tagSTYLESTRUCT
{
    DWORD styleOld;
    DWORD styleNew;
};
struct alignas( 8 ) tagSERIALKEYSA
{
    UINT cbSize;
    DWORD dwFlags;
    LPSTR lpszActivePort;
    LPSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
};
struct alignas( 4 ) _CSV_MGMT_LOCK
{
    DWORD Flags;
};
struct alignas( 8 ) tagWNDCLASSW
{
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
};
struct alignas( 4 ) _cpinfoexA
{
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    CHAR CodePageName[260];
};
struct alignas( 4 ) _ETW_PMC_COUNTER_OWNER
{
    ETW_PMC_COUNTER_OWNER_TYPE OwnerType;
    ULONG ProfileSource;
    ULONG OwnerTag;
};
struct alignas( 4 ) _ETW_PMC_COUNTER_OWNERSHIP_STATUS
{
    ULONG ProcessorNumber;
    ULONG NumberOfCounters;
    ETW_PMC_COUNTER_OWNER CounterOwners[1];
};
struct alignas( 8 ) tagGESTUREINFO
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD dwID;
    HWND hwndTarget;
    POINTS ptsLocation;
    DWORD dwInstanceID;
    DWORD dwSequenceID;
    ULONGLONG ullArguments;
    UINT cbExtraArgs;
};
struct alignas( 4 ) tagUSAGE_PROPERTIES
{
    USHORT level;
    USHORT page;
    USHORT usage;
    INT32 logicalMinimum;
    INT32 logicalMaximum;
    USHORT unit;
    USHORT exponent;
    BYTE count;
    INT32 physicalMinimum;
    INT32 physicalMaximum;
};
struct alignas( 4 ) _CLASSIC_EVENT_ID
{
    GUID EventGuid;
    UCHAR Type;
    UCHAR Reserved[7];
};
struct alignas( 4 ) _WOF_VERSION_INFO
{
    DWORD WofVersion;
};
struct alignas( 8 ) tagMENUITEMINFOA
{
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    ULONG_PTR dwItemData;
    LPSTR dwTypeData;
    UINT cch;
    HBITMAP hbmpItem;
};
struct alignas( 4 ) tagCURSORSHAPE
{
    int xHotSpot;
    int yHotSpot;
    int cx;
    int cy;
    int cbWidth;
    BYTE Planes;
    BYTE BitsPixel;
};
struct alignas( 4 ) _nlsversioninfo
{
    DWORD dwNLSVersionInfoSize;
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;
    DWORD dwEffectiveId;
    GUID guidCustomVersion;
};
struct alignas( 4 ) HSYNTHETICPOINTERDEVICE__
{
    int unused;
};
struct alignas( 8 ) tagRAWINPUTDEVICELIST
{
    HANDLE hDevice;
    DWORD dwType;
};
struct alignas( 4 ) tagINPUT_TRANSFORM
{
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            float _11;
            float _12;
            float _13;
            float _14;
            float _21;
            float _22;
            float _23;
            float _24;
            float _31;
            float _32;
            float _33;
            float _34;
            float _41;
            float _42;
            float _43;
            float _44;
        };
        float m[4][4];
    };
};
;
struct alignas( 8 ) _FILE_STORAGE_TIER
{
    GUID Id;
    WCHAR Name[256];
    WCHAR Description[256];
    DWORDLONG Flags;
    DWORDLONG ProvisionedCapacity;
    FILE_STORAGE_TIER_MEDIA_TYPE MediaType;
    FILE_STORAGE_TIER_CLASS Class;
};
struct alignas( 8 ) _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT
{
    DWORD Version;
    DWORD Size;
    DWORD Flags;
    DWORD TotalNumberOfTiers;
    DWORD NumberOfTiersReturned;
    FILE_STORAGE_TIER Tiers[1];
};
struct alignas( 4 ) OFFSETINSTANCEDATAANDLENGTH
{
    ULONG OffsetInstanceData;
    ULONG LengthInstanceData;
};
struct alignas( 8 ) tagWNODE_ALL_DATA
{
    _WNODE_HEADER WnodeHeader;
    ULONG DataBlockOffset;
    ULONG InstanceCount;
    ULONG OffsetInstanceNameOffsets;
    union alignas( 4 )
    {
        ULONG FixedInstanceSize;
        OFFSETINSTANCEDATAANDLENGTH OffsetInstanceDataAndLength[0];
    };
};
struct alignas( 4 ) tagTOGGLEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
};
struct alignas( 8 ) _FILE_REFERENCE_RANGE
{
    DWORDLONG StartingFileReferenceNumber;
    DWORDLONG EndingFileReferenceNumber;
};
struct alignas( 8 ) tagHIGHCONTRASTW
{
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszDefaultScheme;
};
struct alignas( 4 ) tagACCESSTIMEOUT
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
};
struct alignas( 4 ) _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX
{
    BYTE EnableIntegrity;
    BYTE KeepIntegrityStateUnchanged;
    WORD Reserved;
    DWORD Flags;
    BYTE Version;
    BYTE Reserved2[7];
};
struct alignas( 4 ) tagFILTERKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec;
    DWORD iDelayMSec;
    DWORD iRepeatMSec;
    DWORD iBounceMSec;
};
struct alignas( 2 ) DLGTEMPLATE
{
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
};
struct alignas( 8 ) tagCURSORINFO
{
    DWORD cbSize;
    DWORD flags;
    HCURSOR hCursor;
    POINT ptScreenPos;
};
struct alignas( 8 ) tagCLIENTCREATESTRUCT
{
    HANDLE hWindowMenu;
    UINT idFirstChild;
};
struct alignas( 4 ) tagICONMETRICSA
{
    UINT cbSize;
    int iHorzSpacing;
    int iVertSpacing;
    int iTitleWrap;
    LOGFONTA lfFont;
};
struct alignas( 8 ) tagMOUSEHOOKSTRUCT
{
    POINT pt;
    HWND hwnd;
    UINT wHitTestCode;
    ULONG_PTR dwExtraInfo;
};
struct alignas( 8 ) _SD_ENUM_SDS_ENTRY
{
    DWORD Hash;
    DWORD SecurityId;
    DWORDLONG Offset;
    DWORD Length;
    BYTE Descriptor[1];
};
struct alignas( 4 ) HTOUCHINPUT__
{
    int unused;
};
struct alignas( 8 ) _SERVICE_DESCRIPTIONA
{
    LPSTR lpDescription;
};
struct alignas( 4 ) tagANIMATIONINFO
{
    UINT cbSize;
    int iMinAnimate;
};
struct alignas( 4 ) tagNONCLIENTMETRICSA
{
    UINT cbSize;
    int iBorderWidth;
    int iScrollWidth;
    int iScrollHeight;
    int iCaptionWidth;
    int iCaptionHeight;
    LOGFONTA lfCaptionFont;
    int iSmCaptionWidth;
    int iSmCaptionHeight;
    LOGFONTA lfSmCaptionFont;
    int iMenuWidth;
    int iMenuHeight;
    LOGFONTA lfMenuFont;
    LOGFONTA lfStatusFont;
    LOGFONTA lfMessageFont;
    int iPaddedBorderWidth;
};
struct alignas( 8 ) _CSV_CONTROL_PARAM
{
    CSV_CONTROL_OP Operation;
    LONGLONG Unused;
};
struct alignas( 4 ) _CHANGER_ELEMENT
{
    ELEMENT_TYPE ElementType;
    DWORD ElementAddress;
};
struct alignas( 4 ) _CHANGER_ELEMENT_STATUS_EX
{
    CHANGER_ELEMENT Element;
    CHANGER_ELEMENT SrcElementAddress;
    DWORD Flags;
    DWORD ExceptionCode;
    BYTE TargetId;
    BYTE Lun;
    WORD Reserved;
    BYTE PrimaryVolumeID[36];
    BYTE AlternateVolumeID[36];
    BYTE VendorIdentification[8];
    BYTE ProductIdentification[16];
    BYTE SerialNumber[32];
};
struct alignas( 8 ) _ENUM_SERVICE_STATUSA
{
    LPSTR lpServiceName;
    LPSTR lpDisplayName;
    SERVICE_STATUS ServiceStatus;
};
struct alignas( 8 ) tagMOUSEHOOKSTRUCTEX
{
    DWORD mouseData;
};
struct alignas( 8 ) _RETRIEVAL_POINTER_BASE
{
    LARGE_INTEGER FileAreaOffset;
};
struct alignas( 8 ) _SERVICE_TRIGGER_INFO
{
    DWORD cTriggers;
    PSERVICE_TRIGGER pTriggers;
    PBYTE pReserved;
};
struct alignas( 4 ) HGESTUREINFO__
{
    int unused;
};
struct alignas( 4 ) tagINPUT_MESSAGE_SOURCE
{
    INPUT_MESSAGE_DEVICE_TYPE deviceType;
    INPUT_MESSAGE_ORIGIN_ID originId;
};
struct alignas( 8 ) tagWNDCLASSA
{
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
};
struct alignas( 8 ) REFS_VOLUME_DATA_BUFFER
{
    DWORD ByteCount;
    DWORD MajorVersion;
    DWORD MinorVersion;
    DWORD BytesPerPhysicalSector;
    LARGE_INTEGER VolumeSerialNumber;
    LARGE_INTEGER NumberSectors;
    LARGE_INTEGER TotalClusters;
    LARGE_INTEGER FreeClusters;
    LARGE_INTEGER TotalReserved;
    DWORD BytesPerSector;
    DWORD BytesPerCluster;
    LARGE_INTEGER MaximumSizeOfResidentFile;
    WORD FastTierDataFillRatio;
    WORD SlowTierDataFillRatio;
    DWORD DestagesFastTierToSlowTierRate;
    LARGE_INTEGER Reserved[9];
};
struct alignas( 8 ) tagMDINEXTMENU
{
    HMENU hmenuIn;
    HMENU hmenuNext;
    HWND hwndNext;
};
struct alignas( 4 ) _SERVICE_LAUNCH_PROTECTED_INFO
{
    DWORD dwLaunchProtected;
};
struct alignas( 4 ) POWERBROADCAST_SETTING
{
    GUID PowerSetting;
    DWORD DataLength;
    UCHAR Data[1];
};
struct alignas( 8 ) _TAPE_STATISTICS
{
    DWORD Version;
    DWORD Flags;
    LARGE_INTEGER RecoveredWrites;
    LARGE_INTEGER UnrecoveredWrites;
    LARGE_INTEGER RecoveredReads;
    LARGE_INTEGER UnrecoveredReads;
    BYTE CompressionRatioReads;
    BYTE CompressionRatioWrites;
};
struct alignas( 8 ) _DISK_GEOMETRY
{
    LARGE_INTEGER Cylinders;
    MEDIA_TYPE MediaType;
    DWORD TracksPerCylinder;
    DWORD SectorsPerTrack;
    DWORD BytesPerSector;
};
struct alignas( 8 ) _DISK_GEOMETRY_EX
{
    DISK_GEOMETRY Geometry;
    LARGE_INTEGER DiskSize;
    BYTE Data[1];
};
struct alignas( 8 ) tagPAINTSTRUCT
{
    HDC hdc;
    BOOL fErase;
    RECT rcPaint;
    BOOL fRestore;
    BOOL fIncUpdate;
    BYTE rgbReserved[32];
};
struct alignas( 8 ) _NETINFOSTRUCT
{
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    ULONG_PTR dwHandle;
    WORD wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
};
struct alignas( 4 ) _SERVICE_SID_INFO
{
    DWORD dwServiceSidType;
};
struct alignas( 4 ) _STORAGE_PROPERTY_SET
{
    STORAGE_PROPERTY_ID PropertyId;
    STORAGE_SET_TYPE SetType;
    BYTE AdditionalParameters[1];
};
struct alignas( 8 ) _UNIVERSAL_NAME_INFOW
{
    LPWSTR lpUniversalName;
};
struct alignas( 8 ) tagDRAWITEMSTRUCT
{
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemAction;
    UINT itemState;
    HWND hwndItem;
    HDC hDC;
    RECT rcItem;
    ULONG_PTR itemData;
};
struct alignas( 8 ) tagMENUBARINFO
{
    DWORD cbSize;
    RECT rcBar;
    HMENU hMenu;
    HWND hwndMenu;
    BOOL fBarFocused : 1;
    BOOL fFocused : 1;
    BOOL fUnused : 30;
};
struct alignas( 8 ) tagDELETEITEMSTRUCT
{
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    HWND hwndItem;
    ULONG_PTR itemData;
};
struct alignas( 4 ) tagSCROLLBARINFO
{
    DWORD cbSize;
    RECT rcScrollBar;
    int dxyLineButton;
    int xyThumbTop;
    int xyThumbBottom;
    int reserved;
    DWORD rgstate[6];
};
struct alignas( 8 ) _REMOTE_NAME_INFOA
{
    LPSTR lpUniversalName;
    LPSTR lpConnectionName;
    LPSTR lpRemainingPath;
};
struct alignas( 1 ) _PREVENT_MEDIA_REMOVAL
{
    BOOLEAN PreventMediaRemoval;
};
struct alignas( 8 ) _FILE_ZERO_DATA_INFORMATION
{
    LARGE_INTEGER FileOffset;
    LARGE_INTEGER BeyondFinalZero;
};
struct alignas( 8 ) tagCOMPAREITEMSTRUCT
{
    UINT CtlType;
    UINT CtlID;
    HWND hwndItem;
    UINT itemID1;
    ULONG_PTR itemData1;
    UINT itemID2;
    ULONG_PTR itemData2;
    DWORD dwLocaleId;
};
struct alignas( 8 ) _BIN_RANGE
{
    LARGE_INTEGER StartValue;
    LARGE_INTEGER Length;
};
struct alignas( 8 ) _SERVICE_CONTROL_STATUS_REASON_PARAMSW
{
    DWORD dwReason;
    LPWSTR pszComment;
    SERVICE_STATUS_PROCESS ServiceStatus;
};
struct alignas( 8 ) _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
{
    DWORD dwDataType;
    DWORD cbData;
    PBYTE pData;
};
struct alignas( 4 ) _STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    DWORD MediumProductType;
};
struct alignas( 4 ) tagPOINTER_DEVICE_CURSOR_INFO
{
    UINT32 cursorId;
    POINTER_DEVICE_CURSOR_TYPE cursor;
};
struct alignas( 8 ) _SERVICE_FAILURE_ACTIONSA
{
    DWORD dwResetPeriod;
    LPSTR lpRebootMsg;
    LPSTR lpCommand;
    DWORD cActions;
    SC_ACTION* lpsaActions;
};
struct alignas( 8 ) _PARTITION_INFORMATION
{
    LARGE_INTEGER StartingOffset;
    LARGE_INTEGER PartitionLength;
    DWORD HiddenSectors;
    DWORD PartitionNumber;
    BYTE PartitionType;
    BOOLEAN BootIndicator;
    BOOLEAN RecognizedPartition;
    BOOLEAN RewritePartition;
};
struct alignas( 4 ) BULK_SECURITY_TEST_DATA
{
    ACCESS_MASK DesiredAccess;
    DWORD SecurityIds[1];
};
struct alignas( 4 ) tagCANDIDATELIST
{
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD dwOffset[1];
};
struct alignas( 8 ) _DEVICE_LB_PROVISIONING_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    BYTE ThinProvisioningEnabled : 1;
    BYTE ThinProvisioningReadZeros : 1;
    BYTE AnchorSupported : 3;
    BYTE UnmapGranularityAlignmentValid : 1;
    BYTE GetFreeSpaceSupported : 1;
    BYTE MapSupported : 1;
    BYTE Reserved1[7];
    DWORDLONG OptimalUnmapGranularity;
    DWORDLONG UnmapGranularityAlignment;
    DWORD MaxUnmapLbaCount;
    DWORD MaxUnmapBlockDescriptorCount;
};
struct alignas( 4 ) tagSTICKYKEYS
{
    UINT cbSize;
    DWORD dwFlags;
};
struct alignas( 8 ) _DISCDLGSTRUCTA
{
    DWORD cbStructure;
    HWND hwndOwner;
    LPSTR lpLocalName;
    LPSTR lpRemoteName;
    DWORD dwFlags;
};
struct alignas( 8 ) _UNIVERSAL_NAME_INFOA
{
    LPSTR lpUniversalName;
};
struct alignas( 4 ) tagTITLEBARINFOEX
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[6];
    RECT rgrect[6];
};
struct alignas( 4 ) HSAVEDUILANGUAGES__
{
    int unused;
};
struct alignas( 4 ) tagMONITORINFO
{
    DWORD cbSize;
    RECT rcMonitor;
    RECT rcWork;
    DWORD dwFlags;
};
struct alignas( 4 ) tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION
{
    UINT16 score;
    POINT adjustedPoint;
};
struct alignas( 4 ) _CONSOLE_HISTORY_INFO
{
    UINT cbSize;
    UINT HistoryBufferSize;
    UINT NumberOfHistoryBuffers;
    DWORD dwFlags;
};
struct alignas( 8 ) tagMENUGETOBJECTINFO
{
    DWORD dwFlags;
    UINT uPos;
    HMENU hmenu;
    PVOID riid;
    PVOID pvObj;
};
struct alignas( 8 ) tagMDICREATESTRUCTA
{
    LPCSTR szClass;
    LPCSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
};
struct alignas( 8 ) tagMDICREATESTRUCTW
{
    LPCWSTR szClass;
    LPCWSTR szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;
};
struct alignas( 8 ) RETRIEVAL_POINTERS_BUFFER
{
    DWORD ExtentCount;
    LARGE_INTEGER StartingVcn;
    struct alignas( 8 )
    {
        LARGE_INTEGER NextVcn;
        LARGE_INTEGER Lcn;
    } Extents[1];
};
struct alignas( 8 ) tagMSGBOXPARAMSA
{
    UINT cbSize;
    HWND hwndOwner;
    HINSTANCE hInstance;
    LPCSTR lpszText;
    LPCSTR lpszCaption;
    DWORD dwStyle;
    LPCSTR lpszIcon;
    DWORD_PTR dwContextHelpId;
    MSGBOXCALLBACK lpfnMsgBoxCallback;
    DWORD dwLanguageId;
};
struct alignas( 8 ) _ICONINFO
{
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
};
struct alignas( 8 ) tagSERIALKEYSW
{
    UINT cbSize;
    DWORD dwFlags;
    LPWSTR lpszActivePort;
    LPWSTR lpszPort;
    UINT iBaudRate;
    UINT iPortState;
    UINT iActive;
};
struct alignas( 4 ) _CONSOLE_READCONSOLE_CONTROL
{
    ULONG nLength;
    ULONG nInitialChars;
    ULONG dwCtrlWakeupMask;
    ULONG dwControlKeyState;
};
struct alignas( 4 ) _DEVICE_SEEK_PENALTY_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    BOOLEAN IncursSeekPenalty;
};
struct alignas( 4 ) _CHANGER_SET_POSITION
{
    CHANGER_ELEMENT Transport;
    CHANGER_ELEMENT Destination;
    BOOLEAN Flip;
};
struct alignas( 8 ) _SERVICE_TIMECHANGE_INFO
{
    LARGE_INTEGER liNewTime;
    LARGE_INTEGER liOldTime;
};
struct alignas( 1 ) _FILE_SET_SPARSE_BUFFER
{
    BOOLEAN SetSparse;
};
struct alignas( 4 ) _STORAGE_DEVICE_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    BYTE DeviceType;
    BYTE DeviceTypeModifier;
    BOOLEAN RemovableMedia;
    BOOLEAN CommandQueueing;
    DWORD VendorIdOffset;
    DWORD ProductIdOffset;
    DWORD ProductRevisionOffset;
    DWORD SerialNumberOffset;
    STORAGE_BUS_TYPE BusType;
    DWORD RawPropertiesLength;
    BYTE RawDeviceProperties[1];
};
struct alignas( 8 ) _SERVICE_REQUIRED_PRIVILEGES_INFOA
{
    LPSTR pmszRequiredPrivileges;
};
struct alignas( 4 ) STORAGE_BREAK_RESERVATION_REQUEST
{
    DWORD Length;
    BYTE _unused;
    BYTE PathId;
    BYTE TargetId;
    BYTE Lun;
};
struct alignas( 1 ) _FILE_OBJECTID_BUFFER
{
    BYTE ObjectId[16];
    union alignas( 1 )
    {
        struct alignas( 1 )
        {
            BYTE BirthVolumeId[16];
            BYTE BirthObjectId[16];
            BYTE DomainId[16];
        };
        BYTE ExtendedInfo[48];
    };
};
struct alignas( 4 ) _DISK_CONTROLLER_NUMBER
{
    DWORD ControllerNumber;
    DWORD DiskNumber;
};
struct alignas( 4 ) _FILE_QUERY_SPARING_BUFFER
{
    DWORD SparingUnitBytes;
    BOOLEAN SoftwareSparing;
    DWORD TotalSpareBlocks;
    DWORD FreeSpareBlocks;
};
struct alignas( 4 ) tagWINDOWINFO
{
    DWORD cbSize;
    RECT rcWindow;
    RECT rcClient;
    DWORD dwStyle;
    DWORD dwExStyle;
    DWORD dwWindowStatus;
    UINT cxWindowBorders;
    UINT cyWindowBorders;
    ATOM atomWindowType;
    WORD wCreatorVersion;
};
struct alignas( 1 ) _FILE_MAKE_COMPATIBLE_BUFFER
{
    BOOLEAN CloseDisc;
};
struct alignas( 4 ) HRAWINPUT__
{
    int unused;
};
struct alignas( 8 ) tagREGISTERWORDA
{
    LPSTR lpReading;
    LPSTR lpWord;
};
struct alignas( 8 ) _FILE_PREFETCH
{
    DWORD Type;
    DWORD Count;
    DWORDLONG Prefetch[1];
};
struct alignas( 1 ) _STORAGE_BUS_RESET_REQUEST
{
    BYTE PathId;
};
struct alignas( 4 ) _DISK_PARTITION_INFO
{
    DWORD SizeOfPartitionInfo;
    PARTITION_STYLE PartitionStyle;
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            DWORD Signature;
            DWORD CheckSum;
        } Mbr;
        struct alignas( 4 )
        {
            GUID DiskId;
        } Gpt;
    };
};
struct alignas( 8 ) _CONNECTDLGSTRUCTA
{
    DWORD cbStructure;
    HWND hwndOwner;
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;
    DWORD dwDevNum;
};
struct alignas( 8 ) tagGESTURENOTIFYSTRUCT
{
    UINT cbSize;
    DWORD dwFlags;
    HWND hwndTarget;
    POINTS ptsLocation;
    DWORD dwInstanceID;
};
struct alignas( 4 ) HIMC__
{
    int unused;
};
struct alignas( 8 ) VOLUME_BITMAP_BUFFER
{
    LARGE_INTEGER StartingLcn;
    LARGE_INTEGER BitmapSize;
    BYTE Buffer[1];
};
struct alignas( 8 ) MFT_ENUM_DATA_V1
{
    DWORDLONG StartFileReferenceNumber;
    USN LowUsn;
    USN HighUsn;
    WORD MinMajorVersion;
    WORD MaxMajorVersion;
};
struct alignas( 4 ) _SERVICE_START_REASON
{
    DWORD dwReason;
};
struct alignas( 8 ) _DEVICE_DATA_SET_RANGE
{
    LONGLONG StartingOffset;
    DWORDLONG LengthInBytes;
};
struct alignas( 8 ) _DEVICE_DATA_SET_SCRUB_EX_OUTPUT
{
    DWORDLONG BytesProcessed;
    DWORDLONG BytesRepaired;
    DWORDLONG BytesFailed;
    DEVICE_DSM_RANGE ParityExtent;
    DWORDLONG BytesScrubbed;
};
struct alignas( 4 ) _DEVICE_DSM_CONVERSION_OUTPUT
{
    DWORD Version;
    GUID Source;
};
struct alignas( 8 ) _STORAGE_DEVICE_LED_STATE_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    DWORDLONG State;
};
struct alignas( 1 ) _STORAGE_OFFLOAD_TOKEN
{
    BYTE TokenType[4];
    BYTE Reserved[2];
    BYTE TokenIdLength[2];
    union alignas( 1 )
    {
        struct alignas( 1 )
        {
            BYTE Reserved2[504];
        } StorageOffloadZeroDataToken;
        BYTE Token[504];
    };
};
struct alignas( 8 ) _STORAGE_OFFLOAD_READ_OUTPUT
{
    DWORD OffloadReadFlags;
    DWORD Reserved;
    DWORDLONG LengthProtected;
    DWORD TokenLength;
    STORAGE_OFFLOAD_TOKEN Token;
};
struct alignas( 4 ) _STORAGE_OPERATIONAL_REASON
{
    DWORD Version;
    DWORD Size;
    STORAGE_OPERATIONAL_STATUS_REASON Reason;
    union alignas( 4 )
    {
        struct alignas( 1 )
        {
            BYTE SenseKey;
            BYTE ASC;
            BYTE ASCQ;
            BYTE Reserved;
        } ScsiSenseKey;
        struct alignas( 1 )
        {
            BYTE CriticalHealth;
            BYTE ModuleHealth[2];
            BYTE ErrorThresholdStatus;
        } NVDIMM_N;
        DWORD AsUlong;
    } RawBytes;
};
struct alignas( 4 ) _STORAGE_DEVICE_MANAGEMENT_STATUS
{
    DWORD Version;
    DWORD Size;
    STORAGE_DISK_HEALTH_STATUS Health;
    DWORD NumberOfOperationalStatus;
    DWORD NumberOfAdditionalReasons;
    STORAGE_DISK_OPERATIONAL_STATUS OperationalStatus[16];
    STORAGE_OPERATIONAL_REASON AdditionalReasons[1];
};
struct alignas( 8 ) _STORAGE_ZONE_GROUP
{
    DWORD ZoneCount;
    STORAGE_ZONE_TYPES ZoneType;
    DWORDLONG ZoneSize;
};
struct alignas( 8 ) _SERVICE_TABLE_ENTRYA
{
    LPSTR lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA lpServiceProc;
};
struct alignas( 4 ) _STORAGE_TEMPERATURE_INFO
{
    WORD Index;
    SHORT Temperature;
    SHORT OverThreshold;
    SHORT UnderThreshold;
    BOOLEAN OverThresholdChangable;
    BOOLEAN UnderThresholdChangable;
    BOOLEAN EventGenerated;
    BYTE Reserved0;
    DWORD Reserved1;
};
struct alignas( 4 ) _STORAGE_PROTOCOL_SPECIFIC_DATA
{
    STORAGE_PROTOCOL_TYPE ProtocolType;
    DWORD DataType;
    DWORD ProtocolDataRequestValue;
    DWORD ProtocolDataRequestSubValue;
    DWORD ProtocolDataOffset;
    DWORD ProtocolDataLength;
    DWORD FixedProtocolReturnData;
    DWORD ProtocolDataRequestSubValue2;
    DWORD ProtocolDataRequestSubValue3;
    DWORD ProtocolDataRequestSubValue4;
};
struct alignas( 4 ) _STORAGE_PROTOCOL_DATA_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    STORAGE_PROTOCOL_SPECIFIC_DATA ProtocolSpecificData;
};
struct alignas( 4 ) _SCM_INTERLEAVED_PD_INFO
{
    DWORD DeviceHandle;
    GUID DeviceGuid;
};
struct alignas( 4 ) _SCM_LD_INTERLEAVE_SET_INFO
{
    DWORD Version;
    DWORD Size;
    DWORD InterleaveSetSize;
    SCM_INTERLEAVED_PD_INFO InterleaveSet[1];
};
struct alignas( 4 ) _SCM_PD_FIRMWARE_SLOT_INFO
{
    DWORD Version;
    DWORD Size;
    BYTE SlotNumber;
    BYTE ReadOnly : 1;
    BYTE Reserved0 : 7;
    BYTE Reserved1[6];
    BYTE Revision[32];
};
struct alignas( 4 ) _SCM_PD_PROPERTY_QUERY
{
    DWORD Version;
    DWORD Size;
    SCM_PD_PROPERTY_ID PropertyId;
    SCM_PD_QUERY_TYPE QueryType;
    BYTE AdditionalParameters[1];
};
struct alignas( 8 ) _STORAGE_COUNTER
{
    STORAGE_COUNTER_TYPE Type;
    union alignas( 8 )
    {
        struct alignas( 4 )
        {
            DWORD Week;
            DWORD Year;
        } ManufactureDate;
        DWORDLONG AsUlonglong;
    } Value;
};
struct alignas( 4 ) _STORAGE_DEVICE_SELF_ENCRYPTION_PROPERTY_V2
{
    DWORD Version;
    DWORD Size;
    BOOLEAN SupportsSelfEncryption;
    STORAGE_ENCRYPTION_TYPE EncryptionType;
};
struct alignas( 4 ) _SCM_LOGICAL_DEVICE_INSTANCE
{
    DWORD Version;
    DWORD Size;
    GUID DeviceGuid;
    WCHAR SymbolicLink[256];
};
struct alignas( 4 ) _SCM_LOGICAL_DEVICES
{
    DWORD Version;
    DWORD Size;
    DWORD DeviceCount;
    SCM_LOGICAL_DEVICE_INSTANCE Devices[1];
};
struct alignas( 4 ) _SCM_PD_HEALTH_NOTIFICATION_DATA
{
    GUID DeviceGuid;
};
struct alignas( 8 ) _DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS
{
    DWORD Flags;
    DWORD Reserved;
    DWORDLONG TokenOffset;
    STORAGE_OFFLOAD_TOKEN Token;
};
struct alignas( 1 ) _DEVICEDUMP_STRUCTURE_VERSION
{
    DWORD dwSignature;
    DWORD dwVersion;
    DWORD dwSize;
};
struct alignas( 4 ) _STORAGE_PRIORITY_HINT_SUPPORT
{
    DWORD SupportFlags;
};
struct alignas( 4 ) _STORAGE_ALLOCATE_BC_STREAM_INPUT
{
    DWORD Version;
    DWORD RequestsPerPeriod;
    DWORD Period;
    BOOLEAN RetryFailures;
    BOOLEAN Discardable;
    BOOLEAN Reserved1[2];
    DWORD AccessType;
    DWORD AccessMode;
};
struct alignas( 8 ) _STORAGE_TIER
{
    GUID Id;
    WCHAR Name[256];
    WCHAR Description[256];
    DWORDLONG Flags;
    DWORDLONG ProvisionedCapacity;
    STORAGE_TIER_MEDIA_TYPE MediaType;
    STORAGE_TIER_CLASS Class;
};
struct alignas( 8 ) _STORAGE_DEVICE_TIERING_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    DWORD Flags;
    DWORD TotalNumberOfTiers;
    DWORD NumberOfTiersReturned;
    STORAGE_TIER Tiers[1];
};
struct alignas( 8 ) _DEVICE_INTERNAL_STATUS_DATA
{
    DWORD Version;
    DWORD Size;
    DWORDLONG T10VendorId;
    DWORD DataSet1Length;
    DWORD DataSet2Length;
    DWORD DataSet3Length;
    DWORD DataSet4Length;
    BYTE StatusDataVersion;
    BYTE Reserved[3];
    BYTE ReasonIdentifier[128];
    DWORD StatusDataLength;
    BYTE StatusData[1];
};
struct alignas( 4 ) _CHANGER_ELEMENT_LIST
{
    CHANGER_ELEMENT Element;
    DWORD NumberOfElements;
};
struct alignas( 4 ) _CHANGER_INITIALIZE_ELEMENT_STATUS
{
    CHANGER_ELEMENT_LIST ElementList;
    BOOLEAN BarCodeScan;
};
struct alignas( 4 ) _SCM_BUS_PROPERTY_QUERY
{
    DWORD Version;
    DWORD Size;
    SCM_BUS_PROPERTY_ID PropertyId;
    SCM_BUS_QUERY_TYPE QueryType;
    BYTE AdditionalParameters[1];
};
struct alignas( 4 ) _MINIDUMP_READ_MEMORY_FAILURE_CALLBACK
{
    ULONG64 Offset;
    ULONG Bytes;
    HRESULT FailureStatus;
};
struct alignas( 4 ) _STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    DWORD NumberOfFaultDomains;
    GUID FaultDomainIds[1];
};
struct alignas( 8 ) _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY
{
    DWORDLONG Offset;
    DWORD NameFlags;
    LONGLONG FileId;
    DWORD Reserved1;
    DWORD Reserved2;
    LONGLONG Reserved3;
    WCHAR FileName[1];
};
struct alignas( 8 ) _SET_DISK_ATTRIBUTES
{
    DWORD Version;
    BOOLEAN Persist;
    BYTE Reserved1[3];
    DWORDLONG Attributes;
    DWORDLONG AttributesMask;
    DWORD Reserved2[4];
};
struct alignas( 8 ) _EVENT_TRACE_SESSION_SECURITY_INFORMATION
{
    EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
    ULONG SecurityInformation;
    TRACEHANDLE TraceHandle;
    UCHAR SecurityDescriptor[1];
};
struct alignas( 8 ) _SYSTEM_THREAD_CID_PRIORITY_INFORMATION
{
    CLIENT_ID ClientId;
    KPRIORITY Priority;
};
struct alignas( 4 ) _MINIDUMP_USER_STREAM_INFORMATION
{
    ULONG UserStreamCount;
    PMINIDUMP_USER_STREAM UserStreamArray;
};
struct alignas( 8 ) tagWNODE_EVENT_ITEM
{
    _WNODE_HEADER WnodeHeader;
};
struct alignas( 8 ) _BIN_COUNT
{
    BIN_RANGE BinRange;
    DWORD BinCount;
};
struct alignas( 4 ) _SCM_PHYSICAL_DEVICE_INSTANCE
{
    DWORD Version;
    DWORD Size;
    DWORD NfitHandle;
    WCHAR SymbolicLink[256];
};
union alignas( 4 ) _STORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE
{
    struct alignas( 4 )
    {
        DWORD RetainAsynEvent : 1;
        DWORD LogSpecificField : 4;
        DWORD Reserved : 27;
    };
    DWORD AsUlong;
};
struct alignas( 8 ) _OBJECT_ATTRIBUTES
{
    ULONG Length;
    HANDLE RootDirectory;
    PCUNICODE_STRING ObjectName;
    ULONG Attributes;
    PVOID SecurityDescriptor;
    PVOID SecurityQualityOfService;
};
struct alignas( 8 ) _STRING64
{
    USHORT Length;
    USHORT MaximumLength;
    ULONGLONG Buffer;
};
struct alignas( 4 ) _FILESYSTEM_STATISTICS
{
    WORD FileSystemType;
    WORD Version;
    DWORD SizeOfCompleteStructure;
    DWORD UserFileReads;
    DWORD UserFileReadBytes;
    DWORD UserDiskReads;
    DWORD UserFileWrites;
    DWORD UserFileWriteBytes;
    DWORD UserDiskWrites;
    DWORD MetaDataReads;
    DWORD MetaDataReadBytes;
    DWORD MetaDataDiskReads;
    DWORD MetaDataWrites;
    DWORD MetaDataWriteBytes;
    DWORD MetaDataDiskWrites;
};
struct alignas( 8 ) _BIN_RESULTS
{
    DWORD NumberOfBins;
    BIN_COUNT BinCounts[1];
};
struct alignas( 16 ) _MINIDUMP_THREAD_EX_CALLBACK
{
    ULONG ThreadId;
    HANDLE ThreadHandle;
    CONTEXT Context;
    ULONG SizeOfContext;
    ULONG64 StackBase;
    ULONG64 StackEnd;
    ULONG64 BackingStoreBase;
    ULONG64 BackingStoreEnd;
};
struct alignas( 16 ) _MINIDUMP_THREAD_CALLBACK
{
    ULONG ThreadId;
    HANDLE ThreadHandle;
    CONTEXT Context;
    ULONG SizeOfContext;
    ULONG64 StackBase;
    ULONG64 StackEnd;
};
struct alignas( 4 ) _MINIDUMP_MODULE_CALLBACK
{
    PWCHAR FullPath;
    ULONG64 BaseOfImage;
    ULONG SizeOfImage;
    ULONG CheckSum;
    ULONG TimeDateStamp;
    VS_FIXEDFILEINFO VersionInfo;
    PVOID CvRecord;
    ULONG SizeOfCvRecord;
    PVOID MiscRecord;
    ULONG SizeOfMiscRecord;
};
struct alignas( 4 ) _MINIDUMP_INCLUDE_THREAD_CALLBACK
{
    ULONG ThreadId;
};
struct alignas( 4 ) _MINIDUMP_INCLUDE_MODULE_CALLBACK
{
    ULONG64 BaseOfImage;
};
struct alignas( 4 ) _MINIDUMP_IO_CALLBACK
{
    HANDLE Handle;
    ULONG64 Offset;
    PVOID Buffer;
    ULONG BufferBytes;
};
struct alignas( 4 ) _MINIDUMP_VM_QUERY_CALLBACK
{
    ULONG64 Offset;
};
struct alignas( 4 ) _MINIDUMP_VM_PRE_READ_CALLBACK
{
    ULONG64 Offset;
    PVOID Buffer;
    ULONG Size;
};
struct alignas( 4 ) _MINIDUMP_VM_POST_READ_CALLBACK
{
    ULONG64 Offset;
    PVOID Buffer;
    ULONG Size;
    ULONG Completed;
    HRESULT Status;
};
struct alignas( 16 ) _MINIDUMP_CALLBACK_INPUT
{
    ULONG ProcessId;
    HANDLE ProcessHandle;
    ULONG CallbackType;
    union alignas( 16 )
    {
        HRESULT Status;
        MINIDUMP_THREAD_CALLBACK Thread;
        MINIDUMP_THREAD_EX_CALLBACK ThreadEx;
        MINIDUMP_MODULE_CALLBACK Module;
        MINIDUMP_INCLUDE_THREAD_CALLBACK IncludeThread;
        MINIDUMP_INCLUDE_MODULE_CALLBACK IncludeModule;
        MINIDUMP_IO_CALLBACK Io;
        MINIDUMP_READ_MEMORY_FAILURE_CALLBACK ReadMemoryFailure;
        ULONG SecondaryFlags;
        MINIDUMP_VM_QUERY_CALLBACK VmQuery;
        MINIDUMP_VM_PRE_READ_CALLBACK VmPreRead;
        MINIDUMP_VM_POST_READ_CALLBACK VmPostRead;
    };
};
struct alignas( 8 ) WMIREGGUIDW
{
    GUID Guid;
    ULONG Flags;
    ULONG InstanceCount;
    union alignas( 8 )
    {
        ULONG InstanceNameList;
        ULONG BaseNameOffset;
        ULONG_PTR Pdo;
        ULONG_PTR InstanceInfo;
    };
};
struct alignas( 4 ) _TXFS_GET_TRANSACTED_VERSION
{
    DWORD ThisBaseVersion;
    DWORD LatestVersion;
    WORD ThisMiniVersion;
    WORD FirstMiniVersion;
    WORD LatestMiniVersion;
};
struct alignas( 4 ) _CHANGER_SET_ACCESS
{
    CHANGER_ELEMENT Element;
    DWORD Control;
};
struct alignas( 8 ) tagRPC_CALL_ATTRIBUTES_V3_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short* ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short* ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    RpcCallClientLocality IsClientLocal;
    HANDLE ClientPID;
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1* CallLocalAddress;
    unsigned short OpNum;
    UUID InterfaceUuid;
    unsigned long ClientIdentifierBufferLength;
    unsigned char* ClientIdentifier;
};
struct alignas( 4 ) _STORAGE_PROTOCOL_SPECIFIC_DATA_EXT
{
    STORAGE_PROTOCOL_TYPE ProtocolType;
    DWORD DataType;
    DWORD ProtocolDataValue;
    DWORD ProtocolDataSubValue;
    DWORD ProtocolDataOffset;
    DWORD ProtocolDataLength;
    DWORD FixedProtocolReturnData;
    DWORD ProtocolDataSubValue2;
    DWORD ProtocolDataSubValue3;
    DWORD ProtocolDataSubValue4;
    DWORD ProtocolDataSubValue5;
    DWORD Reserved[5];
};
struct alignas( 8 ) tagWNODE_EVENT_REFERENCE
{
    _WNODE_HEADER WnodeHeader;
    GUID TargetGuid;
    ULONG TargetDataBlockSize;
    union alignas( 4 )
    {
        ULONG TargetInstanceIndex;
        WCHAR TargetInstanceName[0];
    };
};
struct alignas( 8 ) tagWNODE_TOO_SMALL
{
    _WNODE_HEADER WnodeHeader;
    ULONG SizeNeeded;
};
struct alignas( 4 ) _TXFS_CREATE_MINIVERSION_INFO
{
    WORD StructureVersion;
    WORD StructureLength;
    DWORD BaseVersion;
    WORD MiniVersion;
};
struct alignas( 4 ) _CHANGER_ELEMENT_STATUS
{
    CHANGER_ELEMENT Element;
    CHANGER_ELEMENT SrcElementAddress;
    DWORD Flags;
    DWORD ExceptionCode;
    BYTE TargetId;
    BYTE Lun;
    WORD Reserved;
    BYTE PrimaryVolumeID[36];
    BYTE AlternateVolumeID[36];
};
struct alignas( 4 ) _EXFAT_STATISTICS
{
    DWORD CreateHits;
    DWORD SuccessfulCreates;
    DWORD FailedCreates;
    DWORD NonCachedReads;
    DWORD NonCachedReadBytes;
    DWORD NonCachedWrites;
    DWORD NonCachedWriteBytes;
    DWORD NonCachedDiskReads;
    DWORD NonCachedDiskWrites;
};
struct alignas( 4 ) _CHANGER_READ_ELEMENT_STATUS
{
    CHANGER_ELEMENT_LIST ElementList;
    BOOLEAN VolumeTagInfo;
};
struct alignas( 4 ) _VIRTUAL_STORAGE_TYPE
{
    DWORD DeviceId;
    GUID VendorId;
};
struct alignas( 4 ) _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY
{
    DWORD EntryLength;
    DWORD DependencyTypeFlags;
    DWORD ProviderSpecificFlags;
    VIRTUAL_STORAGE_TYPE VirtualStorageType;
};
struct alignas( 4 ) _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY
{
    DWORD EntryLength;
    DWORD DependencyTypeFlags;
    DWORD ProviderSpecificFlags;
    VIRTUAL_STORAGE_TYPE VirtualStorageType;
    DWORD AncestorLevel;
    DWORD HostVolumeNameOffset;
    DWORD HostVolumeNameSize;
    DWORD DependentVolumeNameOffset;
    DWORD DependentVolumeNameSize;
    DWORD RelativePathOffset;
    DWORD RelativePathSize;
    DWORD DependentDeviceNameOffset;
    DWORD DependentDeviceNameSize;
};
struct alignas( 4 ) _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE
{
    DWORD ResponseLevel;
    DWORD NumberEntries;
    union alignas( 4 )
    {
        STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY Lev1Depends[0];
        STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY Lev2Depends[0];
    };
};
struct alignas( 4 ) _STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT
{
    DWORD Version;
    DWORD Size;
    STORAGE_PROTOCOL_SPECIFIC_DATA_EXT ProtocolSpecificData;
};
struct alignas( 8 ) STARTING_LCN_INPUT_BUFFER
{
    LARGE_INTEGER StartingLcn;
};
struct alignas( 8 ) _MIDL_STUB_DESC
{
    void* RpcInterfaceInformation;
    void* ( *pfnAllocate )( size_t );
    void ( *pfnFree )( void* );
    union alignas( 8 )
    {
        handle_t* pAutoHandle;
        handle_t* pPrimitiveHandle;
        PGENERIC_BINDING_INFO pGenericBindingInfo;
    } IMPLICIT_HANDLE_INFO;
    const NDR_RUNDOWN* apfnNdrRundownRoutines;
    const GENERIC_BINDING_ROUTINE_PAIR* aGenericBindingRoutinePairs;
    const EXPR_EVAL* apfnExprEval;
    const XMIT_ROUTINE_QUINTUPLE* aXmitQuintuple;
    unsigned char* pFormatTypes;
    int fCheckBounds;
    unsigned long Version;
    MALLOC_FREE_STRUCT* pMallocFreeStruct;
    long MIDLVersion;
    const COMM_FAULT_OFFSETS* CommFaultOffsets;
    const USER_MARSHAL_ROUTINE_QUADRUPLE* aUserMarshalQuadruple;
    const NDR_NOTIFY_ROUTINE* NotifyRoutineTable;
    ULONG_PTR mFlags;
    const NDR_CS_ROUTINES* CsRoutineTables;
    void* ProxyServerInfo;
    const NDR_EXPR_DESC* pExprInfo;
};
struct alignas( 8 ) _SD_CHANGE_MACHINE_SID_OUTPUT
{
    DWORDLONG NumSDChangedSuccess;
    DWORDLONG NumSDChangedFail;
    DWORDLONG NumSDUnused;
    DWORDLONG NumSDTotal;
    DWORDLONG NumMftSDChangedSuccess;
    DWORDLONG NumMftSDChangedFail;
    DWORDLONG NumMftSDTotal;
};
struct alignas( 4 ) _STORAGE_TEMPERATURE_DATA_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    SHORT CriticalTemperature;
    SHORT WarningTemperature;
    WORD InfoCount;
    BYTE Reserved0[2];
    DWORD Reserved1[2];
    STORAGE_TEMPERATURE_INFO TemperatureInfo[1];
};
struct alignas( 8 ) _STORAGE_HW_FIRMWARE_DOWNLOAD
{
    DWORD Version;
    DWORD Size;
    DWORD Flags;
    BYTE Slot;
    BYTE Reserved[3];
    DWORDLONG Offset;
    DWORDLONG BufferSize;
    BYTE ImageBuffer[1];
};
struct alignas( 8 ) _EVENT_TRACE_PROFILE_COUNTER_INFORMATION
{
    EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
    TRACEHANDLE TraceHandle;
    ULONG ProfileSource[1];
};
struct alignas( 4 ) _HISTOGRAM_BUCKET
{
    DWORD Reads;
    DWORD Writes;
};
struct alignas( 1 ) _DECRYPTION_STATUS_BUFFER
{
    BOOLEAN NoEncryptedStreams;
};
struct alignas( 4 ) _FILE_FS_PERSISTENT_VOLUME_INFORMATION
{
    DWORD VolumeFlags;
    DWORD FlagMask;
    DWORD Version;
    DWORD Reserved;
};
struct alignas( 4 ) _CHANGER_MOVE_MEDIUM
{
    CHANGER_ELEMENT Transport;
    CHANGER_ELEMENT Source;
    CHANGER_ELEMENT Destination;
    BOOLEAN Flip;
};
struct alignas( 4 ) _STORAGE_TEMPERATURE_THRESHOLD
{
    DWORD Version;
    DWORD Size;
    WORD Flags;
    WORD Index;
    SHORT Threshold;
    BOOLEAN OverThreshold;
    BYTE Reserved;
};
struct alignas( 4 ) _CHANGER_EXCHANGE_MEDIUM
{
    CHANGER_ELEMENT Transport;
    CHANGER_ELEMENT Source;
    CHANGER_ELEMENT Destination1;
    CHANGER_ELEMENT Destination2;
    BOOLEAN Flip1;
    BOOLEAN Flip2;
};
struct alignas( 8 ) _SCONTEXT_QUEUE
{
    unsigned long NumberOfObjects;
    NDR_SCONTEXT* ArrayOfObjects;
};
struct alignas( 8 ) _DISK_HISTOGRAM
{
    LARGE_INTEGER DiskSize;
    LARGE_INTEGER Start;
    LARGE_INTEGER End;
    LARGE_INTEGER Average;
    LARGE_INTEGER AverageRead;
    LARGE_INTEGER AverageWrite;
    DWORD Granularity;
    DWORD Size;
    DWORD ReadCount;
    DWORD WriteCount;
    PHISTOGRAM_BUCKET Histogram;
};
struct alignas( 8 ) _ENCRYPTED_DATA_INFO
{
    DWORDLONG StartingFileOffset;
    DWORD OutputBufferOffset;
    DWORD BytesWithinFileSize;
    DWORD BytesWithinValidDataLength;
    WORD CompressionFormat;
    BYTE DataUnitShift;
    BYTE ChunkShift;
    BYTE ClusterShift;
    BYTE EncryptionFormat;
    WORD NumberOfDataBlocks;
    DWORD DataBlockSize[1];
};
struct alignas( 4 ) _STORAGE_HW_FIRMWARE_ACTIVATE
{
    DWORD Version;
    DWORD Size;
    DWORD Flags;
    BYTE Slot;
    BYTE Reserved0[3];
};
struct alignas( 4 ) _SCM_PD_PROPERTY_SET
{
    DWORD Version;
    DWORD Size;
    SCM_PD_PROPERTY_ID PropertyId;
    SCM_PD_SET_TYPE SetType;
    BYTE AdditionalParameters[1];
};
struct alignas( 8 ) _SM_STORE_CACHE_BACKED_PARAMS
{
    ULONG SectorSize;
    PCHAR EncryptionKey;
    ULONG EncryptionKeySize;
    PSMKM_FILE_INFO FileInfo;
    PVOID EtaContext;
    PRTL_BITMAP StoreRegionBitmap;
};
struct alignas( 8 ) _SM_STORE_PARAMETERS
{
    SM_STORE_BASIC_PARAMS Store;
    ULONG Priority;
    ULONG Flags;
    SM_STORE_CACHE_BACKED_PARAMS CacheBacked;
};
struct alignas( 8 ) _TXFS_LIST_TRANSACTIONS
{
    DWORDLONG NumberOfTransactions;
    DWORDLONG BufferSizeRequired;
};
struct alignas( 4 ) _GET_CHANGER_PARAMETERS
{
    DWORD Size;
    WORD NumberTransportElements;
    WORD NumberStorageElements;
    WORD NumberCleanerSlots;
    WORD NumberIEElements;
    WORD NumberDataTransferElements;
    WORD NumberOfDoors;
    WORD FirstSlotNumber;
    WORD FirstDriveNumber;
    WORD FirstTransportNumber;
    WORD FirstIEPortNumber;
    WORD FirstCleanerSlotAddress;
    WORD MagazineSize;
    DWORD DriveCleanTimeout;
    DWORD Features0;
    DWORD Features1;
    BYTE MoveFromTransport;
    BYTE MoveFromSlot;
    BYTE MoveFromIePort;
    BYTE MoveFromDrive;
    BYTE ExchangeFromTransport;
    BYTE ExchangeFromSlot;
    BYTE ExchangeFromIePort;
    BYTE ExchangeFromDrive;
    BYTE LockUnlockCapabilities;
    BYTE PositionCapabilities;
    BYTE Reserved1[2];
    DWORD Reserved2[2];
};
union alignas( 4 ) _STORAGE_SPEC_VERSION
{
    struct alignas( 2 )
    {
        union alignas( 2 )
        {
            struct alignas( 1 )
            {
                BYTE SubMinor;
                BYTE Minor;
            };
            WORD AsUshort;
        } MinorVersion;
        WORD MajorVersion;
    };
    DWORD AsUlong;
};
struct alignas( 8 ) _SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO
{
    GUID DeviceGuid;
    DWORD DeviceNumber;
    struct alignas( 4 )
    {
        DWORD ForcedByRegistry : 1;
        DWORD Initialized : 1;
        DWORD Reserved : 30;
    } Flags;
    DWORDLONG DeviceSize;
};
struct alignas( 8 ) _SCM_BUS_DEDICATED_MEMORY_DEVICES_INFO
{
    DWORD Version;
    DWORD Size;
    DWORD DeviceCount;
    SCM_BUS_DEDICATED_MEMORY_DEVICE_INFO Devices[1];
};
struct alignas( 8 ) _STORAGE_PHYSICAL_DEVICE_DATA
{
    DWORD DeviceId;
    DWORD Role;
    STORAGE_COMPONENT_HEALTH_STATUS HealthStatus;
    STORAGE_PROTOCOL_TYPE CommandProtocol;
    STORAGE_SPEC_VERSION SpecVersion;
    STORAGE_DEVICE_FORM_FACTOR FormFactor;
    BYTE Vendor[8];
    BYTE Model[40];
    BYTE FirmwareRevision[16];
    DWORDLONG Capacity;
    BYTE PhysicalLocation[32];
    DWORD Reserved[2];
};
struct alignas( 4 ) _RPC_POLICY
{
    unsigned int Length;
    unsigned long EndpointFlags;
    unsigned long NICFlags;
};
struct alignas( 8 ) NTFS_VOLUME_DATA_BUFFER
{
    LARGE_INTEGER VolumeSerialNumber;
    LARGE_INTEGER NumberSectors;
    LARGE_INTEGER TotalClusters;
    LARGE_INTEGER FreeClusters;
    LARGE_INTEGER TotalReserved;
    DWORD BytesPerSector;
    DWORD BytesPerCluster;
    DWORD BytesPerFileRecordSegment;
    DWORD ClustersPerFileRecordSegment;
    LARGE_INTEGER MftValidDataLength;
    LARGE_INTEGER MftStartLcn;
    LARGE_INTEGER Mft2StartLcn;
    LARGE_INTEGER MftZoneStart;
    LARGE_INTEGER MftZoneEnd;
};
struct alignas( 1 ) _FSCTL_QUERY_FAT_BPB_BUFFER
{
    BYTE First0x24BytesOfBootSector[36];
};
struct alignas( 4 ) _STORAGE_PHYSICAL_ADAPTER_DATA
{
    DWORD AdapterId;
    STORAGE_COMPONENT_HEALTH_STATUS HealthStatus;
    STORAGE_PROTOCOL_TYPE CommandProtocol;
    STORAGE_SPEC_VERSION SpecVersion;
    BYTE Vendor[8];
    BYTE Model[40];
    BYTE FirmwareRevision[16];
    BYTE PhysicalLocation[32];
    BOOLEAN ExpanderConnected;
    BYTE Reserved0[3];
    DWORD Reserved1[3];
};
struct alignas( 8 ) _RPC_PROTSEQ_VECTORW
{
    unsigned int Count;
    unsigned short* Protseq[1];
};
struct alignas( 8 ) _SCM_PD_DEVICE_SPECIFIC_PROPERTY
{
    WCHAR Name[128];
    LONGLONG Value;
};
union alignas( 4 ) _EVENT_TRACE_PROFILE_ADD_INFORMATION_V2
{
    struct alignas( 1 )
    {
        UCHAR PerfEvtEventSelect;
        UCHAR PerfEvtUnitSelect;
        UCHAR PerfEvtCMask;
        UCHAR PerfEvtCInv;
        UCHAR PerfEvtAnyThread;
        UCHAR PerfEvtEdgeDetect;
    } Intel;
    struct alignas( 1 )
    {
        UCHAR PerfEvtEventSelect;
        UCHAR PerfEvtUnitSelect;
    } Amd;
    struct alignas( 4 )
    {
        ULONG PerfEvtType;
        UCHAR AllowsHalt;
    } Arm;
};
struct alignas( 4 ) _STORAGE_PHYSICAL_NODE_DATA
{
    DWORD NodeId;
    DWORD AdapterCount;
    DWORD AdapterDataLength;
    DWORD AdapterDataOffset;
    DWORD DeviceCount;
    DWORD DeviceDataLength;
    DWORD DeviceDataOffset;
    DWORD Reserved[3];
};
struct alignas( 4 ) _STORAGE_HW_FIRMWARE_INFO_QUERY
{
    DWORD Version;
    DWORD Size;
    DWORD Flags;
    DWORD Reserved;
};
struct alignas( 4 ) _STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    DWORD NodeCount;
    DWORD Reserved;
    STORAGE_PHYSICAL_NODE_DATA Node[1];
};
struct alignas( 4 ) _DISK_CACHE_INFORMATION
{
    BOOLEAN ParametersSavable;
    BOOLEAN ReadCacheEnabled;
    BOOLEAN WriteCacheEnabled;
    DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority;
    DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority;
    WORD DisablePrefetchTransferLength;
    BOOLEAN PrefetchScalar;
    union alignas( 2 )
    {
        struct alignas( 2 )
        {
            WORD Minimum;
            WORD Maximum;
            WORD MaximumBlocks;
        } ScalarPrefetch;
        struct alignas( 2 )
        {
            WORD Minimum;
            WORD Maximum;
        } BlockPrefetch;
    };
};
struct alignas( 8 ) _FILE_ZERO_DATA_INFORMATION_EX
{
    LARGE_INTEGER FileOffset;
    LARGE_INTEGER BeyondFinalZero;
    DWORD Flags;
};
struct alignas( 4 ) _STORAGE_HW_FIRMWARE_SLOT_INFO
{
    DWORD Version;
    DWORD Size;
    BYTE SlotNumber;
    BYTE ReadOnly : 1;
    BYTE Reserved0 : 7;
    BYTE Reserved1[6];
    BYTE Revision[16];
};
struct alignas( 8 ) _RDR_CALLOUT_STATE
{
    RPC_STATUS LastError;
    void* LastEEInfo;
    RPC_HTTP_REDIRECTOR_STAGE LastCalledStage;
    unsigned short* ServerName;
    unsigned short* ServerPort;
    unsigned short* RemoteUser;
    unsigned short* AuthType;
    unsigned char ResourceTypePresent;
    unsigned char SessionIdPresent;
    unsigned char InterfacePresent;
    UUID ResourceType;
    UUID SessionId;
    RPC_SYNTAX_IDENTIFIER Interface;
    void* CertContext;
};
struct alignas( 4 ) _STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    DWORD LunMaxIoCount;
    DWORD AdapterMaxIoCount;
};
struct alignas( 4 ) _MINIDUMP_TOKEN_INFO_HEADER
{
    ULONG TokenSize;
    ULONG TokenId;
    ULONG64 TokenHandle;
};
struct alignas( 4 ) _STORAGE_HW_FIRMWARE_INFO
{
    DWORD Version;
    DWORD Size;
    BYTE SupportUpgrade : 1;
    BYTE Reserved0 : 7;
    BYTE SlotCount;
    BYTE ActiveSlot;
    BYTE PendingActivateSlot;
    BOOLEAN FirmwareShared;
    BYTE Reserved[3];
    DWORD ImagePayloadAlignment;
    DWORD ImagePayloadMaxSize;
    STORAGE_HW_FIRMWARE_SLOT_INFO Slot[1];
};
struct alignas( 8 ) _STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    DWORD64 Attributes;
};
struct alignas( 8 ) _SYSTEM_VERIFIER_INFORMATION_EX
{
    ULONG VerifyMode;
    ULONG OptionChanges;
    UNICODE_STRING PreviousBucketName;
    ULONG IrpCancelTimeoutMsec;
    ULONG VerifierExtensionEnabled;
    ULONG Reserved[1];
};
struct alignas( 8 ) _SHRINK_VOLUME_INFORMATION
{
    SHRINK_VOLUME_REQUEST_TYPES ShrinkRequestType;
    DWORDLONG Flags;
    LONGLONG NewNumberOfSectors;
};
struct alignas( 8 ) _RTL_PROCESS_BACKTRACE_INFORMATION
{
    PCHAR SymbolicBackTrace;
    ULONG TraceCount;
    USHORT Index;
    USHORT Depth;
    PVOID BackTrace[32];
};
struct alignas( 1 ) _IDEREGS
{
    BYTE bFeaturesReg;
    BYTE bSectorCountReg;
    BYTE bSectorNumberReg;
    BYTE bCylLowReg;
    BYTE bCylHighReg;
    BYTE bDriveHeadReg;
    BYTE bCommandReg;
    BYTE bReserved;
};
struct alignas( 8 ) _SCM_REGION
{
    DWORD Version;
    DWORD Size;
    DWORD Flags;
    DWORD NfitHandle;
    GUID LogicalDeviceGuid;
    GUID AddressRangeType;
    DWORD AssociatedId;
    DWORD64 Length;
    DWORD64 StartingDPA;
    DWORD64 BaseSPA;
    DWORD64 SPAOffset;
    DWORD64 RegionOffset;
};
struct alignas( 8 ) _TXFS_QUERY_RM_INFORMATION
{
    DWORD BytesRequired;
    DWORDLONG TailLsn;
    DWORDLONG CurrentLsn;
    DWORDLONG ArchiveTailLsn;
    DWORDLONG LogContainerSize;
    LARGE_INTEGER HighestVirtualClock;
    DWORD LogContainerCount;
    DWORD LogContainerCountMax;
    DWORD LogContainerCountMin;
    DWORD LogGrowthIncrement;
    DWORD LogAutoShrinkPercentage;
    DWORD Flags;
    WORD LoggingMode;
    WORD Reserved;
    DWORD RmState;
    DWORDLONG LogCapacity;
    DWORDLONG LogFree;
    DWORDLONG TopsSize;
    DWORDLONG TopsUsed;
    DWORDLONG TransactionCount;
    DWORDLONG OnePCCount;
    DWORDLONG TwoPCCount;
    DWORDLONG NumberLogFileFull;
    DWORDLONG OldestTransactionAge;
    GUID RMName;
    DWORD TmLogPathOffset;
};
struct alignas( 4 ) _STORAGE_PROTOCOL_COMMAND
{
    DWORD Version;
    DWORD Length;
    STORAGE_PROTOCOL_TYPE ProtocolType;
    DWORD Flags;
    DWORD ReturnStatus;
    DWORD ErrorCode;
    DWORD CommandLength;
    DWORD ErrorInfoLength;
    DWORD DataToDeviceTransferLength;
    DWORD DataFromDeviceTransferLength;
    DWORD TimeOutValue;
    DWORD ErrorInfoOffset;
    DWORD DataToDeviceBufferOffset;
    DWORD DataFromDeviceBufferOffset;
    DWORD CommandSpecific;
    DWORD Reserved0;
    DWORD FixedProtocolReturnData;
    DWORD Reserved1[3];
    BYTE Command[1];
};
struct alignas( 4 ) _REQUEST_OPLOCK_OUTPUT_BUFFER
{
    WORD StructureVersion;
    WORD StructureLength;
    DWORD OriginalOplockLevel;
    DWORD NewOplockLevel;
    DWORD Flags;
    ACCESS_MASK AccessMode;
    WORD ShareMode;
};
struct alignas( 8 ) _SYSTEM_HANDLE_TABLE_ENTRY_INFO
{
    USHORT UniqueProcessId;
    USHORT CreatorBackTraceIndex;
    UCHAR ObjectTypeIndex;
    UCHAR HandleAttributes;
    USHORT HandleValue;
    PVOID Object;
    ACCESS_MASK GrantedAccess;
};
struct alignas( 8 ) _SYSTEM_HANDLE_INFORMATION
{
    ULONG NumberOfHandles;
    SYSTEM_HANDLE_TABLE_ENTRY_INFO Handles[1];
};
struct alignas( 1 ) _SCM_PD_RUNTIME_FW_ACTIVATION_ARM_STATE
{
    BOOLEAN ArmState;
};
struct alignas( 8 ) _DISK_PERFORMANCE
{
    LARGE_INTEGER BytesRead;
    LARGE_INTEGER BytesWritten;
    LARGE_INTEGER ReadTime;
    LARGE_INTEGER WriteTime;
    LARGE_INTEGER IdleTime;
    DWORD ReadCount;
    DWORD WriteCount;
    DWORD QueueDepth;
    DWORD SplitCount;
    LARGE_INTEGER QueryTime;
    DWORD StorageDeviceNumber;
    WCHAR StorageManagerName[8];
};
struct alignas( 4 ) _SCM_PD_DESCRIPTOR_HEADER
{
    DWORD Version;
    DWORD Size;
};
struct alignas( 8 ) _DISK_LOGGING
{
    BYTE Function;
    PVOID BufferAddress;
    DWORD BufferSize;
};
struct alignas( 4 ) _SI_COPYFILE
{
    DWORD SourceFileNameLength;
    DWORD DestinationFileNameLength;
    DWORD Flags;
    WCHAR FileNameBuffer[1];
};
struct alignas( 4 ) _STORAGE_ATTRIBUTE_MGMT
{
    DWORD Version;
    DWORD Size;
    STORAGE_ATTRIBUTE_MGMT_ACTION Action;
    DWORD Attribute;
};
struct alignas( 4 ) _SCM_PD_DEVICE_HANDLE
{
    DWORD Version;
    DWORD Size;
    GUID DeviceGuid;
    DWORD DeviceHandle;
};
struct alignas( 4 ) _SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT_WIN8
{
    ULONG Hits;
    UCHAR PercentFrequency;
};
struct alignas( 8 ) _SYSTEM_OBJECT_INFORMATION
{
    ULONG NextEntryOffset;
    PVOID Object;
    HANDLE CreatorUniqueProcess;
    USHORT CreatorBackTraceIndex;
    USHORT Flags;
    LONG PointerCount;
    LONG HandleCount;
    ULONG PagedPoolCharge;
    ULONG NonPagedPoolCharge;
    HANDLE ExclusiveProcessId;
    PVOID SecurityDescriptor;
    UNICODE_STRING NameInfo;
};
struct alignas( 4 ) _RPC_TRANSFER_SYNTAX
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
};
struct alignas( 4 ) _STORAGE_ADAPTER_SERIAL_NUMBER
{
    DWORD Version;
    DWORD Size;
    WCHAR SerialNumber[128];
};
struct alignas( 8 ) _STORAGE_COUNTERS
{
    DWORD Version;
    DWORD Size;
    DWORD NumberOfCounters;
    STORAGE_COUNTER Counters[1];
};
struct alignas( 8 ) NTFS_FILE_RECORD_OUTPUT_BUFFER
{
    LARGE_INTEGER FileReferenceNumber;
    DWORD FileRecordLength;
    BYTE FileRecordBuffer[1];
};
struct alignas( 4 ) _FILE_PROVIDER_EXTERNAL_INFO_V1
{
    DWORD Version;
    DWORD Algorithm;
    DWORD Flags;
};
struct alignas( 8 ) MOVE_FILE_RECORD_DATA
{
    HANDLE FileHandle;
    LARGE_INTEGER SourceFileRecord;
    LARGE_INTEGER TargetFileRecord;
};
struct alignas( 4 ) _SCM_PHYSICAL_DEVICES
{
    DWORD Version;
    DWORD Size;
    DWORD DeviceCount;
    SCM_PHYSICAL_DEVICE_INSTANCE Devices[1];
};
struct alignas( 1 ) _GETVERSIONINPARAMS
{
    BYTE bVersion;
    BYTE bRevision;
    BYTE bReserved;
    BYTE bIDEDeviceMap;
    DWORD fCapabilities;
    DWORD dwReserved[4];
};
struct alignas( 8 ) _STORAGE_ZONED_DEVICE_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    STORAGE_ZONED_DEVICE_TYPES DeviceType;
    DWORD ZoneCount;
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            DWORD MaxOpenZoneCount;
            BOOLEAN UnrestrictedRead;
            BYTE Reserved[3];
        } SequentialRequiredZone;
        struct alignas( 4 )
        {
            DWORD OptimalOpenZoneCount;
            DWORD Reserved;
        } SequentialPreferredZone;
    } ZoneAttributes;
    DWORD ZoneGroupCount;
    STORAGE_ZONE_GROUP ZoneGroup[1];
};
struct alignas( 4 ) _MINIDUMP_USER_STREAM
{
    ULONG32 Type;
    ULONG BufferSize;
    PVOID Buffer;
};
struct alignas( 8 ) _RPC_HTTP_TRANSPORT_CREDENTIALS_A
{
    SEC_WINNT_AUTH_IDENTITY_A* TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long* AuthnSchemes;
    unsigned char* ServerCertificateSubject;
};
struct alignas( 8 ) _SYSTEM_VA_LIST_INFORMATION
{
    SIZE_T VirtualSize;
    SIZE_T VirtualPeak;
    SIZE_T VirtualLimit;
    SIZE_T AllocationFailures;
};
struct alignas( 8 ) tagPARAMDATA
{
    OLECHAR* szName;
    VARTYPE vt;
};
struct alignas( 4 ) _SCM_BUS_PROPERTY_SET
{
    DWORD Version;
    DWORD Size;
    SCM_BUS_PROPERTY_ID PropertyId;
    SCM_BUS_SET_TYPE SetType;
    BYTE AdditionalParameters[1];
};
struct alignas( 2 ) _CONTAINER_ROOT_INFO_OUTPUT
{
    WORD ContainerRootIdLength;
    BYTE ContainerRootId[1];
};
struct alignas( 1 ) _SCM_BUS_DEDICATED_MEMORY_STATE
{
    BOOLEAN ActivateState;
};
struct alignas( 8 ) _SYSTEM_POOLTAG_INFORMATION
{
    ULONG Count;
    SYSTEM_POOLTAG TagInfo[1];
};
struct alignas( 8 ) tagMETHODDATA
{
    OLECHAR* szName;
    PARAMDATA* ppdata;
    DISPID dispid;
    UINT iMeth;
    CALLCONV cc;
    UINT cArgs;
    WORD wFlags;
    VARTYPE vtReturn;
};
struct alignas( 4 ) _CONTAINER_ROOT_INFO_INPUT
{
    DWORD Flags;
};
struct alignas( 8 ) _MOVE_FILE_DATA32
{
    UINT32 FileHandle;
    LARGE_INTEGER StartingVcn;
    LARGE_INTEGER StartingLcn;
    DWORD ClusterCount;
};
struct alignas( 4 ) FIND_BY_SID_OUTPUT
{
    DWORD NextEntryOffset;
    DWORD FileIndex;
    DWORD FileNameLength;
    WCHAR FileName[1];
};
struct alignas( 4 ) _DEVICE_LOCATION
{
    DWORD Socket;
    DWORD Slot;
    DWORD Adapter;
    DWORD Port;
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            DWORD Channel;
            DWORD Device;
        };
        struct alignas( 4 )
        {
            DWORD Target;
            DWORD Lun;
        };
    };
};
struct alignas( 8 ) _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W
{
    RPC_AUTH_IDENTITY_HANDLE TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long* AuthnSchemes;
    unsigned short* ServerCertificateSubject;
    RPC_AUTH_IDENTITY_HANDLE ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
    unsigned long* ProxyAuthnSchemes;
};
struct alignas( 1 ) _DRIVERSTATUS
{
    BYTE bDriverError;
    BYTE bIDEError;
    BYTE bReserved[2];
    DWORD dwReserved[2];
};
struct alignas( 4 ) _STORAGE_DEVICE_LOCATION_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    DEVICE_LOCATION Location;
    DWORD StringOffset;
};
struct alignas( 4 ) _STORAGE_DEVICE_NUMA_PROPERTY
{
    DWORD Version;
    DWORD Size;
    DWORD NumaNode;
};
struct alignas( 8 ) _GET_DISK_ATTRIBUTES
{
    DWORD Version;
    DWORD Reserved1;
    DWORDLONG Attributes;
};
struct alignas( 4 ) _STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT
{
    DWORD Version;
    DWORD Size;
    DWORD UnsafeShutdownCount;
};
struct alignas( 4 ) _STORAGE_HW_ENDURANCE_INFO
{
    DWORD ValidFields;
    DWORD GroupId;
    struct alignas( 4 )
    {
        DWORD Shared : 1;
        DWORD Reserved : 31;
    } Flags;
    DWORD LifePercentage;
    BYTE BytesReadCount[16];
    BYTE ByteWriteCount[16];
};
struct alignas( 4 ) _STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    STORAGE_HW_ENDURANCE_INFO EnduranceInfo;
};
struct alignas( 8 ) _PERF_BIN
{
    DWORD NumberOfBins;
    DWORD TypeOfBin;
    BIN_RANGE BinsRanges[1];
};
struct alignas( 8 ) _MARK_HANDLE_INFO
{
    union alignas( 4 )
    {
        DWORD UsnSourceInfo;
        DWORD CopyNumber;
    };
    HANDLE VolumeHandle;
    DWORD HandleInfo;
};
struct alignas( 4 ) _STORAGE_DEVICE_SELF_ENCRYPTION_PROPERTY
{
    DWORD Version;
    DWORD Size;
    BOOLEAN SupportsSelfEncryption;
};
struct alignas( 4 ) _CREATE_DISK_GPT
{
    GUID DiskId;
    DWORD MaxPartitionCount;
};
struct alignas( 1 ) _DEVICEDUMP_SECTION_HEADER
{
    GUID guidDeviceDataId;
    BYTE sOrganizationID[16];
    DWORD dwFirmwareRevision;
    BYTE sModelNumber[32];
    BYTE szDeviceManufacturingID[32];
    DWORD dwFlags;
    DWORD bRestrictedPrivateDataVersion;
    DWORD dwFirmwareIssueId;
    BYTE szIssueDescriptionString[132];
};
struct alignas( 1 ) _SET_PARTITION_INFORMATION
{
    BYTE PartitionType;
};
struct alignas( 8 ) _PARTITION_INFORMATION_GPT
{
    GUID PartitionType;
    GUID PartitionId;
    DWORD64 Attributes;
    WCHAR Name[36];
};
struct alignas( 8 ) _SET_PARTITION_INFORMATION_EX
{
    PARTITION_STYLE PartitionStyle;
    union alignas( 8 )
    {
        SET_PARTITION_INFORMATION_MBR Mbr;
        SET_PARTITION_INFORMATION_GPT Gpt;
    };
};
struct alignas( 8 ) RPC_ENDPOINT_TEMPLATEA
{
    unsigned long Version;
    RPC_CSTR ProtSeq;
    RPC_CSTR Endpoint;
    void* SecurityDescriptor;
    unsigned long Backlog;
};
struct alignas( 4 ) _MINIDUMP_HANDLE_OPERATION_LIST
{
    ULONG32 SizeOfHeader;
    ULONG32 SizeOfEntry;
    ULONG32 NumberOfEntries;
    ULONG32 Reserved;
};
struct alignas( 4 ) _MARK_HANDLE_INFO32
{
    union alignas( 4 )
    {
        DWORD UsnSourceInfo;
        DWORD CopyNumber;
    };
    UINT32 VolumeHandle;
    DWORD HandleInfo;
};
struct alignas( 4 ) _CREATE_DISK_MBR
{
    DWORD Signature;
};
struct alignas( 4 ) _CREATE_DISK
{
    PARTITION_STYLE PartitionStyle;
    union alignas( 4 )
    {
        CREATE_DISK_MBR Mbr;
        CREATE_DISK_GPT Gpt;
    };
};
struct alignas( 4 ) USN_RECORD_COMMON_HEADER
{
    DWORD RecordLength;
    WORD MajorVersion;
    WORD MinorVersion;
};
struct alignas( 4 ) _STORAGE_FRU_ID_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    DWORD IdentifierSize;
    BYTE Identifier[1];
};
struct alignas( 8 ) _DRIVE_LAYOUT_INFORMATION
{
    DWORD PartitionCount;
    DWORD Signature;
    PARTITION_INFORMATION PartitionEntry[1];
};
struct alignas( 4 ) _MINIDUMP_MEMORY_DESCRIPTOR
{
    ULONG64 StartOfMemoryRange;
    MINIDUMP_LOCATION_DESCRIPTOR Memory;
};
struct alignas( 4 ) _MINIDUMP_MEMORY_LIST
{
    ULONG32 NumberOfMemoryRanges;
    MINIDUMP_MEMORY_DESCRIPTOR MemoryRanges[0];
};
struct alignas( 4 ) _REASSIGN_BLOCKS
{
    WORD Reserved;
    WORD Count;
    DWORD BlockNumber[1];
};
struct alignas( 1 ) _DEVICEDUMP_SUBSECTION_POINTER
{
    DWORD dwSize;
    DWORD dwFlags;
    DWORD dwOffset;
};
struct alignas( 4 ) _DEVICE_MANAGE_DATA_SET_ATTRIBUTES
{
    DWORD Size;
    DEVICE_DSM_ACTION Action;
    DWORD Flags;
    DWORD ParameterBlockOffset;
    DWORD ParameterBlockLength;
    DWORD DataSetRangesOffset;
    DWORD DataSetRangesLength;
};
struct alignas( 4 ) _MINIDUMP_THREAD
{
    ULONG32 ThreadId;
    ULONG32 SuspendCount;
    ULONG32 PriorityClass;
    ULONG32 Priority;
    ULONG64 Teb;
    MINIDUMP_MEMORY_DESCRIPTOR Stack;
    MINIDUMP_LOCATION_DESCRIPTOR ThreadContext;
};
struct alignas( 4 ) _MINIDUMP_THREAD_LIST
{
    ULONG32 NumberOfThreads;
    MINIDUMP_THREAD Threads[0];
};
struct alignas( 8 ) CREATE_USN_JOURNAL_DATA
{
    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;
};
struct alignas( 2 ) _ETW_BUFFER_CONTEXT
{
    union alignas( 2 )
    {
        struct alignas( 1 )
        {
            UCHAR ProcessorNumber;
            UCHAR Alignment;
        };
        USHORT ProcessorIndex;
    };
    USHORT LoggerId;
};
struct alignas( 8 ) ETW_BUFFER_HEADER
{
    ULONG Reserved1[4];
    LARGE_INTEGER TimeStamp;
    ULONG Reserved2[4];
    ETW_BUFFER_CONTEXT ClientContext;
    ULONG Reserved3;
    ULONG FilledBytes;
    ULONG Reserved4[5];
};
struct alignas( 8 ) _RPC_SECURITY_QOS_V3_A
{
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
    unsigned long AdditionalSecurityInfoType;
    union alignas( 8 )
    {
        RPC_HTTP_TRANSPORT_CREDENTIALS_A* HttpCredentials;
    } u;
    void* Sid;
};
struct alignas( 8 ) ETW_BUFFER_CALLBACK_INFORMATION
{
    TRACEHANDLE TraceHandle;
    const TRACE_LOGFILE_HEADER* LogfileHeader;
    ULONG BuffersRead;
};
struct alignas( 4 ) _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT
{
    DWORD Size;
    DEVICE_DSM_ACTION Action;
    DWORD Flags;
    DWORD OperationStatus;
    DWORD ExtendedError;
    DWORD TargetDetailedError;
    DWORD ReservedStatus;
    DWORD OutputBlockOffset;
    DWORD OutputBlockLength;
};
struct alignas( 8 ) _MIDL_STUB_MESSAGE
{
    PRPC_MESSAGE RpcMsg;
    unsigned char* Buffer;
    unsigned char* BufferStart;
    unsigned char* BufferEnd;
    unsigned char* BufferMark;
    unsigned long BufferLength;
    unsigned long MemorySize;
    unsigned char* Memory;
    unsigned char IsClient;
    unsigned char Pad;
    unsigned short uFlags2;
    int ReuseBuffer;
    NDR_ALLOC_ALL_NODES_CONTEXT* pAllocAllNodesContext;
    NDR_POINTER_QUEUE_STATE* pPointerQueueState;
    int IgnoreEmbeddedPointers;
    unsigned char* PointerBufferMark;
    unsigned char CorrDespIncrement;
    unsigned char uFlags;
    unsigned short UniquePtrCount;
    ULONG_PTR MaxCount;
    unsigned long Offset;
    unsigned long ActualCount;
    void* ( *pfnAllocate )( size_t );
    void ( *pfnFree )( void* );
    unsigned char* StackTop;
    unsigned char* pPresentedType;
    unsigned char* pTransmitType;
    handle_t SavedHandle;
    const _MIDL_STUB_DESC* StubDesc;
    _FULL_PTR_XLAT_TABLES* FullPtrXlatTables;
    unsigned long FullPtrRefId;
    unsigned long PointerLength;
    int fInDontFree : 1;
    int fDontCallFreeInst : 1;
    int fUnused1 : 1;
    int fHasReturn : 1;
    int fHasExtensions : 1;
    int fHasNewCorrDesc : 1;
    int fIsIn : 1;
    int fIsOut : 1;
    int fIsOicf : 1;
    int fBufferValid : 1;
    int fHasMemoryValidateCallback : 1;
    int fInFree : 1;
    int fNeedMCCP : 1;
    int fUnused2 : 3;
    int fUnused3 : 16;
    unsigned long dwDestContext;
    void* pvDestContext;
    NDR_SCONTEXT* SavedContextHandles;
    long ParamNumber;
    IRpcChannelBuffer* pRpcChannelBuffer;
    PARRAY_INFO pArrayInfo;
    unsigned long* SizePtrCountArray;
    unsigned long* SizePtrOffsetArray;
    unsigned long* SizePtrLengthArray;
    void* pArgQueue;
    unsigned long dwStubPhase;
    void* LowStackMark;
    PNDR_ASYNC_MESSAGE pAsyncMsg;
    PNDR_CORRELATION_INFO pCorrInfo;
    unsigned char* pCorrMemory;
    void* pMemoryList;
    INT_PTR pCSInfo;
    unsigned char* ConformanceMark;
    unsigned char* VarianceMark;
    INT_PTR Unused;
    _NDR_PROC_CONTEXT* pContext;
    void* ContextHandleHash;
    void* pUserMarshalList;
    INT_PTR Reserved51_3;
    INT_PTR Reserved51_4;
    INT_PTR Reserved51_5;
};
struct alignas( 4 ) _STORAGE_REINITIALIZE_MEDIA
{
    DWORD Version;
    DWORD Size;
    DWORD TimeoutInSeconds;
    struct alignas( 4 )
    {
        DWORD SanitizeMethod : 4;
        DWORD DisallowUnrestrictedSanitizeExit : 1;
        DWORD Reserved : 27;
    } SanitizeOption;
};
struct alignas( 8 ) _RTL_PROCESS_MODULE_INFORMATION
{
    PVOID Section;
    PVOID MappedBase;
    PVOID ImageBase;
    ULONG ImageSize;
    ULONG Flags;
    USHORT LoadOrderIndex;
    USHORT InitOrderIndex;
    USHORT LoadCount;
    USHORT OffsetToFileName;
    UCHAR FullPathName[256];
};
struct alignas( 8 ) _RTL_PROCESS_MODULES
{
    ULONG NumberOfModules;
    RTL_PROCESS_MODULE_INFORMATION Modules[1];
};
struct alignas( 4 ) _SCM_PD_REINITIALIZE_MEDIA_OUTPUT
{
    DWORD Version;
    DWORD Size;
    SCM_PD_MEDIA_REINITIALIZATION_STATUS Status;
};
struct alignas( 2 ) _STORAGE_MEDIA_SERIAL_NUMBER_DATA
{
    WORD Reserved;
    WORD SerialNumberLength;
    BYTE SerialNumber[0];
};
struct alignas( 1 ) _FILE_SYSTEM_RECOGNITION_INFORMATION
{
    CHAR FileSystem[9];
};
struct alignas( 4 ) _DEVICE_DSM_DEFINITION
{
    DEVICE_DSM_ACTION Action;
    BOOLEAN SingleRange;
    DWORD ParameterBlockAlignment;
    DWORD ParameterBlockLength;
    BOOLEAN HasOutput;
    DWORD OutputBlockAlignment;
    DWORD OutputBlockLength;
};
struct alignas( 1 ) _GP_LOG_PAGE_DESCRIPTOR
{
    WORD LogAddress;
    WORD LogSectors;
};
struct alignas( 1 ) _DEVICEDUMP_PUBLIC_SUBSECTION
{
    DWORD dwFlags;
    GP_LOG_PAGE_DESCRIPTOR GPLogTable[16];
    CHAR szDescription[16];
    BYTE bData[1];
};
;
struct alignas( 4 ) _MINIDUMP_HANDLE_DESCRIPTOR_2
{
    ULONG64 Handle;
    RVA TypeNameRva;
    RVA ObjectNameRva;
    ULONG32 Attributes;
    ULONG32 GrantedAccess;
    ULONG32 HandleCount;
    ULONG32 PointerCount;
    RVA ObjectInfoRva;
    ULONG32 Reserved0;
};
struct alignas( 4 ) _DEVICE_DSM_NOTIFICATION_PARAMETERS
{
    DWORD Size;
    DWORD Flags;
    DWORD NumFileTypeIDs;
    GUID FileTypeID[1];
};
struct alignas( 8 ) RPC_CLIENT_INFORMATION1
{
    unsigned char* UserName;
    unsigned char* ComputerName;
    unsigned short Privilege;
    unsigned long AuthFlags;
};
struct alignas( 1 ) _DEVICEDUMP_RESTRICTED_SUBSECTION
{
    BYTE bData[1];
};
struct alignas( 8 ) USN_JOURNAL_DATA_V1
{
    DWORDLONG UsnJournalID;
    USN FirstUsn;
    USN NextUsn;
    USN LowestValidUsn;
    USN MaxUsn;
    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;
    WORD MinSupportedMajorVersion;
    WORD MaxSupportedMajorVersion;
};
struct alignas( 8 ) _RTL_PROCESS_MODULE_INFORMATION_EX
{
    USHORT NextOffset;
    union alignas( 8 )
    {
        RTL_PROCESS_MODULE_INFORMATION BaseInfo;
        struct alignas( 8 )
        {
            PVOID Section;
            PVOID MappedBase;
            PVOID ImageBase;
            ULONG ImageSize;
            ULONG Flags;
            USHORT LoadOrderIndex;
            USHORT InitOrderIndex;
            USHORT LoadCount;
            USHORT OffsetToFileName;
            UCHAR FullPathName[256];
        };
    };
    ULONG ImageChecksum;
    ULONG TimeDateStamp;
    PVOID DefaultBase;
};
struct alignas( 4 ) _DEVICE_DSM_OFFLOAD_READ_PARAMETERS
{
    DWORD Flags;
    DWORD TimeToLive;
    DWORD Reserved[2];
};
struct alignas( 4 ) _DISK_INT13_INFO
{
    WORD DriveSelect;
    DWORD MaxCylinders;
    WORD SectorsPerTrack;
    WORD MaxHeads;
    WORD NumberDrives;
};
struct alignas( 8 ) _DISK_EX_INT13_INFO
{
    WORD ExBufferSize;
    WORD ExFlags;
    DWORD ExCylinders;
    DWORD ExHeads;
    DWORD ExSectorsPerTrack;
    DWORD64 ExSectorsPerDrive;
    WORD ExSectorSize;
    WORD ExReserved;
};
struct alignas( 8 ) _WORKER_FACTORY_DEFERRED_WORK
{
    PPORT_MESSAGE AlpcSendMessage;
    PVOID AlpcSendMessagePort;
    ULONG AlpcSendMessageFlags;
    ULONG Flags;
};
struct alignas( 4 ) _SCM_PD_FIRMWARE_ACTIVATE
{
    DWORD Version;
    DWORD Size;
    DWORD Flags;
    BYTE Slot;
};
struct alignas( 8 ) _STORAGE_OFFLOAD_WRITE_OUTPUT
{
    DWORD OffloadWriteFlags;
    DWORD Reserved;
    DWORDLONG LengthCopied;
};
struct alignas( 4 ) _PHYSICAL_ELEMENT_STATUS_REQUEST
{
    DWORD Version;
    DWORD Size;
    DWORD StartingElement;
    BYTE Filter;
    BYTE ReportType;
    BYTE Reserved[2];
};
struct alignas( 8 ) _GET_LENGTH_INFORMATION
{
    LARGE_INTEGER Length;
};
struct alignas( 1 ) _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD
{
    BYTE Cdb[16];
    BYTE Command[16];
    DWORDLONG StartTime;
    DWORDLONG EndTime;
    DWORD OperationStatus;
    DWORD OperationError;
    union alignas( 1 )
    {
        struct alignas( 1 )
        {
            DWORD dwReserved;
        } ExternalStack;
        struct alignas( 1 )
        {
            DWORD dwAtaPortSpecific;
        } AtaPort;
        struct alignas( 1 )
        {
            DWORD SrbTag;
        } StorPort;
    } StackSpecific;
};
struct alignas( 8 ) _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W
{
    SEC_WINNT_AUTH_IDENTITY_W* TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long* AuthnSchemes;
    unsigned short* ServerCertificateSubject;
    SEC_WINNT_AUTH_IDENTITY_W* ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
    unsigned long* ProxyAuthnSchemes;
};
struct alignas( 8 ) _PHYSICAL_ELEMENT_STATUS_DESCRIPTOR
{
    DWORD Version;
    DWORD Size;
    DWORD ElementIdentifier;
    BYTE PhysicalElementType;
    BYTE PhysicalElementHealth;
    BYTE Reserved1[2];
    DWORDLONG AssociatedCapacity;
    DWORD Reserved2[4];
};
struct alignas( 4 ) _MINIDUMP_UNLOADED_MODULE
{
    ULONG64 BaseOfImage;
    ULONG32 SizeOfImage;
    ULONG32 CheckSum;
    ULONG32 TimeDateStamp;
    RVA ModuleNameRva;
};
struct alignas( 4 ) _DEVICE_DATA_SET_LBP_STATE_PARAMETERS
{
    DWORD Version;
    DWORD Size;
    DWORD Flags;
    DWORD OutputVersion;
};
struct alignas( 8 ) MOVE_FILE_DATA
{
    HANDLE FileHandle;
    LARGE_INTEGER StartingVcn;
    LARGE_INTEGER StartingLcn;
    DWORD ClusterCount;
};
struct alignas( 8 ) _SYSTEM_PERFORMANCE_INFORMATION
{
    LARGE_INTEGER IdleProcessTime;
    LARGE_INTEGER IoReadTransferCount;
    LARGE_INTEGER IoWriteTransferCount;
    LARGE_INTEGER IoOtherTransferCount;
    ULONG IoReadOperationCount;
    ULONG IoWriteOperationCount;
    ULONG IoOtherOperationCount;
    ULONG AvailablePages;
    ULONG CommittedPages;
    ULONG CommitLimit;
    ULONG PeakCommitment;
    ULONG PageFaultCount;
    ULONG CopyOnWriteCount;
    ULONG TransitionCount;
    ULONG CacheTransitionCount;
    ULONG DemandZeroCount;
    ULONG PageReadCount;
    ULONG PageReadIoCount;
    ULONG CacheReadCount;
    ULONG CacheIoCount;
    ULONG DirtyPagesWriteCount;
    ULONG DirtyWriteIoCount;
    ULONG MappedPagesWriteCount;
    ULONG MappedWriteIoCount;
    ULONG PagedPoolPages;
    ULONG NonPagedPoolPages;
    ULONG PagedPoolAllocs;
    ULONG PagedPoolFrees;
    ULONG NonPagedPoolAllocs;
    ULONG NonPagedPoolFrees;
    ULONG FreeSystemPtes;
    ULONG ResidentSystemCodePage;
    ULONG TotalSystemDriverPages;
    ULONG TotalSystemCodePages;
    ULONG NonPagedPoolLookasideHits;
    ULONG PagedPoolLookasideHits;
    ULONG AvailablePagedPoolPages;
    ULONG ResidentSystemCachePage;
    ULONG ResidentPagedPoolPage;
    ULONG ResidentSystemDriverPage;
    ULONG CcFastReadNoWait;
    ULONG CcFastReadWait;
    ULONG CcFastReadResourceMiss;
    ULONG CcFastReadNotPossible;
    ULONG CcFastMdlReadNoWait;
    ULONG CcFastMdlReadWait;
    ULONG CcFastMdlReadResourceMiss;
    ULONG CcFastMdlReadNotPossible;
    ULONG CcMapDataNoWait;
    ULONG CcMapDataWait;
    ULONG CcMapDataNoWaitMiss;
    ULONG CcMapDataWaitMiss;
    ULONG CcPinMappedDataCount;
    ULONG CcPinReadNoWait;
    ULONG CcPinReadWait;
    ULONG CcPinReadNoWaitMiss;
    ULONG CcPinReadWaitMiss;
    ULONG CcCopyReadNoWait;
    ULONG CcCopyReadWait;
    ULONG CcCopyReadNoWaitMiss;
    ULONG CcCopyReadWaitMiss;
    ULONG CcMdlReadNoWait;
    ULONG CcMdlReadWait;
    ULONG CcMdlReadNoWaitMiss;
    ULONG CcMdlReadWaitMiss;
    ULONG CcReadAheadIos;
    ULONG CcLazyWriteIos;
    ULONG CcLazyWritePages;
    ULONG CcDataFlushes;
    ULONG CcDataPages;
    ULONG ContextSwitches;
    ULONG FirstLevelTbFills;
    ULONG SecondLevelTbFills;
    ULONG SystemCalls;
    ULONGLONG CcTotalDirtyPages;
    ULONGLONG CcDirtyPageThreshold;
    LONGLONG ResidentAvailablePages;
    ULONGLONG SharedCommittedPages;
    ULONGLONG MdlPagesAllocated;
    ULONGLONG PfnDatabaseCommittedPages;
    ULONGLONG SystemPageTableCommittedPages;
    ULONGLONG ContiguousPagesAllocated;
};
struct alignas( 8 ) _FILE_PREFETCH_EX
{
    DWORD Type;
    DWORD Count;
    PVOID Context;
    DWORDLONG Prefetch[1];
};
struct alignas( 4 ) _MINIDUMP_MEMORY_DESCRIPTOR64
{
    ULONG64 StartOfMemoryRange;
    ULONG64 DataSize;
};
struct alignas( 8 ) _PHYSICAL_ELEMENT_STATUS
{
    DWORD Version;
    DWORD Size;
    DWORD DescriptorCount;
    DWORD ReturnedDescriptorCount;
    DWORD ElementIdentifierBeingDepoped;
    DWORD Reserved;
    PHYSICAL_ELEMENT_STATUS_DESCRIPTOR Descriptors[1];
};
struct alignas( 4 ) _PARTITION_INFORMATION_MBR
{
    BYTE PartitionType;
    BOOLEAN BootIndicator;
    BOOLEAN RecognizedPartition;
    DWORD HiddenSectors;
    GUID PartitionId;
};
struct alignas( 8 ) _PARTITION_INFORMATION_EX
{
    PARTITION_STYLE PartitionStyle;
    LARGE_INTEGER StartingOffset;
    LARGE_INTEGER PartitionLength;
    DWORD PartitionNumber;
    BOOLEAN RewritePartition;
    BOOLEAN IsServicePartition;
    union alignas( 8 )
    {
        PARTITION_INFORMATION_MBR Mbr;
        PARTITION_INFORMATION_GPT Gpt;
    };
};
struct alignas( 8 ) _SYSTEM_VERIFIER_ISSUE
{
    ULONGLONG IssueType;
    PVOID Address;
    ULONGLONG Parameters[2];
};
struct alignas( 8 ) _DEVICE_DATA_SET_LB_PROVISIONING_STATE
{
    DWORD Size;
    DWORD Version;
    DWORDLONG SlabSizeInBytes;
    DWORD SlabOffsetDeltaInBytes;
    DWORD SlabAllocationBitMapBitCount;
    DWORD SlabAllocationBitMapLength;
    DWORD SlabAllocationBitMap[1];
};
struct alignas( 4 ) _MINIDUMP_EXCEPTION_INFORMATION64
{
    DWORD ThreadId;
    ULONG64 ExceptionRecord;
    ULONG64 ContextRecord;
    BOOL ClientPointers;
};
struct alignas( 1 ) _REASSIGN_BLOCKS_EX
{
    WORD Reserved;
    WORD Count;
    LARGE_INTEGER BlockNumber[1];
};
struct alignas( 8 ) _DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2
{
    DWORD Size;
    DWORD Version;
    DWORDLONG SlabSizeInBytes;
    DWORDLONG SlabOffsetDeltaInBytes;
    DWORD SlabAllocationBitMapBitCount;
    DWORD SlabAllocationBitMapLength;
    DWORD SlabAllocationBitMap[1];
};
struct alignas( 8 ) USN_JOURNAL_DATA_V0
{
    DWORDLONG UsnJournalID;
    USN FirstUsn;
    USN NextUsn;
    USN LowestValidUsn;
    USN MaxUsn;
    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;
};
struct alignas( 4 ) _DEVICE_DATA_SET_REPAIR_PARAMETERS
{
    DWORD NumberOfRepairCopies;
    DWORD SourceCopy;
    DWORD RepairCopies[1];
};
struct alignas( 8 ) _DEVICE_DATA_SET_REPAIR_OUTPUT
{
    DEVICE_DSM_RANGE ParityExtent;
};
struct alignas( 8 ) RPC_DISPATCH_TABLE
{
    unsigned int DispatchTableCount;
    RPC_DISPATCH_FUNCTION* DispatchTable;
    LONG_PTR Reserved;
};
struct alignas( 8 ) _DEVICE_DATA_SET_SCRUB_OUTPUT
{
    DWORDLONG BytesProcessed;
    DWORDLONG BytesRepaired;
    DWORDLONG BytesFailed;
};
struct alignas( 1 ) _STORAGE_RPMB_DATA_FRAME
{
    BYTE Stuff[196];
    BYTE KeyOrMAC[32];
    BYTE Data[256];
    BYTE Nonce[16];
    BYTE WriteCounter[4];
    BYTE Address[2];
    BYTE BlockCount[2];
    BYTE OperationResult[2];
    BYTE RequestOrResponseType[2];
};
struct alignas( 8 ) _SEC_WINNT_AUTH_IDENTITY_W
{
    unsigned short* User;
    unsigned long UserLength;
    unsigned short* Domain;
    unsigned long DomainLength;
    unsigned short* Password;
    unsigned long PasswordLength;
    unsigned long Flags;
};
struct alignas( 4 ) _SCM_PD_MANAGEMENT_STATUS
{
    DWORD Version;
    DWORD Size;
    SCM_PD_HEALTH_STATUS Health;
    DWORD NumberOfOperationalStatus;
    DWORD NumberOfAdditionalReasons;
    SCM_PD_OPERATIONAL_STATUS OperationalStatus[16];
    SCM_PD_OPERATIONAL_STATUS_REASON AdditionalReasons[1];
};
struct alignas( 4 ) _SCM_PD_FRU_ID_STRING
{
    DWORD Version;
    DWORD Size;
    DWORD IdentifierSize;
    BYTE Identifier[1];
};
struct alignas( 4 ) RETRIEVAL_POINTER_COUNT
{
    DWORD ExtentCount;
};
struct alignas( 4 ) _DEVICE_DSM_TIERING_QUERY_INPUT
{
    DWORD Version;
    DWORD Size;
    DWORD Flags;
    DWORD NumberOfTierIds;
    GUID TierIds[1];
};
struct alignas( 4 ) _SYSTEM_CONTEXT_SWITCH_INFORMATION
{
    ULONG ContextSwitches;
    ULONG FindAny;
    ULONG FindLast;
    ULONG FindIdeal;
    ULONG IdleAny;
    ULONG IdleCurrent;
    ULONG IdleLast;
    ULONG IdleIdeal;
    ULONG PreemptAny;
    ULONG PreemptCurrent;
    ULONG PreemptLast;
    ULONG SwitchToIdle;
};
struct alignas( 8 ) _STORAGE_TIER_REGION
{
    GUID TierId;
    DWORDLONG Offset;
    DWORDLONG Length;
};
;
struct alignas( 8 ) _DEVICE_DSM_TIERING_QUERY_OUTPUT
{
    DWORD Version;
    DWORD Size;
    DWORD Flags;
    DWORD Reserved;
    DWORDLONG Alignment;
    DWORD TotalNumberOfRegions;
    DWORD NumberOfRegionsReturned;
    STORAGE_TIER_REGION Regions[1];
};
struct alignas( 8 ) USN_TRACK_MODIFIED_RANGES
{
    DWORD Flags;
    DWORD Unused;
    DWORDLONG ChunkSize;
    LONGLONG FileSizeThreshold;
};
struct alignas( 4 ) _DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS
{
    DWORD Size;
    BYTE TargetPriority;
    BYTE Reserved[3];
};
struct alignas( 4 ) _STORAGE_IDLE_POWER
{
    DWORD Version;
    DWORD Size;
    DWORD WakeCapableHint : 1;
    DWORD D3ColdSupported : 1;
    DWORD Reserved : 30;
    DWORD D3IdleTimeout;
};
struct alignas( 4 ) _MINIDUMP_MISC_INFO_2
{
    ULONG32 SizeOfInfo;
    ULONG32 Flags1;
    ULONG32 ProcessId;
    ULONG32 ProcessCreateTime;
    ULONG32 ProcessUserTime;
    ULONG32 ProcessKernelTime;
    ULONG32 ProcessorMaxMhz;
    ULONG32 ProcessorCurrentMhz;
    ULONG32 ProcessorMhzLimit;
    ULONG32 ProcessorMaxIdleState;
    ULONG32 ProcessorCurrentIdleState;
};
struct alignas( 8 ) _DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT
{
    DWORDLONG TopologyRangeBytes;
    BYTE TopologyId[16];
};
struct alignas( 8 ) _REMOVE_ELEMENT_AND_TRUNCATE_REQUEST
{
    DWORD Version;
    DWORD Size;
    DWORDLONG RequestCapacity;
    DWORD ElementIdentifier;
    DWORD Reserved;
};
struct alignas( 8 ) _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A
{
    RPC_AUTH_IDENTITY_HANDLE TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long* AuthnSchemes;
    unsigned char* ServerCertificateSubject;
    RPC_AUTH_IDENTITY_HANDLE ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
    unsigned long* ProxyAuthnSchemes;
};
struct alignas( 4 ) _STORAGE_IDLE_POWERUP_REASON
{
    DWORD Version;
    DWORD Size;
    STORAGE_POWERUP_REASON_TYPE PowerupReason;
};
struct alignas( 4 ) _SCM_PD_PASSTHROUGH_INPUT
{
    DWORD Version;
    DWORD Size;
    GUID ProtocolGuid;
    DWORD DataSize;
    BYTE Data[1];
};
struct alignas( 8 ) _DEVICE_STORAGE_ADDRESS_RANGE
{
    LONGLONG StartAddress;
    DWORDLONG LengthInBytes;
};
struct alignas( 4 ) _MINIDUMP_STRING
{
    ULONG32 Length;
    WCHAR Buffer[0];
};
struct alignas( 4 ) _DRIVE_LAYOUT_INFORMATION_MBR
{
    DWORD Signature;
    DWORD CheckSum;
};
struct alignas( 8 ) _DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT
{
    DWORD Version;
    DWORD Flags;
    DWORD TotalNumberOfRanges;
    DWORD NumberOfRangesReturned;
    DEVICE_STORAGE_ADDRESS_RANGE Ranges[1];
};
struct alignas( 8 ) _STORAGE_ALLOCATE_BC_STREAM_OUTPUT
{
    DWORDLONG RequestSize;
    DWORD NumOutStandingRequests;
};
struct alignas( 4 ) _BOOT_ENTRY
{
    ULONG Version;
    ULONG Length;
    ULONG Id;
    ULONG Attributes;
    ULONG FriendlyNameOffset;
    ULONG BootFilePathOffset;
    ULONG OsOptionsLength;
    UCHAR OsOptions[1];
};
struct alignas( 4 ) _BOOT_ENTRY_LIST
{
    ULONG NextEntryOffset;
    BOOT_ENTRY BootEntry;
};
struct alignas( 4 ) _DEVICE_DSM_REPORT_ZONES_PARAMETERS
{
    DWORD Size;
    BYTE ReportOption;
    BYTE Partial;
    BYTE Reserved[2];
};
struct alignas( 4 ) _TRACE_PERIODIC_CAPTURE_STATE_INFO
{
    ULONG CaptureStateFrequencyInSeconds;
    USHORT ProviderCount;
    USHORT Reserved;
};
struct alignas( 4 ) _TRACE_VERSION_INFO
{
    UINT EtwTraceProcessingVersion;
    UINT Reserved;
};
struct alignas( 8 ) _REQUEST_RAW_ENCRYPTED_DATA
{
    LONGLONG FileOffset;
    DWORD Length;
};
struct alignas( 8 ) _STORAGE_ZONE_DESCRIPTOR
{
    DWORD Size;
    STORAGE_ZONE_TYPES ZoneType;
    STORAGE_ZONE_CONDITION ZoneCondition;
    BOOLEAN ResetWritePointerRecommend;
    BYTE Reserved0[3];
    DWORDLONG ZoneSize;
    DWORDLONG WritePointerOffset;
};
struct alignas( 4 ) _SCM_PD_REINITIALIZE_MEDIA_INPUT
{
    DWORD Version;
    DWORD Size;
    struct alignas( 4 )
    {
        DWORD Overwrite : 1;
    } Options;
};
struct alignas( 8 ) _DEVICE_DSM_REPORT_ZONES_DATA
{
    DWORD Size;
    DWORD ZoneCount;
    STORAGE_ZONES_ATTRIBUTES Attributes;
    DWORD Reserved0;
    STORAGE_ZONE_DESCRIPTOR ZoneDescriptors[1];
};
struct alignas( 8 ) READ_USN_JOURNAL_DATA_V0
{
    USN StartUsn;
    DWORD ReasonMask;
    DWORD ReturnOnlyOnClose;
    DWORDLONG Timeout;
    DWORDLONG BytesToWaitFor;
    DWORDLONG UsnJournalID;
};
union alignas( 4 ) _CPU_INFORMATION
{
    struct alignas( 4 )
    {
        ULONG32 VendorId[3];
        ULONG32 VersionInformation;
        ULONG32 FeatureInformation;
        ULONG32 AMDExtendedCpuFeatures;
    } X86CpuInfo;
    struct alignas( 4 )
    {
        ULONG64 ProcessorFeatures[2];
    } OtherCpuInfo;
};
struct alignas( 4 ) _MINIDUMP_SYSTEM_INFO
{
    USHORT ProcessorArchitecture;
    USHORT ProcessorLevel;
    USHORT ProcessorRevision;
    union alignas( 2 )
    {
        USHORT Reserved0;
        struct alignas( 1 )
        {
            UCHAR NumberOfProcessors;
            UCHAR ProductType;
        };
    };
    ULONG32 MajorVersion;
    ULONG32 MinorVersion;
    ULONG32 BuildNumber;
    ULONG32 PlatformId;
    RVA CSDVersionRva;
    union alignas( 4 )
    {
        ULONG32 Reserved1;
        struct alignas( 2 )
        {
            USHORT SuiteMask;
            USHORT Reserved2;
        };
    };
    CPU_INFORMATION Cpu;
};
struct alignas( 8 ) _SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX
{
    PVOID Object;
    HANDLE UniqueProcessId;
    HANDLE HandleValue;
    ACCESS_MASK GrantedAccess;
    USHORT CreatorBackTraceIndex;
    USHORT ObjectTypeIndex;
    ULONG HandleAttributes;
    ULONG Reserved;
};
struct alignas( 8 ) _PLEX_READ_DATA_REQUEST
{
    LARGE_INTEGER ByteOffset;
    DWORD ByteLength;
    DWORD PlexNumber;
};
struct alignas( 8 ) _TRACE_LOGFILE_HEADER64
{
    ULONG BufferSize;
    union alignas( 4 )
    {
        ULONG Version;
        struct alignas( 1 )
        {
            UCHAR MajorVersion;
            UCHAR MinorVersion;
            UCHAR SubVersion;
            UCHAR SubMinorVersion;
        } VersionDetail;
    };
    ULONG ProviderVersion;
    ULONG NumberOfProcessors;
    LARGE_INTEGER EndTime;
    ULONG TimerResolution;
    ULONG MaximumFileSize;
    ULONG LogFileMode;
    ULONG BuffersWritten;
    union alignas( 4 )
    {
        GUID LogInstanceGuid;
        struct alignas( 4 )
        {
            ULONG StartBuffers;
            ULONG PointerSize;
            ULONG EventsLost;
            ULONG CpuSpeedInMHz;
        };
    };
    ULONG64 LoggerName;
    ULONG64 LogFileName;
    TIME_ZONE_INFORMATION TimeZone;
    LARGE_INTEGER BootTime;
    LARGE_INTEGER PerfFreq;
    LARGE_INTEGER StartTime;
    ULONG ReservedFlags;
    ULONG BuffersLost;
};
struct alignas( 8 ) _DEVICE_STORAGE_RANGE_ATTRIBUTES
{
    DWORDLONG LengthInBytes;
    union alignas( 4 )
    {
        DWORD AllFlags;
        struct alignas( 4 )
        {
            DWORD IsRangeBad : 1;
        };
    };
    DWORD Reserved;
};
struct alignas( 8 ) _DEVICE_DSM_RANGE_ERROR_INFO
{
    DWORD Version;
    DWORD Flags;
    DWORD TotalNumberOfRanges;
    DWORD NumberOfRangesReturned;
    DEVICE_STORAGE_RANGE_ATTRIBUTES Ranges[1];
};
struct alignas( 4 ) _MINIDUMP_HANDLE_DESCRIPTOR
{
    ULONG64 Handle;
    RVA TypeNameRva;
    RVA ObjectNameRva;
    ULONG32 Attributes;
    ULONG32 GrantedAccess;
    ULONG32 HandleCount;
    ULONG32 PointerCount;
};
struct alignas( 1 ) _DEVICEDUMP_PRIVATE_SUBSECTION
{
    DWORD dwFlags;
    GP_LOG_PAGE_DESCRIPTOR GPLogId;
    BYTE bData[1];
};
struct alignas( 8 ) USN_RECORD_V2
{
    DWORD RecordLength;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORDLONG FileReferenceNumber;
    DWORDLONG ParentFileReferenceNumber;
    USN Usn;
    LARGE_INTEGER TimeStamp;
    DWORD Reason;
    DWORD SourceInfo;
    DWORD SecurityId;
    DWORD FileAttributes;
    WORD FileNameLength;
    WORD FileNameOffset;
    WCHAR FileName[1];
};
struct alignas( 4 ) _SEMAPHORE_BASIC_INFORMATION
{
    LONG CurrentCount;
    LONG MaximumCount;
};
struct alignas( 8 ) _DEVICE_DSM_LOST_QUERY_PARAMETERS
{
    DWORD Version;
    DWORDLONG Granularity;
};
struct alignas( 4 ) _STORAGE_WRITE_CACHE_PROPERTY
{
    DWORD Version;
    DWORD Size;
    WRITE_CACHE_TYPE WriteCacheType;
    WRITE_CACHE_ENABLE WriteCacheEnabled;
    WRITE_CACHE_CHANGE WriteCacheChangeable;
    WRITE_THROUGH WriteThroughSupported;
    BOOLEAN FlushCacheSupported;
    BOOLEAN UserDefinedPowerProtection;
    BOOLEAN NVCacheEnabled;
};
struct alignas( 8 ) _DEVICE_DSM_LOST_QUERY_OUTPUT
{
    DWORD Version;
    DWORD Size;
    DWORDLONG Alignment;
    DWORD NumberOfBits;
    DWORD BitMap[1];
};
struct alignas( 4 ) _MINIDUMP_EXCEPTION
{
    ULONG32 ExceptionCode;
    ULONG32 ExceptionFlags;
    ULONG64 ExceptionRecord;
    ULONG64 ExceptionAddress;
    ULONG32 NumberParameters;
    ULONG32 __unusedAlignment;
    ULONG64 ExceptionInformation[15];
};
struct alignas( 4 ) MINIDUMP_EXCEPTION_STREAM
{
    ULONG32 ThreadId;
    ULONG32 __alignment;
    MINIDUMP_EXCEPTION ExceptionRecord;
    MINIDUMP_LOCATION_DESCRIPTOR ThreadContext;
};
struct alignas( 8 ) _SYSTEM_POOL_ENTRY
{
    BOOLEAN Allocated;
    BOOLEAN Spare0;
    USHORT AllocatorBackTraceIndex;
    ULONG Size;
    union alignas( 8 )
    {
        UCHAR Tag[4];
        ULONG TagUlong;
        PVOID ProcessChargedQuota;
    };
};
struct alignas( 8 ) _DEVICE_DSM_FREE_SPACE_OUTPUT
{
    DWORD Version;
    DWORDLONG FreeSpace;
};
struct alignas( 4 ) _SCM_PD_PASSTHROUGH_INVDIMM_INPUT
{
    DWORD Opcode;
    DWORD OpcodeParametersLength;
    BYTE OpcodeParameters[1];
};
struct alignas( 8 ) _TIMER_BASIC_INFORMATION
{
    LARGE_INTEGER RemainingTime;
    BOOLEAN TimerState;
};
struct alignas( 8 ) _STORAGE_GET_BC_PROPERTIES_OUTPUT
{
    DWORD MaximumRequestsPerPeriod;
    DWORD MinimumPeriod;
    DWORDLONG MaximumRequestSize;
    DWORD EstimatedTimePerRequest;
    DWORD NumOutStandingRequests;
    DWORDLONG RequestSize;
};
struct alignas( 4 ) _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT
{
    WORD GeneralStatus;
    WORD ExtendedStatus;
    DWORD OutputDataLength;
    BYTE OutputData[1];
};
struct alignas( 1 ) _TXFS_TRANSACTION_ACTIVE_INFO
{
    BOOLEAN TransactionsActiveAtSnapshot;
};
struct alignas( 4 ) _MINIDUMP_MEMORY_INFO
{
    ULONG64 BaseAddress;
    ULONG64 AllocationBase;
    ULONG32 AllocationProtect;
    ULONG32 __alignment1;
    ULONG64 RegionSize;
    ULONG32 State;
    ULONG32 Protect;
    ULONG32 Type;
    ULONG32 __alignment2;
};
struct alignas( 8 ) _BOOT_AREA_INFO
{
    DWORD BootSectorCount;
    struct alignas( 8 )
    {
        LARGE_INTEGER Offset;
    } BootSectors[2];
};
struct alignas( 4 ) _ST_IO_STATS
{
    ULONG PeriodCount;
    ST_IO_STATS_PERIOD Periods[64];
};
struct alignas( 8 ) tagRPC_CALL_ATTRIBUTES_V1_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char* ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char* ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
};
struct alignas( 8 ) _TXFS_LIST_TRANSACTION_LOCKED_FILES
{
    GUID KtmTransaction;
    DWORDLONG NumberOfFiles;
    DWORDLONG BufferSizeRequired;
    DWORDLONG Offset;
};
struct alignas( 4 ) _STORAGE_DIAGNOSTIC_REQUEST
{
    DWORD Version;
    DWORD Size;
    DWORD Flags;
    STORAGE_DIAGNOSTIC_TARGET_TYPE TargetType;
    STORAGE_DIAGNOSTIC_LEVEL Level;
};
struct alignas( 8 ) tagRPC_CALL_ATTRIBUTES_V1_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short* ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short* ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
};
struct alignas( 4 ) _STORAGE_DIAGNOSTIC_DATA
{
    DWORD Version;
    DWORD Size;
    GUID ProviderId;
    DWORD BufferSize;
    DWORD Reserved;
    BYTE DiagnosticDataBuffer[1];
};
struct alignas( 8 ) _QUERY_FILE_LAYOUT_INPUT
{
    union alignas( 4 )
    {
        DWORD FilterEntryCount;
        DWORD NumberOfPairs;
    };
    DWORD Flags;
    QUERY_FILE_LAYOUT_FILTER_TYPE FilterType;
    DWORD Reserved;
    union alignas( 8 )
    {
        CLUSTER_RANGE ClusterRanges[1];
        FILE_REFERENCE_RANGE FileReferenceRanges[1];
        STORAGE_RESERVE_ID StorageReserveIds[1];
    } Filter;
};
struct alignas( 8 ) _FILE_INITIATE_REPAIR_OUTPUT_BUFFER
{
    DWORDLONG Hint1;
    DWORDLONG Hint2;
    CLSN Clsn;
    DWORD Status;
};
struct alignas( 8 ) _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER
{
    LARGE_INTEGER DirectoryCount;
    LARGE_INTEGER FileCount;
    WORD FsFormatMajVersion;
    WORD FsFormatMinVersion;
    WCHAR FsFormatName[12];
    LARGE_INTEGER FormatTime;
    LARGE_INTEGER LastUpdateTime;
    WCHAR CopyrightInfo[34];
    WCHAR AbstractInfo[34];
    WCHAR FormattingImplementationInfo[34];
    WCHAR LastModifyingImplementationInfo[34];
};
struct alignas( 8 ) IXMLHttpRequest
{
};
;
struct alignas( 4 ) _ST_DATA_MGR_STATS
{
    ULONG RegionCount;
    ULONG PagesStored;
    ULONG UniquePagesStored;
    ULONG LazyCleanupRegionCount;
    struct alignas( 4 )
    {
        ULONG RegionsInUse;
        ULONG SpaceUsed;
    } Space[8];
};
;
struct alignas( 8 ) _FILE_LAYOUT_ENTRY
{
    DWORD Version;
    DWORD NextFileOffset;
    DWORD Flags;
    DWORD FileAttributes;
    DWORDLONG FileReferenceNumber;
    DWORD FirstNameOffset;
    DWORD FirstStreamOffset;
    DWORD ExtraInfoOffset;
    DWORD ExtraInfoLength;
};
struct alignas( 8 ) _TXFS_SAVEPOINT_INFORMATION
{
    HANDLE KtmTransaction;
    DWORD ActionCode;
    DWORD SavepointId;
};
struct alignas( 4 ) _QUERY_FILE_LAYOUT_OUTPUT
{
    DWORD FileEntryCount;
    DWORD FirstFileOffset;
    DWORD Flags;
    DWORD Reserved;
};
struct alignas( 8 ) _FILE_LAYOUT_NAME_ENTRY
{
    DWORD NextNameOffset;
    DWORD Flags;
    DWORDLONG ParentFileReferenceNumber;
    DWORD FileNameLength;
    DWORD Reserved;
    WCHAR FileName[1];
};
struct alignas( 4 ) _EVENT_TRACE_EXECUTIVE_RESOURCE_INFORMATION
{
    EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
    ULONG ReleaseSamplingRate;
    ULONG ContentionSamplingRate;
    ULONG NumberOfExcessiveTimeouts;
};
;
struct alignas( 4 ) _GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST
{
    DWORD Version;
    DWORD Size;
    DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE RequestDataType;
    DEVICE_INTERNAL_STATUS_DATA_SET RequestDataSet;
};
struct alignas( 2 ) _SD_CHANGE_MACHINE_SID_INPUT
{
    WORD CurrentMachineSIDOffset;
    WORD CurrentMachineSIDLength;
    WORD NewMachineSIDOffset;
    WORD NewMachineSIDLength;
};
struct alignas( 8 ) _DISK_GROW_PARTITION
{
    DWORD PartitionNumber;
    LARGE_INTEGER BytesToGrow;
};
struct alignas( 8 ) _FULL_PTR_XLAT_TABLES
{
    void* RefIdToPointer;
    void* PointerToRefId;
    unsigned long NextRefId;
    XLAT_SIDE XlatSide;
};
struct alignas( 8 ) _SM_CREATE_REQUEST
{
    ULONG Version : 8;
    ULONG AcquireReference : 1;
    ULONG KeyedStore : 1;
    ULONG Spare : 22;
    SM_STORE_PARAMETERS Params;
    ULONG StoreId;
};
struct alignas( 8 ) tagRPC_CALL_ATTRIBUTES_V2_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char* ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char* ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    unsigned long IsClientLocal;
    HANDLE ClientPID;
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1* CallLocalAddress;
    unsigned short OpNum;
    UUID InterfaceUuid;
};
struct alignas( 8 ) _STORAGE_READ_CAPACITY
{
    DWORD Version;
    DWORD Size;
    DWORD BlockLength;
    LARGE_INTEGER NumberOfBlocks;
    LARGE_INTEGER DiskLength;
};
struct alignas( 4 ) _TXFS_READ_BACKUP_INFORMATION_OUT
{
    union alignas( 4 )
    {
        DWORD BufferLength;
        BYTE Buffer[1];
    };
};
struct alignas( 8 ) tagRPC_CALL_ATTRIBUTES_V2_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short* ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short* ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    RpcCallClientLocality IsClientLocal;
    HANDLE ClientPID;
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1* CallLocalAddress;
    unsigned short OpNum;
    UUID InterfaceUuid;
};
struct alignas( 4 ) _SM_STORE_LIST_REQUEST
{
    ULONG Version : 8;
    ULONG StoreCount : 8;
    ULONG ExtendedRequest : 1;
    ULONG Spare : 15;
    ULONG StoreId[32];
};
struct alignas( 4 ) _SM_STORE_LIST_REQUEST_EX
{
    SM_STORE_LIST_REQUEST Request;
    WCHAR NameBuffer[32][64];
};
;
;
struct alignas( 4 ) _PERSISTENT_RESERVE_COMMAND
{
    DWORD Version;
    DWORD Size;
    union alignas( 2 )
    {
        struct alignas( 2 )
        {
            BYTE ServiceAction : 5;
            BYTE Reserved1 : 3;
            WORD AllocationLength;
        } PR_IN;
        struct alignas( 1 )
        {
            BYTE ServiceAction : 5;
            BYTE Reserved1 : 3;
            BYTE Type : 4;
            BYTE Scope : 4;
            BYTE ParameterList[0];
        } PR_OUT;
    };
};
struct alignas( 4 ) _ENCRYPTION_BUFFER
{
    DWORD EncryptionOperation;
    BYTE Private[1];
};
struct alignas( 8 ) _TXFS_MODIFY_RM
{
    DWORD Flags;
    DWORD LogContainerCountMax;
    DWORD LogContainerCountMin;
    DWORD LogContainerCount;
    DWORD LogGrowthIncrement;
    DWORD LogAutoShrinkPercentage;
    DWORDLONG Reserved;
    WORD LoggingMode;
};
struct alignas( 8 ) _SYSTEM_VERIFIER_FAULTS_INFORMATION
{
    ULONG Probability;
    ULONG MaxProbability;
    UNICODE_STRING PoolTags;
    UNICODE_STRING Applications;
};
struct alignas( 1 ) _SENDCMDINPARAMS
{
    DWORD cBufferSize;
    IDEREGS irDriveRegs;
    BYTE bDriveNumber;
    BYTE bReserved[3];
    DWORD dwReserved[4];
    BYTE bBuffer[1];
};
struct alignas( 8 ) _SYSTEM_PAGEFILE_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG TotalSize;
    ULONG TotalInUse;
    ULONG PeakUsage;
    UNICODE_STRING PageFileName;
};
struct alignas( 1 ) _DEVICEDUMP_STORAGEDEVICE_DATA
{
    DEVICEDUMP_STRUCTURE_VERSION Descriptor;
    DEVICEDUMP_SECTION_HEADER SectionHeader;
    DWORD dwBufferSize;
    DWORD dwReasonForCollection;
    DEVICEDUMP_SUBSECTION_POINTER PublicData;
    DEVICEDUMP_SUBSECTION_POINTER RestrictedData;
    DEVICEDUMP_SUBSECTION_POINTER PrivateData;
};
struct alignas( 8 ) _SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT
{
    ULONGLONG Hits;
    UCHAR PercentFrequency;
};
struct alignas( 8 ) _SYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION
{
    ULONG ProcessorNumber;
    ULONG StateCount;
    SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT States[1];
};
struct alignas( 4 ) _RPC_SEC_CONTEXT_KEY_INFO
{
    unsigned long EncryptAlgorithm;
    unsigned long KeySize;
    unsigned long SignatureAlgorithm;
};
struct alignas( 8 ) _SD_ENUM_SDS_OUTPUT
{
    DWORDLONG NextOffset;
    DWORDLONG NumSDEntriesReturned;
    DWORDLONG NumSDBytesReturned;
    SD_ENUM_SDS_ENTRY SDEntry[1];
};
struct alignas( 8 ) _RTL_BITMAP
{
    ULONG SizeOfBitMap;
    PULONG Buffer;
};
struct alignas( 8 ) _SD_QUERY_STATS_OUTPUT
{
    DWORDLONG SdsStreamSize;
    DWORDLONG SdsAllocationSize;
    DWORDLONG SiiStreamSize;
    DWORDLONG SiiAllocationSize;
    DWORDLONG SdhStreamSize;
    DWORDLONG SdhAllocationSize;
    DWORDLONG NumSDTotal;
    DWORDLONG NumSDUnused;
};
struct alignas( 1 ) _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP
{
    DEVICEDUMP_STRUCTURE_VERSION Descriptor;
    DWORD dwReasonForCollection;
    BYTE cDriverName[16];
    DWORD uiNumRecords;
    DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD RecordArray[1];
};
struct alignas( 8 ) _SD_GLOBAL_CHANGE_OUTPUT
{
    DWORD Flags;
    DWORD ChangeType;
    union alignas( 8 )
    {
        SD_CHANGE_MACHINE_SID_OUTPUT SdChange;
        SD_QUERY_STATS_OUTPUT SdQueryStats;
        SD_ENUM_SDS_OUTPUT SdEnumSds;
    };
};
struct alignas( 4 ) _SYSTEM_INTERRUPT_INFORMATION
{
    ULONG ContextSwitches;
    ULONG DpcCount;
    ULONG DpcRate;
    ULONG TimeIncrement;
    ULONG DpcBypassCount;
    ULONG ApcBypassCount;
};
struct alignas( 8 ) _LOOKUP_STREAM_FROM_CLUSTER_ENTRY
{
    DWORD OffsetToNext;
    DWORD Flags;
    LARGE_INTEGER Reserved;
    LARGE_INTEGER Cluster;
    WCHAR FileName[1];
};
struct alignas( 4 ) tagOBJECTDESCRIPTOR
{
    ULONG cbSize;
    CLSID clsid;
    DWORD dwDrawAspect;
    SIZEL sizel;
    POINTL pointl;
    DWORD dwStatus;
    DWORD dwFullUserTypeName;
    DWORD dwSrcOfCopy;
};
struct alignas( 4 ) _SCM_PD_RUNTIME_FW_ACTIVATION_INFO
{
    DWORD Version;
    DWORD Size;
    SCM_PD_LAST_FW_ACTIVATION_STATUS LastFirmwareActivationStatus;
    SCM_PD_FIRMWARE_ACTIVATION_STATE FirmwareActivationState;
};
struct alignas( 8 ) tagRPC_CALL_ATTRIBUTES_V3_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char* ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char* ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    unsigned long IsClientLocal;
    HANDLE ClientPID;
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1* CallLocalAddress;
    unsigned short OpNum;
    UUID InterfaceUuid;
    unsigned long ClientIdentifierBufferLength;
    unsigned char* ClientIdentifier;
};
struct alignas( 4 ) _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT
{
    DWORD Offset;
    DWORD NumberOfMatches;
    DWORD BufferSizeRequired;
};
struct alignas( 8 ) _TXFS_START_RM_INFORMATION
{
    DWORD Flags;
    DWORDLONG LogContainerSize;
    DWORD LogContainerCountMin;
    DWORD LogContainerCountMax;
    DWORD LogGrowthIncrement;
    DWORD LogAutoShrinkPercentage;
    DWORD TmLogPathOffset;
    WORD TmLogPathLength;
    WORD LoggingMode;
    WORD LogPathLength;
    WORD Reserved;
    WCHAR LogPath[1];
};
struct alignas( 8 ) _SM_STATS_REQUEST
{
    ULONG Version : 8;
    ULONG DetailLevel : 8;
    ULONG StoreId : 16;
    ULONG BufferSize;
    PVOID Buffer;
};
struct alignas( 8 ) _STORAGE_DEVICE_POWER_CAP
{
    DWORD Version;
    DWORD Size;
    STORAGE_DEVICE_POWER_CAP_UNITS Units;
    DWORDLONG MaxPower;
};
struct alignas( 8 ) _TXFS_GET_METADATA_INFO_OUT
{
    struct alignas( 8 )
    {
        LONGLONG LowPart;
        LONGLONG HighPart;
    } TxfFileId;
    GUID LockingTransaction;
    DWORDLONG LastLsn;
    DWORD TransactionState;
};
struct alignas( 8 ) tagBinaryParam
{
    void* Buffer;
    short Size;
};
struct alignas( 4 ) _EVENT_TRACE_VERSION_INFORMATION
{
    EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
    ULONG EventTraceKernelVersion;
};
struct alignas( 1 ) _FILE_SET_DEFECT_MGMT_BUFFER
{
    BOOLEAN Disable;
};
struct alignas( 8 ) _STORAGE_EVENT_NOTIFICATION
{
    DWORD Version;
    DWORD Size;
    DWORDLONG Events;
};
struct alignas( 4 ) _MINIDUMP_HANDLE_DATA_STREAM
{
    ULONG32 SizeOfHeader;
    ULONG32 SizeOfDescriptor;
    ULONG32 NumberOfDescriptors;
    ULONG32 Reserved;
};
struct alignas( 8 ) _RPC_BINDING_HANDLE_SECURITY_V1_A
{
    unsigned long Version;
    unsigned char* ServerPrincName;
    unsigned long AuthnLevel;
    unsigned long AuthnSvc;
    SEC_WINNT_AUTH_IDENTITY_A* AuthIdentity;
    RPC_SECURITY_QOS* SecurityQos;
};
struct alignas( 8 ) USN_RECORD_EXTENT
{
    LONGLONG Offset;
    LONGLONG Length;
};
struct alignas( 8 ) _VERIFY_INFORMATION
{
    LARGE_INTEGER StartingOffset;
    DWORD Length;
};
struct alignas( 8 ) USN_RECORD_V4
{
    USN_RECORD_COMMON_HEADER Header;
    FILE_ID_128 FileReferenceNumber;
    FILE_ID_128 ParentFileReferenceNumber;
    USN Usn;
    DWORD Reason;
    DWORD SourceInfo;
    DWORD RemainingExtents;
    WORD NumberOfExtents;
    WORD ExtentSize;
    USN_RECORD_EXTENT Extents[1];
};
struct alignas( 8 ) _T2_SET_PARAMETERS_V0
{
    ULONG Version;
    ULONG Reserved;
    LONGLONG NoWakeTolerance;
};
struct alignas( 8 ) _RPC_SECURITY_QOS_V4_W
{
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
    unsigned long AdditionalSecurityInfoType;
    union alignas( 8 )
    {
        RPC_HTTP_TRANSPORT_CREDENTIALS_W* HttpCredentials;
    } u;
    void* Sid;
    unsigned int EffectiveOnly;
};
struct alignas( 8 ) _QUERY_BAD_RANGES_INPUT
{
    DWORD Flags;
    DWORD NumRanges;
    QUERY_BAD_RANGES_INPUT_RANGE Ranges[1];
};
struct alignas( 2 ) READ_FILE_USN_DATA
{
    WORD MinMajorVersion;
    WORD MaxMajorVersion;
};
struct alignas( 8 ) _STORAGE_HW_FIRMWARE_DOWNLOAD_V2
{
    DWORD Version;
    DWORD Size;
    DWORD Flags;
    BYTE Slot;
    BYTE Reserved[3];
    DWORDLONG Offset;
    DWORDLONG BufferSize;
    DWORD ImageSize;
    DWORD Reserved2;
    BYTE ImageBuffer[1];
};
struct alignas( 4 ) _STREAMS_QUERY_ID_OUTPUT_BUFFER
{
    DWORD StreamId;
};
struct alignas( 4 ) _ZONEATTRIBUTES
{
    ULONG cbSize;
    WCHAR szDisplayName[260];
    WCHAR szDescription[200];
    WCHAR szIconPath[260];
    DWORD dwTemplateMinLevel;
    DWORD dwTemplateRecommended;
    DWORD dwTemplateCurrentLevel;
    DWORD dwFlags;
};
struct alignas( 4 ) _SYSTEM_WATCHDOG_TIMER_INFORMATION
{
    WATCHDOG_INFORMATION_CLASS WdInfoClass;
    ULONG DataValue;
};
struct alignas( 8 ) _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT
{
    DWORD Flags;
    DWORD AlignmentShift;
    DWORDLONG FileOffsetToAlign;
    DWORD FallbackAlignmentShift;
};
struct alignas( 8 ) _QUERY_BAD_RANGES_OUTPUT_RANGE
{
    DWORD Flags;
    DWORD Reserved;
    DWORDLONG StartOffset;
    DWORDLONG LengthInBytes;
};
struct alignas( 8 ) _QUERY_BAD_RANGES_OUTPUT
{
    DWORD Flags;
    DWORD NumBadRanges;
    DWORDLONG NextOffsetToLookUp;
    QUERY_BAD_RANGES_OUTPUT_RANGE BadRanges[1];
};
struct alignas( 4 ) _READ_ELEMENT_ADDRESS_INFO
{
    DWORD NumberOfElements;
    CHANGER_ELEMENT_STATUS ElementStatus[1];
};
struct alignas( 8 ) DELETE_USN_JOURNAL_DATA
{
    DWORDLONG UsnJournalID;
    DWORD DeleteFlags;
};
struct alignas( 8 ) _NTFS_STATISTICS_EX
{
    DWORD LogFileFullExceptions;
    DWORD OtherExceptions;
    DWORDLONG MftReads;
    DWORDLONG MftReadBytes;
    DWORDLONG MftWrites;
    DWORDLONG MftWriteBytes;
    struct alignas( 4 )
    {
        DWORD Write;
        DWORD Create;
        DWORD SetInfo;
        DWORD Flush;
    } MftWritesUserLevel;
    DWORD MftWritesFlushForLogFileFull;
    DWORD MftWritesLazyWriter;
    DWORD MftWritesUserRequest;
    DWORDLONG Mft2Writes;
    DWORDLONG Mft2WriteBytes;
    struct alignas( 4 )
    {
        DWORD Write;
        DWORD Create;
        DWORD SetInfo;
        DWORD Flush;
    } Mft2WritesUserLevel;
    DWORD Mft2WritesFlushForLogFileFull;
    DWORD Mft2WritesLazyWriter;
    DWORD Mft2WritesUserRequest;
    DWORDLONG RootIndexReads;
    DWORDLONG RootIndexReadBytes;
    DWORDLONG RootIndexWrites;
    DWORDLONG RootIndexWriteBytes;
    DWORDLONG BitmapReads;
    DWORDLONG BitmapReadBytes;
    DWORDLONG BitmapWrites;
    DWORDLONG BitmapWriteBytes;
    DWORD BitmapWritesFlushForLogFileFull;
    DWORD BitmapWritesLazyWriter;
    DWORD BitmapWritesUserRequest;
    struct alignas( 4 )
    {
        DWORD Write;
        DWORD Create;
        DWORD SetInfo;
        DWORD Flush;
    } BitmapWritesUserLevel;
    DWORDLONG MftBitmapReads;
    DWORDLONG MftBitmapReadBytes;
    DWORDLONG MftBitmapWrites;
    DWORDLONG MftBitmapWriteBytes;
    DWORD MftBitmapWritesFlushForLogFileFull;
    DWORD MftBitmapWritesLazyWriter;
    DWORD MftBitmapWritesUserRequest;
    struct alignas( 4 )
    {
        DWORD Write;
        DWORD Create;
        DWORD SetInfo;
        DWORD Flush;
    } MftBitmapWritesUserLevel;
    DWORDLONG UserIndexReads;
    DWORDLONG UserIndexReadBytes;
    DWORDLONG UserIndexWrites;
    DWORDLONG UserIndexWriteBytes;
    DWORDLONG LogFileReads;
    DWORDLONG LogFileReadBytes;
    DWORDLONG LogFileWrites;
    DWORDLONG LogFileWriteBytes;
    struct alignas( 8 )
    {
        DWORD Calls;
        DWORD RunsReturned;
        DWORD Hints;
        DWORD HintsHonored;
        DWORD Cache;
        DWORD CacheMiss;
        DWORDLONG Clusters;
        DWORDLONG HintsClusters;
        DWORDLONG CacheClusters;
        DWORDLONG CacheMissClusters;
    } Allocate;
    DWORD DiskResourcesExhausted;
    DWORDLONG VolumeTrimCount;
    DWORDLONG VolumeTrimTime;
    DWORDLONG VolumeTrimByteCount;
    DWORDLONG FileLevelTrimCount;
    DWORDLONG FileLevelTrimTime;
    DWORDLONG FileLevelTrimByteCount;
    DWORDLONG VolumeTrimSkippedCount;
    DWORDLONG VolumeTrimSkippedByteCount;
    DWORDLONG NtfsFillStatInfoFromMftRecordCalledCount;
    DWORDLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount;
    DWORDLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount;
};
struct alignas( 8 ) _DISK_DETECTION_INFO
{
    DWORD SizeOfDetectInfo;
    DETECTION_TYPE DetectionType;
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            DISK_INT13_INFO Int13;
            DISK_EX_INT13_INFO ExInt13;
        };
    };
};
struct alignas( 8 ) _SCM_PD_FIRMWARE_DOWNLOAD
{
    DWORD Version;
    DWORD Size;
    DWORD Flags;
    BYTE Slot;
    BYTE Reserved[3];
    DWORD64 Offset;
    DWORD FirmwareImageSizeInBytes;
    BYTE FirmwareImage[1];
};
struct alignas( 8 ) _SYSTEM_VERIFIER_CANCELLATION_INFORMATION
{
    ULONG CancelProbability;
    ULONG CancelThreshold;
    ULONG CompletionThreshold;
    ULONG CancellationVerifierDisabled;
    ULONG AvailableIssues;
    SYSTEM_VERIFIER_ISSUE Issues[128];
};
struct alignas( 4 ) _SYSTEM_PROCESSOR_INFORMATION
{
    USHORT ProcessorArchitecture;
    USHORT ProcessorLevel;
    USHORT ProcessorRevision;
    USHORT MaximumProcessors;
    ULONG ProcessorFeatureBits;
};
struct alignas( 8 ) USN_RECORD_V3
{
    DWORD RecordLength;
    WORD MajorVersion;
    WORD MinorVersion;
    FILE_ID_128 FileReferenceNumber;
    FILE_ID_128 ParentFileReferenceNumber;
    USN Usn;
    LARGE_INTEGER TimeStamp;
    DWORD Reason;
    DWORD SourceInfo;
    DWORD SecurityId;
    DWORD FileAttributes;
    WORD FileNameLength;
    WORD FileNameOffset;
    WCHAR FileName[1];
};
union alignas( 8 ) USN_RECORD_UNION
{
    USN_RECORD_COMMON_HEADER Header;
    USN_RECORD_V2 V2;
    USN_RECORD_V3 V3;
    USN_RECORD_V4 V4;
};
struct alignas( 4 ) _MINIDUMP_EXCEPTION_INFORMATION
{
    DWORD ThreadId;
    PEXCEPTION_POINTERS ExceptionPointers;
    BOOL ClientPointers;
};
struct alignas( 8 ) _SCM_REGIONS
{
    DWORD Version;
    DWORD Size;
    DWORD RegionCount;
    SCM_REGION Regions[1];
};
struct alignas( 8 ) _SYSTEM_PROCESS_ID_INFORMATION
{
    HANDLE ProcessId;
    UNICODE_STRING ImageName;
};
struct alignas( 8 ) _RPC_PROTSEQ_ENDPOINT
{
    unsigned char* RpcProtocolSequence;
    unsigned char* Endpoint;
};
struct alignas( 4 ) _SYSTEM_IMAGE_FILE_EXECUTION_OPTIONS_INFORMATION
{
    ULONG FlagsToEnable;
    ULONG FlagsToDisable;
};
struct alignas( 4 ) _NTFS_STATISTICS
{
    DWORD LogFileFullExceptions;
    DWORD OtherExceptions;
    DWORD MftReads;
    DWORD MftReadBytes;
    DWORD MftWrites;
    DWORD MftWriteBytes;
    struct alignas( 2 )
    {
        WORD Write;
        WORD Create;
        WORD SetInfo;
        WORD Flush;
    } MftWritesUserLevel;
    WORD MftWritesFlushForLogFileFull;
    WORD MftWritesLazyWriter;
    WORD MftWritesUserRequest;
    DWORD Mft2Writes;
    DWORD Mft2WriteBytes;
    struct alignas( 2 )
    {
        WORD Write;
        WORD Create;
        WORD SetInfo;
        WORD Flush;
    } Mft2WritesUserLevel;
    WORD Mft2WritesFlushForLogFileFull;
    WORD Mft2WritesLazyWriter;
    WORD Mft2WritesUserRequest;
    DWORD RootIndexReads;
    DWORD RootIndexReadBytes;
    DWORD RootIndexWrites;
    DWORD RootIndexWriteBytes;
    DWORD BitmapReads;
    DWORD BitmapReadBytes;
    DWORD BitmapWrites;
    DWORD BitmapWriteBytes;
    WORD BitmapWritesFlushForLogFileFull;
    WORD BitmapWritesLazyWriter;
    WORD BitmapWritesUserRequest;
    struct alignas( 2 )
    {
        WORD Write;
        WORD Create;
        WORD SetInfo;
    } BitmapWritesUserLevel;
    DWORD MftBitmapReads;
    DWORD MftBitmapReadBytes;
    DWORD MftBitmapWrites;
    DWORD MftBitmapWriteBytes;
    WORD MftBitmapWritesFlushForLogFileFull;
    WORD MftBitmapWritesLazyWriter;
    WORD MftBitmapWritesUserRequest;
    struct alignas( 2 )
    {
        WORD Write;
        WORD Create;
        WORD SetInfo;
        WORD Flush;
    } MftBitmapWritesUserLevel;
    DWORD UserIndexReads;
    DWORD UserIndexReadBytes;
    DWORD UserIndexWrites;
    DWORD UserIndexWriteBytes;
    DWORD LogFileReads;
    DWORD LogFileReadBytes;
    DWORD LogFileWrites;
    DWORD LogFileWriteBytes;
    struct alignas( 4 )
    {
        DWORD Calls;
        DWORD Clusters;
        DWORD Hints;
        DWORD RunsReturned;
        DWORD HintsHonored;
        DWORD HintsClusters;
        DWORD Cache;
        DWORD CacheClusters;
        DWORD CacheMiss;
        DWORD CacheMissClusters;
    } Allocate;
    DWORD DiskResourcesExhausted;
};
struct alignas( 8 ) _SYSTEM_THREAD_INFORMATION
{
    LARGE_INTEGER KernelTime;
    LARGE_INTEGER UserTime;
    LARGE_INTEGER CreateTime;
    ULONG WaitTime;
    PVOID StartAddress;
    CLIENT_ID ClientId;
    KPRIORITY Priority;
    KPRIORITY BasePriority;
    ULONG ContextSwitches;
    KTHREAD_STATE ThreadState;
    KWAIT_REASON WaitReason;
};
struct alignas( 8 ) RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER
{
    DWORD ExtentCount;
    LARGE_INTEGER StartingVcn;
    struct alignas( 8 )
    {
        LARGE_INTEGER NextVcn;
        LARGE_INTEGER Lcn;
        DWORD ReferenceCount;
    } Extents[1];
};
struct alignas( 8 ) _SCM_BUS_RUNTIME_FW_ACTIVATION_INFO
{
    DWORD Version;
    DWORD Size;
    BOOLEAN RuntimeFwActivationSupported;
    SCM_BUS_FIRMWARE_ACTIVATION_STATE FirmwareActivationState;
    struct alignas( 4 )
    {
        DWORD FwManagedIoQuiesceFwActivationSupported : 1;
        DWORD OsManagedIoQuiesceFwActivationSupported : 1;
        DWORD WarmResetBasedFwActivationSupported : 1;
        DWORD Reserved : 29;
    } FirmwareActivationCapability;
    DWORDLONG EstimatedFirmwareActivationTimeInUSecs;
    DWORDLONG EstimatedProcessorAccessQuiesceTimeInUSecs;
    DWORDLONG EstimatedIOAccessQuiesceTimeInUSecs;
    DWORDLONG PlatformSupportedMaxIOAccessQuiesceTimeInUSecs;
};
struct alignas( 8 ) _SEC_WINNT_AUTH_IDENTITY_A
{
    unsigned char* User;
    unsigned long UserLength;
    unsigned char* Domain;
    unsigned long DomainLength;
    unsigned char* Password;
    unsigned long PasswordLength;
    unsigned long Flags;
};
struct alignas( 8 ) READ_USN_JOURNAL_DATA_V1
{
    USN StartUsn;
    DWORD ReasonMask;
    DWORD ReturnOnlyOnClose;
    DWORDLONG Timeout;
    DWORDLONG BytesToWaitFor;
    DWORDLONG UsnJournalID;
    WORD MinMajorVersion;
    WORD MaxMajorVersion;
};
struct alignas( 1 ) _SYSTEM_KERNEL_DEBUGGER_INFORMATION
{
    BOOLEAN KernelDebuggerEnabled;
    BOOLEAN KernelDebuggerNotPresent;
};
struct alignas( 8 ) USN_RANGE_TRACK_OUTPUT
{
    USN Usn;
};
struct alignas( 8 ) _RPC_SECURITY_QOS_V5_W
{
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
    unsigned long AdditionalSecurityInfoType;
    union alignas( 8 )
    {
        RPC_HTTP_TRANSPORT_CREDENTIALS_W* HttpCredentials;
    } u;
    void* Sid;
    unsigned int EffectiveOnly;
    void* ServerSecurityDescriptor;
};
struct alignas( 8 ) STARTING_VCN_INPUT_BUFFER
{
    LARGE_INTEGER StartingVcn;
};
struct alignas( 4 ) _RPC_IF_ID
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
};
struct alignas( 8 ) _FILE_REGION_INFO
{
    LONGLONG FileOffset;
    LONGLONG Length;
    DWORD Usage;
    DWORD Reserved;
};
struct alignas( 8 ) _SYSTEM_NUMA_INFORMATION
{
    ULONG HighestNodeNumber;
    ULONG Reserved;
    union alignas( 8 )
    {
        GROUP_AFFINITY ActiveProcessorsGroupAffinity[64];
        ULONGLONG AvailableMemory[64];
        ULONGLONG Pad[128];
    };
};
struct alignas( 4 ) _WRITE_USN_REASON_INPUT
{
    DWORD Flags;
    DWORD UsnReasonToWrite;
};
struct alignas( 8 ) USN_JOURNAL_DATA_V2
{
    DWORDLONG UsnJournalID;
    USN FirstUsn;
    USN NextUsn;
    USN LowestValidUsn;
    USN MaxUsn;
    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;
    WORD MinSupportedMajorVersion;
    WORD MaxSupportedMajorVersion;
    DWORD Flags;
    DWORDLONG RangeTrackChunkSize;
    LONGLONG RangeTrackFileSizeThreshold;
};
struct alignas( 4 ) _REMSECURITY_ATTRIBUTES
{
    DWORD nLength;
    DWORD lpSecurityDescriptor;
    BOOL bInheritHandle;
};
struct alignas( 8 ) _tagRemBINDINFO
{
    ULONG cbSize;
    LPWSTR szExtraInfo;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    REMSECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown* pUnk;
    DWORD dwReserved;
};
struct alignas( 8 ) _SYSTEM_PROCESSOR_POWER_INFORMATION
{
    UCHAR CurrentFrequency;
    UCHAR ThermalLimitFrequency;
    UCHAR ConstantThrottleFrequency;
    UCHAR DegradedThrottleFrequency;
    UCHAR LastBusyFrequency;
    UCHAR LastC3Frequency;
    UCHAR LastAdjustedBusyFrequency;
    UCHAR ProcessorMinThrottle;
    UCHAR ProcessorMaxThrottle;
    ULONG NumberOfFrequencies;
    ULONG PromotionCount;
    ULONG DemotionCount;
    ULONG ErrorCount;
    ULONG RetryCount;
    ULONGLONG CurrentFrequencyTime;
    ULONGLONG CurrentProcessorTime;
    ULONGLONG CurrentProcessorIdleTime;
    ULONGLONG LastProcessorTime;
    ULONGLONG LastProcessorIdleTime;
    ULONGLONG Energy;
};
struct alignas( 8 ) _FILE_REGION_INPUT
{
    LONGLONG FileOffset;
    LONGLONG Length;
    DWORD DesiredUsage;
};
struct alignas( 8 ) _SCM_PD_DEVICE_INFO
{
    DWORD Version;
    DWORD Size;
    GUID DeviceGuid;
    DWORD UnsafeShutdownCount;
    DWORD64 PersistentMemorySizeInBytes;
    DWORD64 VolatileMemorySizeInBytes;
    DWORD64 TotalMemorySizeInBytes;
    DWORD SlotNumber;
    DWORD DeviceHandle;
    WORD PhysicalId;
    BYTE NumberOfFormatInterfaceCodes;
    WORD FormatInterfaceCodes[8];
    DWORD VendorId;
    DWORD ProductId;
    DWORD SubsystemDeviceId;
    DWORD SubsystemVendorId;
    BYTE ManufacturingLocation;
    BYTE ManufacturingWeek;
    BYTE ManufacturingYear;
    DWORD SerialNumber4Byte;
    DWORD SerialNumberLengthInChars;
    CHAR SerialNumber[1];
};
struct alignas( 8 ) _SCM_PD_DEVICE_SPECIFIC_INFO
{
    DWORD Version;
    DWORD Size;
    DWORD NumberOfProperties;
    SCM_PD_DEVICE_SPECIFIC_PROPERTY DeviceSpecificProperties[1];
};
struct alignas( 8 ) _RPC_SECURITY_QOS_V5_A
{
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
    unsigned long AdditionalSecurityInfoType;
    union alignas( 8 )
    {
        RPC_HTTP_TRANSPORT_CREDENTIALS_A* HttpCredentials;
    } u;
    void* Sid;
    unsigned int EffectiveOnly;
    void* ServerSecurityDescriptor;
};
struct alignas( 4 ) _SCM_PD_PASSTHROUGH_OUTPUT
{
    DWORD Version;
    DWORD Size;
    GUID ProtocolGuid;
    DWORD DataSize;
    BYTE Data[1];
};
struct alignas( 8 ) MFT_ENUM_DATA_V0
{
    DWORDLONG StartFileReferenceNumber;
    USN LowUsn;
    USN HighUsn;
};
struct alignas( 4 ) _SCM_PD_FIRMWARE_INFO
{
    DWORD Version;
    DWORD Size;
    BYTE ActiveSlot;
    BYTE NextActiveSlot;
    BYTE SlotCount;
    SCM_PD_FIRMWARE_SLOT_INFO Slots[1];
};
struct alignas( 8 ) _RPC_SECURITY_QOS_V2_A
{
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
    unsigned long AdditionalSecurityInfoType;
    union alignas( 8 )
    {
        RPC_HTTP_TRANSPORT_CREDENTIALS_A* HttpCredentials;
    } u;
};
struct alignas( 4 ) _STREAMS_ASSOCIATE_ID_INPUT_BUFFER
{
    DWORD Flags;
    DWORD StreamId;
};
struct alignas( 4 ) _SCM_PD_LOCATION_STRING
{
    DWORD Version;
    DWORD Size;
    WCHAR Location[1];
};
struct alignas( 8 ) _tagStartParam
{
    IID iid;
    IBindCtx* pIBindCtx;
    IUnknown* pItf;
};
struct alignas( 8 ) _TXFS_LIST_TRANSACTIONS_ENTRY
{
    GUID TransactionId;
    DWORD TransactionState;
    DWORD Reserved1;
    DWORD Reserved2;
    LONGLONG Reserved3;
};
struct alignas( 4 ) _DesiredStorageClass
{
    FILE_STORAGE_TIER_CLASS Class;
    DWORD Flags;
};
struct alignas( 8 ) _DataStream
{
    WORD Length;
    WORD Flags;
    DWORD Reserved;
    DWORDLONG Vdl;
};
struct alignas( 4 ) _Reparse
{
    WORD Length;
    WORD Flags;
    DWORD ReparseDataSize;
    DWORD ReparseDataOffset;
};
struct alignas( 4 ) _Ea
{
    WORD Length;
    WORD Flags;
    DWORD EaSize;
    DWORD EaInformationOffset;
};
union alignas( 8 ) _StreamInformation
{
    _DesiredStorageClass DesiredStorageClass;
    _DataStream DataStream;
    _Reparse Reparse;
    _Ea Ea;
};
struct alignas( 8 ) RPC_INTERFACE_TEMPLATEA
{
    unsigned long Version;
    RPC_IF_HANDLE IfSpec;
    UUID* MgrTypeUuid;
    void* MgrEpv;
    unsigned int Flags;
    unsigned int MaxCalls;
    unsigned int MaxRpcSize;
    RPC_STATUS ( *IfCallback )( RPC_IF_HANDLE, void* );
    UUID_VECTOR* UuidVector;
    RPC_CSTR Annotation;
    void* SecurityDescriptor;
};
struct alignas( 8 ) _TRACE_GUID_REGISTRATION
{
    LPCGUID Guid;
    HANDLE RegHandle;
};
struct alignas( 8 ) _SYSTEM_REF_TRACE_INFORMATION
{
    BOOLEAN TraceEnable;
    BOOLEAN TracePermanent;
    UNICODE_STRING TraceProcessName;
    UNICODE_STRING TracePoolTags;
};
struct alignas( 4 ) _REQUEST_OPLOCK_INPUT_BUFFER
{
    WORD StructureVersion;
    WORD StructureLength;
    DWORD RequestedOplockLevel;
    DWORD Flags;
};
struct alignas( 8 ) _REPAIR_COPIES_OUTPUT
{
    DWORD Size;
    DWORD Status;
    LARGE_INTEGER ResumeFileOffset;
};
struct alignas( 8 ) _REFS_SMR_VOLUME_INFO_OUTPUT
{
    DWORD Version;
    DWORD Flags;
    LARGE_INTEGER SizeOfRandomlyWritableTier;
    LARGE_INTEGER FreeSpaceInRandomlyWritableTier;
    LARGE_INTEGER SizeofSMRTier;
    LARGE_INTEGER FreeSpaceInSMRTier;
    LARGE_INTEGER UsableFreeSpaceInSMRTier;
    REFS_SMR_VOLUME_GC_STATE VolumeGcState;
    DWORD VolumeGcLastStatus;
    DWORD CurrentGcBandFillPercentage;
    DWORDLONG Unused[6];
};
struct alignas( 4 ) _FORMAT_PARAMETERS
{
    MEDIA_TYPE MediaType;
    DWORD StartCylinderNumber;
    DWORD EndCylinderNumber;
    DWORD StartHeadNumber;
    DWORD EndHeadNumber;
};
struct alignas( 1 ) _TXFS_WRITE_BACKUP_INFORMATION
{
    BYTE Buffer[1];
};
struct alignas( 4 ) _FORMAT_EX_PARAMETERS
{
    MEDIA_TYPE MediaType;
    DWORD StartCylinderNumber;
    DWORD EndCylinderNumber;
    DWORD StartHeadNumber;
    DWORD EndHeadNumber;
    WORD FormatGapLength;
    WORD SectorsPerTrack;
    WORD SectorNumber[1];
};
struct alignas( 8 ) _tagSOFTDISTINFO
{
    ULONG cbSize;
    DWORD dwFlags;
    DWORD dwAdState;
    LPWSTR szTitle;
    LPWSTR szAbstract;
    LPWSTR szHREF;
    DWORD dwInstalledVersionMS;
    DWORD dwInstalledVersionLS;
    DWORD dwUpdateVersionMS;
    DWORD dwUpdateVersionLS;
    DWORD dwAdvertisedVersionMS;
    DWORD dwAdvertisedVersionLS;
    DWORD dwReserved;
};
struct alignas( 8 ) _ENCRYPTION_KEY_CTRL_INPUT
{
    DWORD HeaderSize;
    DWORD StructureSize;
    WORD KeyOffset;
    WORD KeySize;
    DWORD DplLock;
    DWORDLONG DplUserId;
    DWORDLONG DplCredentialId;
};
struct alignas( 8 ) IBinding
{
};
struct alignas( 8 ) _MOF_FIELD
{
    ULONG64 DataPtr;
    ULONG Length;
    ULONG DataType;
};
struct alignas( 8 ) _FILE_ALLOCATED_RANGE_BUFFER
{
    LARGE_INTEGER FileOffset;
    LARGE_INTEGER Length;
};
struct alignas( 4 ) _SET_PURGE_FAILURE_MODE_INPUT
{
    DWORD Flags;
};
struct alignas( 8 ) _FSCTL_OFFLOAD_WRITE_OUTPUT
{
    DWORD Size;
    DWORD Flags;
    DWORDLONG LengthWritten;
};
struct alignas( 8 ) _FILE_STORAGE_TIER_REGION
{
    GUID TierId;
    DWORDLONG Offset;
    DWORDLONG Length;
};
struct alignas( 4 ) _FSCTL_QUERY_REGION_INFO_INPUT
{
    DWORD Version;
    DWORD Size;
    DWORD Flags;
    DWORD NumberOfTierIds;
    GUID TierIds[1];
};
struct alignas( 4 ) _EXTENDED_ENCRYPTED_DATA_INFO
{
    DWORD ExtendedCode;
    DWORD Length;
    DWORD Flags;
    DWORD Reserved;
};
struct alignas( 4 ) _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST
{
    DWORD RequestLevel;
    DWORD RequestFlags;
};
struct alignas( 8 ) _FSCTL_OFFLOAD_READ_OUTPUT
{
    DWORD Size;
    DWORD Flags;
    DWORDLONG TransferLength;
    BYTE Token[512];
};
struct alignas( 8 ) _FSCTL_OFFLOAD_READ_INPUT
{
    DWORD Size;
    DWORD Flags;
    DWORD TokenTimeToLive;
    DWORD Reserved;
    DWORDLONG FileOffset;
    DWORDLONG CopyLength;
};
struct alignas( 8 ) _SYSTEM_LEGACY_DRIVER_INFORMATION
{
    ULONG VetoType;
    UNICODE_STRING VetoList;
};
struct alignas( 8 ) _DRIVE_LAYOUT_INFORMATION_GPT
{
    GUID DiskId;
    LARGE_INTEGER StartingUsableOffset;
    LARGE_INTEGER UsableLength;
    DWORD MaxPartitionCount;
};
struct alignas( 8 ) _DRIVE_LAYOUT_INFORMATION_EX
{
    DWORD PartitionStyle;
    DWORD PartitionCount;
    union alignas( 8 )
    {
        DRIVE_LAYOUT_INFORMATION_MBR Mbr;
        DRIVE_LAYOUT_INFORMATION_GPT Gpt;
    };
    PARTITION_INFORMATION_EX PartitionEntry[1];
};
struct alignas( 8 ) _TXFS_ROLLFORWARD_REDO_INFORMATION
{
    LARGE_INTEGER LastVirtualClock;
    DWORDLONG LastRedoLsn;
    DWORDLONG HighestRecoveryLsn;
    DWORD Flags;
};
struct alignas( 8 ) IHttpSecurity
{
};
struct alignas( 8 ) _PROFILE_SOURCE_INFO
{
    ULONG NextEntryOffset;
    ULONG Source;
    ULONG MinInterval;
    ULONG MaxInterval;
    ULONG64 Reserved;
    WCHAR Description[1];
};
struct alignas( 8 ) _DUPLICATE_EXTENTS_DATA
{
    HANDLE FileHandle;
    LARGE_INTEGER SourceFileOffset;
    LARGE_INTEGER TargetFileOffset;
    LARGE_INTEGER ByteCount;
};
struct alignas( 8 ) _LDR_IMPORT_CALLBACK_INFO
{
    PLDR_IMPORT_MODULE_CALLBACK ImportCallbackRoutine;
    PVOID ImportCallbackParameter;
};
struct alignas( 8 ) _EVENT_TRACE_PROPERTIES
{
    WNODE_HEADER Wnode;
    ULONG BufferSize;
    ULONG MinimumBuffers;
    ULONG MaximumBuffers;
    ULONG MaximumFileSize;
    ULONG LogFileMode;
    ULONG FlushTimer;
    ULONG EnableFlags;
    union alignas( 4 )
    {
        LONG AgeLimit;
        LONG FlushThreshold;
    };
    ULONG NumberOfBuffers;
    ULONG FreeBuffers;
    ULONG EventsLost;
    ULONG BuffersWritten;
    ULONG LogBuffersLost;
    ULONG RealTimeBuffersLost;
    HANDLE LoggerThreadId;
    ULONG LogFileNameOffset;
    ULONG LoggerNameOffset;
};
struct alignas( 4 ) _SMB_SHARE_FLUSH_AND_PURGE_OUTPUT
{
    DWORD cEntriesPurged;
};
struct alignas( 4 ) _LMR_QUERY_INFO_PARAM
{
    LMR_QUERY_INFO_CLASS Operation;
};
struct alignas( 8 ) IXMLDOMNode
{
};
struct alignas( 8 ) _CSV_QUERY_FILE_REVISION
{
    LONGLONG FileId;
    LONGLONG FileRevision[3];
};
struct alignas( 8 ) IXMLDOMNamedNodeMap
{
};
struct alignas( 8 ) _EVENT_TRACE_HEADER
{
    USHORT Size;
    union alignas( 2 )
    {
        USHORT FieldTypeFlags;
        struct alignas( 1 )
        {
            UCHAR HeaderType;
            UCHAR MarkerFlags;
        };
    };
    union alignas( 4 )
    {
        ULONG Version;
        struct alignas( 2 )
        {
            UCHAR Type;
            UCHAR Level;
            USHORT Version;
        } Class;
    };
    ULONG ThreadId;
    ULONG ProcessId;
    LARGE_INTEGER TimeStamp;
    union alignas( 8 )
    {
        GUID Guid;
        ULONGLONG GuidPtr;
    };
    union alignas( 8 )
    {
        struct alignas( 4 )
        {
            ULONG KernelTime;
            ULONG UserTime;
        };
        ULONG64 ProcessorTime;
        struct alignas( 4 )
        {
            ULONG ClientContext;
            ULONG Flags;
        };
    };
};
struct alignas( 8 ) _EVENT_TRACE
{
    EVENT_TRACE_HEADER Header;
    ULONG InstanceId;
    ULONG ParentInstanceId;
    GUID ParentGuid;
    PVOID MofData;
    ULONG MofLength;
    union alignas( 4 )
    {
        ULONG ClientContext;
        ETW_BUFFER_CONTEXT BufferContext;
    };
};
struct alignas( 8 ) _DISK_RECORD
{
    LARGE_INTEGER ByteOffset;
    LARGE_INTEGER StartTime;
    LARGE_INTEGER EndTime;
    PVOID VirtualAddress;
    DWORD NumberOfBytes;
    BYTE DeviceNumber;
    BOOLEAN ReadRequest;
};
struct alignas( 8 ) _FILE_LEVEL_TRIM_RANGE
{
    DWORDLONG Offset;
    DWORDLONG Length;
};
struct alignas( 8 ) _FILE_LEVEL_TRIM
{
    DWORD Key;
    DWORD NumRanges;
    FILE_LEVEL_TRIM_RANGE Ranges[1];
};
struct alignas( 4 ) _SM_DELETE_REQUEST
{
    ULONG Version : 8;
    ULONG Spare : 24;
    ULONG StoreId;
};
struct alignas( 8 ) NTFS_FILE_RECORD_INPUT_BUFFER
{
    LARGE_INTEGER FileReferenceNumber;
};
struct alignas( 8 ) IXMLDOMEntityReference
{
};
struct alignas( 8 ) _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION
{
    DWORDLONG GptAttributes;
};
struct alignas( 8 ) IXMLDocument
{
};
struct alignas( 1 ) _SENDCMDOUTPARAMS
{
    DWORD cBufferSize;
    DRIVERSTATUS DriverStatus;
    BYTE bBuffer[1];
};
struct alignas( 8 ) _STREAM_EXTENT_ENTRY
{
    DWORD Flags;
    union alignas( 8 )
    {
        RETRIEVAL_POINTERS_BUFFER RetrievalPointers;
    } ExtentInformation;
};
;
struct alignas( 8 ) _FILESYSTEM_STATISTICS_EX
{
    WORD FileSystemType;
    WORD Version;
    DWORD SizeOfCompleteStructure;
    DWORDLONG UserFileReads;
    DWORDLONG UserFileReadBytes;
    DWORDLONG UserDiskReads;
    DWORDLONG UserFileWrites;
    DWORDLONG UserFileWriteBytes;
    DWORDLONG UserDiskWrites;
    DWORDLONG MetaDataReads;
    DWORDLONG MetaDataReadBytes;
    DWORDLONG MetaDataDiskReads;
    DWORDLONG MetaDataWrites;
    DWORDLONG MetaDataWriteBytes;
    DWORDLONG MetaDataDiskWrites;
};
struct alignas( 8 ) _WIM_PROVIDER_SUSPEND_OVERLAY_INPUT
{
    LARGE_INTEGER DataSourceId;
};
struct alignas( 4 ) _FS_BPIO_RESULTS
{
    DWORD OpStatus;
    WORD FailingDriverNameLen;
    WCHAR FailingDriverName[32];
    WORD FailureReasonLen;
    WCHAR FailureReason[128];
};
struct alignas( 1 ) _CHANGER_PRODUCT_DATA
{
    BYTE VendorId[8];
    BYTE ProductId[16];
    BYTE Revision[4];
    BYTE SerialNumber[32];
    BYTE DeviceType;
};
struct alignas( 8 ) _CSV_QUERY_FILE_REVISION_FILE_ID_128
{
    FILE_ID_128 FileId;
    LONGLONG FileRevision[3];
};
struct alignas( 4 ) _FAT_STATISTICS
{
    DWORD CreateHits;
    DWORD SuccessfulCreates;
    DWORD FailedCreates;
    DWORD NonCachedReads;
    DWORD NonCachedReadBytes;
    DWORD NonCachedWrites;
    DWORD NonCachedWriteBytes;
    DWORD NonCachedDiskReads;
    DWORD NonCachedDiskWrites;
};
struct alignas( 4 ) FIND_BY_SID_DATA
{
    DWORD Restart;
    SID Sid;
};
struct alignas( 4 ) _WIM_PROVIDER_ADD_OVERLAY_INPUT
{
    DWORD WimType;
    DWORD WimIndex;
    DWORD WimFileNameOffset;
    DWORD WimFileNameLength;
};
struct alignas( 4 ) _CHANGER_SEND_VOLUME_TAG_INFORMATION
{
    CHANGER_ELEMENT StartingElement;
    DWORD ActionCode;
    BYTE VolumeIDTemplate[40];
};
struct alignas( 8 ) _TRACE_LOGFILE_HEADER
{
    ULONG BufferSize;
    union alignas( 4 )
    {
        ULONG Version;
        struct alignas( 1 )
        {
            UCHAR MajorVersion;
            UCHAR MinorVersion;
            UCHAR SubVersion;
            UCHAR SubMinorVersion;
        } VersionDetail;
    };
    ULONG ProviderVersion;
    ULONG NumberOfProcessors;
    LARGE_INTEGER EndTime;
    ULONG TimerResolution;
    ULONG MaximumFileSize;
    ULONG LogFileMode;
    ULONG BuffersWritten;
    union alignas( 4 )
    {
        GUID LogInstanceGuid;
        struct alignas( 4 )
        {
            ULONG StartBuffers;
            ULONG PointerSize;
            ULONG EventsLost;
            ULONG CpuSpeedInMHz;
        };
    };
    LPWSTR LoggerName;
    LPWSTR LogFileName;
    TIME_ZONE_INFORMATION TimeZone;
    LARGE_INTEGER BootTime;
    LARGE_INTEGER PerfFreq;
    LARGE_INTEGER StartTime;
    ULONG ReservedFlags;
    ULONG BuffersLost;
};
struct alignas( 4 ) _SYSTEM_NUMA_PROXIMITY_MAP
{
    ULONG NodeProximityId;
    USHORT NodeNumber;
};
struct alignas( 4 ) _PATHNAME_BUFFER
{
    DWORD PathNameLength;
    WCHAR Name[1];
};
struct alignas( 4 ) NTFS_EXTENDED_VOLUME_DATA
{
    DWORD ByteCount;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD BytesPerPhysicalSector;
    WORD LfsMajorVersion;
    WORD LfsMinorVersion;
    DWORD MaxDeviceTrimExtentCount;
    DWORD MaxDeviceTrimByteCount;
    DWORD MaxVolumeTrimExtentCount;
    DWORD MaxVolumeTrimByteCount;
};
struct alignas( 4 ) _CSV_QUERY_VOLUME_REDIRECT_STATE
{
    DWORD MdsNodeId;
    DWORD DsNodeId;
    BOOLEAN IsDiskConnected;
    BOOLEAN ClusterEnableDirectIo;
    CSVFS_DISK_CONNECTIVITY DiskConnectivity;
};
struct alignas( 8 ) IDropSource
{
};
struct alignas( 4 ) _VIRTUALIZATION_INSTANCE_INFO_OUTPUT
{
    GUID VirtualizationInstanceID;
};
struct alignas( 8 ) STARTING_LCN_INPUT_BUFFER_EX
{
    LARGE_INTEGER StartingLcn;
    DWORD Flags;
};
struct alignas( 4 ) _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER
{
    DWORD OptimalWriteSize;
    DWORD StreamGranularitySize;
    DWORD StreamIdMin;
    DWORD StreamIdMax;
};
struct alignas( 4 ) ETW_PMC_SESSION_INFO
{
    ULONG NextEntryOffset;
    USHORT LoggerId;
    USHORT Reserved;
    ULONG ProfileSourceCount;
    ULONG HookIdCount;
};
struct alignas( 4 ) _TRACE_GUID_PROPERTIES
{
    GUID Guid;
    ULONG GuidType;
    ULONG LoggerId;
    ULONG EnableLevel;
    ULONG EnableFlags;
    BOOLEAN IsEnable;
};
struct alignas( 4 ) _MINIDUMP_FUNCTION_TABLE_DESCRIPTOR
{
    ULONG64 MinimumAddress;
    ULONG64 MaximumAddress;
    ULONG64 BaseAddress;
    ULONG32 EntryCount;
    ULONG32 SizeOfAlignPad;
};
struct alignas( 4 ) _MINIDUMP_MISC_INFO
{
    ULONG32 SizeOfInfo;
    ULONG32 Flags1;
    ULONG32 ProcessId;
    ULONG32 ProcessCreateTime;
    ULONG32 ProcessUserTime;
    ULONG32 ProcessKernelTime;
};
struct alignas( 8 ) _SYSTEM_TIMEOFDAY_INFORMATION
{
    LARGE_INTEGER BootTime;
    LARGE_INTEGER CurrentTime;
    LARGE_INTEGER TimeZoneBias;
    ULONG TimeZoneId;
    ULONG Reserved;
    ULONGLONG BootTimeBias;
    ULONGLONG SleepTimeBias;
};
struct alignas( 8 ) _EVENT_TRACE_LOGFILEW
{
    LPWSTR LogFileName;
    LPWSTR LoggerName;
    LONGLONG CurrentTime;
    ULONG BuffersRead;
    union alignas( 4 )
    {
        ULONG LogFileMode;
        ULONG ProcessTraceMode;
    };
    EVENT_TRACE CurrentEvent;
    TRACE_LOGFILE_HEADER LogfileHeader;
    PEVENT_TRACE_BUFFER_CALLBACKW BufferCallback;
    ULONG BufferSize;
    ULONG Filled;
    ULONG EventsLost;
    union alignas( 8 )
    {
        PEVENT_CALLBACK EventCallback;
        PEVENT_RECORD_CALLBACK EventRecordCallback;
    };
    ULONG IsKernelTrace;
    PVOID Context;
};
struct alignas( 8 ) _tagPROTOCOLFILTERDATA
{
    DWORD cbSize;
    IInternetProtocolSink* pProtocolSink;
    IInternetProtocol* pProtocol;
    IUnknown* pUnk;
    DWORD dwFilterFlags;
};
struct alignas( 8 ) _EVENT_INSTANCE_HEADER
{
    USHORT Size;
    union alignas( 2 )
    {
        USHORT FieldTypeFlags;
        struct alignas( 1 )
        {
            UCHAR HeaderType;
            UCHAR MarkerFlags;
        };
    };
    union alignas( 4 )
    {
        ULONG Version;
        struct alignas( 2 )
        {
            UCHAR Type;
            UCHAR Level;
            USHORT Version;
        } Class;
    };
    ULONG ThreadId;
    ULONG ProcessId;
    LARGE_INTEGER TimeStamp;
    ULONGLONG RegHandle;
    ULONG InstanceId;
    ULONG ParentInstanceId;
    union alignas( 8 )
    {
        struct alignas( 4 )
        {
            ULONG KernelTime;
            ULONG UserTime;
        };
        ULONG64 ProcessorTime;
        struct alignas( 4 )
        {
            ULONG EventId;
            ULONG Flags;
        };
    };
    ULONGLONG ParentRegHandle;
};
struct alignas( 8 ) _TRACE_ENABLE_INFO
{
    ULONG IsEnabled;
    UCHAR Level;
    UCHAR Reserved1;
    USHORT LoggerId;
    ULONG EnableProperty;
    ULONG Reserved2;
    ULONGLONG MatchAnyKeyword;
    ULONGLONG MatchAllKeyword;
};
struct alignas( 8 ) _LDR_SERVICE_TAG_RECORD
{
    _LDR_SERVICE_TAG_RECORD* Next;
    ULONG ServiceTag;
};
struct alignas( 8 ) _LDR_DEPENDENCY_RECORD
{
    SINGLE_LIST_ENTRY DependencyLink;
    PLDR_DDAG_NODE DependencyNode;
    SINGLE_LIST_ENTRY IncomingDependencyLink;
    PLDR_DDAG_NODE IncomingDependencyNode;
};
struct alignas( 8 ) _EVENT_TRACE_PROPERTIES_V2
{
    WNODE_HEADER Wnode;
    ULONG BufferSize;
    ULONG MinimumBuffers;
    ULONG MaximumBuffers;
    ULONG MaximumFileSize;
    ULONG LogFileMode;
    ULONG FlushTimer;
    ULONG EnableFlags;
    union alignas( 4 )
    {
        LONG AgeLimit;
        LONG FlushThreshold;
    };
    ULONG NumberOfBuffers;
    ULONG FreeBuffers;
    ULONG EventsLost;
    ULONG BuffersWritten;
    ULONG LogBuffersLost;
    ULONG RealTimeBuffersLost;
    HANDLE LoggerThreadId;
    ULONG LogFileNameOffset;
    ULONG LoggerNameOffset;
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            ULONG VersionNumber : 8;
        };
        ULONG V2Control;
    };
    ULONG FilterDescCount;
    PEVENT_FILTER_DESCRIPTOR FilterDesc;
    union alignas( 8 )
    {
        struct alignas( 4 )
        {
            ULONG Wow : 1;
            ULONG QpcDeltaTracking : 1;
            ULONG LargeMdlPages : 1;
            ULONG ExcludeKernelStack : 1;
        };
        ULONG64 V2Options;
    };
};
struct alignas( 4 ) _MINIDUMP_DIRECTORY
{
    ULONG32 StreamType;
    MINIDUMP_LOCATION_DESCRIPTOR Location;
};
struct alignas( 8 ) _EVENT_TRACE_LOGFILEA
{
    LPSTR LogFileName;
    LPSTR LoggerName;
    LONGLONG CurrentTime;
    ULONG BuffersRead;
    union alignas( 4 )
    {
        ULONG LogFileMode;
        ULONG ProcessTraceMode;
    };
    EVENT_TRACE CurrentEvent;
    TRACE_LOGFILE_HEADER LogfileHeader;
    PEVENT_TRACE_BUFFER_CALLBACKA BufferCallback;
    ULONG BufferSize;
    ULONG Filled;
    ULONG EventsLost;
    union alignas( 8 )
    {
        PEVENT_CALLBACK EventCallback;
        PEVENT_RECORD_CALLBACK EventRecordCallback;
    };
    ULONG IsKernelTrace;
    PVOID Context;
};
struct alignas( 4 ) _TRACE_GUID_INFO
{
    ULONG InstanceCount;
    ULONG Reserved;
};
struct alignas( 8 ) IInternet
{
};
struct alignas( 8 ) _LDR_SECTION_INFO
{
    HANDLE SectionHandle;
    ACCESS_MASK DesiredAccess;
    POBJECT_ATTRIBUTES ObjA;
    ULONG SectionPageProtection;
    ULONG AllocationAttributes;
};
struct alignas( 8 ) _DISK_EXTENT
{
    DWORD DiskNumber;
    LARGE_INTEGER StartingOffset;
    LARGE_INTEGER ExtentLength;
};
struct alignas( 8 ) _STRING
{
    USHORT Length;
    USHORT MaximumLength;
    PCHAR Buffer;
};
struct alignas( 8 ) IServiceProvider
{
};
struct alignas( 4 ) _CSV_QUERY_REDIRECT_STATE
{
    DWORD MdsNodeId;
    DWORD DsNodeId;
    BOOLEAN FileRedirected;
};
struct alignas( 4 ) _MINIDUMP_CALLBACK_INFORMATION
{
    MINIDUMP_CALLBACK_ROUTINE CallbackRoutine;
    PVOID CallbackParam;
};
struct alignas( 8 ) _FS_BPIO_INPUT
{
    FS_BPIO_OPERATIONS Operation;
    FS_BPIO_INFLAGS InFlags;
    DWORDLONG Reserved1;
    DWORDLONG Reserved2;
};
struct alignas( 8 ) _RPC_BINDING_VECTOR
{
    unsigned long Count;
    RPC_BINDING_HANDLE BindingH[1];
};
struct alignas( 8 ) _RTL_BALANCED_NODE
{
    union alignas( 8 )
    {
        _RTL_BALANCED_NODE* Children[2];
        struct alignas( 8 )
        {
            _RTL_BALANCED_NODE* Left;
            _RTL_BALANCED_NODE* Right;
        };
    };
    union alignas( 8 )
    {
        UCHAR Red : 1;
        UCHAR Balance : 2;
        ULONG_PTR ParentValue;
    };
};
struct alignas( 8 ) IXMLDOMText
{
};
struct alignas( 8 ) _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT
{
    DWORDLONG VetoedFromAltitudeIntegral;
    DWORDLONG VetoedFromAltitudeDecimal;
    WCHAR Reason[256];
};
struct alignas( 8 ) _IO_IRP_EXT_TRACK_OFFSET_HEADER
{
    WORD Validation;
    WORD Flags;
    PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK TrackedOffsetCallback;
};
struct alignas( 8 ) WMIREGINFOW
{
    ULONG BufferSize;
    ULONG NextWmiRegInfo;
    ULONG RegistryPath;
    ULONG MofResourceName;
    ULONG GuidCount;
    WMIREGGUIDW WmiRegGuid[0];
};
struct alignas( 8 ) _STREAM_LAYOUT_ENTRY
{
    DWORD Version;
    DWORD NextStreamOffset;
    DWORD Flags;
    DWORD ExtentInformationOffset;
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    DWORD StreamInformationOffset;
    DWORD AttributeTypeCode;
    DWORD AttributeFlags;
    DWORD StreamIdentifierLength;
    WCHAR StreamIdentifier[1];
};
struct alignas( 8 ) IXMLElement2
{
};
struct alignas( 4 ) tagSERIALIZEDPROPERTYVALUE
{
    DWORD dwType;
    BYTE rgb[1];
};
struct alignas( 8 ) _WIM_PROVIDER_REMOVE_OVERLAY_INPUT
{
    LARGE_INTEGER DataSourceId;
};
struct alignas( 4 ) _CSV_QUERY_MDS_PATH
{
    DWORD MdsNodeId;
    DWORD DsNodeId;
    DWORD PathLength;
    WCHAR Path[1];
};
struct alignas( 8 ) _WIM_PROVIDER_EXTERNAL_INFO
{
    DWORD Version;
    DWORD Flags;
    LARGE_INTEGER DataSourceId;
    BYTE ResourceHash[20];
};
struct alignas( 8 ) _QUAD
{
    union alignas( 8 )
    {
        long long UseThisFieldToCopy;
        double DoNotUseThisField;
    };
};
struct alignas( 2 ) _GET_FILTER_FILE_IDENTIFIER_OUTPUT
{
    WORD FilterFileIdentifierLength;
    BYTE FilterFileIdentifier[1];
};
struct alignas( 8 ) tagOIFI
{
    UINT cb;
    BOOL fMDIApp;
    HWND hwndFrame;
    HACCEL haccel;
    UINT cAccelEntries;
};
struct alignas( 8 ) _CSV_QUERY_MDS_PATH_V2
{
    LONGLONG Version;
    DWORD RequiredSize;
    DWORD MdsNodeId;
    DWORD DsNodeId;
    DWORD Flags;
    CSVFS_DISK_CONNECTIVITY DiskConnectivity;
    GUID VolumeId;
    DWORD IpAddressOffset;
    DWORD IpAddressLength;
    DWORD PathOffset;
    DWORD PathLength;
};
struct alignas( 2 ) _SMB_SHARE_FLUSH_AND_PURGE_INPUT
{
    WORD Version;
};
struct alignas( 8 ) _CSV_NAMESPACE_INFO
{
    DWORD Version;
    DWORD DeviceNumber;
    LARGE_INTEGER StartingOffset;
    DWORD SectorSize;
};
struct alignas( 4 ) _VIRTUALIZATION_INSTANCE_INFO_INPUT_EX
{
    WORD HeaderSize;
    DWORD Flags;
    DWORD NotificationInfoSize;
    WORD NotificationInfoOffset;
    WORD ProviderMajorVersion;
};
struct alignas( 4 ) _MINIDUMP_CALLBACK_OUTPUT
{
    union alignas( 4 )
    {
        ULONG ModuleWriteFlags;
        ULONG ThreadWriteFlags;
        ULONG SecondaryFlags;
        struct alignas( 4 )
        {
            ULONG64 MemoryBase;
            ULONG MemorySize;
        };
        struct alignas( 4 )
        {
            BOOL CheckCancel;
            BOOL Cancel;
        };
        HANDLE Handle;
        struct alignas( 4 )
        {
            MINIDUMP_MEMORY_INFO VmRegion;
            BOOL Continue;
        };
        struct alignas( 4 )
        {
            HRESULT VmQueryStatus;
            MINIDUMP_MEMORY_INFO VmQueryResult;
        };
        struct alignas( 4 )
        {
            HRESULT VmReadStatus;
            ULONG VmReadBytesCompleted;
        };
        HRESULT Status;
    };
};
struct alignas( 8 ) _SD_GLOBAL_CHANGE_INPUT
{
    DWORD Flags;
    DWORD ChangeType;
    union alignas( 8 )
    {
        SD_CHANGE_MACHINE_SID_INPUT SdChange;
        SD_QUERY_STATS_INPUT SdQueryStats;
        SD_ENUM_SDS_INPUT SdEnumSds;
    };
};
struct alignas( 8 ) IZoneIdentifier
{
};
struct alignas( 8 ) tagCAFILETIME
{
    ULONG cElems;
    FILETIME* pElems;
};
struct alignas( 8 ) _LOOKUP_STREAM_FROM_CLUSTER_INPUT
{
    DWORD Flags;
    DWORD NumberOfClusters;
    LARGE_INTEGER Cluster[1];
};
struct alignas( 4 ) MachineGlobalObjectTableRegistrationToken__
{
    int unused;
};
struct alignas( 8 ) _RPC_MESSAGE
{
    RPC_BINDING_HANDLE Handle;
    unsigned long DataRepresentation;
    void* Buffer;
    unsigned int BufferLength;
    unsigned int ProcNum;
    PRPC_SYNTAX_IDENTIFIER TransferSyntax;
    void* RpcInterfaceInformation;
    void* ReservedForRuntime;
    void* ManagerEpv;
    void* ImportContext;
    unsigned long RpcFlags;
};
struct alignas( 8 ) RPC_IMPORT_CONTEXT_P
{
    RPC_NS_HANDLE LookupContext;
    RPC_BINDING_HANDLE ProposedHandle;
    RPC_BINDING_VECTOR* Bindings;
};
struct alignas( 4 ) _FILE_TYPE_NOTIFICATION_INPUT
{
    DWORD Flags;
    DWORD NumFileTypeIDs;
    GUID FileTypeID[1];
};
struct alignas( 4 ) _TRACE_STACK_CACHING_INFO
{
    BOOLEAN Enabled;
    ULONG CacheSize;
    ULONG BucketCount;
};
struct alignas( 8 ) IRpcChannelBuffer
{
};
struct alignas( 8 ) RPC_IF_ID_VECTOR
{
    unsigned long Count;
    RPC_IF_ID* IfId[1];
};
struct alignas( 8 ) tagVARIANT
{
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            VARTYPE vt;
            WORD wReserved1;
            WORD wReserved2;
            WORD wReserved3;
            union alignas( 8 )
            {
                LONGLONG llVal;
                LONG lVal;
                BYTE bVal;
                SHORT iVal;
                FLOAT fltVal;
                DOUBLE dblVal;
                VARIANT_BOOL boolVal;
                VARIANT_BOOL __OBSOLETE__VARIANT_BOOL;
                SCODE scode;
                CY cyVal;
                DATE date;
                BSTR bstrVal;
                IUnknown* punkVal;
                IDispatch* pdispVal;
                SAFEARRAY* parray;
                BYTE* pbVal;
                SHORT* piVal;
                LONG* plVal;
                LONGLONG* pllVal;
                FLOAT* pfltVal;
                DOUBLE* pdblVal;
                VARIANT_BOOL* pboolVal;
                VARIANT_BOOL* __OBSOLETE__VARIANT_PBOOL;
                SCODE* pscode;
                CY* pcyVal;
                DATE* pdate;
                BSTR* pbstrVal;
                IUnknown** ppunkVal;
                IDispatch** ppdispVal;
                SAFEARRAY** pparray;
                VARIANT* pvarVal;
                PVOID byref;
                CHAR cVal;
                USHORT uiVal;
                ULONG ulVal;
                ULONGLONG ullVal;
                INT intVal;
                UINT uintVal;
                DECIMAL* pdecVal;
                CHAR* pcVal;
                USHORT* puiVal;
                ULONG* pulVal;
                ULONGLONG* pullVal;
                INT* pintVal;
                UINT* puintVal;
                struct alignas( 8 )
                {
                    PVOID pvRecord;
                    IRecordInfo* pRecInfo;
                };
            };
        };
        DECIMAL decVal;
    };
};
struct alignas( 8 ) tagPARAMDESCEX
{
    ULONG cBytes;
    VARIANTARG varDefaultValue;
};
struct alignas( 8 ) _TRACE_LOGFILE_HEADER32
{
    ULONG BufferSize;
    union alignas( 4 )
    {
        ULONG Version;
        struct alignas( 1 )
        {
            UCHAR MajorVersion;
            UCHAR MinorVersion;
            UCHAR SubVersion;
            UCHAR SubMinorVersion;
        } VersionDetail;
    };
    ULONG ProviderVersion;
    ULONG NumberOfProcessors;
    LARGE_INTEGER EndTime;
    ULONG TimerResolution;
    ULONG MaximumFileSize;
    ULONG LogFileMode;
    ULONG BuffersWritten;
    union alignas( 4 )
    {
        GUID LogInstanceGuid;
        struct alignas( 4 )
        {
            ULONG StartBuffers;
            ULONG PointerSize;
            ULONG EventsLost;
            ULONG CpuSpeedInMHz;
        };
    };
    ULONG32 LoggerName;
    ULONG32 LogFileName;
    TIME_ZONE_INFORMATION TimeZone;
    LARGE_INTEGER BootTime;
    LARGE_INTEGER PerfFreq;
    LARGE_INTEGER StartTime;
    ULONG ReservedFlags;
    ULONG BuffersLost;
};
struct alignas( 8 ) tagIDLDESC
{
    ULONG_PTR dwReserved;
    USHORT wIDLFlags;
};
struct alignas( 8 ) tagPARAMDESC
{
    LPPARAMDESCEX pparamdescex;
    USHORT wParamFlags;
};
struct alignas( 8 ) IOleObject
{
};
;
struct alignas( 8 ) _RPC_PROTSEQ_VECTORA
{
    unsigned int Count;
    unsigned char* Protseq[1];
};
struct alignas( 8 ) _ENABLE_TRACE_PARAMETERS_V1
{
    ULONG Version;
    ULONG EnableProperty;
    ULONG ControlFlags;
    GUID SourceId;
    PEVENT_FILTER_DESCRIPTOR EnableFilterDesc;
};
struct alignas( 8 ) _ENABLE_TRACE_PARAMETERS
{
    ULONG Version;
    ULONG EnableProperty;
    ULONG ControlFlags;
    GUID SourceId;
    PEVENT_FILTER_DESCRIPTOR EnableFilterDesc;
    ULONG FilterDescCount;
};
struct alignas( 4 ) _CSV_SET_VOLUME_ID
{
    GUID VolumeId;
};
struct alignas( 8 ) IViewObject2
{
};
struct alignas( 4 ) _CSV_QUERY_VOLUME_ID
{
    GUID VolumeId;
};
struct alignas( 8 ) IEnumVARIANT
{
};
struct alignas( 4 ) _MINIDUMP_THREAD_INFO_LIST
{
    ULONG SizeOfHeader;
    ULONG SizeOfEntry;
    ULONG NumberOfEntries;
};
struct alignas( 4 ) _MINIDUMP_TOKEN_INFO_LIST
{
    ULONG TokenListSize;
    ULONG TokenListEntries;
    ULONG ListHeaderSize;
    ULONG ElementHeaderSize;
};
struct alignas( 8 ) IBindStatusCallback
{
};
struct alignas( 8 ) _LMR_QUERY_SESSION_INFO
{
    UINT64 SessionId;
};
struct alignas( 8 ) ITypeInfo2
{
};
struct alignas( 4 ) _TRACE_PROVIDER_INSTANCE_INFO
{
    ULONG NextOffset;
    ULONG EnableCount;
    ULONG Pid;
    ULONG Flags;
};
struct alignas( 1 ) _CSV_IS_OWNED_BY_CSVFS
{
    BOOLEAN OwnedByCSVFS;
};
struct alignas( 8 ) ITypeFactory
{
};
struct alignas( 8 ) tagI_RpcProxyCallbackInterface
{
    I_RpcProxyIsValidMachineFn IsValidMachineFn;
    I_RpcProxyGetClientAddressFn GetClientAddressFn;
    I_RpcProxyGetConnectionTimeoutFn GetConnectionTimeoutFn;
    I_RpcPerformCalloutFn PerformCalloutFn;
    I_RpcFreeCalloutStateFn FreeCalloutStateFn;
    I_RpcProxyGetClientSessionAndResourceUUID GetClientSessionAndResourceUUIDFn;
    I_RpcProxyFilterIfFn ProxyFilterIfFn;
    I_RpcProxyUpdatePerfCounterFn RpcProxyUpdatePerfCounterFn;
    I_RpcProxyUpdatePerfCounterBackendServerFn
        RpcProxyUpdatePerfCounterBackendServerFn;
};
struct alignas( 4 ) _FILE_LEVEL_TRIM_OUTPUT
{
    DWORD NumRangesProcessed;
};
struct alignas( 8 ) IPropertyBag
{
};
struct alignas( 4 ) _MINIDUMP_USER_RECORD
{
    ULONG32 Type;
    MINIDUMP_LOCATION_DESCRIPTOR Memory;
};
;
struct alignas( 8 ) IComThreadingInfo
{
};
struct alignas( 8 ) _wireSAFEARR_UNKNOWN
{
    ULONG Size;
    IUnknown** apUnknown;
};
struct alignas( 8 ) IMachineGlobalObjectTable
{
};
struct alignas( 8 ) _FILE_LAYOUT_INFO_ENTRY
{
    struct alignas( 8 )
    {
        LARGE_INTEGER CreationTime;
        LARGE_INTEGER LastAccessTime;
        LARGE_INTEGER LastWriteTime;
        LARGE_INTEGER ChangeTime;
        DWORD FileAttributes;
    } BasicInformation;
    DWORD OwnerId;
    DWORD SecurityId;
    USN Usn;
    STORAGE_RESERVE_ID StorageReserveId;
};
struct alignas( 8 ) tagRPC_EE_INFO_PARAM
{
    ExtendedErrorParamTypes ParameterType;
    union alignas( 8 )
    {
        LPSTR AnsiString;
        LPWSTR UnicodeString;
        long LVal;
        short SVal;
        ULONGLONG PVal;
        BinaryParam BVal;
    } u;
};
struct alignas( 8 ) tagRPC_EXTENDED_ERROR_INFO
{
    ULONG Version;
    LPWSTR ComputerName;
    ULONG ProcessID;
    union alignas( 4 )
    {
        SYSTEMTIME SystemTime;
        FILETIME FileTime;
    } u;
    ULONG GeneratingComponent;
    ULONG Status;
    USHORT DetectionLocation;
    USHORT Flags;
    int NumberOfParameters;
    RPC_EE_INFO_PARAM Parameters[4];
};
struct alignas( 8 ) IInternetProtocolInfo
{
};
struct alignas( 4 ) _MINIDUMP_PROCESS_VM_COUNTERS_1
{
    USHORT Revision;
    ULONG PageFaultCount;
    ULONG64 PeakWorkingSetSize;
    ULONG64 WorkingSetSize;
    ULONG64 QuotaPeakPagedPoolUsage;
    ULONG64 QuotaPagedPoolUsage;
    ULONG64 QuotaPeakNonPagedPoolUsage;
    ULONG64 QuotaNonPagedPoolUsage;
    ULONG64 PagefileUsage;
    ULONG64 PeakPagefileUsage;
    ULONG64 PrivateUsage;
};
struct alignas( 8 ) _SHORT_SIZEDARR
{
    ULONG clSize;
    unsigned short* pData;
};
struct alignas( 4 ) _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER
{
    WORD ChecksumAlgorithm;
    WORD Reserved;
    DWORD Flags;
};
struct alignas( 8 ) _FSCTL_OFFLOAD_WRITE_INPUT
{
    DWORD Size;
    DWORD Flags;
    DWORDLONG FileOffset;
    DWORDLONG CopyLength;
    DWORDLONG TransferOffset;
    BYTE Token[512];
};
struct alignas( 8 ) IEnumSTATDATA
{
};
struct alignas( 8 ) _REPAIR_COPIES_INPUT
{
    DWORD Size;
    DWORD Flags;
    LARGE_INTEGER FileOffset;
    DWORD Length;
    DWORD SourceCopy;
    DWORD NumberOfRepairCopies;
    DWORD RepairCopies[1];
};
struct alignas( 4 ) _MINIDUMP_MEMORY64_LIST
{
    ULONG64 NumberOfMemoryRanges;
    RVA64 BaseRva;
    MINIDUMP_MEMORY_DESCRIPTOR64 MemoryRanges[0];
};
struct alignas( 8 ) tagCAUI
{
    ULONG cElems;
    USHORT* pElems;
};
struct alignas( 8 ) _FILE_REGION_OUTPUT
{
    DWORD Flags;
    DWORD TotalRegionEntryCount;
    DWORD RegionEntryCount;
    DWORD Reserved;
    FILE_REGION_INFO Region[1];
};
union alignas( 4 ) __MIDL_IWinTypes_0009
{
    LONG hInproc;
    LONG hRemote;
};
struct alignas( 4 ) _RemotableHandle
{
    LONG fContext;
    __MIDL_IWinTypes_0009 u;
};
union alignas( 8 ) __MIDL_IAdviseSink_0002
{
    wireHBITMAP hBitmap;
    wireHPALETTE hPalette;
    wireHGLOBAL hGeneric;
};
struct alignas( 8 ) _GDI_OBJECT
{
    DWORD ObjectType;
    __MIDL_IAdviseSink_0002 u;
};
struct alignas( 8 ) ARRAY_INFO
{
    long Dimension;
    unsigned long* BufferConformanceMark;
    unsigned long* BufferVarianceMark;
    unsigned long* MaxCountArray;
    unsigned long* OffsetArray;
    unsigned long* ActualCountArray;
};
struct alignas( 8 ) tagCASCODE
{
    ULONG cElems;
    SCODE* pElems;
};
struct alignas( 4 ) _FILE_PROVIDER_EXTERNAL_INFO_V0
{
    DWORD Version;
    DWORD Algorithm;
};
struct alignas( 8 ) _STREAM_INFORMATION_ENTRY
{
    DWORD Version;
    DWORD Flags;
    _StreamInformation StreamInformation;
};
struct alignas( 8 ) tagWNODE_SINGLE_ITEM
{
    _WNODE_HEADER WnodeHeader;
    ULONG OffsetInstanceName;
    ULONG InstanceIndex;
    ULONG ItemId;
    ULONG DataBlockOffset;
    ULONG SizeDataItem;
    UCHAR VariableData[0];
};
struct alignas( 8 ) tagWNODE_METHOD_ITEM
{
    _WNODE_HEADER WnodeHeader;
    ULONG OffsetInstanceName;
    ULONG InstanceIndex;
    ULONG MethodId;
    ULONG DataBlockOffset;
    ULONG SizeDataBlock;
    UCHAR VariableData[0];
};
struct alignas( 8 ) _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A
{
    SEC_WINNT_AUTH_IDENTITY_A* TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long* AuthnSchemes;
    unsigned char* ServerCertificateSubject;
    SEC_WINNT_AUTH_IDENTITY_A* ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
    unsigned long* ProxyAuthnSchemes;
};
struct alignas( 4 ) _CONTAINER_VOLUME_STATE
{
    DWORD Flags;
};
struct alignas( 4 ) _MINIDUMP_UNLOADED_MODULE_LIST
{
    ULONG32 SizeOfHeader;
    ULONG32 SizeOfEntry;
    ULONG32 NumberOfEntries;
};
struct alignas( 4 ) _RPC_BINDING_HANDLE_OPTIONS_V1
{
    unsigned long Version;
    unsigned long Flags;
    unsigned long ComTimeout;
    unsigned long CallTimeout;
};
struct alignas( 8 ) _FSCTL_QUERY_REGION_INFO_OUTPUT
{
    DWORD Version;
    DWORD Size;
    DWORD Flags;
    DWORD Reserved;
    DWORDLONG Alignment;
    DWORD TotalNumberOfRegions;
    DWORD NumberOfRegionsReturned;
    FILE_STORAGE_TIER_REGION Regions[1];
};
struct alignas( 8 ) tagINTERFACEINFO
{
    IUnknown* pUnk;
    IID iid;
    WORD wMethod;
};
struct alignas( 4 ) _FILE_DESIRED_STORAGE_CLASS_INFORMATION
{
    FILE_STORAGE_TIER_CLASS Class;
    DWORD Flags;
};
struct alignas( 4 ) _MINIDUMP_MISC_INFO_4
{
    ULONG32 SizeOfInfo;
    ULONG32 Flags1;
    ULONG32 ProcessId;
    ULONG32 ProcessCreateTime;
    ULONG32 ProcessUserTime;
    ULONG32 ProcessKernelTime;
    ULONG32 ProcessorMaxMhz;
    ULONG32 ProcessorCurrentMhz;
    ULONG32 ProcessorMhzLimit;
    ULONG32 ProcessorMaxIdleState;
    ULONG32 ProcessorCurrentIdleState;
    ULONG32 ProcessIntegrityLevel;
    ULONG32 ProcessExecuteFlags;
    ULONG32 ProtectedProcess;
    ULONG32 TimeZoneId;
    TIME_ZONE_INFORMATION TimeZone;
    WCHAR BuildString[260];
    WCHAR DbgBldStr[40];
};
struct alignas( 8 ) IPropertyStorage
{
};
struct alignas( 8 ) _DUPLICATE_EXTENTS_DATA32
{
    UINT32 FileHandle;
    LARGE_INTEGER SourceFileOffset;
    LARGE_INTEGER TargetFileOffset;
    LARGE_INTEGER ByteCount;
};
struct alignas( 8 ) _DUPLICATE_EXTENTS_DATA_EX
{
    SIZE_T Size;
    HANDLE FileHandle;
    LARGE_INTEGER SourceFileOffset;
    LARGE_INTEGER TargetFileOffset;
    LARGE_INTEGER ByteCount;
    DWORD Flags;
};
struct alignas( 4 ) _tagpropertykey
{
    GUID fmtid;
    DWORD pid;
};
struct alignas( 8 ) _ETW_TRACE_PARTITION_INFORMATION_V2
{
    LONG64 QpcOffsetFromRoot;
    ULONG PartitionType;
    PWSTR PartitionId;
    PWSTR ParentId;
};
struct alignas( 8 ) _DUPLICATE_EXTENTS_DATA_EX32
{
    DWORD32 Size;
    DWORD32 FileHandle;
    LARGE_INTEGER SourceFileOffset;
    LARGE_INTEGER TargetFileOffset;
    LARGE_INTEGER ByteCount;
    DWORD Flags;
};
struct alignas( 4 ) _MINIDUMP_LOCATION_DESCRIPTOR64
{
    ULONG64 DataSize;
    RVA64 Rva;
};
struct alignas( 8 ) _RPC_HTTP_TRANSPORT_CREDENTIALS_W
{
    SEC_WINNT_AUTH_IDENTITY_W* TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long* AuthnSchemes;
    unsigned short* ServerCertificateSubject;
};
struct alignas( 8 ) tagCUSTDATAITEM
{
    GUID guid;
    VARIANTARG varValue;
};
struct alignas( 4 ) _MINIDUMP_THREAD_EX
{
    ULONG32 ThreadId;
    ULONG32 SuspendCount;
    ULONG32 PriorityClass;
    ULONG32 Priority;
    ULONG64 Teb;
    MINIDUMP_MEMORY_DESCRIPTOR Stack;
    MINIDUMP_LOCATION_DESCRIPTOR ThreadContext;
    MINIDUMP_MEMORY_DESCRIPTOR BackingStore;
};
struct alignas( 8 ) _ASYNC_DUPLICATE_EXTENTS_STATUS
{
    DWORD Version;
    DUPLICATE_EXTENTS_STATE State;
    DWORDLONG SourceFileOffset;
    DWORDLONG TargetFileOffset;
    DWORDLONG ByteCount;
    DWORDLONG BytesDuplicated;
};
struct alignas( 4 ) tagCSPLATFORM
{
    DWORD dwPlatformId;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    DWORD dwProcessorArch;
};
struct alignas( 4 ) tagQUERYCONTEXT
{
    DWORD dwContext;
    CSPLATFORM Platform;
    LCID Locale;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
};
struct alignas( 4 ) _MINIDUMP_THREAD_EX_LIST
{
    ULONG32 NumberOfThreads;
    MINIDUMP_THREAD_EX Threads[0];
};
struct alignas( 4 ) tagBIND_OPTS
{
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
};
struct alignas( 4 ) _VIRTUALIZATION_INSTANCE_INFO_INPUT
{
    DWORD NumberOfWorkerThreads;
    DWORD Flags;
};
struct alignas( 8 ) tagBIND_OPTS3
{
    HWND hwnd;
};
struct alignas( 8 ) _WIM_PROVIDER_UPDATE_OVERLAY_INPUT
{
    LARGE_INTEGER DataSourceId;
    DWORD WimFileNameOffset;
    DWORD WimFileNameLength;
};
struct alignas( 8 ) IAdviseSink
{
};
struct alignas( 8 ) AsyncIAdviseSink
{
};
struct alignas( 8 ) IEnumSTATSTG
{
};
struct alignas( 4 ) _MINIDUMP_HANDLE_OBJECT_INFORMATION
{
    RVA NextInfoRva;
    ULONG32 InfoType;
    ULONG32 SizeOfInfo;
};
struct alignas( 8 ) IMessageFilter
{
};
struct alignas( 4 ) _FS_BPIO_INFO
{
    DWORD ActiveBypassIoCount;
    WORD StorageDriverNameLen;
    WCHAR StorageDriverName[32];
};
struct alignas( 8 ) _FS_BPIO_OUTPUT
{
    FS_BPIO_OPERATIONS Operation;
    FS_BPIO_OUTFLAGS OutFlags;
    DWORDLONG Reserved1;
    DWORDLONG Reserved2;
    union alignas( 4 )
    {
        FS_BPIO_RESULTS Enable;
        FS_BPIO_RESULTS Query;
        FS_BPIO_RESULTS VolumeStackResume;
        FS_BPIO_RESULTS StreamResume;
        FS_BPIO_INFO GetInfo;
    };
};
struct alignas( 4 ) _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT
{
    DWORD Size;
    VIRTUAL_STORAGE_BEHAVIOR_CODE BehaviorCode;
};
struct alignas( 8 ) tagCAFLT
{
    ULONG cElems;
    FLOAT* pElems;
};
struct alignas( 8 ) tagCAUL
{
    ULONG cElems;
    ULONG* pElems;
};
struct alignas( 8 ) tagCADATE
{
    ULONG cElems;
    DATE* pElems;
};
struct alignas( 8 ) tagBSTRBLOB
{
    ULONG cbSize;
    BYTE* pData;
};
struct alignas( 8 ) tagCALPSTR
{
    ULONG cElems;
    LPSTR* pElems;
};
struct alignas( 8 ) tagCABSTR
{
    ULONG cElems;
    BSTR* pElems;
};
struct alignas( 8 ) tagCAUH
{
    ULONG cElems;
    ULARGE_INTEGER* pElems;
};
struct alignas( 8 ) tagBLOB
{
    ULONG cbSize;
    BYTE* pBlobData;
};
struct alignas( 8 ) tagCADBL
{
    ULONG cElems;
    DOUBLE* pElems;
};
struct alignas( 8 ) tagCAL
{
    ULONG cElems;
    LONG* pElems;
};
struct alignas( 8 ) tagCAC
{
    ULONG cElems;
    CHAR* pElems;
};
struct alignas( 8 ) tagCAUB
{
    ULONG cElems;
    UCHAR* pElems;
};
struct alignas( 8 ) tagCAI
{
    ULONG cElems;
    SHORT* pElems;
};
struct alignas( 8 ) tagCAH
{
    ULONG cElems;
    LARGE_INTEGER* pElems;
};
struct alignas( 8 ) tagCABOOL
{
    ULONG cElems;
    VARIANT_BOOL* pElems;
};
struct alignas( 8 ) tagCACY
{
    ULONG cElems;
    CY* pElems;
};
struct alignas( 8 ) tagCACLSID
{
    ULONG cElems;
    CLSID* pElems;
};
struct alignas( 8 ) tagCACLIPDATA
{
    ULONG cElems;
    CLIPDATA* pElems;
};
struct alignas( 8 ) tagCABSTRBLOB
{
    ULONG cElems;
    BSTRBLOB* pElems;
};
struct alignas( 8 ) tagPROPVARIANT
{
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            VARTYPE vt;
            PROPVAR_PAD1 wReserved1;
            PROPVAR_PAD2 wReserved2;
            PROPVAR_PAD3 wReserved3;
            union alignas( 8 )
            {
                CHAR cVal;
                UCHAR bVal;
                SHORT iVal;
                USHORT uiVal;
                LONG lVal;
                ULONG ulVal;
                INT intVal;
                UINT uintVal;
                LARGE_INTEGER hVal;
                ULARGE_INTEGER uhVal;
                FLOAT fltVal;
                DOUBLE dblVal;
                VARIANT_BOOL boolVal;
                VARIANT_BOOL __OBSOLETE__VARIANT_BOOL;
                SCODE scode;
                CY cyVal;
                DATE date;
                FILETIME filetime;
                CLSID* puuid;
                CLIPDATA* pclipdata;
                BSTR bstrVal;
                BSTRBLOB bstrblobVal;
                BLOB blob;
                LPSTR pszVal;
                LPWSTR pwszVal;
                IUnknown* punkVal;
                IDispatch* pdispVal;
                IStream* pStream;
                IStorage* pStorage;
                LPVERSIONEDSTREAM pVersionedStream;
                LPSAFEARRAY parray;
                CAC cac;
                CAUB caub;
                CAI cai;
                CAUI caui;
                CAL cal;
                CAUL caul;
                CAH cah;
                CAUH cauh;
                CAFLT caflt;
                CADBL cadbl;
                CABOOL cabool;
                CASCODE cascode;
                CACY cacy;
                CADATE cadate;
                CAFILETIME cafiletime;
                CACLSID cauuid;
                CACLIPDATA caclipdata;
                CABSTR cabstr;
                CABSTRBLOB cabstrblob;
                CALPSTR calpstr;
                CALPWSTR calpwstr;
                CAPROPVARIANT capropvar;
                CHAR* pcVal;
                UCHAR* pbVal;
                SHORT* piVal;
                USHORT* puiVal;
                LONG* plVal;
                ULONG* pulVal;
                INT* pintVal;
                UINT* puintVal;
                FLOAT* pfltVal;
                DOUBLE* pdblVal;
                VARIANT_BOOL* pboolVal;
                DECIMAL* pdecVal;
                SCODE* pscode;
                CY* pcyVal;
                DATE* pdate;
                BSTR* pbstrVal;
                IUnknown** ppunkVal;
                IDispatch** ppdispVal;
                LPSAFEARRAY* pparray;
                PROPVARIANT* pvarVal;
            };
        };
        DECIMAL decVal;
    };
};
struct alignas( 1 ) _WOF_EXTERNAL_FILE_ID
{
    FILE_ID_128 FileId;
};
struct alignas( 2 ) _GET_FILTER_FILE_IDENTIFIER_INPUT
{
    WORD AltitudeLength;
    WCHAR Altitude[1];
};
struct alignas( 8 ) _NDR_SCONTEXT
{
    void* pad[2];
    void* userContext;
};
struct alignas( 8 ) IInternetSecurityMgrSite
{
};
struct alignas( 8 ) IInternetHostSecurityManager
{
};
struct alignas( 8 ) _WIM_PROVIDER_OVERLAY_ENTRY
{
    DWORD NextEntryOffset;
    LARGE_INTEGER DataSourceId;
    GUID WimGuid;
    DWORD WimFileNameOffset;
    DWORD WimType;
    DWORD WimIndex;
    DWORD Flags;
};
struct alignas( 8 ) ICatalogFileInfo
{
};
struct alignas( 8 ) IBindHttpSecurity
{
};
;
struct alignas( 8 ) IOleItemContainer
{
};
struct alignas( 8 ) IOleInPlaceObject
{
};
;
struct alignas( 8 ) tagEXCEPINFO
{
    WORD wCode;
    WORD wReserved;
    BSTR bstrSource;
    BSTR bstrDescription;
    BSTR bstrHelpFile;
    DWORD dwHelpContext;
    PVOID pvReserved;
    HRESULT ( *pfnDeferredFillIn )( tagEXCEPINFO* );
    SCODE scode;
};
struct alignas( 8 ) _RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR
{
    unsigned long BufferSize;
    char* Buffer;
};
struct alignas( 8 ) ITypeLib2
{
};
struct alignas( 8 ) _VOLUME_DISK_EXTENTS
{
    DWORD NumberOfDiskExtents;
    DISK_EXTENT Extents[1];
};
struct alignas( 8 ) IBindProtocol
{
};
struct alignas( 8 ) IHttpNegotiate3
{
};
struct alignas( 8 ) ITypeLibRegistrationReader
{
};
struct alignas( 8 ) ICodeInstall
{
};
struct alignas( 8 ) _wireSAFEARR_DISPATCH
{
    ULONG Size;
    IDispatch** apDispatch;
};
struct alignas( 4 ) _MINIDUMP_HEADER
{
    ULONG32 Signature;
    ULONG32 Version;
    ULONG32 NumberOfStreams;
    RVA StreamDirectoryRva;
    ULONG32 CheckSum;
    union alignas( 4 )
    {
        ULONG32 Reserved;
        ULONG32 TimeDateStamp;
    };
    ULONG64 Flags;
};
struct alignas( 8 ) IBindHost
{
};
struct alignas( 8 ) IInternetProtocolSink
{
};
struct alignas( 8 ) tagRPC_ERROR_ENUM_HANDLE
{
    ULONG Signature;
    void* CurrentPos;
    void* Head;
};
struct alignas( 8 ) _wireSAFEARR_BSTR
{
    ULONG Size;
    wireBSTR* aBstr;
};
struct alignas( 8 ) _wireSAFEARR_VARIANT
{
    ULONG Size;
    wireVARIANT* aVariant;
};
struct alignas( 8 ) _wireSAFEARR_BRECORD
{
    ULONG Size;
    wireBRECORD* aRecord;
};
struct alignas( 8 ) _wireSAFEARR_HAVEIID
{
    ULONG Size;
    IUnknown** apUnknown;
    IID iid;
};
struct alignas( 8 ) _BYTE_SIZEDARR
{
    ULONG clSize;
    byte* pData;
};
struct alignas( 8 ) _LONG_SIZEDARR
{
    ULONG clSize;
    ULONG* pData;
};
struct alignas( 8 ) _HYPER_SIZEDARR
{
    ULONG clSize;
    long long* pData;
};
union alignas( 8 ) __MIDL_IOleAutomationTypes_0001
{
    SAFEARR_BSTR BstrStr;
    SAFEARR_UNKNOWN UnknownStr;
    SAFEARR_DISPATCH DispatchStr;
    SAFEARR_VARIANT VariantStr;
    SAFEARR_BRECORD RecordStr;
    SAFEARR_HAVEIID HaveIidStr;
    BYTE_SIZEDARR ByteStr;
    WORD_SIZEDARR WordStr;
    DWORD_SIZEDARR LongStr;
    HYPER_SIZEDARR HyperStr;
};
struct alignas( 8 ) _wireSAFEARRAY_UNION
{
    ULONG sfType;
    __MIDL_IOleAutomationTypes_0001 u;
};
struct alignas( 8 ) IInternetThreadSwitch
{
};
struct alignas( 8 ) _RPC_BINDING_HANDLE_SECURITY_V1_W
{
    unsigned long Version;
    unsigned short* ServerPrincName;
    unsigned long AuthnLevel;
    unsigned long AuthnSvc;
    SEC_WINNT_AUTH_IDENTITY_W* AuthIdentity;
    RPC_SECURITY_QOS* SecurityQos;
};
struct alignas( 8 ) _RPC_BINDING_HANDLE_TEMPLATE_V1_A
{
    unsigned long Version;
    unsigned long Flags;
    unsigned long ProtocolSequence;
    unsigned char* NetworkAddress;
    unsigned char* StringEndpoint;
    union alignas( 8 )
    {
        unsigned char* Reserved;
    } u1;
    UUID ObjectUuid;
};
struct alignas( 8 ) tagFORMATETC
{
    CLIPFORMAT cfFormat;
    DVTARGETDEVICE* ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
};
struct alignas( 8 ) tagSTATDATA
{
    FORMATETC formatetc;
    DWORD advf;
    IAdviseSink* pAdvSink;
    DWORD dwConnection;
};
struct alignas( 8 ) IPSFactoryBuffer
{
};
struct alignas( 8 ) IRpcSyntaxNegotiate
{
};
struct alignas( 8 ) IRpcProxyBuffer
{
};
struct alignas( 8 ) EVENT_INSTANCE_INFO
{
    HANDLE RegHandle;
    ULONG InstanceId;
};
struct alignas( 8 ) IChannelHook
{
};
struct alignas( 8 ) _RPC_CLIENT_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    ULONG_PTR Reserved;
    void* InterpreterInfo;
    unsigned int Flags;
};
struct alignas( 4 ) _MINIDUMP_MISC_INFO_3
{
    ULONG32 SizeOfInfo;
    ULONG32 Flags1;
    ULONG32 ProcessId;
    ULONG32 ProcessCreateTime;
    ULONG32 ProcessUserTime;
    ULONG32 ProcessKernelTime;
    ULONG32 ProcessorMaxMhz;
    ULONG32 ProcessorCurrentMhz;
    ULONG32 ProcessorMhzLimit;
    ULONG32 ProcessorMaxIdleState;
    ULONG32 ProcessorCurrentIdleState;
    ULONG32 ProcessIntegrityLevel;
    ULONG32 ProcessExecuteFlags;
    ULONG32 ProtectedProcess;
    ULONG32 TimeZoneId;
    TIME_ZONE_INFORMATION TimeZone;
};
struct alignas( 8 ) tagPROPSPEC
{
    ULONG ulKind;
    union alignas( 8 )
    {
        PROPID propid;
        LPOLESTR lpwstr;
    };
};
union alignas( 8 ) __MIDL___MIDL_itf_wtypes_0000_0001_0005
{
    CLSID clsid;
    LPOLESTR pFileExt;
    LPOLESTR pMimeType;
    LPOLESTR pProgId;
    LPOLESTR pFileName;
    struct alignas( 8 )
    {
        LPOLESTR pPackageName;
        GUID PolicyId;
    } ByName;
    struct alignas( 4 )
    {
        GUID ObjectId;
        GUID PolicyId;
    } ByObjectId;
};
struct alignas( 8 ) tagCLEANLOCALSTORAGE
{
    IUnknown* pInterface;
    PVOID pStorage;
    DWORD flags;
};
struct alignas( 8 ) _RPC_SECURITY_QOS_V4_A
{
    unsigned long Version;
    unsigned long Capabilities;
    unsigned long IdentityTracking;
    unsigned long ImpersonationType;
    unsigned long AdditionalSecurityInfoType;
    union alignas( 8 )
    {
        RPC_HTTP_TRANSPORT_CREDENTIALS_A* HttpCredentials;
    } u;
    void* Sid;
    unsigned int EffectiveOnly;
};
struct alignas( 8 ) ICreateTypeLib
{
};
struct alignas( 8 ) ITypeComp
{
};
struct alignas( 8 ) ETW_OPEN_TRACE_OPTIONS
{
    ETW_PROCESS_TRACE_MODES ProcessTraceModes;
    PEVENT_RECORD_CALLBACK EventCallback;
    void* EventCallbackContext;
    PETW_BUFFER_CALLBACK BufferCallback;
    void* BufferCallbackContext;
};
struct alignas( 8 ) _RPC_BINDING_HANDLE_TEMPLATE_V1_W
{
    unsigned long Version;
    unsigned long Flags;
    unsigned long ProtocolSequence;
    unsigned short* NetworkAddress;
    unsigned short* StringEndpoint;
    union alignas( 8 )
    {
        unsigned short* Reserved;
    } u1;
    UUID ObjectUuid;
};
struct alignas( 8 ) tagVersionedStream
{
    GUID guidVersion;
    IStream* pStream;
};
struct alignas( 8 ) IMarshal2
{
};
struct alignas( 8 ) IInternalUnknown
{
};
union alignas( 8 ) __MIDL_IWinTypes_0004
{
    LONG hInproc;
    BYTE_BLOB* hRemote;
    long long hInproc64;
};
struct alignas( 8 ) _userHMETAFILE
{
    LONG fContext;
    __MIDL_IWinTypes_0004 u;
};
struct alignas( 8 ) IGlobalOptions
{
};
struct alignas( 8 ) ISynchronizeContainer
{
};
struct alignas( 8 ) ILockBytes
{
};
struct alignas( 4 ) _CRT_FLOAT
{
    float f;
};
struct alignas( 8 ) IPipeDouble
{
};
struct alignas( 8 ) IThumbnailExtractor
{
};
struct alignas( 4 ) _FLAGGED_WORD_BLOB
{
    ULONG fFlags;
    ULONG clSize;
    unsigned short asData[1];
};
struct alignas( 4 ) tagRemBRUSH
{
    ULONG cbData;
    byte data[1];
};
struct alignas( 8 ) IOleLink
{
};
struct alignas( 8 ) IOleInPlaceUIWindow
{
};
struct alignas( 8 ) _GENERIC_BINDING_ROUTINE_PAIR
{
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
};
struct alignas( 8 ) _USER_MARSHAL_CB
{
    unsigned long Flags;
    PMIDL_STUB_MESSAGE pStubMsg;
    PFORMAT_STRING pReserve;
    unsigned long Signature;
    USER_MARSHAL_CB_TYPE CBType;
    PFORMAT_STRING pFormat;
    PFORMAT_STRING pTypeFormat;
};
struct alignas( 8 ) IHttpNegotiate
{
};
struct alignas( 8 ) tagRPCOLEMESSAGE
{
    void* reserved1;
    RPCOLEDATAREP dataRepresentation;
    void* Buffer;
    ULONG cbBuffer;
    ULONG iMethod;
    void* reserved2[5];
    ULONG rpcFlags;
};
union alignas( 8 ) __MIDL_IWinTypes_0001
{
    DWORD dwValue;
    wchar_t* pwszName;
};
struct alignas( 8 ) _userCLIPFORMAT
{
    LONG fContext;
    __MIDL_IWinTypes_0001 u;
};
struct alignas( 8 ) IClassFactory
{
};
union alignas( 8 ) __MIDL_IWinTypes_0003
{
    LONG hInproc;
    FLAGGED_BYTE_BLOB* hRemote;
    long long hInproc64;
};
struct alignas( 8 ) _userHGLOBAL
{
    LONG fContext;
    __MIDL_IWinTypes_0003 u;
};
struct alignas( 8 ) IMultiQI
{
};
struct alignas( 8 ) ISynchronize
{
};
struct alignas( 8 ) IROTData
{
};
struct alignas( 8 ) IPersistFile
{
};
struct alignas( 8 ) IDataAdviseHolder
{
};
struct alignas( 8 ) IUrlMon
{
};
struct alignas( 4 ) tagRemHGLOBAL
{
    LONG fNullHGlobal;
    ULONG cbData;
    byte data[1];
};
struct alignas( 4 ) tagRemHBITMAP
{
    ULONG cbData;
    byte data[1];
};
struct alignas( 8 ) tagELEMDESC
{
    TYPEDESC tdesc;
    union alignas( 8 )
    {
        IDLDESC idldesc;
        PARAMDESC paramdesc;
    };
};
struct alignas( 4 ) CO_DEVICE_CATALOG_COOKIE__
{
    int unused;
};
struct alignas( 8 ) IAddrExclusionControl
{
};
struct alignas( 8 ) _XMIT_ROUTINE_QUINTUPLE
{
    XMIT_HELPER_ROUTINE pfnTranslateToXmit;
    XMIT_HELPER_ROUTINE pfnTranslateFromXmit;
    XMIT_HELPER_ROUTINE pfnFreeXmit;
    XMIT_HELPER_ROUTINE pfnFreeInst;
};
struct alignas( 8 ) IPipeLong
{
};
struct alignas( 8 ) IAgileReference
{
};
struct alignas( 1 ) _LDBL12
{
    unsigned char ld12[12];
};
struct alignas( 8 ) ISupportErrorInfo
{
};
struct alignas( 8 ) _NDR_CS_SIZE_CONVERT_ROUTINES
{
    CS_TYPE_NET_SIZE_ROUTINE pfnNetSize;
    CS_TYPE_TO_NETCS_ROUTINE pfnToNetCs;
    CS_TYPE_LOCAL_SIZE_ROUTINE pfnLocalSize;
    CS_TYPE_FROM_NETCS_ROUTINE pfnFromNetCs;
};
struct alignas( 8 ) tagSTATSTG
{
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
};
struct alignas( 8 ) _USER_MARSHAL_ROUTINE_QUADRUPLE
{
    USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;
    USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;
    USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;
    USER_MARSHAL_FREEING_ROUTINE pfnFree;
};
struct alignas( 8 ) _remoteMETAFILEPICT
{
    LONG mm;
    LONG xExt;
    LONG yExt;
    userHMETAFILE* hMF;
};
struct alignas( 8 ) _SMKM_REGION_EXTENT
{
    ULONG RegionCount;
    SIZE_T ByteOffset;
};
struct alignas( 8 ) _EVENT_TRACE_TAG_FILTER_INFORMATION
{
    EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
    TRACEHANDLE TraceHandle;
    ULONG Filter[1];
};
struct alignas( 8 ) _userHMETAFILEPICT
{
    LONG fContext;
    __MIDL_IWinTypes_0005 u;
};
struct alignas( 8 ) IOleCache
{
};
union alignas( 8 ) __MIDL_IWinTypes_0006
{
    LONG hInproc;
    BYTE_BLOB* hRemote;
    long long hInproc64;
};
struct alignas( 8 ) _userHENHMETAFILE
{
    LONG fContext;
    __MIDL_IWinTypes_0006 u;
};
struct alignas( 8 ) _EVENT_TRACE_PERFORMANCE_INFORMATION
{
    EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
    LARGE_INTEGER LogfileBytesWritten;
};
struct alignas( 8 ) __GENERIC_BINDING_INFO
{
    void* pObj;
    unsigned int Size;
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
};
struct alignas( 8 ) IInternetSecurityManagerEx2
{
};
struct alignas( 8 ) IWinInetHttpTimeouts
{
};
struct alignas( 8 ) IOplockStorage
{
};
struct alignas( 4 ) _SYSTEM_PROCESSOR_MICROCODE_UPDATE_INFORMATION
{
    ULONG Operation;
};
struct alignas( 8 ) IForegroundTransfer
{
};
struct alignas( 8 ) _OBJECT_ATTRIBUTES64
{
    ULONG Length;
    ULONG64 RootDirectory;
    ULONG64 ObjectName;
    ULONG Attributes;
    ULONG64 SecurityDescriptor;
    ULONG64 SecurityQualityOfService;
};
struct alignas( 4 ) _ST_READ_LATENCY_BUCKET
{
    ULONG LatencyUs;
    ULONG Count;
};
struct alignas( 4 ) _ST_READ_LATENCY_STATS
{
    ST_READ_LATENCY_BUCKET Buckets[8];
};
struct alignas( 8 ) IEncodingFilterFactory
{
};
struct alignas( 8 ) _MALLOC_FREE_STRUCT
{
    void* ( *pfnAllocate )( size_t );
    void ( *pfnFree )( void* );
};
struct alignas( 8 ) IEnterpriseDropTarget
{
};
struct alignas( 8 ) IErrorInfo
{
};
struct alignas( 8 ) _EVENT_TRACE_PROFILE_LIST_INFORMATION
{
    EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
    ULONG Spare;
    PPROFILE_SOURCE_INFO Profile[1];
};
struct alignas( 8 ) IOleCacheControl
{
};
struct alignas( 8 ) _SYSTEM_SYSTEM_DISK_INFORMATION
{
    UNICODE_STRING SystemDisk;
};
struct alignas( 8 ) ITypeChangeEvents
{
};
struct alignas( 8 ) IRootStorage
{
};
union alignas( 8 ) __MIDL_IWinTypes_0008
{
    LONG hInproc;
    LOGPALETTE* hRemote;
    long long hInproc64;
};
struct alignas( 8 ) _userHPALETTE
{
    LONG fContext;
    __MIDL_IWinTypes_0008 u;
};
struct alignas( 8 ) IOleClientSite
{
};
struct alignas( 8 ) IZoneIdentifier2
{
};
struct alignas( 8 ) _NDR_EXPR_DESC
{
    unsigned short* pOffset;
    PFORMAT_STRING pFormatExpr;
};
struct alignas( 2 ) _ST_STATS_REGION_INFO
{
    USHORT SpaceUsed;
    UCHAR Priority;
    UCHAR Spare;
};
struct alignas( 4 ) _EVENT_TRACE_SPINLOCK_INFORMATION
{
    EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
    ULONG SpinLockSpinThreshold;
    ULONG SpinLockAcquireSampleRate;
    ULONG SpinLockContentionSampleRate;
    ULONG SpinLockHoldThreshold;
};
struct alignas( 8 ) IInternetZoneManagerEx
{
};
union alignas( 8 ) __MIDL_IWinTypes_0002
{
    LONG hInproc;
    DWORD_BLOB* hRemote;
};
struct alignas( 8 ) tagDISPPARAMS
{
    VARIANTARG* rgvarg;
    DISPID* rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
};
struct alignas( 8 ) tagTYPEATTR
{
    GUID guid;
    LCID lcid;
    DWORD dwReserved;
    MEMBERID memidConstructor;
    MEMBERID memidDestructor;
    LPOLESTR lpstrSchema;
    ULONG cbSizeInstance;
    TYPEKIND typekind;
    WORD cFuncs;
    WORD cVars;
    WORD cImplTypes;
    WORD cbSizeVft;
    WORD cbAlignment;
    WORD wTypeFlags;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    TYPEDESC tdescAlias;
    IDLDESC idldescType;
};
struct alignas( 8 ) IViewObject
{
};
struct alignas( 8 ) IPersistMoniker
{
};
struct alignas( 8 ) ITypeLib
{
};
struct alignas( 8 ) IPersistStorage
{
};
struct alignas( 8 ) IDummyHICONIncluder
{
};
struct alignas( 2 ) _MIDL_FORMAT_STRING
{
    short Pad;
    unsigned char Format[0];
};
struct alignas( 8 ) IInternetBindInfoEx
{
};
struct alignas( 8 ) IProcessLock
{
};
struct alignas( 8 ) _SYSTEM_STORE_INFORMATION
{
    ULONG Version;
    STORE_INFORMATION_CLASS StoreInformationClass;
    PVOID Data;
    ULONG Length;
};
struct alignas( 8 ) ISurrogateService
{
};
struct alignas( 8 ) _MIDL_METHOD_PROPERTY
{
    unsigned long Id;
    ULONG_PTR Value;
};
struct alignas( 8 ) IInternetProtocol
{
};
struct alignas( 4 ) _SYSTEM_QUERY_TIME_ADJUST_INFORMATION
{
    ULONG TimeAdjustment;
    ULONG TimeIncrement;
    BOOLEAN Enable;
};
struct alignas( 8 ) IApartmentShutdown
{
};
struct alignas( 8 ) _MIDL_METHOD_PROPERTY_MAP
{
    unsigned long Count;
    const MIDL_METHOD_PROPERTY* Properties;
};
struct alignas( 8 ) IAdviseSink2
{
};
struct alignas( 8 ) IRecordInfo
{
};
struct alignas( 8 ) IWinInetFileStream
{
};
struct alignas( 8 ) AsyncIAdviseSink2
{
};
struct alignas( 8 ) _MIDL_INTERFACE_METHOD_PROPERTIES
{
    unsigned short MethodCount;
    const const MIDL_METHOD_PROPERTY_MAP** MethodProperties;
};
struct alignas( 8 ) IDataObject
{
};
struct alignas( 8 ) _EVENT_TRACE_SOFT_RESTART_INFORMATION
{
    EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
    TRACEHANDLE TraceHandle;
    BOOLEAN PersistTraceBuffers;
    WCHAR FileName[1];
};
struct alignas( 8 ) _MIDL_SERVER_INFO_
{
    PMIDL_STUB_DESC pStubDesc;
    const SERVER_ROUTINE* DispatchTable;
    PFORMAT_STRING ProcString;
    unsigned short* FmtStringOffset;
    const STUB_THUNK* ThunkTable;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
};
struct alignas( 8 ) IRunnableObject
{
};
struct alignas( 8 ) ICreateTypeInfo2
{
};
struct alignas( 8 ) IRunningObjectTable
{
};
struct alignas( 8 ) IPersist
{
};
struct alignas( 8 ) _MIDL_STUBLESS_PROXY_INFO
{
    PMIDL_STUB_DESC pStubDesc;
    PFORMAT_STRING ProcFormatString;
    unsigned short* FormatStringOffset;
    PRPC_SYNTAX_IDENTIFIER pTransferSyntax;
    ULONG_PTR nCount;
    PMIDL_SYNTAX_INFO pSyntaxInfo;
};
struct alignas( 4 ) _SYSTEM_FLAGS_INFORMATION
{
    union alignas( 4 )
    {
        ULONG Flags;
        struct alignas( 4 )
        {
            ULONG StopOnException : 1;
            ULONG ShowLoaderSnaps : 1;
            ULONG DebugInitialCommand : 1;
            ULONG StopOnHungGUI : 1;
            ULONG HeapEnableTailCheck : 1;
            ULONG HeapEnableFreeCheck : 1;
            ULONG HeapValidateParameters : 1;
            ULONG HeapValidateAll : 1;
            ULONG ApplicationVerifier : 1;
            ULONG MonitorSilentProcessExit : 1;
            ULONG PoolEnableTagging : 1;
            ULONG HeapEnableTagging : 1;
            ULONG UserStackTraceDb : 1;
            ULONG KernelStackTraceDb : 1;
            ULONG MaintainObjectTypeList : 1;
            ULONG HeapEnableTagByDll : 1;
            ULONG DisableStackExtension : 1;
            ULONG EnableCsrDebug : 1;
            ULONG EnableKDebugSymbolLoad : 1;
            ULONG DisablePageKernelStacks : 1;
            ULONG EnableSystemCritBreaks : 1;
            ULONG HeapDisableCoalescing : 1;
            ULONG EnableCloseExceptions : 1;
            ULONG EnableExceptionLogging : 1;
            ULONG EnableHandleTypeTagging : 1;
            ULONG HeapPageAllocs : 1;
            ULONG DebugInitialCommandEx : 1;
            ULONG DisableDbgPrint : 1;
            ULONG CritSecEventCreation : 1;
            ULONG LdrTopDown : 1;
            ULONG EnableHandleExceptions : 1;
            ULONG DisableProtDlls : 1;
        };
    };
};
struct alignas( 8 ) tagCUSTDATA
{
    DWORD cCustData;
    LPCUSTDATAITEM prgCustData;
};
struct alignas( 8 ) IDirectWriterLock
{
};
union alignas( 8 ) _CLIENT_CALL_RETURN
{
    void* Pointer;
    LONG_PTR Simple;
};
struct alignas( 8 ) _SYSTEM_PROCESSOR_IDLE_INFORMATION
{
    ULONGLONG IdleTime;
    ULONGLONG C1Time;
    ULONGLONG C2Time;
    ULONGLONG C3Time;
    ULONG C1Transitions;
    ULONG C2Transitions;
    ULONG C3Transitions;
    ULONG Padding;
};
struct alignas( 8 ) _SYSTEM_REGISTRY_QUOTA_INFORMATION
{
    ULONG RegistryQuotaAllowed;
    ULONG RegistryQuotaUsed;
    SIZE_T PagedPoolSize;
};
struct alignas( 8 ) IWrappedProtocol
{
};
struct alignas( 8 ) _MIDL_INTERCEPTION_INFO
{
    unsigned long Version;
    PFORMAT_STRING ProcString;
    unsigned short* ProcFormatOffsetTable;
    unsigned long ProcCount;
    PFORMAT_STRING TypeString;
};
struct alignas( 8 ) _EVENT_TRACE_SYSTEM_EVENT_INFORMATION
{
    EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
    TRACEHANDLE TraceHandle;
    ULONG HookId[1];
};
struct alignas( 4 ) _SYSTEM_LOOKASIDE_INFORMATION
{
    USHORT CurrentDepth;
    USHORT MaximumDepth;
    ULONG TotalAllocates;
    ULONG AllocateMisses;
    ULONG TotalFrees;
    ULONG FreeMisses;
    ULONG Type;
    ULONG Tag;
    ULONG Size;
};
struct alignas( 8 ) _MIDL_WINRT_TYPE_SERIALIZATION_INFO
{
    unsigned long Version;
    PFORMAT_STRING TypeFormatString;
    unsigned short FormatStringSize;
    unsigned short TypeOffset;
    PMIDL_STUB_DESC StubDesc;
};
struct alignas( 8 ) IInternetProtocolSinkStackable
{
};
struct alignas( 4 ) tagRemHMETAFILEPICT
{
    LONG mm;
    LONG xExt;
    LONG yExt;
    ULONG cbData;
    byte data[1];
};
struct alignas( 8 ) IInternetPriority
{
};
struct alignas( 8 ) _SYSTEM_SET_TIME_ADJUST_INFORMATION_PRECISE
{
    ULONGLONG TimeAdjustment;
    BOOLEAN Enable;
};
struct alignas( 8 ) IRpcStubBuffer
{
};
struct alignas( 4 ) tagRemHPALETTE
{
    ULONG cbData;
    byte data[1];
};
struct alignas( 4 ) _SYSTEM_SET_TIME_ADJUST_INFORMATION
{
    ULONG TimeAdjustment;
    BOOLEAN Enable;
};
struct alignas( 8 ) IUriBuilder
{
};
struct alignas( 8 ) IFillLockBytes
{
};
struct alignas( 8 ) _SYSTEM_FILECACHE_INFORMATION
{
    SIZE_T CurrentSize;
    SIZE_T PeakSize;
    ULONG PageFaultCount;
    SIZE_T MinimumWorkingSet;
    SIZE_T MaximumWorkingSet;
    SIZE_T CurrentSizeIncludingTransitionInPages;
    SIZE_T PeakSizeIncludingTransitionInPages;
    ULONG TransitionRePurposeCount;
    ULONG Flags;
};
struct alignas( 8 ) IBlockingLock
{
};
struct alignas( 4 ) _SYSTEM_VDM_INSTEMUL_INFO
{
    ULONG SegmentNotPresent;
    ULONG VdmOpcode0F;
    ULONG OpcodeESPrefix;
    ULONG OpcodeCSPrefix;
    ULONG OpcodeSSPrefix;
    ULONG OpcodeDSPrefix;
    ULONG OpcodeFSPrefix;
    ULONG OpcodeGSPrefix;
    ULONG OpcodeOPER32Prefix;
    ULONG OpcodeADDR32Prefix;
    ULONG OpcodeINSB;
    ULONG OpcodeINSW;
    ULONG OpcodeOUTSB;
    ULONG OpcodeOUTSW;
    ULONG OpcodePUSHF;
    ULONG OpcodePOPF;
    ULONG OpcodeINTnn;
    ULONG OpcodeINTO;
    ULONG OpcodeIRET;
    ULONG OpcodeINBimm;
    ULONG OpcodeINWimm;
    ULONG OpcodeOUTBimm;
    ULONG OpcodeOUTWimm;
    ULONG OpcodeINB;
    ULONG OpcodeINW;
    ULONG OpcodeOUTB;
    ULONG OpcodeOUTW;
    ULONG OpcodeLOCKPrefix;
    ULONG OpcodeREPNEPrefix;
    ULONG OpcodeREPPrefix;
    ULONG OpcodeHLT;
    ULONG OpcodeCLI;
    ULONG OpcodeSTI;
    ULONG BopCount;
};
struct alignas( 8 ) _WORKER_FACTORY_BASIC_INFORMATION
{
    LARGE_INTEGER Timeout;
    LARGE_INTEGER RetryTimeout;
    LARGE_INTEGER IdleTimeout;
    BOOLEAN Paused;
    BOOLEAN TimerSet;
    BOOLEAN QueuedToExWorker;
    BOOLEAN MayCreate;
    BOOLEAN CreateInProgress;
    BOOLEAN InsertedIntoQueue;
    BOOLEAN Shutdown;
    ULONG BindingCount;
    ULONG ThreadMinimum;
    ULONG ThreadMaximum;
    ULONG PendingWorkerCount;
    ULONG WaitingWorkerCount;
    ULONG TotalWorkerCount;
    ULONG ReleaseCount;
    LONGLONG InfiniteWaitGoal;
    PVOID StartRoutine;
    PVOID StartParameter;
    HANDLE ProcessId;
    SIZE_T StackReserve;
    SIZE_T StackCommit;
    NTSTATUS LastThreadCreationStatus;
};
struct alignas( 4 ) _ldiv_t
{
    long quot;
    long rem;
};
struct alignas( 8 ) _userFLAG_STGMEDIUM
{
    LONG ContextFlags;
    LONG fPassOwnership;
    userSTGMEDIUM Stgmed;
};
struct alignas( 1 ) _LDOUBLE
{
    unsigned char ld[10];
};
struct alignas( 8 ) _CRT_DOUBLE
{
    double x;
};
struct alignas( 8 ) tagSOLE_AUTHENTICATION_SERVICE
{
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    OLECHAR* pPrincipalName;
    HRESULT hr;
};
struct alignas( 8 ) _LONGDOUBLE
{
    long double x;
};
struct alignas( 8 ) IOleContainer
{
};
struct alignas( 8 ) IStdMarshalInfo
{
};
struct alignas( 4 ) _EVENT_BASIC_INFORMATION
{
    EVENT_TYPE EventType;
    LONG EventState;
};
struct alignas( 8 ) IOleWindow
{
};
struct alignas( 8 ) _COAUTHIDENTITY
{
    USHORT* User;
    ULONG UserLength;
    USHORT* Domain;
    ULONG DomainLength;
    USHORT* Password;
    ULONG PasswordLength;
    ULONG Flags;
};
struct alignas( 8 ) IOleInPlaceFrame
{
};
struct alignas( 8 ) IMallocSpy
{
};
struct alignas( 4 ) tagSTATPROPSETSTG
{
    FMTID fmtid;
    CLSID clsid;
    DWORD grfFlags;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD dwOSVersion;
};
struct alignas( 8 ) IBindCtx
{
};
struct alignas( 8 ) IPropertySetStorage
{
};
struct alignas( 8 ) __MIDL___MIDL_itf_wtypes_0000_0001_0001
{
    DWORD tyspec;
    __MIDL___MIDL_itf_wtypes_0000_0001_0005 tagged_union;
};
struct alignas( 4 ) _BYTE_BLOB
{
    ULONG clSize;
    byte abData[1];
};
;
;
struct alignas( 8 ) _SYSTEM_BASIC_INFORMATION
{
    ULONG Reserved;
    ULONG TimerResolution;
    ULONG PageSize;
    ULONG NumberOfPhysicalPages;
    ULONG LowestPhysicalPageNumber;
    ULONG HighestPhysicalPageNumber;
    ULONG AllocationGranularity;
    ULONG_PTR MinimumUserModeAddress;
    ULONG_PTR MaximumUserModeAddress;
    KAFFINITY ActiveProcessorsAffinityMask;
    CCHAR NumberOfProcessors;
};
struct alignas( 4 ) _WORD_BLOB
{
    ULONG clSize;
    unsigned short asData[1];
};
struct alignas( 4 ) _VARIABLE_NAME
{
    ULONG NextEntryOffset;
    GUID VendorGuid;
    WCHAR Name[1];
};
struct alignas( 4 ) _DWORD_BLOB
{
    ULONG clSize;
    ULONG alData[1];
};
struct alignas( 8 ) tagSOLE_AUTHENTICATION_INFO
{
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    void* pAuthInfo;
};
struct alignas( 4 ) _FLAGGED_BYTE_BLOB
{
    ULONG fFlags;
    ULONG clSize;
    byte abData[1];
};
struct alignas( 4 ) tagRemSTGMEDIUM
{
    DWORD tymed;
    DWORD dwHandleType;
    ULONG pData;
    ULONG pUnkForRelease;
    ULONG cbData;
    byte data[1];
};
struct alignas( 8 ) _SYSTEM_PROCESS_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG NumberOfThreads;
    LARGE_INTEGER WorkingSetPrivateSize;
    ULONG HardFaultCount;
    ULONG NumberOfThreadsHighWatermark;
    ULONGLONG CycleTime;
    LARGE_INTEGER CreateTime;
    LARGE_INTEGER UserTime;
    LARGE_INTEGER KernelTime;
    UNICODE_STRING ImageName;
    KPRIORITY BasePriority;
    HANDLE UniqueProcessId;
    HANDLE InheritedFromUniqueProcessId;
    ULONG HandleCount;
    ULONG SessionId;
    ULONG_PTR UniqueProcessKey;
    SIZE_T PeakVirtualSize;
    SIZE_T VirtualSize;
    ULONG PageFaultCount;
    SIZE_T PeakWorkingSetSize;
    SIZE_T WorkingSetSize;
    SIZE_T QuotaPeakPagedPoolUsage;
    SIZE_T QuotaPagedPoolUsage;
    SIZE_T QuotaPeakNonPagedPoolUsage;
    SIZE_T QuotaNonPagedPoolUsage;
    SIZE_T PagefileUsage;
    SIZE_T PeakPagefileUsage;
    SIZE_T PrivatePageCount;
    LARGE_INTEGER ReadOperationCount;
    LARGE_INTEGER WriteOperationCount;
    LARGE_INTEGER OtherOperationCount;
    LARGE_INTEGER ReadTransferCount;
    LARGE_INTEGER WriteTransferCount;
    LARGE_INTEGER OtherTransferCount;
    SYSTEM_THREAD_INFORMATION Threads[1];
};
struct alignas( 8 ) tagStorageLayout
{
    DWORD LayoutType;
    OLECHAR* pwcsElementName;
    LARGE_INTEGER cOffset;
    LARGE_INTEGER cBytes;
};
struct alignas( 8 ) IPipeByte
{
};
struct alignas( 8 ) IUnknown
{
};
struct alignas( 8 ) AsyncIUnknown
{
};
struct alignas( 8 ) AsyncIPipeLong
{
};
struct alignas( 8 ) IEnumUnknown
{
};
struct alignas( 8 ) _SYSTEM_HANDLE_INFORMATION_EX
{
    ULONG_PTR NumberOfHandles;
    ULONG_PTR Reserved;
    SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX Handles[1];
};
struct alignas( 8 ) IMarshal
{
};
struct alignas( 4 ) tagRemSNB
{
    ULONG ulCntStr;
    ULONG ulCntChar;
    OLECHAR rgString[1];
};
struct alignas( 8 ) INoMarshal
{
};
struct alignas( 8 ) IAgileObject
{
};
struct alignas( 4 ) _MUTANT_BASIC_INFORMATION
{
    LONG CurrentCount;
    BOOLEAN OwnedByCaller;
    BOOLEAN AbandonedState;
};
struct alignas( 8 ) IActivationFilter
{
};
struct alignas( 8 ) IProcessInitControl
{
};
struct alignas( 8 ) tagBIND_OPTS2
{
    DWORD dwTrackFlags;
    DWORD dwClassContext;
    LCID locale;
    COSERVERINFO* pServerInfo;
};
struct alignas( 8 ) IFastRundown
{
};
struct alignas( 8 ) IMalloc
{
};
struct alignas( 8 ) _SYSTEM_RANGE_START_INFORMATION
{
    ULONG_PTR SystemRangeStart;
};
struct alignas( 8 ) _COSERVERINFO
{
    DWORD dwReserved1;
    LPWSTR pwszName;
    COAUTHINFO* pAuthInfo;
    DWORD dwReserved2;
};
struct alignas( 8 ) IMarshalingStream
{
};
struct alignas( 8 ) tagServerInformation
{
    DWORD dwServerPid;
    DWORD dwServerTid;
    UINT64 ui64ServerAddress;
};
struct alignas( 8 ) IExternalConnection
{
};
struct alignas( 4 ) CO_MTA_USAGE_COOKIE__
{
    int unused;
};
struct alignas( 8 ) ICallFactory
{
};
struct alignas( 8 ) tagFUNCDESC
{
    MEMBERID memid;
    SCODE* lprgscode;
    ELEMDESC* lprgelemdescParam;
    FUNCKIND funckind;
    INVOKEKIND invkind;
    CALLCONV callconv;
    SHORT cParams;
    SHORT cParamsOpt;
    SHORT oVft;
    SHORT cScodes;
    ELEMDESC elemdescFunc;
    WORD wFuncFlags;
};
struct alignas( 8 ) IRpcHelper
{
};
struct alignas( 8 ) IReleaseMarshalBuffers
{
};
struct alignas( 8 ) IEnumString
{
};
struct alignas( 8 ) IStream
{
};
struct alignas( 8 ) IAuthenticate
{
};
struct alignas( 8 ) IAsyncRpcChannelBuffer
{
};
struct alignas( 8 ) IHttpNegotiate2
{
};
struct alignas( 8 ) IRpcChannelBuffer3
{
};
struct alignas( 4 ) tagTLIBATTR
{
    GUID guid;
    LCID lcid;
    SYSKIND syskind;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    WORD wLibFlags;
};
struct alignas( 8 ) _SYSTEM_SYSTEM_PARTITION_INFORMATION
{
    UNICODE_STRING SystemPartition;
};
struct alignas( 8 ) IWindowForBindingUI
{
};
struct alignas( 8 ) IUri
{
};
struct alignas( 8 ) IClientSecurity
{
};
struct alignas( 8 ) IServerSecurity
{
};
union alignas( 8 ) __MIDL_IAdviseSink_0003
{
    wireHMETAFILEPICT hMetaFilePict;
    wireHENHMETAFILE hHEnhMetaFile;
    GDI_OBJECT* hGdiHandle;
    wireHGLOBAL hGlobal;
    LPOLESTR lpszFileName;
    BYTE_BLOB* pstm;
    BYTE_BLOB* pstg;
};
struct alignas( 8 ) _STGMEDIUM_UNION
{
    DWORD tymed;
    __MIDL_IAdviseSink_0003 u;
};
struct alignas( 8 ) IRpcOptions
{
};
struct alignas( 4 ) tagDVTARGETDEVICE
{
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
    BYTE tdData[1];
};
struct alignas( 8 ) IErrorLog
{
};
struct alignas( 8 ) IGlobalInterfaceTable
{
};
struct alignas( 8 ) ISynchronizeHandle
{
};
struct alignas( 8 ) tagVARDESC
{
    MEMBERID memid;
    LPOLESTR lpstrSchema;
    union alignas( 8 )
    {
        ULONG oInst;
        VARIANT* lpvarValue;
    };
    ELEMDESC elemdescVar;
    WORD wVarFlags;
    VARKIND varkind;
};
struct alignas( 8 ) _SYSTEM_SESSION_PROCESS_INFORMATION
{
    ULONG SessionId;
    ULONG SizeOfBuf;
    PVOID Buffer;
};
struct alignas( 8 ) ISynchronizeMutex
{
};
struct alignas( 8 ) ICancelMethodCalls
{
};
struct alignas( 8 ) IOleAdviseHolder
{
};
struct alignas( 8 ) _SMKM_FILE_INFO
{
    HANDLE FileHandle;
    PFILE_OBJECT FileObject;
    PFILE_OBJECT VolumeFileObject;
    PDEVICE_OBJECT VolumeDeviceObject;
    HANDLE VolumePnpHandle;
    PIRP UsageNotificationIrp;
    PSMKM_REGION_EXTENT Extents;
    ULONG ExtentCount;
};
struct alignas( 8 ) IInternetSecurityManagerEx
{
};
struct alignas( 8 ) AsyncIPipeByte
{
};
struct alignas( 8 ) tagSAFEARRAY
{
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    PVOID pvData;
    SAFEARRAYBOUND rgsabound[1];
};
struct alignas( 8 ) AsyncIPipeDouble
{
};
struct alignas( 8 ) XMLDOMDocumentEvents
{
};
struct alignas( 8 ) IWinInetCacheHints2
{
};
struct alignas( 8 ) IXMLDOMEntity
{
};
struct alignas( 8 ) IXTLRuntime
{
};
;
struct alignas( 8 ) IDataFilter
{
};
struct alignas( 8 ) ISoftDistExt
{
};
struct alignas( 8 ) IXMLDSOControl
{
};
struct alignas( 8 ) IDropSourceNotify
{
};
struct alignas( 8 ) tagMULTI_QI
{
    const IID* pIID;
    IUnknown* pItf;
    HRESULT hr;
};
struct alignas( 8 ) _ST_STATS_SPACE_BITMAP
{
    SIZE_T CompressedBytes;
    ULONG BytesPerBit;
    UCHAR StoreBitmap[1];
};
struct alignas( 8 ) IInternetZoneManager
{
};
struct alignas( 4 ) _SMC_CACHE_LIST_REQUEST
{
    ULONG Version : 8;
    ULONG CacheCount : 8;
    ULONG Spare : 16;
    ULONG CacheId[16];
};
struct alignas( 8 ) IContinue
{
};
struct alignas( 8 ) IMonikerProp
{
};
struct alignas( 8 ) _RTL_PROCESS_LOCKS
{
    ULONG NumberOfLocks;
    RTL_PROCESS_LOCK_INFORMATION Locks[1];
};
struct alignas( 8 ) IInternetProtocolRoot
{
};
struct alignas( 8 ) tagSOLE_AUTHENTICATION_LIST
{
    DWORD cAuthInfo;
    SOLE_AUTHENTICATION_INFO* aAuthInfo;
};
struct alignas( 8 ) IInternetProtocolEx
{
};
struct alignas( 8 ) ITypeMarshal
{
};
struct alignas( 8 ) _EVENT_TRACE_STACK_CACHING_INFORMATION
{
    EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
    TRACEHANDLE TraceHandle;
    BOOLEAN Enabled;
    UCHAR Reserved[3];
    ULONG CacheSize;
    ULONG BucketCount;
};
struct alignas( 8 ) ICreateTypeInfo
{
};
struct alignas( 8 ) IWinInetCacheHints
{
};
struct alignas( 4 ) _SYSTEM_CODEINTEGRITY_INFORMATION
{
    ULONG Length;
    union alignas( 4 )
    {
        ULONG CodeIntegrityOptions;
        struct alignas( 4 )
        {
            ULONG Enabled : 1;
            ULONG TestSign : 1;
            ULONG UmciEnabled : 1;
            ULONG UmciAuditModeEnabled : 1;
            ULONG UmciExclusionPathsEnabled : 1;
            ULONG TestBuild : 1;
            ULONG PreproductionBuild : 1;
            ULONG DebugModeEnabled : 1;
            ULONG FlightBuild : 1;
            ULONG FlightingEnabled : 1;
            ULONG HvciKmciEnabled : 1;
            ULONG HvciKmciAuditModeEnabled : 1;
            ULONG HvciKmciStrictModeEnabled : 1;
            ULONG HvciIumEnabled : 1;
            ULONG WhqlEnforcementEnabled : 1;
            ULONG WhqlAuditModeEnabled : 1;
            ULONG Spare : 16;
        };
    };
};
struct alignas( 4 ) _ST_STATS
{
    ULONG Version : 8;
    ULONG Level : 4;
    ULONG StoreType : 4;
    ULONG NoDuplication : 1;
    ULONG NoCompression : 1;
    ULONG EncryptionStrength : 12;
    ULONG VirtualRegions : 1;
    ULONG Spare0 : 1;
    ULONG Size;
    USHORT CompressionFormat;
    USHORT Spare;
    struct alignas( 4 )
    {
        ULONG RegionSize;
        ULONG RegionCount;
        ULONG RegionCountMax;
        ULONG Granularity;
        ST_DATA_MGR_STATS UserData;
        ST_DATA_MGR_STATS Metadata;
    } Basic;
    struct alignas( 4 )
    {
        ST_IO_STATS IoStats;
        ST_READ_LATENCY_STATS ReadLatencyStats;
    } Io;
};
struct alignas( 8 ) IInternetSession
{
};
struct alignas( 8 ) IUriBuilderFactory
{
};
struct alignas( 4 ) _SYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION_WIN8
{
    ULONG ProcessorNumber;
    ULONG StateCount;
    SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT_WIN8 States[1];
};
struct alignas( 8 ) _SYSTEM_MEMORY_LIST_INFORMATION
{
    SIZE_T ZeroPageCount;
    SIZE_T FreePageCount;
    SIZE_T ModifiedPageCount;
    SIZE_T ModifiedNoWritePageCount;
    SIZE_T BadPageCount;
    SIZE_T PageCountByPriority[8];
    SIZE_T RepurposedPagesByPriority[8];
    SIZE_T ModifiedPageCountPageFile;
};
struct alignas( 8 ) IStorage
{
};
struct alignas( 8 ) _SYSTEM_SESSION_MAPPED_VIEW_INFORMATION
{
    SIZE_T NextEntryOffset;
    ULONG SessionId;
    ULONG ViewFailures;
    SIZE_T NumberOfBytesAvailable;
    SIZE_T NumberOfBytesAvailableContiguous;
};
struct alignas( 8 ) IEnumFORMATETC
{
};
struct alignas( 8 ) _tagCODEBASEHOLD
{
    ULONG cbSize;
    LPWSTR szDistUnit;
    LPWSTR szCodeBase;
    DWORD dwVersionMS;
    DWORD dwVersionLS;
    DWORD dwStyle;
};
struct alignas( 4 ) _SYSTEM_FIRMWARE_TABLE_INFORMATION
{
    ULONG ProviderSignature;
    SYSTEM_FIRMWARE_TABLE_ACTION Action;
    ULONG TableID;
    ULONG TableBufferLength;
    UCHAR TableBuffer[1];
};
struct alignas( 8 ) IInitializeSpy
{
};
struct alignas( 8 ) tagSTATPROPSTG
{
    LPOLESTR lpwstrName;
    PROPID propid;
    VARTYPE vt;
};
struct alignas( 8 ) IProgressNotify
{
};
struct alignas( 8 ) IEnumSTATPROPSTG
{
};
struct alignas( 8 ) _SYSTEM_BOOT_ENVIRONMENT_INFORMATION
{
    GUID BootIdentifier;
    FIRMWARE_TYPE FirmwareType;
    union alignas( 8 )
    {
        ULONGLONG BootFlags;
        struct alignas( 8 )
        {
            ULONGLONG DbgMenuOsSelection : 1;
            ULONGLONG DbgHiberBoot : 1;
            ULONGLONG DbgSoftBoot : 1;
            ULONGLONG DbgMeasuredLaunch : 1;
            ULONGLONG DbgMeasuredLaunchCapable : 1;
            ULONGLONG DbgSystemHiveReplace : 1;
            ULONGLONG DbgMeasuredLaunchSmmProtections : 1;
            ULONGLONG DbgMeasuredLaunchSmmLevel : 7;
            ULONGLONG DbgBugCheckRecovery : 1;
            ULONGLONG DbgFASR : 1;
            ULONGLONG DbgUseCachedBcd : 1;
        };
    };
};
struct alignas( 4 ) tagRemHENHMETAFILE
{
    ULONG cbData;
    byte data[1];
};
struct alignas( 4 ) _SYSTEM_CRASH_DUMP_STATE_INFORMATION
{
    SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS CrashDumpConfigurationClass;
};
struct alignas( 8 ) _MUTANT_OWNER_INFORMATION
{
    CLIENT_ID ClientId;
};
struct alignas( 8 ) _GDI_NONREMOTE
{
    LONG fContext;
    __MIDL_IWinTypes_0002 u;
};
struct alignas( 8 ) ICreateErrorInfo
{
};
struct alignas( 4 ) _SYSTEM_SPECIAL_POOL_INFORMATION
{
    ULONG PoolTag;
    ULONG Flags;
};
struct alignas( 8 ) _COUNTED_REASON_CONTEXT
{
    ULONG Version;
    ULONG Flags;
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            UNICODE_STRING ResourceFileName;
            USHORT ResourceReasonId;
            ULONG StringCount;
            PUNICODE_STRING ReasonStrings;
        };
        UNICODE_STRING SimpleString;
    };
};
struct alignas( 8 ) _userHBITMAP
{
    LONG fContext;
    __MIDL_IWinTypes_0007 u;
};
struct alignas( 8 ) _tagBINDINFO
{
    ULONG cbSize;
    LPWSTR szExtraInfo;
    STGMEDIUM stgmedData;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    SECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown* pUnk;
    DWORD dwReserved;
};
struct alignas( 4 ) tagRemFORMATETC
{
    DWORD cfFormat;
    DWORD ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
};
struct alignas( 8 ) _SYSTEM_BIGPOOL_ENTRY
{
    union alignas( 8 )
    {
        PVOID VirtualAddress;
        ULONG_PTR NonPaged : 1;
    };
    SIZE_T SizeInBytes;
    union alignas( 4 )
    {
        UCHAR Tag[4];
        ULONG TagUlong;
    };
};
struct alignas( 8 ) _RTL_SCPCFG_NTDLL_EXPORTS
{
    PVOID ScpCfgHeader_Nop;
    PVOID ScpCfgEnd_Nop;
    PVOID ScpCfgHeader;
    PVOID ScpCfgEnd;
    PVOID ScpCfgHeader_ES;
    PVOID ScpCfgEnd_ES;
    PVOID ScpCfgHeader_Fptr;
    PVOID ScpCfgEnd_Fptr;
    PVOID LdrpGuardDispatchIcallNoESFptr;
    PVOID __guard_dispatch_icall_fptr;
    PVOID LdrpGuardCheckIcallNoESFptr;
    PVOID __guard_check_icall_fptr;
    PVOID LdrpHandleInvalidUserCallTarget;
    struct alignas( 8 )
    {
        PVOID NtOpenFile;
        PVOID NtCreateSection;
        PVOID NtQueryAttributesFile;
        PVOID NtOpenSection;
        PVOID NtMapViewOfSection;
    } LdrpCriticalLoaderFunctions;
};
struct alignas( 8 ) IAuthenticateEx
{
};
struct alignas( 8 ) IInternetZoneManagerEx2
{
};
struct alignas( 8 ) IOleInPlaceSite
{
};
struct alignas( 8 ) _DELAYLOAD_PROC_DESCRIPTOR
{
    ULONG ImportDescribedByName;
    union alignas( 8 )
    {
        PCSTR Name;
        ULONG Ordinal;
    } Description;
};
struct alignas( 8 ) IInternetBindInfo
{
};
struct alignas( 8 ) IOleInPlaceActiveObject
{
};
struct alignas( 4 ) _KSYSTEM_TIME
{
    ULONG LowPart;
    LONG High1Time;
    LONG High2Time;
};
struct alignas( 8 ) tagINTERFACEDATA
{
    METHODDATA* pmethdata;
    UINT cMembers;
};
struct alignas( 8 ) IXMLDOMDocumentType
{
};
struct alignas( 16 ) _QUAD_PTR
{
    ULONG_PTR DoNotUseThisField1;
    ULONG_PTR DoNotUseThisField2;
};
struct alignas( 8 ) IXMLDOMElement
{
};
struct alignas( 8 ) IXMLDOMDocument
{
};
struct alignas( 4 ) _OBJECT_ATTRIBUTES32
{
    ULONG Length;
    ULONG RootDirectory;
    ULONG ObjectName;
    ULONG Attributes;
    ULONG SecurityDescriptor;
    ULONG SecurityQualityOfService;
};
struct alignas( 8 ) IXMLElement
{
};
struct alignas( 8 ) _wireSAFEARRAY
{
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    SAFEARRAYUNION uArrayStructs;
    SAFEARRAYBOUND rgsabound[1];
};
struct alignas( 2 ) UDATE
{
    SYSTEMTIME st;
    USHORT wDayOfYear;
};
struct alignas( 4 ) tagOleMenuGroupWidths
{
    LONG width[6];
};
struct alignas( 8 ) _tagPROTOCOL_ARGUMENT
{
    LPCWSTR szMethod;
    LPCWSTR szTargetUrl;
};
struct alignas( 8 ) IXMLDOMAttribute
{
};
struct alignas( 8 ) _LDR_DLL_UNLOADED_NOTIFICATION_DATA
{
    ULONG Flags;
    PCUNICODE_STRING FullDllName;
    PCUNICODE_STRING BaseDllName;
    PVOID DllBase;
    ULONG SizeOfImage;
};
struct alignas( 8 ) _tagHIT_LOGGING_INFO
{
    DWORD dwStructSize;
    LPSTR lpszLoggedUrlName;
    SYSTEMTIME StartTime;
    SYSTEMTIME EndTime;
    LPSTR lpszExtendedInfo;
};
struct alignas( 4 ) _LDR_FAILURE_DATA
{
    NTSTATUS Status;
    WCHAR DllName[32];
    WCHAR AdditionalInfo[32];
};
struct alignas( 8 ) _DELAYLOAD_INFO
{
    ULONG Size;
    PCIMAGE_DELAYLOAD_DESCRIPTOR DelayloadDescriptor;
    PIMAGE_THUNK_DATA ThunkAddress;
    PCSTR TargetDllName;
    DELAYLOAD_PROC_DESCRIPTOR TargetApiDescriptor;
    PVOID TargetModuleBase;
    PVOID Unused;
    ULONG LastError;
};
struct alignas( 8 ) _NLSTABLEINFO
{
    CPTABLEINFO OemTableInfo;
    CPTABLEINFO AnsiTableInfo;
    PUSHORT UpperCaseTable;
    PUSHORT LowerCaseTable;
};
struct alignas( 8 ) _CLIENT_ID64
{
    ULONGLONG UniqueProcess;
    ULONGLONG UniqueThread;
};
struct alignas( 8 ) IXMLDOMCDATASection
{
};
struct alignas( 8 ) IXMLDOMCharacterData
{
};
struct alignas( 8 ) IXMLDocument2
{
};
struct alignas( 8 ) _RTL_PROCESS_BACKTRACES
{
    ULONG CommittedMemory;
    ULONG ReservedMemory;
    ULONG NumberOfBackTraceLookups;
    ULONG NumberOfBackTraces;
    RTL_PROCESS_BACKTRACE_INFORMATION BackTraces[1];
};
struct alignas( 8 ) _SYSTEM_OBJECTTYPE_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG NumberOfObjects;
    ULONG NumberOfHandles;
    ULONG TypeIndex;
    ULONG InvalidAttributes;
    GENERIC_MAPPING GenericMapping;
    ACCESS_MASK ValidAccessMask;
    ULONG PoolType;
    BOOLEAN SecurityRequired;
    BOOLEAN WaitableObject;
    UNICODE_STRING TypeName;
};
struct alignas( 8 ) _LARGE_INTEGER_128
{
    LONGLONG QuadPart[2];
};
struct alignas( 4 ) _EVENT_TRACE_HEAP_TRACING_INFORMATION
{
    EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
    ULONG ProcessId[1];
};
struct alignas( 8 ) _SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION
{
    ULONGLONG CycleTime;
};
struct alignas( 4 ) _EVENT_TRACE_PROFILE_ADD_INFORMATION
{
    EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
    UCHAR Version;
    union alignas( 4 )
    {
        EVENT_TRACE_PROFILE_ADD_INFORMATION_V2 V2;
        EVENT_TRACE_PROFILE_ADD_INFORMATION_V3 V3;
    };
    ULONG CpuInfoHierarchy[3];
    ULONG InitialInterval;
    BOOLEAN Persist;
    WCHAR ProfileSourceDescription[1];
};
struct alignas( 8 ) _LDR_ENUM_RESOURCE_ENTRY
{
    union alignas( 8 )
    {
        ULONG_PTR NameOrId;
        PIMAGE_RESOURCE_DIRECTORY_STRING Name;
        struct alignas( 2 )
        {
            USHORT Id;
            USHORT NameIsPresent;
        };
    } Path[3];
    PVOID Data;
    ULONG Size;
    ULONG Reserved;
};
;
union alignas( 8 ) _LDR_DLL_NOTIFICATION_DATA
{
    LDR_DLL_LOADED_NOTIFICATION_DATA Loaded;
    LDR_DLL_UNLOADED_NOTIFICATION_DATA Unloaded;
};
struct alignas( 4 ) _EVENT_TRACE_TIME_PROFILE_INFORMATION
{
    EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
    ULONG ProfileInterval;
};
struct alignas( 4 ) _SYSTEM_PREFETCH_PATCH_INFORMATION
{
    ULONG PrefetchPatchCount;
};
struct alignas( 8 ) IXMLDOMImplementation
{
};
struct alignas( 4 ) _SYSTEM_DPC_BEHAVIOR_INFORMATION
{
    ULONG Spare;
    ULONG DpcQueueDepth;
    ULONG MinimumDpcRate;
    ULONG AdjustDpcThreshold;
    ULONG IdealDpcRate;
};
struct alignas( 8 ) IXMLDOMDocumentFragment
{
};
struct alignas( 8 ) _SYSTEM_QUERY_TIME_ADJUST_INFORMATION_PRECISE
{
    ULONGLONG TimeAdjustment;
    ULONGLONG TimeIncrement;
    BOOLEAN Enable;
};
struct alignas( 8 ) IXMLDOMNodeList
{
};
struct alignas( 8 ) IXMLDOMComment
{
};
struct alignas( 8 ) _SYSTEM_VERIFIER_INFORMATION_LEGACY
{
    ULONG NextEntryOffset;
    ULONG Level;
    UNICODE_STRING DriverName;
    ULONG RaiseIrqls;
    ULONG AcquireSpinLocks;
    ULONG SynchronizeExecutions;
    ULONG AllocationsAttempted;
    ULONG AllocationsSucceeded;
    ULONG AllocationsSucceededSpecialPool;
    ULONG AllocationsWithNoTag;
    ULONG TrimRequests;
    ULONG Trims;
    ULONG AllocationsFailed;
    ULONG AllocationsFailedDeliberately;
    ULONG Loads;
    ULONG Unloads;
    ULONG UnTrackedPool;
    ULONG CurrentPagedPoolAllocations;
    ULONG CurrentNonPagedPoolAllocations;
    ULONG PeakPagedPoolAllocations;
    ULONG PeakNonPagedPoolAllocations;
    SIZE_T PagedPoolUsageInBytes;
    SIZE_T NonPagedPoolUsageInBytes;
    SIZE_T PeakPagedPoolUsageInBytes;
    SIZE_T PeakNonPagedPoolUsageInBytes;
};
struct alignas( 8 ) IXMLElementCollection
{
};
struct alignas( 8 ) IXMLAttribute
{
};
struct alignas( 8 ) _xml_error
{
    unsigned int _nLine;
    BSTR _pchBuf;
    unsigned int _cchBuf;
    unsigned int _ich;
    BSTR _pszFound;
    BSTR _pszExpected;
    DWORD _reserved1;
    DWORD _reserved2;
};
struct alignas( 8 ) _SYSTEM_BASIC_WORKING_SET_INFORMATION
{
    SIZE_T CurrentSize;
    SIZE_T PeakSize;
    ULONG PageFaultCount;
};
struct alignas( 8 ) _LDR_DDAG_NODE
{
    LIST_ENTRY Modules;
    PLDR_SERVICE_TAG_RECORD ServiceTagList;
    ULONG LoadCount;
    ULONG LoadWhileUnloadingCount;
    ULONG LowestLink;
    union alignas( 8 )
    {
        LDRP_CSLIST Dependencies;
        SINGLE_LIST_ENTRY RemovalLink;
    };
    LDRP_CSLIST IncomingDependencies;
    LDR_DDAG_STATE State;
    SINGLE_LIST_ENTRY CondenseLink;
    ULONG PreorderNumber;
};
struct alignas( 4 ) _SINGLE_LIST_ENTRY32
{
    ULONG Next;
};
struct alignas( 8 ) _SYSTEM_POOL_INFORMATION
{
    SIZE_T TotalSize;
    PVOID FirstEntry;
    USHORT EntryOverhead;
    BOOLEAN PoolTagPresent;
    BOOLEAN Spare0;
    ULONG NumberOfEntries;
    SYSTEM_POOL_ENTRY Entries[1];
};
struct alignas( 8 ) _TIMER_SET_COALESCABLE_TIMER_INFO
{
    LARGE_INTEGER DueTime;
    PTIMER_APC_ROUTINE TimerApcRoutine;
    PVOID TimerContext;
    PCOUNTED_REASON_CONTEXT WakeContext;
    ULONG Period;
    ULONG TolerableDelay;
    PBOOLEAN PreviousState;
};
struct alignas( 4 ) _SYSTEM_DEVICE_INFORMATION
{
    ULONG NumberOfDisks;
    ULONG NumberOfFloppies;
    ULONG NumberOfCdRoms;
    ULONG NumberOfTapes;
    ULONG NumberOfSerialPorts;
    ULONG NumberOfParallelPorts;
};
struct alignas( 4 ) _VARIABLE_NAME_AND_VALUE
{
    ULONG NextEntryOffset;
    ULONG ValueOffset;
    ULONG ValueLength;
    ULONG Attributes;
    GUID VendorGuid;
    WCHAR Name[1];
};
struct alignas( 8 ) _SYSTEM_WATCHDOG_HANDLER_INFORMATION
{
    PSYSTEM_WATCHDOG_HANDLER WdHandler;
    PVOID Context;
};
struct alignas( 8 ) _SYSTEM_HYPERVISOR_QUERY_INFORMATION
{
    BOOLEAN HypervisorConnected;
    BOOLEAN HypervisorDebuggingEnabled;
    BOOLEAN HypervisorPresent;
    BOOLEAN Spare0[5];
    ULONGLONG EnabledEnlightenments;
};
struct alignas( 8 ) _SYSTEM_EXTENDED_THREAD_INFORMATION
{
    union alignas( 8 )
    {
        SYSTEM_THREAD_INFORMATION ThreadInfo;
        struct alignas( 8 )
        {
            ULONGLONG KernelTime;
            ULONGLONG UserTime;
            ULONGLONG CreateTime;
            ULONG WaitTime;
            PVOID StartAddress;
            CLIENT_ID ClientId;
            KPRIORITY Priority;
            KPRIORITY BasePriority;
            ULONG ContextSwitches;
            KTHREAD_STATE ThreadState;
            KWAIT_REASON WaitReason;
        };
    };
    ULONG_PTR StackBase;
    ULONG_PTR StackLimit;
    PVOID Win32StartAddress;
    PVOID TebBase;
    ULONG_PTR Reserved2;
    ULONG_PTR Reserved3;
    ULONG_PTR Reserved4;
};
;
struct alignas( 4 ) NUMPARSE
{
    INT cDig;
    ULONG dwInFlags;
    ULONG dwOutFlags;
    INT cchUsed;
    INT nBaseShift;
    INT nPwr10;
};
;
struct alignas( 8 ) _tagPROTOCOLDATA
{
    DWORD grfFlags;
    DWORD dwState;
    LPVOID pData;
    ULONG cbData;
};
struct alignas( 8 ) _OLESTREAMVTBL
{
    DWORD ( *Get )( LPOLESTREAM, void*, DWORD );
    DWORD ( *Put )( LPOLESTREAM, void*, DWORD );
};
struct alignas( 8 ) _EVENT_TRACE_COVERAGE_SAMPLER_INFORMATION
{
    EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
    UCHAR CoverageSamplerInformationClass;
    UCHAR MajorVersion;
    UCHAR MinorVersion;
    UCHAR Reserved;
    HANDLE SamplerHandle;
};
struct alignas( 8 ) _ULARGE_INTEGER_128
{
    ULONGLONG QuadPart[2];
};
struct alignas( 4 ) _FILE_PATH
{
    ULONG Version;
    ULONG Length;
    ULONG Type;
    UCHAR FilePath[1];
};
struct alignas( 8 ) CONFIRMSAFETY
{
    CLSID clsid;
    IUnknown* pUnk;
    DWORD dwFlags;
};
;
struct alignas( 8 ) _LDR_DATA_TABLE_ENTRY
{
    LIST_ENTRY InLoadOrderLinks;
    LIST_ENTRY InMemoryOrderLinks;
    LIST_ENTRY InInitializationOrderLinks;
    PVOID DllBase;
    PLDR_INIT_ROUTINE EntryPoint;
    ULONG SizeOfImage;
    UNICODE_STRING FullDllName;
    UNICODE_STRING BaseDllName;
    union alignas( 4 )
    {
        UCHAR FlagGroup[4];
        ULONG Flags;
        struct alignas( 4 )
        {
            ULONG PackagedBinary : 1;
            ULONG MarkedForRemoval : 1;
            ULONG ImageDll : 1;
            ULONG LoadNotificationsSent : 1;
            ULONG TelemetryEntryProcessed : 1;
            ULONG ProcessStaticImport : 1;
            ULONG InLegacyLists : 1;
            ULONG InIndexes : 1;
            ULONG ShimDll : 1;
            ULONG InExceptionTable : 1;
            ULONG ReservedFlags1 : 2;
            ULONG LoadInProgress : 1;
            ULONG LoadConfigProcessed : 1;
            ULONG EntryProcessed : 1;
            ULONG ProtectDelayLoad : 1;
            ULONG ReservedFlags3 : 2;
            ULONG DontCallForThreads : 1;
            ULONG ProcessAttachCalled : 1;
            ULONG ProcessAttachFailed : 1;
            ULONG CorDeferredValidate : 1;
            ULONG CorImage : 1;
            ULONG DontRelocate : 1;
            ULONG CorILOnly : 1;
            ULONG ChpeImage : 1;
            ULONG ChpeEmulatorImage : 1;
            ULONG ReservedFlags5 : 1;
            ULONG Redirected : 1;
            ULONG ReservedFlags6 : 2;
            ULONG CompatDatabaseProcessed : 1;
        };
    };
    USHORT ObsoleteLoadCount;
    USHORT TlsIndex;
    LIST_ENTRY HashLinks;
    ULONG TimeDateStamp;
    PACTIVATION_CONTEXT EntryPointActivationContext;
    PVOID Lock;
    PLDR_DDAG_NODE DdagNode;
    LIST_ENTRY NodeModuleLink;
    PLDRP_LOAD_CONTEXT LoadContext;
    PVOID ParentDllBase;
    PVOID SwitchBackContext;
    RTL_BALANCED_NODE BaseAddressIndexNode;
    RTL_BALANCED_NODE MappingInfoIndexNode;
    ULONG_PTR OriginalBase;
    LARGE_INTEGER LoadTime;
    ULONG BaseNameHashValue;
    LDR_DLL_LOAD_REASON LoadReason;
    ULONG ImplicitPathOptions;
    ULONG ReferenceCount;
    ULONG DependentLoadFlags;
    UCHAR SigningLevel;
    ULONG CheckSum;
    PVOID ActivePatchImageBase;
    LDR_HOT_PATCH_STATE HotPatchState;
};
struct alignas( 8 ) _LDR_VERIFY_IMAGE_INFO
{
    ULONG Size;
    ULONG Flags;
    LDR_IMPORT_CALLBACK_INFO CallbackInfo;
    LDR_SECTION_INFO SectionInfo;
    USHORT ImageCharacteristics;
};
struct alignas( 8 ) _SYSTEM_BIGPOOL_INFORMATION
{
    ULONG Count;
    SYSTEM_BIGPOOL_ENTRY AllocatedInfo[1];
};
struct alignas( 4 ) _SMC_CACHE_DELETE_REQUEST
{
    ULONG Version : 8;
    ULONG Spare : 24;
    ULONG CacheId;
};
struct alignas( 4 ) _SMC_STORE_CREATE_REQUEST
{
    ULONG Version : 8;
    ULONG Spare : 24;
    SM_STORE_BASIC_PARAMS StoreParams;
    ULONG CacheId;
    SM_STORE_MANAGER_TYPE StoreManagerType;
    ULONG StoreId;
};
struct alignas( 4 ) _SMC_STORE_DELETE_REQUEST
{
    ULONG Version : 8;
    ULONG Spare : 24;
    ULONG CacheId;
    SM_STORE_MANAGER_TYPE StoreManagerType;
    ULONG StoreId;
};
struct alignas( 8 ) _SMC_CACHE_STATS
{
    SIZE_T TotalFileSize;
    ULONG StoreCount;
    ULONG RegionCount;
    ULONG RegionSizeBytes;
    ULONG FileCount : 6;
    ULONG PerformsFileIo : 1;
    ULONG Spare : 25;
    ULONG StoreIds[16];
    ULONG PhysicalStoreBitmap;
    ULONG Priority;
    WCHAR TemplateFilePath[512];
};
struct alignas( 8 ) _SMC_CACHE_STATS_REQUEST
{
    ULONG Version : 8;
    ULONG NoFilePath : 1;
    ULONG Spare : 23;
    ULONG CacheId;
    SMC_CACHE_STATS CacheStats;
};
struct alignas( 8 ) _SM_REGISTRATION_INFO
{
    HANDLE CachesUpdatedEvent;
};
struct alignas( 4 ) _ALPC_MESSAGE_ATTRIBUTES
{
    ULONG AllocatedAttributes;
    ULONG ValidAttributes;
};
struct alignas( 8 ) _DBGKM_UNLOAD_DLL
{
    PVOID BaseAddress;
};
struct alignas( 4 ) _API_SET_NAMESPACE
{
    ULONG Version;
    ULONG Size;
    ULONG Flags;
    ULONG Count;
    ULONG EntryOffset;
    ULONG HashOffset;
    ULONG HashFactor;
};
struct alignas( 8 ) _SM_REGISTRATION_REQUEST
{
    ULONG Version : 8;
    ULONG Spare : 24;
    SM_REGISTRATION_INFO RegInfo;
};
struct alignas( 8 ) _DBGKM_LOAD_DLL
{
    HANDLE FileHandle;
    PVOID BaseOfDll;
    ULONG DebugInfoFileOffset;
    ULONG DebugInfoSize;
    PVOID NamePointer;
};
struct alignas( 4 ) _USER_CONTROL_INFORMATION
{
    ULONG UserAccountControl;
};
struct alignas( 8 ) _SM_STORE_RESIZE_REQUEST
{
    ULONG Version : 8;
    ULONG AddRegions : 1;
    ULONG Spare : 23;
    ULONG StoreId;
    ULONG NumberOfRegions;
    PRTL_BITMAP RegionBitmap;
};
struct alignas( 4 ) _SMC_STORE_RESIZE_REQUEST
{
    ULONG Version : 8;
    ULONG AddRegions : 1;
    ULONG Spare : 23;
    ULONG CacheId;
    ULONG StoreId;
    SM_STORE_MANAGER_TYPE StoreManagerType;
    ULONG RegionCount;
};
struct alignas( 8 ) _ALPC_COMPLETION_LIST_STATE
{
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            ULONG64 Head : 24;
            ULONG64 Tail : 24;
            ULONG64 ActiveThreadCount : 16;
        } s1;
        ULONG64 Value;
    } u1;
};
struct alignas( 128 ) _ALPC_COMPLETION_LIST_HEADER
{
    ULONG64 StartMagic;
    ULONG TotalSize;
    ULONG ListOffset;
    ULONG ListSize;
    ULONG BitmapOffset;
    ULONG BitmapSize;
    ULONG DataOffset;
    ULONG DataSize;
    ULONG AttributeFlags;
    ULONG AttributeSize;
    ALPC_COMPLETION_LIST_STATE State;
    ULONG LastMessageId;
    ULONG LastCallbackId;
    ULONG PostCount;
    ULONG ReturnCount;
    ULONG LogSequenceNumber;
    RTL_SRWLOCK UserLock;
    ULONG64 EndMagic;
};
struct alignas( 8 ) _DBGKM_CREATE_THREAD
{
    ULONG SubSystemKey;
    PVOID StartAddress;
};
struct alignas( 8 ) _DBGKM_CREATE_PROCESS
{
    ULONG SubSystemKey;
    HANDLE FileHandle;
    PVOID BaseOfImage;
    ULONG DebugInfoFileOffset;
    ULONG DebugInfoSize;
    DBGKM_CREATE_THREAD InitialThread;
};
struct alignas( 4 ) _API_SET_VALUE_ENTRY
{
    ULONG Flags;
    ULONG NameOffset;
    ULONG NameLength;
    ULONG ValueOffset;
    ULONG ValueLength;
};
struct alignas( 4 ) _SM_CONFIG_REQUEST
{
    ULONG Version : 8;
    ULONG Spare : 16;
    ULONG ConfigType : 8;
    ULONG ConfigValue;
};
struct alignas( 8 ) _SM_STORE_HIGH_MEM_PRIORITY_REQUEST
{
    ULONG Version : 8;
    ULONG SetHighMemoryPriority : 1;
    ULONG Spare : 23;
    HANDLE ProcessHandle;
};
struct alignas( 8 ) _USER_EXPIRES_INFORMATION
{
    LARGE_INTEGER AccountExpires;
};
struct alignas( 8 ) _SM_SYSTEM_STORE_TRIM_REQUEST
{
    ULONG Version : 8;
    ULONG Spare : 24;
    SIZE_T PagesToTrim;
};
struct alignas( 8 ) _SM_MEM_COMPRESSION_INFO_REQUEST
{
    ULONG Version : 8;
    ULONG Spare : 24;
    ULONG CompressionPid;
    ULONG WorkingSetSize;
    SIZE_T TotalDataCompressed;
    SIZE_T TotalCompressedSize;
    SIZE_T TotalUniqueDataCompressed;
};
struct alignas( 8 ) _SYSTEM_REGISTRY_APPEND_STRING_PARAMETERS
{
    HANDLE KeyHandle;
    PUNICODE_STRING ValueNamePointer;
    PULONG RequiredLengthPointer;
    PUCHAR Buffer;
    ULONG BufferLength;
    ULONG Type;
    PUCHAR AppendBuffer;
    ULONG AppendBufferLength;
    BOOLEAN CreateIfDoesntExist;
    BOOLEAN TruncateExistingValue;
};
struct alignas( 4 ) _SYSTEM_VHD_BOOT_INFORMATION
{
    BOOLEAN OsDiskIsVhd;
    ULONG OsVhdFilePathOffset;
    WCHAR OsVhdParentVolume[1];
};
struct alignas( 4 ) _PS_CPU_QUOTA_QUERY_ENTRY
{
    ULONG SessionId;
    ULONG Weight;
};
struct alignas( 4 ) _PS_CPU_QUOTA_QUERY_INFORMATION
{
    ULONG SessionCount;
    PS_CPU_QUOTA_QUERY_ENTRY SessionInformation[1];
};
struct alignas( 4 ) _SYSTEM_ERROR_PORT_TIMEOUTS
{
    ULONG StartTimeout;
    ULONG CommTimeout;
};
struct alignas( 4 ) _SYSTEM_LOW_PRIORITY_IO_INFORMATION
{
    ULONG LowPriReadOperations;
    ULONG LowPriWriteOperations;
    ULONG KernelBumpedToNormalOperations;
    ULONG LowPriPagingReadOperations;
    ULONG KernelPagingReadsBumpedToNormal;
    ULONG LowPriPagingWriteOperations;
    ULONG KernelPagingWritesBumpedToNormal;
    ULONG BoostedIrpCount;
    ULONG BoostedPagingIrpCount;
    ULONG BlanketBoostCount;
};
struct alignas( 8 ) _TPM_BOOT_ENTROPY_NT_RESULT
{
    ULONGLONG Policy;
    BOOT_ENTROPY_SOURCE_RESULT_CODE ResultCode;
    NTSTATUS ResultStatus;
    ULONGLONG Time;
    ULONG EntropyLength;
    UCHAR EntropyData[40];
};
struct alignas( 8 ) _BOOT_ENTROPY_SOURCE_NT_RESULT
{
    BOOT_ENTROPY_SOURCE_ID SourceId;
    ULONG64 Policy;
    BOOT_ENTROPY_SOURCE_RESULT_CODE ResultCode;
    NTSTATUS ResultStatus;
    ULONGLONG Time;
    ULONG EntropyLength;
    UCHAR EntropyData[64];
};
struct alignas( 8 ) _BOOT_ENTROPY_NT_RESULT
{
    ULONG maxEntropySources;
    BOOT_ENTROPY_SOURCE_NT_RESULT EntropySourceResult[10];
    UCHAR SeedBytesForCng[48];
};
struct alignas( 8 ) _SYSTEM_VERIFIER_COUNTERS_INFORMATION
{
    SYSTEM_VERIFIER_INFORMATION Legacy;
    ULONG RaiseIrqls;
    ULONG AcquireSpinLocks;
    ULONG SynchronizeExecutions;
    ULONG AllocationsWithNoTag;
    ULONG AllocationsFailed;
    ULONG AllocationsFailedDeliberately;
    SIZE_T LockedBytes;
    SIZE_T PeakLockedBytes;
    SIZE_T MappedLockedBytes;
    SIZE_T PeakMappedLockedBytes;
    SIZE_T MappedIoSpaceBytes;
    SIZE_T PeakMappedIoSpaceBytes;
    SIZE_T PagesForMdlBytes;
    SIZE_T PeakPagesForMdlBytes;
    SIZE_T ContiguousMemoryBytes;
    SIZE_T PeakContiguousMemoryBytes;
    ULONG ExecutePoolTypes;
    ULONG ExecutePageProtections;
    ULONG ExecutePageMappings;
    ULONG ExecuteWriteSections;
    ULONG SectionAlignmentFailures;
    ULONG UnsupportedRelocs;
    ULONG IATInExecutableSection;
};
struct alignas( 4 ) _SYSTEM_ACPI_AUDIT_INFORMATION
{
    ULONG RsdpCount;
    ULONG SameRsdt : 1;
    ULONG SlicPresent : 1;
    ULONG SlicDifferent : 1;
};
struct alignas( 8 ) _SYSTEM_BASIC_PERFORMANCE_INFORMATION
{
    SIZE_T AvailablePages;
    SIZE_T CommittedPages;
    SIZE_T CommitLimit;
    SIZE_T PeakCommitment;
};
struct alignas( 4 ) _QUERY_PERFORMANCE_COUNTER_FLAGS
{
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            ULONG KernelTransition : 1;
            ULONG Reserved : 31;
        };
        ULONG ul;
    };
};
struct alignas( 4 ) _SYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION
{
    ULONG Version;
    QUERY_PERFORMANCE_COUNTER_FLAGS Flags;
    QUERY_PERFORMANCE_COUNTER_FLAGS ValidFlags;
};
struct alignas( 8 ) _SYSTEM_BOOT_GRAPHICS_INFORMATION
{
    LARGE_INTEGER FrameBuffer;
    ULONG Width;
    ULONG Height;
    ULONG PixelStride;
    ULONG Flags;
    SYSTEM_PIXEL_FORMAT Format;
    ULONG DisplayRotation;
};
struct alignas( 8 ) _MEMORY_SCRUB_INFORMATION
{
    HANDLE Handle;
    SIZE_T PagesScrubbed;
};
union alignas( 1 ) _SYSTEM_BAD_PAGE_INFORMATION
{
    ULONG_PTR PhysicalPageNumber : 52;
    ULONG_PTR Reserved : 10;
    ULONG_PTR Pending : 1;
    ULONG_PTR Poisoned : 1;
};
struct alignas( 4 ) _PEBS_DS_SAVE_AREA32
{
    ULONG BtsBufferBase;
    ULONG BtsIndex;
    ULONG BtsAbsoluteMaximum;
    ULONG BtsInterruptThreshold;
    ULONG PebsBufferBase;
    ULONG PebsIndex;
    ULONG PebsAbsoluteMaximum;
    ULONG PebsInterruptThreshold;
    ULONG PebsGpCounterReset[8];
    ULONG PebsFixedCounterReset[4];
};
struct alignas( 8 ) _PEBS_DS_SAVE_AREA64
{
    ULONGLONG BtsBufferBase;
    ULONGLONG BtsIndex;
    ULONGLONG BtsAbsoluteMaximum;
    ULONGLONG BtsInterruptThreshold;
    ULONGLONG PebsBufferBase;
    ULONGLONG PebsIndex;
    ULONGLONG PebsAbsoluteMaximum;
    ULONGLONG PebsInterruptThreshold;
    ULONGLONG PebsGpCounterReset[8];
    ULONGLONG PebsFixedCounterReset[4];
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_STRING_SECTION_HASH_BUCKET
{
    ULONG ChainCount;
    ULONG ChainOffset;
};
struct alignas( 2 ) _WMI_TRACE_PACKET
{
    USHORT Size;
    union alignas( 2 )
    {
        USHORT HookId;
        struct alignas( 1 )
        {
            UCHAR Type;
            UCHAR Group;
        };
    };
};
struct alignas( 8 ) _SYSTEM_TRACE_HEADER
{
    union alignas( 4 )
    {
        ULONG Marker;
        struct alignas( 2 )
        {
            USHORT Version;
            UCHAR HeaderType;
            UCHAR Flags;
        };
    };
    union alignas( 4 )
    {
        ULONG Header;
        WMI_TRACE_PACKET Packet;
    };
    ULONG ThreadId;
    ULONG ProcessId;
    LARGE_INTEGER SystemTime;
    ULONG KernelTime;
    ULONG UserTime;
};
struct alignas( 1 ) _ETW_HEAP_EVENT_REALLOC
{
    SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    PVOID NewAddress;
    PVOID OldAddress;
    SIZE_T NewSize;
    SIZE_T OldSize;
    ULONG Source;
};
union alignas( 8 ) _PEBS_DS_SAVE_AREA
{
    PEBS_DS_SAVE_AREA32 As32Bit;
    PEBS_DS_SAVE_AREA64 As64Bit;
};
struct alignas( 4 ) _MUP_FSCTL_UNC_CACHE_ENTRY
{
    ULONG TotalLength;
    ULONG UncNameOffset;
    USHORT UncNameLength;
    ULONG ProviderNameOffset;
    USHORT ProviderNameLength;
    ULONG SurrogateNameOffset;
    USHORT SurrogateNameLength;
    ULONG ProviderPriority;
    ULONG EntryTtl;
    WCHAR Strings[1];
};
struct alignas( 4 ) _MUP_FSCTL_UNC_CACHE_INFORMATION
{
    ULONG MaxCacheSize;
    ULONG CurrentCacheSize;
    ULONG EntryTimeout;
    ULONG TotalEntries;
    MUP_FSCTL_UNC_CACHE_ENTRY CacheEntry[1];
};
struct alignas( 8 ) _PROCESSOR_PROFILE_CONTROL_AREA
{
    PEBS_DS_SAVE_AREA PebsDsSaveArea;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_GUID_SECTION_HASH_TABLE
{
    ULONG BucketTableEntryCount;
    ULONG BucketTableOffset;
};
struct alignas( 8 ) _JOBOBJECT_EXTENDED_LIMIT_INFORMATION_V2
{
    JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
    IO_COUNTERS IoInfo;
    SIZE_T ProcessMemoryLimit;
    SIZE_T JobMemoryLimit;
    SIZE_T PeakProcessMemoryUsed;
    SIZE_T PeakJobMemoryUsed;
    SIZE_T JobTotalMemoryLimit;
};
struct alignas( 8 ) _SYSTEM_PROCESSOR_PROFILE_CONTROL_AREA
{
    PROCESSOR_PROFILE_CONTROL_AREA ProcessorProfileControlArea;
    BOOLEAN Allocate;
};
struct alignas( 8 ) _DOMAIN_DISPLAY_OEM_GROUP
{
    ULONG Index;
    OEM_STRING Group;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_DATA_ASSEMBLY_INFORMATION
{
    ULONG Size;
    ULONG Flags;
    ULONG EncodedAssemblyIdentityLength;
    ULONG EncodedAssemblyIdentityOffset;
    ULONG ManifestPathType;
    ULONG ManifestPathLength;
    ULONG ManifestPathOffset;
    LARGE_INTEGER ManifestLastWriteTime;
    ULONG PolicyPathType;
    ULONG PolicyPathLength;
    ULONG PolicyPathOffset;
    LARGE_INTEGER PolicyLastWriteTime;
    ULONG MetadataSatelliteRosterIndex;
    ULONG Unused2;
    ULONG ManifestVersionMajor;
    ULONG ManifestVersionMinor;
    ULONG PolicyVersionMajor;
    ULONG PolicyVersionMinor;
    ULONG AssemblyDirectoryNameLength;
    ULONG AssemblyDirectoryNameOffset;
    ULONG NumOfFilesInAssembly;
    ULONG LanguageLength;
    ULONG LanguageOffset;
    ACTCTX_REQUESTED_RUN_LEVEL RunLevel;
    ULONG UiAccess;
};
struct alignas( 8 ) _DOMAIN_LOCALIZABLE_ACCOUNTS
{
    ULONG Count;
    DOMAIN_LOCALIZABLE_ACCOUNT_ENTRY* Entries;
};
union alignas( 8 ) _DOMAIN_LOCALIZABLE_INFO_BUFFER
{
    DOMAIN_LOCALIZABLE_ACCOUNTS_BASIC Basic;
};
struct alignas( 8 ) _MEMORY_COMBINE_INFORMATION
{
    HANDLE Handle;
    SIZE_T PagesCombined;
};
struct alignas( 4 ) _MUP_FSCTL_UNC_PROVIDER_ENTRY
{
    ULONG TotalLength;
    LONG ReferenceCount;
    ULONG ProviderPriority;
    ULONG ProviderState;
    ULONG ProviderId;
    USHORT ProviderNameLength;
    WCHAR ProviderName[1];
};
struct alignas( 4 ) _MUP_FSCTL_UNC_PROVIDER_INFORMATION
{
    ULONG TotalEntries;
    MUP_FSCTL_UNC_PROVIDER_ENTRY ProviderEntry[1];
};
struct alignas( 8 ) _MEMORY_COMBINE_INFORMATION_EX
{
    HANDLE Handle;
    SIZE_T PagesCombined;
    ULONG Flags;
};
struct alignas( 8 ) _MEMORY_COMBINE_INFORMATION_EX2
{
    HANDLE Handle;
    SIZE_T PagesCombined;
    ULONG Flags;
    HANDLE ProcessHandle;
};
struct alignas( 8 ) _SYSTEM_ENTROPY_TIMING_INFORMATION
{
    void ( *EntropyRoutine )( PVOID, ULONG );
    void ( *InitializationRoutine )( PVOID, ULONG, PVOID );
    PVOID InitializationContext;
};
struct alignas( 4 ) _SYSTEM_CONSOLE_INFORMATION
{
    ULONG DriverLoaded : 1;
    ULONG Spare : 31;
};
struct alignas( 8 ) _SYSTEM_PLATFORM_BINARY_INFORMATION
{
    ULONG64 PhysicalAddress;
    PVOID HandoffBuffer;
    PVOID CommandLineBuffer;
    ULONG HandoffBufferSize;
    ULONG CommandLineBufferSize;
};
struct alignas( 8 ) _SYSTEM_POLICY_INFORMATION
{
    PVOID InputData;
    PVOID OutputData;
    ULONG InputDataSize;
    ULONG OutputDataSize;
    ULONG Version;
};
struct alignas( 4 ) _SYSTEM_HYPERVISOR_PROCESSOR_COUNT_INFORMATION
{
    ULONG NumberOfLogicalProcessors;
    ULONG NumberOfCores;
};
struct alignas( 8 ) _SYSTEM_DEVICE_DATA_INFORMATION
{
    UNICODE_STRING DeviceId;
    UNICODE_STRING DataName;
    ULONG DataType;
    ULONG DataBufferLength;
    PVOID DataBuffer;
};
struct alignas( 8 ) _PHYSICAL_CHANNEL_RUN
{
    ULONG NodeNumber;
    ULONG ChannelNumber;
    ULONGLONG BasePage;
    ULONGLONG PageCount;
    ULONG Flags;
};
struct alignas( 8 ) _SYSTEM_MEMORY_TOPOLOGY_INFORMATION
{
    ULONGLONG NumberOfRuns;
    ULONG NumberOfNodes;
    ULONG NumberOfChannels;
    PHYSICAL_CHANNEL_RUN Run[1];
};
struct alignas( 8 ) _SYSTEM_MEMORY_CHANNEL_INFORMATION
{
    ULONG ChannelNumber;
    ULONG ChannelHeatIndex;
    ULONGLONG TotalPageCount;
    ULONGLONG ZeroPageCount;
    ULONGLONG FreePageCount;
    ULONGLONG StandbyPageCount;
};
struct alignas( 4 ) _SYSTEM_BOOT_LOGO_INFORMATION
{
    ULONG Flags;
    ULONG BitmapOffset;
};
struct alignas( 8 ) _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION_EX
{
    LARGE_INTEGER IdleTime;
    LARGE_INTEGER KernelTime;
    LARGE_INTEGER UserTime;
    LARGE_INTEGER DpcTime;
    LARGE_INTEGER InterruptTime;
    ULONG InterruptCount;
    ULONG Spare0;
    LARGE_INTEGER AvailableTime;
    LARGE_INTEGER Spare1;
    LARGE_INTEGER Spare2;
};
struct alignas( 8 ) _FILE_MAILSLOT_SET_INFORMATION
{
    PLARGE_INTEGER ReadTimeout;
};
struct alignas( 4 ) _PROCESS_LDT_INFORMATION
{
    ULONG Start;
    ULONG Length;
    LDT_ENTRY LdtEntries[1];
};
struct alignas( 8 ) _CRITICAL_PROCESS_EXCEPTION_DATA
{
    GUID ReportId;
    UNICODE_STRING ModuleName;
    ULONG ModuleTimestamp;
    ULONG ModuleSize;
    ULONG_PTR Offset;
};
struct alignas( 8 ) _PROCESS_ACCESS_TOKEN
{
    HANDLE Token;
    HANDLE Thread;
};
struct alignas( 8 ) _FILE_MAILSLOT_QUERY_INFORMATION
{
    ULONG MaximumMessageSize;
    ULONG MailslotQuota;
    ULONG NextMessageSize;
    ULONG MessagesAvailable;
    LARGE_INTEGER ReadTimeout;
};
struct alignas( 8 ) _FILE_REPARSE_POINT_INFORMATION
{
    LONGLONG FileReference;
    ULONG Tag;
};
struct alignas( 8 ) _PF_VIRTUAL_QUERY
{
    ULONG Version;
    union alignas( 4 )
    {
        ULONG Flags;
        struct alignas( 4 )
        {
            ULONG FaultInPageTables : 1;
            ULONG ReportPageTables : 1;
            ULONG Spare : 30;
        };
    };
    PVOID QueryBuffer;
    SIZE_T QueryBufferSize;
    HANDLE ProcessHandle;
};
struct alignas( 4 ) _SYSTEM_SECUREBOOT_POLICY_INFORMATION
{
    GUID PolicyPublisher;
    ULONG PolicyVersion;
    ULONG PolicyOptions;
};
struct alignas( 4 ) _SAM_OPERATION_OBJCHG_OUTPUT
{
    ULONG Reserved;
};
union alignas( 4 ) _SAM_GENERIC_OPERATION_OUTPUT
{
    SAM_OPERATION_OBJCHG_OUTPUT ObjChangeOut;
};
struct alignas( 8 ) _SYSTEM_PAGEFILE_INFORMATION_EX
{
    union alignas( 8 )
    {
        SYSTEM_PAGEFILE_INFORMATION Info;
        struct alignas( 8 )
        {
            ULONG NextEntryOffset;
            ULONG TotalSize;
            ULONG TotalInUse;
            ULONG PeakUsage;
            UNICODE_STRING PageFileName;
        };
    };
    ULONG MinimumSize;
    ULONG MaximumSize;
};
struct alignas( 8 ) _PF_GPU_UTILIZATION_INFO
{
    ULONG Version;
    ULONG SessionId;
    ULONGLONG GpuTime;
};
struct alignas( 8 ) _FILE_LINK_ENTRY_INFORMATION
{
    ULONG NextEntryOffset;
    LONGLONG ParentFileId;
    ULONG FileNameLength;
    WCHAR FileName[1];
};
struct alignas( 8 ) _FILE_LINKS_INFORMATION
{
    ULONG BytesNeeded;
    ULONG EntriesReturned;
    FILE_LINK_ENTRY_INFORMATION Entry;
};
struct alignas( 8 ) _PROCESS_WS_WATCH_INFORMATION
{
    PVOID FaultingPc;
    PVOID FaultingVa;
};
struct alignas( 1 ) _SYSTEM_SECUREBOOT_INFORMATION
{
    BOOLEAN SecureBootEnabled;
    BOOLEAN SecureBootCapable;
};
struct alignas( 4 ) _FILE_NETWORK_PHYSICAL_NAME_INFORMATION
{
    ULONG FileNameLength;
    WCHAR FileName[1];
};
struct alignas( 8 ) _PROCESS_DISK_COUNTERS
{
    ULONGLONG BytesRead;
    ULONGLONG BytesWritten;
    ULONGLONG ReadOperationCount;
    ULONGLONG WriteOperationCount;
    ULONGLONG FlushOperationCount;
};
struct alignas( 1 ) _PROCESS_PRIORITY_CLASS
{
    BOOLEAN Foreground;
    UCHAR PriorityClass;
};
union alignas( 8 ) _ENERGY_STATE_DURATION
{
    ULONGLONG Value;
    struct alignas( 4 )
    {
        ULONG LastChangeTime;
        ULONG Duration : 31;
        ULONG IsInState : 1;
    };
};
struct alignas( 8 ) _PROCESS_ENERGY_VALUES
{
    ULONGLONG Cycles[4][2];
    ULONGLONG DiskEnergy;
    ULONGLONG NetworkTailEnergy;
    ULONGLONG MBBTailEnergy;
    ULONGLONG NetworkTxRxBytes;
    ULONGLONG MBBTxRxBytes;
    union alignas( 8 )
    {
        ENERGY_STATE_DURATION Durations[3];
        struct alignas( 8 )
        {
            ENERGY_STATE_DURATION ForegroundDuration;
            ENERGY_STATE_DURATION DesktopVisibleDuration;
            ENERGY_STATE_DURATION PSMForegroundDuration;
        };
    };
    ULONG CompositionRendered;
    ULONG CompositionDirtyGenerated;
    ULONG CompositionDirtyPropagated;
    ULONG Reserved1;
    ULONGLONG AttributedCycles[4][2];
    ULONGLONG WorkOnBehalfCycles[4][2];
};
union alignas( 8 ) _TIMELINE_BITMAP
{
    ULONGLONG Value;
    struct alignas( 4 )
    {
        ULONG EndTime;
        ULONG Bitmap;
    };
};
struct alignas( 8 ) _PROCESS_ENERGY_VALUES_EXTENSION
{
    union alignas( 8 )
    {
        TIMELINE_BITMAP Timelines[14];
        struct alignas( 8 )
        {
            TIMELINE_BITMAP CpuTimeline;
            TIMELINE_BITMAP DiskTimeline;
            TIMELINE_BITMAP NetworkTimeline;
            TIMELINE_BITMAP MBBTimeline;
            TIMELINE_BITMAP ForegroundTimeline;
            TIMELINE_BITMAP DesktopVisibleTimeline;
            TIMELINE_BITMAP CompositionRenderedTimeline;
            TIMELINE_BITMAP CompositionDirtyGeneratedTimeline;
            TIMELINE_BITMAP CompositionDirtyPropagatedTimeline;
            TIMELINE_BITMAP InputTimeline;
            TIMELINE_BITMAP AudioInTimeline;
            TIMELINE_BITMAP AudioOutTimeline;
            TIMELINE_BITMAP DisplayRequiredTimeline;
            TIMELINE_BITMAP KeyboardInputTimeline;
        };
    };
    union alignas( 8 )
    {
        ENERGY_STATE_DURATION Durations[5];
        struct alignas( 8 )
        {
            ENERGY_STATE_DURATION InputDuration;
            ENERGY_STATE_DURATION AudioInDuration;
            ENERGY_STATE_DURATION AudioOutDuration;
            ENERGY_STATE_DURATION DisplayRequiredDuration;
            ENERGY_STATE_DURATION PSMBackgroundDuration;
        };
    };
    ULONG KeyboardInput;
    ULONG MouseInput;
};
struct alignas( 8 ) _PROCESS_EXTENDED_ENERGY_VALUES
{
    PROCESS_ENERGY_VALUES Base;
    PROCESS_ENERGY_VALUES_EXTENSION Extension;
};
struct alignas( 8 ) _SYSTEM_PROCESS_INFORMATION_EXTENSION
{
    PROCESS_DISK_COUNTERS DiskCounters;
    ULONGLONG ContextSwitches;
    union alignas( 4 )
    {
        ULONG Flags;
        struct alignas( 4 )
        {
            ULONG HasStrongId : 1;
            ULONG Classification : 4;
            ULONG BackgroundActivityModerated : 1;
            ULONG Spare : 26;
        };
    };
    ULONG UserSidOffset;
    ULONG PackageFullNameOffset;
    PROCESS_ENERGY_VALUES EnergyValues;
    ULONG AppIdOffset;
    SIZE_T SharedCommitCharge;
    ULONG JobObjectId;
    ULONG SpareUlong;
    ULONGLONG ProcessSequenceNumber;
};
struct alignas( 1 ) _SYSTEM_PORTABLE_WORKSPACE_EFI_LAUNCHER_INFORMATION
{
    BOOLEAN EfiLauncherEnabled;
};
struct alignas( 1 ) _SYSTEM_KERNEL_DEBUGGER_INFORMATION_EX
{
    BOOLEAN DebuggerAllowed;
    BOOLEAN DebuggerEnabled;
    BOOLEAN DebuggerPresent;
};
struct alignas( 8 ) _SYSTEM_ELAM_CERTIFICATE_INFORMATION
{
    HANDLE ElamDriverFile;
};
struct alignas( 8 ) _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2
{
    ULONG Version;
    ULONG AbnormalResetOccurred;
    ULONG OfflineMemoryDumpCapable;
    LARGE_INTEGER ResetDataAddress;
    ULONG ResetDataSize;
};
struct alignas( 4 ) _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V1
{
    ULONG Version;
    ULONG AbnormalResetOccurred;
    ULONG OfflineMemoryDumpCapable;
};
struct alignas( 8 ) _SYSTEM_PROCESSOR_FEATURES_INFORMATION
{
    ULONGLONG ProcessorFeatureBits;
    ULONGLONG Reserved[3];
};
struct alignas( 1 ) _SYSTEM_EDID_INFORMATION
{
    UCHAR Edid[128];
};
struct alignas( 8 ) _SYSTEM_MANUFACTURING_INFORMATION
{
    ULONG Options;
    UNICODE_STRING ProfileName;
};
struct alignas( 1 ) _SYSTEM_ENERGY_ESTIMATION_CONFIG_INFORMATION
{
    BOOLEAN Enabled;
};
struct alignas( 4 ) _HV_DETAILS
{
    ULONG Data[4];
};
struct alignas( 4 ) _SYSTEM_HYPERVISOR_DETAIL_INFORMATION
{
    HV_DETAILS HvVendorAndMaxFunction;
    HV_DETAILS HypervisorInterface;
    HV_DETAILS HypervisorVersion;
    HV_DETAILS HvFeatures;
    HV_DETAILS HwFeatures;
    HV_DETAILS EnlightenmentInfo;
    HV_DETAILS ImplementationLimits;
};
struct alignas( 8 ) _SYSTEM_PROCESSOR_CYCLE_STATS_INFORMATION
{
    ULONGLONG Cycles[4][2];
};
struct alignas( 4 ) _SYSTEM_TPM_INFORMATION
{
    ULONG Flags;
};
struct alignas( 1 ) _SYSTEM_VSM_PROTECTION_INFORMATION
{
    BOOLEAN DmaProtectionsAvailable;
    BOOLEAN DmaProtectionsInUse;
    BOOLEAN HardwareMbecAvailable;
    BOOLEAN ApicVirtualizationAvailable;
};
struct alignas( 1 ) _SYSTEM_KERNEL_DEBUGGER_FLAGS
{
    BOOLEAN KernelDebuggerIgnoreUmExceptions;
};
struct alignas( 8 ) _ETW_CLOCK_TIME_UPDATE
{
    ULONG64 InterruptTime;
    ULONG ClockOwner;
};
struct alignas( 8 ) _SYSTEM_CODEINTEGRITYPOLICY_INFORMATION
{
    union alignas( 4 )
    {
        ULONG Options;
        struct alignas( 4 )
        {
            ULONG Enabled : 1;
            ULONG Audit : 1;
            ULONG RequireWHQL : 1;
            ULONG DisabledFlightSigning : 1;
            ULONG EnabledUMCI : 1;
            ULONG EnabledUpdatePolicyNoReboot : 1;
            ULONG EnabledSecureSettingPolicy : 1;
            ULONG EnabledUnsignedSystemIntegrityPolicy : 1;
            ULONG DynamicCodePolicyEnabled : 1;
            ULONG Spare : 19;
            ULONG ReloadPolicyNoReboot : 1;
            ULONG ConditionalLockdown : 1;
            ULONG NoLockdown : 1;
            ULONG Lockdown : 1;
        };
    };
    union alignas( 4 )
    {
        ULONG HVCIOptions;
        struct alignas( 4 )
        {
            ULONG HVCIEnabled : 1;
            ULONG HVCIStrict : 1;
            ULONG HVCIDebug : 1;
            ULONG HVCISpare : 29;
        };
    };
    ULONGLONG Version;
    GUID PolicyGuid;
};
struct alignas( 8 ) _FILE_STANDARD_INFORMATION
{
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    ULONG NumberOfLinks;
    BOOLEAN DeletePending;
    BOOLEAN Directory;
};
struct alignas( 8 ) _FILE_STANDARD_INFORMATION_EX
{
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    ULONG NumberOfLinks;
    BOOLEAN DeletePending;
    BOOLEAN Directory;
    BOOLEAN AlternateStream;
    BOOLEAN MetadataAttribute;
};
struct alignas( 4 ) _ALPC_SERVER_SESSION_INFORMATION
{
    ULONG SessionId;
    ULONG ProcessId;
};
struct alignas( 8 ) _SYSTEM_ISOLATED_USER_MODE_INFORMATION
{
    BOOLEAN SecureKernelRunning : 1;
    BOOLEAN HvciEnabled : 1;
    BOOLEAN HvciStrictMode : 1;
    BOOLEAN DebugEnabled : 1;
    BOOLEAN FirmwarePageProtection : 1;
    BOOLEAN EncryptionKeyAvailable : 1;
    BOOLEAN SpareFlags : 2;
    BOOLEAN TrustletRunning : 1;
    BOOLEAN HvciDisableAllowed : 1;
    BOOLEAN HardwareEnforcedVbs : 1;
    BOOLEAN NoSecrets : 1;
    BOOLEAN EncryptionKeyPersistent : 1;
    BOOLEAN HardwareEnforcedHvpt : 1;
    BOOLEAN HardwareHvptAvailable : 1;
    BOOLEAN SpareFlags2 : 1;
    BOOLEAN Spare0[6];
    ULONGLONG Spare1;
};
struct alignas( 8 ) _USER_ALLOWED_TO_DELEGATE_TO_LIST
{
    ULONG Size;
    ULONG NumSPNs;
    UNICODE_STRING SPNList[1];
};
struct alignas( 8 ) _SYSTEM_SINGLE_MODULE_INFORMATION
{
    PVOID TargetModuleAddress;
    RTL_PROCESS_MODULE_INFORMATION_EX ExInfo;
};
struct alignas( 1 ) _ENCRYPTED_USER_PASSWORD_NEW
{
    UCHAR Buffer[532];
};
struct alignas( 1 ) _USER_INTERNAL5_INFORMATION_NEW
{
    ENCRYPTED_USER_PASSWORD_NEW UserPassword;
    BOOLEAN PasswordExpired;
};
struct alignas( 4 ) _FILE_EA_INFORMATION
{
    ULONG EaSize;
};
struct alignas( 8 ) _SYSTEM_INTERRUPT_CPU_SET_INFORMATION
{
    ULONG Gsiv;
    USHORT Group;
    ULONGLONG CpuSets;
};
struct alignas( 8 ) _PF_TRACE_LIMITS
{
    ULONG MaxNumPages;
    ULONG MaxNumSections;
    LONGLONG TimerPeriod;
};
struct alignas( 4 ) _SYSTEM_SECUREBOOT_POLICY_FULL_INFORMATION
{
    SYSTEM_SECUREBOOT_POLICY_INFORMATION PolicyInformation;
    ULONG PolicySize;
    UCHAR Policy[1];
};
struct alignas( 8 ) _KAFFINITY_EX
{
    USHORT Count;
    USHORT Size;
    ULONG Reserved;
    union alignas( 8 )
    {
        ULONG_PTR Bitmap[1];
        ULONG_PTR StaticBitmap[32];
    };
};
struct alignas( 4 ) _SYSTEM_ROOT_SILO_INFORMATION
{
    ULONG NumberOfSilos;
    ULONG SiloIdList[1];
};
struct alignas( 8 ) _SYSTEM_CPU_SET_TAG_INFORMATION
{
    ULONGLONG Tag;
    ULONGLONG CpuSets[1];
};
struct alignas( 8 ) _SYSTEM_SECURE_KERNEL_HYPERGUARD_PROFILE_INFORMATION
{
    ULONG ExtentCount;
    ULONG ValidStructureSize;
    ULONG NextExtentIndex;
    ULONG ExtentRestart;
    ULONG CycleCount;
    ULONG TimeoutCount;
    ULONGLONG CycleTime;
    ULONGLONG CycleTimeMax;
    ULONGLONG ExtentTime;
    ULONG ExtentTimeIndex;
    ULONG ExtentTimeMaxIndex;
    ULONGLONG ExtentTimeMax;
    ULONGLONG HyperFlushTimeMax;
    ULONGLONG TranslateVaTimeMax;
    ULONGLONG DebugExemptionCount;
    ULONGLONG TbHitCount;
    ULONGLONG TbMissCount;
    ULONGLONG VinaPendingYield;
    ULONGLONG HashCycles;
    ULONG HistogramOffset;
    ULONG HistogramBuckets;
    ULONG HistogramShift;
    ULONG Reserved1;
    ULONGLONG PageNotPresentCount;
};
struct alignas( 4 ) _SYSTEM_SECUREBOOT_PLATFORM_MANIFEST_INFORMATION
{
    ULONG PlatformManifestSize;
    UCHAR PlatformManifest[1];
};
struct alignas( 8 ) _SYSTEM_INTERRUPT_STEERING_INFORMATION_INPUT
{
    ULONG Gsiv;
    UCHAR ControllerInterrupt;
    UCHAR EdgeInterrupt;
    UCHAR IsPrimaryInterrupt;
    GROUP_AFFINITY TargetAffinity;
};
union alignas( 4 ) _SYSTEM_INTERRUPT_STEERING_INFORMATION_OUTPUT
{
    ULONG AsULONG;
    struct alignas( 4 )
    {
        ULONG Enabled : 1;
        ULONG Reserved : 31;
    };
};
struct alignas( 8 ) _SYSTEM_MEMORY_USAGE_INFORMATION
{
    ULONGLONG TotalPhysicalBytes;
    ULONGLONG AvailableBytes;
    LONGLONG ResidentAvailableBytes;
    ULONGLONG CommittedBytes;
    ULONGLONG SharedCommittedBytes;
    ULONGLONG CommitLimitBytes;
    ULONGLONG PeakCommitmentBytes;
};
struct alignas( 8 ) _SYSTEM_CODEINTEGRITY_CERTIFICATE_INFORMATION
{
    HANDLE ImageFile;
    ULONG Type;
};
struct alignas( 8 ) _SYSTEM_PHYSICAL_MEMORY_INFORMATION
{
    ULONGLONG TotalPhysicalBytes;
    ULONGLONG LowestPhysicalAddress;
    ULONGLONG HighestPhysicalAddress;
};
struct alignas( 8 ) _SYSTEM_ACTIVITY_MODERATION_EXE_STATE
{
    UNICODE_STRING ExePathNt;
    SYSTEM_ACTIVITY_MODERATION_STATE ModerationState;
};
struct alignas( 4 ) _WMI_JOB_SET_QUERY_CPU_RATE
{
    ULONG AllFlags;
    ULONG Value;
};
struct alignas( 4 ) _FILE_GET_EA_INFORMATION
{
    ULONG NextEntryOffset;
    UCHAR EaNameLength;
    CHAR EaName[1];
};
struct alignas( 4 ) _WIN32K_SYSCALL_FILTER
{
    ULONG FilterState;
    ULONG FilterSet;
};
struct alignas( 4 ) _POWER_THROTTLING_PROCESS_STATE
{
    ULONG Version;
    ULONG ControlMask;
    ULONG StateMask;
};
struct alignas( 8 ) _MEMORY_REGION_INFORMATION
{
    PVOID AllocationBase;
    ULONG AllocationProtect;
    union alignas( 4 )
    {
        ULONG RegionType;
        struct alignas( 4 )
        {
            ULONG Private : 1;
            ULONG MappedDataFile : 1;
            ULONG MappedImage : 1;
            ULONG MappedPageFile : 1;
            ULONG MappedPhysical : 1;
            ULONG DirectMapped : 1;
            ULONG SoftwareEnclave : 1;
            ULONG PageSize64K : 1;
            ULONG PlaceholderReservation : 1;
            ULONG MappedAwe : 1;
            ULONG MappedWriteWatch : 1;
            ULONG PageSizeLarge : 1;
            ULONG PageSizeHuge : 1;
            ULONG Reserved : 19;
        };
    };
    SIZE_T RegionSize;
    SIZE_T CommitSize;
    ULONG_PTR PartitionId;
    ULONG_PTR NodePreference;
};
struct alignas( 8 ) _SYSTEM_ACTIVITY_MODERATION_INFO
{
    UNICODE_STRING Identifier;
    SYSTEM_ACTIVITY_MODERATION_STATE ModerationState;
    SYSTEM_ACTIVITY_MODERATION_APP_TYPE AppType;
};
struct alignas( 8 ) _MEMORY_WORKING_SET_BLOCK
{
    ULONG_PTR Protection : 5;
    ULONG_PTR ShareCount : 3;
    ULONG_PTR Shared : 1;
    ULONG_PTR Node : 3;
    ULONG_PTR VirtualPage : 52;
};
struct alignas( 8 ) _MEMORY_WORKING_SET_INFORMATION
{
    ULONG_PTR NumberOfEntries;
    MEMORY_WORKING_SET_BLOCK WorkingSetInfo[1];
};
struct alignas( 1 ) _PROCESS_CHILD_PROCESS_INFORMATION
{
    BOOLEAN ProhibitChildProcesses;
    BOOLEAN AlwaysAllowSecureChildProcess;
    BOOLEAN AuditProhibitChildProcesses;
};
struct alignas( 8 ) _LSA_TRUST_INFORMATION
{
    LSA_UNICODE_STRING Name;
    PSID Sid;
};
struct alignas( 1 ) _SYSTEM_ACTIVITY_MODERATION_APP_SETTINGS
{
    LARGE_INTEGER LastUpdatedTime;
    SYSTEM_ACTIVITY_MODERATION_STATE ModerationState;
    UCHAR Reserved[4];
    SYSTEM_ACTIVITY_MODERATION_APP_TYPE AppType;
    UCHAR Flags[4];
};
struct alignas( 8 ) _TRUSTED_PASSWORD_INFO
{
    LSA_UNICODE_STRING Password;
    LSA_UNICODE_STRING OldPassword;
};
struct alignas( 8 ) _SYSTEM_ACTIVITY_MODERATION_USER_SETTINGS
{
    HANDLE UserKeyHandle;
};
struct alignas( 4 ) _PROCESS_ENERGY_TRACKING_STATE
{
    ULONG StateUpdateMask;
    ULONG StateDesiredValue;
    ULONG StateSequence;
    ULONG UpdateTag : 1;
    WCHAR Tag[64];
};
union alignas( 8 ) _MEMORY_WORKING_SET_EX_BLOCK
{
    ULONG_PTR Flags;
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            ULONG_PTR Valid : 1;
            ULONG_PTR ShareCount : 3;
            ULONG_PTR Win32Protection : 11;
            ULONG_PTR Shared : 1;
            ULONG_PTR Node : 6;
            ULONG_PTR Locked : 1;
            ULONG_PTR LargePage : 1;
            ULONG_PTR Priority : 3;
            ULONG_PTR Reserved : 3;
            ULONG_PTR SharedOriginal : 1;
            ULONG_PTR Bad : 1;
            ULONG_PTR Win32GraphicsProtection : 4;
            ULONG_PTR ReservedUlong : 28;
        };
        struct alignas( 8 )
        {
            ULONG_PTR Valid : 1;
            ULONG_PTR Reserved0 : 14;
            ULONG_PTR Shared : 1;
            ULONG_PTR Reserved1 : 5;
            ULONG_PTR PageTable : 1;
            ULONG_PTR Location : 2;
            ULONG_PTR Priority : 3;
            ULONG_PTR ModifiedList : 1;
            ULONG_PTR Reserved2 : 2;
            ULONG_PTR SharedOriginal : 1;
            ULONG_PTR Bad : 1;
            ULONG_PTR ReservedUlong : 32;
        } Invalid;
    };
};
struct alignas( 8 ) _MEMORY_WORKING_SET_EX_INFORMATION
{
    PVOID VirtualAddress;
    MEMORY_WORKING_SET_EX_BLOCK VirtualAttributes;
};
struct alignas( 4 ) _SYSTEM_CODEINTEGRITY_UNLOCK_INFORMATION
{
    union alignas( 4 )
    {
        ULONG Flags;
        struct alignas( 4 )
        {
            ULONG Locked : 1;
            ULONG UnlockApplied : 1;
            ULONG UnlockIdValid : 1;
            ULONG Reserved : 29;
        };
    };
    UCHAR UnlockId[32];
};
struct alignas( 4 ) _JOBOBJECT_WAKE_FILTER
{
    ULONG HighEdgeFilter;
    ULONG LowEdgeFilter;
};
struct alignas( 8 ) _MEMORY_SHARED_COMMIT_INFORMATION
{
    SIZE_T CommitSize;
};
struct alignas( 8 ) _SYSTEM_FLUSH_INFORMATION
{
    ULONG SupportedFlushMethods;
    ULONG ProcessorCacheFlushSize;
    ULONGLONG SystemFlushCapabilities;
    ULONGLONG Reserved[2];
};
struct alignas( 8 ) _TRUSTED_DOMAIN_INFORMATION_EX
{
    LSA_UNICODE_STRING Name;
    LSA_UNICODE_STRING FlatName;
    PSID Sid;
    ULONG TrustDirection;
    ULONG TrustType;
    ULONG TrustAttributes;
};
struct alignas( 4 ) _SYSTEM_WRITE_CONSTRAINT_INFORMATION
{
    ULONG WriteConstraintPolicy;
    ULONG Reserved;
};
struct alignas( 4 ) _SYSTEM_KERNEL_VA_SHADOW_INFORMATION
{
    union alignas( 4 )
    {
        ULONG KvaShadowFlags;
        struct alignas( 4 )
        {
            ULONG KvaShadowEnabled : 1;
            ULONG KvaShadowUserGlobal : 1;
            ULONG KvaShadowPcid : 1;
            ULONG KvaShadowInvpcid : 1;
            ULONG KvaShadowRequired : 1;
            ULONG KvaShadowRequiredAvailable : 1;
            ULONG InvalidPteBit : 6;
            ULONG L1DataCacheFlushSupported : 1;
            ULONG L1TerminalFaultMitigationPresent : 1;
            ULONG Reserved : 18;
        };
    };
};
struct alignas( 8 ) _SYSTEM_CODEINTEGRITYVERIFICATION_INFORMATION
{
    HANDLE FileHandle;
    ULONG ImageSize;
    PVOID Image;
};
struct alignas( 8 ) _SYSTEM_HYPERVISOR_USER_SHARED_DATA
{
    ULONGLONG TimeUpdateLock;
    volatile ULONGLONG QpcMultiplier;
    volatile ULONGLONG QpcBias;
};
struct alignas( 8 ) _SYSTEM_HYPERVISOR_SHARED_PAGE_INFORMATION
{
    PSYSTEM_HYPERVISOR_USER_SHARED_DATA HypervisorSharedUserVa;
};
struct alignas( 8 ) _SYSTEM_FIRMWARE_PARTITION_INFORMATION
{
    UNICODE_STRING FirmwarePartition;
};
struct alignas( 4 ) _SYSTEM_SPECULATION_CONTROL_INFORMATION
{
    union alignas( 4 )
    {
        ULONG Flags;
        struct alignas( 4 )
        {
            ULONG BpbEnabled : 1;
            ULONG BpbDisabledSystemPolicy : 1;
            ULONG BpbDisabledNoHardwareSupport : 1;
            ULONG SpecCtrlEnumerated : 1;
            ULONG SpecCmdEnumerated : 1;
            ULONG IbrsPresent : 1;
            ULONG StibpPresent : 1;
            ULONG SmepPresent : 1;
            ULONG SpeculativeStoreBypassDisableAvailable : 1;
            ULONG SpeculativeStoreBypassDisableSupported : 1;
            ULONG SpeculativeStoreBypassDisabledSystemWide : 1;
            ULONG SpeculativeStoreBypassDisabledKernel : 1;
            ULONG SpeculativeStoreBypassDisableRequired : 1;
            ULONG BpbDisabledKernelToUser : 1;
            ULONG SpecCtrlRetpolineEnabled : 1;
            ULONG SpecCtrlImportOptimizationEnabled : 1;
            ULONG EnhancedIbrs : 1;
            ULONG HvL1tfStatusAvailable : 1;
            ULONG HvL1tfProcessorNotAffected : 1;
            ULONG HvL1tfMigitationEnabled : 1;
            ULONG HvL1tfMigitationNotEnabled_Hardware : 1;
            ULONG HvL1tfMigitationNotEnabled_LoadOption : 1;
            ULONG HvL1tfMigitationNotEnabled_CoreScheduler : 1;
            ULONG EnhancedIbrsReported : 1;
            ULONG MdsHardwareProtected : 1;
            ULONG MbClearEnabled : 1;
            ULONG MbClearReported : 1;
            ULONG ReservedTaa : 4;
            ULONG Reserved : 1;
        };
    } SpeculationControlFlags;
    union alignas( 4 )
    {
        ULONG Flags;
        struct alignas( 4 )
        {
            ULONG SbdrSsdpHardwareProtected : 1;
            ULONG FbsdpHardwareProtected : 1;
            ULONG PsdpHardwareProtected : 1;
            ULONG FbClearEnabled : 1;
            ULONG FbClearReported : 1;
            ULONG BhbEnabled : 1;
            ULONG BhbDisabledSystemPolicy : 1;
            ULONG BhbDisabledNoHardwareSupport : 1;
            ULONG BranchConfusionStatus : 2;
            ULONG BranchConfusionReported : 1;
            ULONG RdclHardwareProtectedReported : 1;
            ULONG RdclHardwareProtected : 1;
            ULONG Reserved3 : 4;
            ULONG Reserved4 : 3;
            ULONG DivideByZeroReported : 1;
            ULONG DivideByZeroStatus : 1;
            ULONG Reserved5 : 3;
            ULONG Reserved : 7;
        };
    } SpeculationControlFlags2;
};
struct alignas( 1 ) _SYSTEM_DMA_GUARD_POLICY_INFORMATION
{
    BOOLEAN DmaGuardPolicyEnabled;
};
struct alignas( 1 ) _SYSTEM_ENCLAVE_LAUNCH_CONTROL_INFORMATION
{
    UCHAR EnclaveLaunchSigner[32];
};
struct alignas( 8 ) _SYSTEM_WORKLOAD_ALLOWED_CPU_SET_INFORMATION
{
    ULONGLONG WorkloadClass;
    ULONGLONG CpuSets[1];
};
struct alignas( 4 ) _SYSTEM_SECURITY_MODEL_INFORMATION
{
    union alignas( 4 )
    {
        ULONG SecurityModelFlags;
        struct alignas( 4 )
        {
            ULONG ReservedFlag : 1;
            ULONG AllowDeviceOwnerProtectionDowngrade : 1;
            ULONG Reserved : 30;
        };
    };
};
union alignas( 1 ) _SECURE_SPECULATION_CONTROL_INFORMATION
{
    ULONG KvaShadowSupported : 1;
    ULONG KvaShadowEnabled : 1;
    ULONG KvaShadowUserGlobal : 1;
    ULONG KvaShadowPcid : 1;
    ULONG MbClearEnabled : 1;
    ULONG L1TFMitigated : 1;
    ULONG BpbEnabled : 1;
    ULONG IbrsPresent : 1;
    ULONG EnhancedIbrs : 1;
    ULONG StibpPresent : 1;
    ULONG SsbdSupported : 1;
    ULONG SsbdRequired : 1;
    ULONG BpbKernelToUser : 1;
    ULONG BpbUserToKernel : 1;
    ULONG ReturnSpeculate : 1;
    ULONG BranchConfusionSafe : 1;
    ULONG SsbsEnabledAlways : 1;
    ULONG SsbsEnabledKernel : 1;
    ULONG Reserved : 14;
};
struct alignas( 8 ) _SYSTEM_FIRMWARE_RAMDISK_INFORMATION
{
    ULONG Version;
    ULONG BlockSize;
    ULONG_PTR BaseAddress;
    SIZE_T Size;
};
struct alignas( 4 ) _SYSTEM_SHADOW_STACK_INFORMATION
{
    union alignas( 4 )
    {
        ULONG Flags;
        struct alignas( 4 )
        {
            ULONG CetCapable : 1;
            ULONG UserCetAllowed : 1;
            ULONG ReservedForUserCet : 6;
            ULONG KernelCetEnabled : 1;
            ULONG KernelCetAuditModeEnabled : 1;
            ULONG ReservedForKernelCet : 6;
            ULONG Reserved : 16;
        };
    };
};
union alignas( 4 ) _SYSTEM_BUILD_VERSION_INFORMATION_FLAGS
{
    ULONG Value32;
    struct alignas( 4 )
    {
        ULONG IsTopLevel : 1;
        ULONG IsChecked : 1;
    };
};
struct alignas( 4 ) _SYSTEM_BUILD_VERSION_INFORMATION
{
    USHORT LayerNumber;
    USHORT LayerCount;
    ULONG OsMajorVersion;
    ULONG OsMinorVersion;
    ULONG NtBuildNumber;
    ULONG NtBuildQfe;
    UCHAR LayerName[128];
    UCHAR NtBuildBranch[128];
    UCHAR NtBuildLab[128];
    UCHAR NtBuildLabEx[128];
    UCHAR NtBuildStamp[26];
    UCHAR NtBuildArch[16];
    SYSTEM_BUILD_VERSION_INFORMATION_FLAGS Flags;
};
struct alignas( 8 ) _SYSTEM_POOL_LIMIT_MEM_INFO
{
    ULONGLONG MemoryLimit;
    ULONGLONG NotificationLimit;
};
struct alignas( 8 ) _SYSTEM_POOL_LIMIT_INFO
{
    ULONG PoolTag;
    SYSTEM_POOL_LIMIT_MEM_INFO MemLimits[2];
    WNF_STATE_NAME NotificationHandle;
};
struct alignas( 8 ) _SYSTEM_POOL_LIMIT_INFORMATION
{
    ULONG Version;
    ULONG EntryCount;
    SYSTEM_POOL_LIMIT_INFO LimitEntries[1];
};
struct alignas( 8 ) _HV_MINROOT_NUMA_LPS
{
    ULONG NodeIndex;
    ULONG_PTR Mask[16];
};
struct alignas( 8 ) _SYSTEM_XFG_FAILURE_INFORMATION
{
    PVOID ReturnAddress;
    PVOID TargetAddress;
    ULONG DispatchMode;
    ULONGLONG XfgValue;
};
struct alignas( 4 ) _BCD_OBJECT_DESCRIPTION
{
    ULONG Version;
    ULONG Type;
};
struct alignas( 8 ) _THREAD_TLS_INFORMATION
{
    ULONG Flags;
    PVOID NewTlsData;
    PVOID OldTlsData;
    HANDLE ThreadId;
};
struct alignas( 8 ) _PROCESS_TLS_INFORMATION
{
    ULONG Flags;
    ULONG OperationType;
    ULONG ThreadDataCount;
    ULONG TlsIndex;
    ULONG PreviousCount;
    THREAD_TLS_INFORMATION ThreadData[1];
};
struct alignas( 2 ) _WMI_TRACE_MESSAGE_PACKET
{
    USHORT MessageNumber;
    USHORT OptionFlags;
};
struct alignas( 4 ) _MESSAGE_TRACE_HEADER
{
    union alignas( 4 )
    {
        ULONG Marker;
        struct alignas( 2 )
        {
            USHORT Size;
            UCHAR Reserved;
            UCHAR Version;
        };
    };
    union alignas( 4 )
    {
        ULONG Header;
        WMI_TRACE_MESSAGE_PACKET Packet;
    };
};
struct alignas( 4 ) _MESSAGE_TRACE
{
    MESSAGE_TRACE_HEADER MessageHeader;
    UCHAR Data;
};
struct alignas( 8 ) _SYSTEM_IOMMU_STATE_INFORMATION
{
    SYSTEM_IOMMU_STATE State;
    PVOID Pdo;
};
struct alignas( 8 ) _SYSTEM_HYPERVISOR_MINROOT_INFORMATION
{
    ULONG NumProc;
    ULONG RootProc;
    ULONG RootProcNumaNodesSpecified;
    USHORT RootProcNumaNodes[64];
    ULONG RootProcPerCore;
    ULONG RootProcPerNode;
    ULONG RootProcNumaNodesLpsSpecified;
    HV_MINROOT_NUMA_LPS RootProcNumaNodeLps[64];
};
struct alignas( 4 ) _FILE_VOLUME_NAME_INFORMATION
{
    ULONG DeviceNameLength;
    WCHAR DeviceName[1];
};
struct alignas( 8 ) _SYSTEM_HYPERVISOR_BOOT_PAGES_INFORMATION
{
    ULONG RangeCount;
    ULONG_PTR RangeArray[1];
};
struct alignas( 8 ) _PROCESS_STACK_ALLOCATION_INFORMATION
{
    SIZE_T ReserveSize;
    SIZE_T ZeroBits;
    PVOID StackBase;
};
struct alignas( 2 ) _SYSTEM_POINTER_AUTH_INFORMATION
{
    union alignas( 2 )
    {
        USHORT SupportedFlags;
        struct alignas( 2 )
        {
            USHORT AddressAuthSupported : 1;
            USHORT AddressAuthQarma : 1;
            USHORT GenericAuthSupported : 1;
            USHORT GenericAuthQarma : 1;
            USHORT AddressAuthFaulting : 1;
            USHORT SupportedReserved : 11;
        };
    };
    union alignas( 2 )
    {
        USHORT EnabledFlags;
        struct alignas( 2 )
        {
            USHORT UserPerProcessIpAuthEnabled : 1;
            USHORT UserGlobalIpAuthEnabled : 1;
            USHORT UserEnabledReserved : 6;
            USHORT KernelIpAuthEnabled : 1;
            USHORT KernelEnabledReserved : 7;
        };
    };
};
struct alignas( 8 ) _PROCESS_STACK_ALLOCATION_INFORMATION_EX
{
    ULONG PreferredNode;
    ULONG Reserved0;
    ULONG Reserved1;
    ULONG Reserved2;
    PROCESS_STACK_ALLOCATION_INFORMATION AllocInfo;
};
struct alignas( 8 ) _FILE_ID_INFORMATION
{
    ULONGLONG VolumeSerialNumber;
    union alignas( 8 )
    {
        FILE_ID_128 FileId;
        struct alignas( 8 )
        {
            LONGLONG FileIdLowPart : 64;
            LONGLONG FileIdHighPart : 64;
        };
    };
};
struct alignas( 8 ) _SYSTEM_ORIGINAL_IMAGE_FEATURE_INFORMATION_INPUT
{
    ULONG Version;
    PWSTR FeatureName;
    ULONG BornOnVersion;
};
struct alignas( 4 ) _SYSTEM_ORIGINAL_IMAGE_FEATURE_INFORMATION_OUTPUT
{
    ULONG Version;
    BOOLEAN FeatureIsEnabled;
};
struct alignas( 4 ) _SYSTEM_MEMORY_NUMA_INFORMATION_INPUT
{
    ULONG Version;
    ULONG TargetNodeNumber;
    ULONG Flags;
};
struct alignas( 4 ) _SYSTEM_MEMORY_NUMA_INFORMATION_OUTPUT
{
    ULONG Version;
    ULONG Size;
    ULONG InitiatorNode;
    union alignas( 4 )
    {
        ULONG Flags;
        struct alignas( 4 )
        {
            ULONG IsAttached : 1;
            ULONG Reserved : 31;
        };
    };
};
struct alignas( 4 ) _SYSTEM_MEMORY_NUMA_PERFORMANCE_INFORMATION_INPUT
{
    ULONG Version;
    ULONG TargetNodeNumber;
    SYSTEM_MEMORY_NUMA_PERFORMANCE_QUERY_DATA_TYPES QueryDataType;
    ULONG Flags;
};
struct alignas( 8 ) _SYSTEM_MEMORY_NUMA_PERFORMANCE_ENTRY
{
    ULONG InitiatorNodeNumber;
    ULONG TargetNodeNumber;
    SYSTEM_MEMORY_NUMA_PERFORMANCE_QUERY_DATA_TYPES DataType;
    union alignas( 1 )
    {
        BOOLEAN Flags;
        struct alignas( 1 )
        {
            BOOLEAN MinTransferSizeToAchieveValues : 1;
            BOOLEAN NonSequentialTransfers : 1;
            BOOLEAN Reserved : 6;
        };
    };
    SIZE_T MinTransferSizeInBytes;
    ULONG_PTR EntryValue;
};
struct alignas( 8 ) _SYSTEM_MEMORY_NUMA_PERFORMANCE_INFORMATION_OUTPUT
{
    ULONG Version;
    ULONG Size;
    ULONG EntryCount;
    SYSTEM_MEMORY_NUMA_PERFORMANCE_ENTRY PerformanceEntries[1];
};
struct alignas( 8 ) _SYSTEM_OSL_RAMDISK_ENTRY
{
    ULONG BlockSize;
    ULONG_PTR BaseAddress;
    SIZE_T Size;
};
struct alignas( 8 ) _SYSTEM_TRUSTEDAPPS_RUNTIME_INFORMATION
{
    union alignas( 8 )
    {
        ULONGLONG Flags;
        struct alignas( 8 )
        {
            ULONGLONG Supported : 1;
            ULONGLONG Spare : 63;
        };
    };
    PVOID RemoteBreakingRoutine;
};
struct alignas( 8 ) _SYSTEM_OSL_RAMDISK_INFORMATION
{
    ULONG Version;
    ULONG Count;
    SYSTEM_OSL_RAMDISK_ENTRY Entries[1];
};
struct alignas( 2 ) _MOUNTMGR_TARGET_NAME
{
    USHORT DeviceNameLength;
    WCHAR DeviceName[1];
};
struct alignas( 8 ) _SYSDBG_VIRTUAL
{
    PVOID Address;
    PVOID Buffer;
    ULONG Request;
};
struct alignas( 8 ) _OBJECT_NAME_INFORMATION
{
    UNICODE_STRING Name;
};
struct alignas( 8 ) _ISOLATION_MANIFEST_PROPERTIES
{
    UNICODE_STRING InstancePath;
    UNICODE_STRING FriendlyName;
    UNICODE_STRING Description;
    ULONG_PTR Level;
};
struct alignas( 8 ) _SYSDBG_PHYSICAL
{
    PHYSICAL_ADDRESS Address;
    PVOID Buffer;
    ULONG Request;
};
struct alignas( 4 ) _DOMAIN_GENERAL_INFORMATION
{
    LARGE_INTEGER ForceLogoff;
    UNICODE_STRING OemInformation;
    UNICODE_STRING DomainName;
    UNICODE_STRING ReplicaSourceNodeName;
    LARGE_INTEGER DomainModifiedCount;
    DOMAIN_SERVER_ENABLE_STATE DomainServerState;
    DOMAIN_SERVER_ROLE DomainServerRole;
    BOOLEAN UasCompatibilityRequired;
    ULONG UserCount;
    ULONG GroupCount;
    ULONG AliasCount;
};
struct alignas( 4 ) _DOMAIN_GENERAL_INFORMATION2
{
    DOMAIN_GENERAL_INFORMATION I1;
    LARGE_INTEGER LockoutDuration;
    LARGE_INTEGER LockoutObservationWindow;
    USHORT LockoutThreshold;
};
struct alignas( 8 ) _SYSDBG_CONTROL_SPACE
{
    ULONG64 Address;
    PVOID Buffer;
    ULONG Request;
    ULONG Processor;
};
struct alignas( 1 ) _OBJECT_HANDLE_FLAG_INFORMATION
{
    BOOLEAN Inherit;
    BOOLEAN ProtectFromClose;
};
struct alignas( 8 ) _SYSDBG_IO_SPACE
{
    ULONG64 Address;
    PVOID Buffer;
    ULONG Request;
    _INTERFACE_TYPE InterfaceType;
    ULONG BusNumber;
    ULONG AddressSpace;
};
struct alignas( 8 ) _PS_ATTRIBUTE
{
    ULONG_PTR Attribute;
    SIZE_T Size;
    union alignas( 8 )
    {
        ULONG_PTR Value;
        PVOID ValuePtr;
    };
    PSIZE_T ReturnLength;
};
struct alignas( 8 ) _PS_ATTRIBUTE_LIST
{
    SIZE_T TotalLength;
    PS_ATTRIBUTE Attributes[1];
};
struct alignas( 4 ) _MOUNTMGR_SET_AUTO_MOUNT
{
    MOUNTMGR_AUTO_MOUNT_STATE NewState;
};
struct alignas( 8 ) _SYSDBG_MSR
{
    ULONG Msr;
    ULONG64 Data;
};
struct alignas( 1 ) _DOMAIN_UAS_INFORMATION
{
    BOOLEAN UasCompatibilityRequired;
};
struct alignas( 8 ) _SYSDBG_BUS_DATA
{
    ULONG Address;
    PVOID Buffer;
    ULONG Request;
    _BUS_DATA_TYPE BusDataType;
    ULONG BusNumber;
    ULONG SlotNumber;
};
struct alignas( 8 ) _SYSDBG_TRIAGE_DUMP
{
    ULONG Flags;
    ULONG BugCheckCode;
    ULONG_PTR BugCheckParam1;
    ULONG_PTR BugCheckParam2;
    ULONG_PTR BugCheckParam3;
    ULONG_PTR BugCheckParam4;
    ULONG ProcessHandles;
    ULONG ThreadHandles;
    PHANDLE Handles;
};
union alignas( 4 ) _SYSDBG_LIVEDUMP_CONTROL_FLAGS
{
    struct alignas( 4 )
    {
        ULONG UseDumpStorageStack : 1;
        ULONG CompressMemoryPagesData : 1;
        ULONG IncludeUserSpaceMemoryPages : 1;
        ULONG AbortIfMemoryPressure : 1;
        ULONG SelectiveDump : 1;
        ULONG Reserved : 27;
    };
    ULONG AsUlong;
};
union alignas( 4 ) _SYSDBG_LIVEDUMP_CONTROL_ADDPAGES
{
    struct alignas( 4 )
    {
        ULONG HypervisorPages : 1;
        ULONG NonEssentialHypervisorPages : 1;
        ULONG Reserved : 30;
    };
    ULONG AsUlong;
};
struct alignas( 8 ) _SYSDBG_LIVEDUMP_SELECTIVE_CONTROL
{
    ULONG Version;
    ULONG Size;
    union alignas( 8 )
    {
        ULONGLONG Flags;
        struct alignas( 8 )
        {
            ULONGLONG ThreadKernelStacks : 1;
            ULONGLONG ReservedFlags : 63;
        };
    };
    ULONGLONG Reserved[4];
};
struct alignas( 8 ) _SYSDBG_LIVEDUMP_CONTROL_V1
{
    ULONG Version;
    ULONG BugCheckCode;
    ULONG_PTR BugCheckParam1;
    ULONG_PTR BugCheckParam2;
    ULONG_PTR BugCheckParam3;
    ULONG_PTR BugCheckParam4;
    HANDLE DumpFileHandle;
    HANDLE CancelEventHandle;
    SYSDBG_LIVEDUMP_CONTROL_FLAGS Flags;
    SYSDBG_LIVEDUMP_CONTROL_ADDPAGES AddPagesControl;
};
struct alignas( 8 ) _SYSDBG_LIVEDUMP_CONTROL
{
    ULONG Version;
    ULONG BugCheckCode;
    ULONG_PTR BugCheckParam1;
    ULONG_PTR BugCheckParam2;
    ULONG_PTR BugCheckParam3;
    ULONG_PTR BugCheckParam4;
    HANDLE DumpFileHandle;
    HANDLE CancelEventHandle;
    SYSDBG_LIVEDUMP_CONTROL_FLAGS Flags;
    SYSDBG_LIVEDUMP_CONTROL_ADDPAGES AddPagesControl;
    PSYSDBG_LIVEDUMP_SELECTIVE_CONTROL SelectiveControl;
};
struct alignas( 8 ) _SYSDBG_KD_PULL_REMOTE_FILE
{
    UNICODE_STRING ImageFileName;
};
struct alignas( 8 ) _KUSER_SHARED_DATA
{
    ULONG TickCountLowDeprecated;
    ULONG TickCountMultiplier;
    volatile KSYSTEM_TIME InterruptTime;
    volatile KSYSTEM_TIME SystemTime;
    volatile KSYSTEM_TIME TimeZoneBias;
    USHORT ImageNumberLow;
    USHORT ImageNumberHigh;
    WCHAR NtSystemRoot[260];
    ULONG MaxStackTraceDepth;
    ULONG CryptoExponent;
    ULONG TimeZoneId;
    ULONG LargePageMinimum;
    ULONG AitSamplingValue;
    ULONG AppCompatFlag;
    ULONGLONG RNGSeedVersion;
    ULONG GlobalValidationRunlevel;
    volatile LONG TimeZoneBiasStamp;
    ULONG NtBuildNumber;
    NT_PRODUCT_TYPE NtProductType;
    BOOLEAN ProductTypeIsValid;
    BOOLEAN Reserved0[1];
    USHORT NativeProcessorArchitecture;
    ULONG NtMajorVersion;
    ULONG NtMinorVersion;
    BOOLEAN ProcessorFeatures[64];
    ULONG Reserved1;
    ULONG Reserved3;
    volatile ULONG TimeSlip;
    ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
    ULONG BootId;
    LARGE_INTEGER SystemExpirationDate;
    ULONG SuiteMask;
    BOOLEAN KdDebuggerEnabled;
    union alignas( 1 )
    {
        UCHAR MitigationPolicies;
        struct alignas( 1 )
        {
            UCHAR NXSupportPolicy : 2;
            UCHAR SEHValidationPolicy : 2;
            UCHAR CurDirDevicesSkippedForDlls : 2;
            UCHAR Reserved : 2;
        };
    };
    USHORT CyclesPerYield;
    volatile ULONG ActiveConsoleId;
    volatile ULONG DismountCount;
    ULONG ComPlusPackage;
    ULONG LastSystemRITEventTickCount;
    ULONG NumberOfPhysicalPages;
    BOOLEAN SafeBootMode;
    union alignas( 1 )
    {
        UCHAR VirtualizationFlags;
    };
    UCHAR Reserved12[2];
    union alignas( 4 )
    {
        ULONG SharedDataFlags;
        struct alignas( 4 )
        {
            ULONG DbgErrorPortPresent : 1;
            ULONG DbgElevationEnabled : 1;
            ULONG DbgVirtEnabled : 1;
            ULONG DbgInstallerDetectEnabled : 1;
            ULONG DbgLkgEnabled : 1;
            ULONG DbgDynProcessorEnabled : 1;
            ULONG DbgConsoleBrokerEnabled : 1;
            ULONG DbgSecureBootEnabled : 1;
            ULONG DbgMultiSessionSku : 1;
            ULONG DbgMultiUsersInSessionSku : 1;
            ULONG DbgStateSeparationEnabled : 1;
            ULONG DbgSplitTokenEnabled : 1;
            ULONG DbgShadowAdminEnabled : 1;
            ULONG SpareBits : 19;
        };
    };
    ULONG DataFlagsPad[1];
    ULONGLONG TestRetInstruction;
    LONGLONG QpcFrequency;
    ULONG SystemCall;
    ULONG Reserved2;
    ULONGLONG FullNumberOfPhysicalPages;
    ULONGLONG SystemCallPad[1];
    union alignas( 8 )
    {
        volatile KSYSTEM_TIME TickCount;
        volatile ULONG64 TickCountQuad;
        struct alignas( 4 )
        {
            ULONG ReservedTickCountOverlay[3];
            ULONG TickCountPad[1];
        };
    };
    ULONG Cookie;
    ULONG CookiePad[1];
    LONGLONG ConsoleSessionForegroundProcessId;
    ULONGLONG TimeUpdateLock;
    ULONGLONG BaselineSystemTimeQpc;
    ULONGLONG BaselineInterruptTimeQpc;
    ULONGLONG QpcSystemTimeIncrement;
    ULONGLONG QpcInterruptTimeIncrement;
    UCHAR QpcSystemTimeIncrementShift;
    UCHAR QpcInterruptTimeIncrementShift;
    USHORT UnparkedProcessorCount;
    ULONG EnclaveFeatureMask[4];
    ULONG TelemetryCoverageRound;
    USHORT UserModeGlobalLogger[16];
    ULONG ImageFileExecutionOptions;
    ULONG LangGenerationCount;
    ULONGLONG Reserved4;
    volatile ULONGLONG InterruptTimeBias;
    volatile ULONGLONG QpcBias;
    ULONG ActiveProcessorCount;
    volatile UCHAR ActiveGroupCount;
    UCHAR Reserved9;
    union alignas( 2 )
    {
        USHORT QpcData;
        struct alignas( 1 )
        {
            volatile UCHAR QpcBypassEnabled;
            UCHAR QpcReserved;
        };
    };
    LARGE_INTEGER TimeZoneBiasEffectiveStart;
    LARGE_INTEGER TimeZoneBiasEffectiveEnd;
    XSTATE_CONFIGURATION XState;
    KSYSTEM_TIME FeatureConfigurationChangeStamp;
    ULONG Spare;
    ULONG64 UserPointerAuthMask;
    ULONG Reserved10[210];
};
struct alignas( 4 ) _RTL_RETPOLINE_ROUTINES
{
    ULONG SwitchtableJump[16];
    ULONG CfgIndirectRax;
    ULONG NonCfgIndirectRax;
    ULONG ImportR10;
    ULONG JumpHpat;
};
struct alignas( 8 ) _PROCESS_NETWORK_COUNTERS
{
    ULONG64 BytesIn;
    ULONG64 BytesOut;
};
struct alignas( 8 ) _ETW_DISKIO_FLUSH_BUFFERS_V3
{
    ULONG DiskNumber;
    ULONG IrpFlags;
    ULONGLONG HighResResponseTime;
    PVOID IrpAddress;
    ULONG IssuingThreadId;
};
struct alignas( 8 ) _FILE_FS_METADATA_SIZE_INFORMATION
{
    LARGE_INTEGER TotalMetadataAllocationUnits;
    ULONG SectorsPerAllocationUnit;
    ULONG BytesPerSector;
};
struct alignas( 4 ) _RTL_KSCP_ROUTINES
{
    ULONG UnwindDataOffset;
    RTL_RETPOLINE_ROUTINES RetpolineRoutines;
    ULONG CfgDispatchSmep;
    ULONG CfgDispatchNoSmep;
};
struct alignas( 8 ) _MEMORY_IMAGE_EXTENSION_INFORMATION
{
    MEMORY_IMAGE_EXTENSION_TYPE ExtensionType;
    ULONG Flags;
    PVOID ExtensionImageBaseRva;
    SIZE_T ExtensionSize;
};
struct alignas( 8 ) _THREAD_LAST_SYSCALL_INFORMATION
{
    PVOID FirstArgument;
    USHORT SystemCallNumber;
    USHORT Pad[1];
    ULONG64 WaitTime;
};
struct alignas( 8 ) _LSA_FOREST_TRUST_INFORMATION2
{
    ULONG RecordCount;
    PLSA_FOREST_TRUST_RECORD2* Entries;
};
struct alignas( 8 ) _FILEOFFSET_INFORMATION
{
    ULONGLONG DontUse : 9;
    ULONGLONG Offset : 48;
    ULONGLONG Reserved : 7;
};
struct alignas( 8 ) _LSA_FOREST_TRUST_COLLISION_INFORMATION
{
    ULONG RecordCount;
    PLSA_FOREST_TRUST_COLLISION_RECORD* Entries;
};
struct alignas( 4 ) _IO_COMPLETION_BASIC_INFORMATION
{
    LONG Depth;
};
struct alignas( 2 ) _ATOM_BASIC_INFORMATION
{
    USHORT UsageCount;
    USHORT Flags;
    USHORT NameLength;
    WCHAR Name[1];
};
struct alignas( 4 ) _ATOM_TABLE_INFORMATION
{
    ULONG NumberOfAtoms;
    RTL_ATOM Atoms[1];
};
union alignas( 4 ) _BCD_OBJECT_DATATYPE
{
    ULONG PackedValue;
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            ULONG Reserved : 28;
            BCD_OBJECT_TYPE ObjectType : 4;
        };
        struct alignas( 4 )
        {
            BCD_APPLICATION_OBJECT_TYPE ApplicationType : 20;
            BCD_APPLICATION_IMAGE_TYPE ImageType : 4;
            ULONG Reserved : 4;
            BCD_OBJECT_TYPE ObjectType : 4;
        } Application;
        struct alignas( 4 )
        {
            ULONG Value : 20;
            BCD_INHERITED_CLASS_TYPE Class : 4;
            ULONG Reserved : 4;
            BCD_OBJECT_TYPE ObjectType : 4;
        } Inherit;
        struct alignas( 4 )
        {
            ULONG Reserved : 28;
            BCD_OBJECT_TYPE ObjectType : 4;
        } Device;
    };
};
struct alignas( 8 ) _ALPC_PORT_ATTRIBUTES
{
    ULONG Flags;
    SECURITY_QUALITY_OF_SERVICE SecurityQos;
    SIZE_T MaxMessageLength;
    SIZE_T MemoryBandwidth;
    SIZE_T MaxPoolUsage;
    SIZE_T MaxSectionSize;
    SIZE_T MaxViewSize;
    SIZE_T MaxTotalSectionSize;
    ULONG DupObjectTypes;
    ULONG Reserved;
};
struct alignas( 8 ) _BCD_OBJECT
{
    GUID Identifer;
    PBCD_OBJECT_DESCRIPTION Description;
};
struct alignas( 4 ) _ETW_UMS_EVENT_PARK
{
    ULONG ProcessId;
    ULONG ScheduledThreadId;
    ULONG ParkFlags;
};
struct alignas( 8 ) _DBGUI_CREATE_PROCESS
{
    HANDLE HandleToProcess;
    HANDLE HandleToThread;
    DBGKM_CREATE_PROCESS NewProcess;
};
union alignas( 4 ) _BCD_ELEMENT_DATATYPE
{
    ULONG PackedValue;
    struct alignas( 4 )
    {
        ULONG SubType : 24;
        BCD_ELEMENT_DATATYPE_FORMAT Format : 4;
        BCD_ELEMENT_DATATYPE_CLASS Class : 4;
    };
};
struct alignas( 4 ) _ETW_UMS_EVENT_DISASSOCIATE
{
    ULONG ProcessId;
    ULONG ScheduledThreadId;
    ULONG PrimaryThreadId;
    ULONG UmsApcControlFlags;
    NTSTATUS Status;
};
struct alignas( 8 ) _BCD_ELEMENT_DEVICE_QUALIFIED_PARTITION
{
    ULONG PartitionStyle;
    ULONG Reserved;
    struct alignas( 8 )
    {
        union alignas( 8 )
        {
            ULONG DiskSignature;
            ULONG64 PartitionOffset;
        } Mbr;
        union alignas( 4 )
        {
            GUID DiskSignature;
            GUID PartitionSignature;
        } Gpt;
    };
};
struct alignas( 8 ) _BCD_ELEMENT_DEVICE
{
    ULONG DeviceType;
    GUID AdditionalOptions;
    struct alignas( 8 )
    {
        union alignas( 4 )
        {
            ULONG ParentOffset;
            WCHAR Path[1];
        } File;
        union alignas( 2 )
        {
            WCHAR Path[1];
        } Partition;
        union alignas( 4 )
        {
            ULONG Type;
            ULONG ParentOffset;
            ULONG ElementType;
            WCHAR Path[1];
        } Locate;
        union alignas( 4 )
        {
            GUID InterfaceInstance;
        } Vmbus;
        union alignas( 4 )
        {
            ULONG Data[1];
        } Unknown;
        BCD_ELEMENT_DEVICE_QUALIFIED_PARTITION QualifiedPartition;
    };
};
struct alignas( 2 ) _BCD_ELEMENT_STRING
{
    WCHAR Value[1];
};
struct alignas( 4 ) _BCD_ELEMENT_OBJECT
{
    GUID Object;
};
struct alignas( 4 ) _BCD_ELEMENT_OBJECT_LIST
{
    GUID ObjectList[1];
};
struct alignas( 8 ) _BCD_ELEMENT_INTEGER
{
    ULONG64 Value;
};
struct alignas( 8 ) _BCD_ELEMENT_INTEGER_LIST
{
    ULONG64 Value[1];
};
struct alignas( 1 ) _BCD_ELEMENT_BOOLEAN
{
    BOOLEAN Value;
};
struct alignas( 4 ) BCD_ELEMENT_DESCRIPTION
{
    ULONG Version;
    ULONG Type;
    ULONG DataSize;
};
struct alignas( 8 ) _BCD_ELEMENT
{
    PBCD_ELEMENT_DESCRIPTION Description;
    PVOID Data;
};
struct alignas( 8 ) _DOMAIN_DISPLAY_GROUP
{
    ULONG Index;
    ULONG Rid;
    ULONG Attributes;
    UNICODE_STRING Group;
    UNICODE_STRING Comment;
};
struct alignas( 1 ) _ETW_HEAP_EVENT_CREATE
{
    SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    ULONG Flags;
    SIZE_T ReserveSize;
    SIZE_T CommitSize;
    SIZE_T AllocatedSize;
};
struct alignas( 1 ) _ETW_HEAP_EVENT_CONTRACTION
{
    SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    SIZE_T DeCommitSize;
    PVOID DeCommitAddress;
    SIZE_T FreeSpace;
    SIZE_T CommittedSpace;
    SIZE_T ReservedSpace;
    ULONG NoOfUCRs;
    SIZE_T AllocatedSpace;
};
struct alignas( 8 ) _HEAP_EVENT_SUBSEGMENT_ALLOC_FREE
{
    PVOID HeapHandle;
    PVOID SubSegment;
    SIZE_T SubSegmentSize;
    SIZE_T BlockSize;
};
struct alignas( 8 ) _MEMORY_IMAGE_INFORMATION
{
    PVOID ImageBase;
    SIZE_T SizeOfImage;
    union alignas( 4 )
    {
        ULONG ImageFlags;
        struct alignas( 4 )
        {
            ULONG ImagePartialMap : 1;
            ULONG ImageNotExecutable : 1;
            ULONG ImageSigningLevel : 4;
            ULONG ImageExtensionPresent : 1;
            ULONG Reserved : 25;
        };
    };
};
struct alignas( 8 ) _MEMORY_ENCLAVE_IMAGE_INFORMATION
{
    MEMORY_IMAGE_INFORMATION ImageInfo;
    UCHAR UniqueID[32];
    UCHAR AuthorID[32];
};
struct alignas( 4 ) _MEMORY_PHYSICAL_CONTIGUITY_UNIT_INFORMATION
{
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            ULONG State : 2;
            ULONG Reserved : 30;
        };
        ULONG AllInformation;
    };
};
struct alignas( 8 ) _MEMORY_PHYSICAL_CONTIGUITY_INFORMATION
{
    PVOID VirtualAddress;
    ULONG_PTR Size;
    ULONG_PTR ContiguityUnitSize;
    ULONG Flags;
    PMEMORY_PHYSICAL_CONTIGUITY_UNIT_INFORMATION ContiguityUnitInformation;
};
struct alignas( 4 ) _RTL_SCP_CFG_ARM64_HEADER
{
    ULONG EcInvalidCallHandlerRva;
    ULONG EcCfgCheckRva;
    ULONG EcCfgCheckESRva;
    ULONG EcCallCheckRva;
    ULONG CpuInitializationCompleteLoadRva;
    ULONG LdrpValidateEcCallTargetInitRva;
    ULONG SyscallFfsSizeRva;
    ULONG SyscallFfsBaseRva;
};
struct alignas( 4 ) _RTL_SCP_CFG_COMMON_HEADER
{
    ULONG CfgDispatchRva;
    ULONG CfgDispatchESRva;
    ULONG CfgCheckRva;
    ULONG CfgCheckESRva;
    ULONG InvalidCallHandlerRva;
    ULONG FnTableRva;
};
struct alignas( 4 ) _RTL_SCP_CFG_HEADER
{
    RTL_SCP_CFG_COMMON_HEADER Common;
};
struct alignas( 8 ) _RTL_SCP_CFG_REGION_BOUNDS
{
    PVOID StartAddress;
    PVOID EndAddress;
};
struct alignas( 8 ) _RTL_SCP_CFG_NTDLL_EXPORTS
{
    RTL_SCP_CFG_REGION_BOUNDS ScpRegions[4];
    PVOID CfgDispatchFptr;
    PVOID CfgDispatchESFptr;
    PVOID CfgCheckFptr;
    PVOID CfgCheckESFptr;
    PVOID IllegalCallHandler;
};
struct alignas( 8 ) _RTL_SCP_CFG_NTDLL_EXPORTS_ARM64EC
{
    PVOID EcInvalidCallHandler;
    PVOID EcCfgCheckFptr;
    PVOID EcCfgCheckESFptr;
    PVOID EcCallCheckFptr;
    PVOID CpuInitializationComplete;
    PVOID LdrpValidateEcCallTargetInit;
    struct alignas( 8 )
    {
        PVOID SyscallFfsSize;
        union alignas( 8 )
        {
            PVOID Ptr;
            ULONG Value;
        };
    };
    PVOID SyscallFfsBase;
};
struct alignas( 4 ) _PERFINFO_IDLE_STATE_CHANGE
{
    ULONG State;
    ULONG Throttle;
    ULONG Direction;
};
struct alignas( 8 ) _PF_DEPRIORITIZE_OLD_PAGES
{
    ULONG Version;
    HANDLE ProcessHandle;
    union alignas( 4 )
    {
        ULONG Flags;
        struct alignas( 4 )
        {
            ULONG TargetPriority : 4;
            ULONG TrimPages : 2;
            ULONG Spare : 26;
        };
    };
};
struct alignas( 8 ) _MEMORY_FRAME_INFORMATION
{
    ULONGLONG UseDescription : 4;
    ULONGLONG ListDescription : 3;
    ULONGLONG Cold : 1;
    ULONGLONG Pinned : 1;
    ULONGLONG DontUse : 48;
    ULONGLONG Priority : 3;
    ULONGLONG NonTradeable : 1;
    ULONGLONG Reserved : 3;
};
struct alignas( 8 ) _PERFINFO_SET_POWER_ACTION
{
    PVOID Trigger;
    ULONG PowerAction;
    ULONG LightestState;
};
struct alignas( 8 ) _PAGEDIR_INFORMATION
{
    ULONGLONG DontUse : 9;
    ULONGLONG PageDirectoryBase : 48;
    ULONGLONG Reserved : 7;
};
struct alignas( 8 ) _UNIQUE_PROCESS_INFORMATION
{
    ULONGLONG DontUse : 9;
    ULONGLONG UniqueProcessKey : 48;
    ULONGLONG Reserved : 7;
};
struct alignas( 8 ) _MMPFN_IDENTITY
{
    union alignas( 8 )
    {
        MEMORY_FRAME_INFORMATION e1;
        FILEOFFSET_INFORMATION e2;
        PAGEDIR_INFORMATION e3;
        UNIQUE_PROCESS_INFORMATION e4;
    } u1;
    ULONG_PTR PageFrameIndex;
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            ULONG_PTR Image : 1;
            ULONG_PTR Mismatch : 1;
        } e1;
        struct alignas( 8 )
        {
            ULONG_PTR CombinedPage;
        } e2;
        ULONG_PTR FileObject;
        ULONG_PTR UniqueFileObjectKey;
        ULONG_PTR ProtoPteAddress;
        ULONG_PTR VirtualAddress;
    } u2;
};
struct alignas( 8 ) _MMPFN_MEMSNAP_INFORMATION
{
    ULONG_PTR InitialPageFrameIndex;
    ULONG_PTR Count;
};
struct alignas( 8 ) _SECTION_BASIC_INFORMATION
{
    PVOID BaseAddress;
    ULONG AllocationAttributes;
    LARGE_INTEGER MaximumSize;
};
struct alignas( 8 ) _SECTION_IMAGE_INFORMATION
{
    PVOID TransferAddress;
    ULONG ZeroBits;
    SIZE_T MaximumStackSize;
    SIZE_T CommittedStackSize;
    ULONG SubSystemType;
    union alignas( 4 )
    {
        struct alignas( 2 )
        {
            USHORT SubSystemMinorVersion;
            USHORT SubSystemMajorVersion;
        };
        ULONG SubSystemVersion;
    };
    union alignas( 4 )
    {
        struct alignas( 2 )
        {
            USHORT MajorOperatingSystemVersion;
            USHORT MinorOperatingSystemVersion;
        };
        ULONG OperatingSystemVersion;
    };
    USHORT ImageCharacteristics;
    USHORT DllCharacteristics;
    USHORT Machine;
    BOOLEAN ImageContainsCode;
    union alignas( 1 )
    {
        UCHAR ImageFlags;
        struct alignas( 1 )
        {
            UCHAR ComPlusNativeReady : 1;
            UCHAR ComPlusILOnly : 1;
            UCHAR ImageDynamicallyRelocated : 1;
            UCHAR ImageMappedFlat : 1;
            UCHAR BaseBelow4gb : 1;
            UCHAR ComPlusPrefer32bit : 1;
            UCHAR Reserved : 2;
        };
    };
    ULONG LoaderFlags;
    ULONG ImageFileSize;
    ULONG CheckSum;
};
struct alignas( 8 ) _SECTION_INTERNAL_IMAGE_INFORMATION
{
    SECTION_IMAGE_INFORMATION SectionInformation;
    union alignas( 4 )
    {
        ULONG ExtendedFlags;
        struct alignas( 4 )
        {
            ULONG ImageExportSuppressionEnabled : 1;
            ULONG ImageCetShadowStacksReady : 1;
            ULONG ImageXfgEnabled : 1;
            ULONG ImageCetShadowStacksStrictMode : 1;
            ULONG ImageCetSetContextIpValidationRelaxedMode : 1;
            ULONG ImageCetDynamicApisAllowInProc : 1;
            ULONG ImageCetDowngradeReserved1 : 1;
            ULONG ImageCetDowngradeReserved2 : 1;
            ULONG ImageExportSuppressionInfoPresent : 1;
            ULONG ImageCfgEnabled : 1;
            ULONG Reserved : 22;
        };
    };
};
struct alignas( 8 ) _MEMORY_RANGE_ENTRY
{
    PVOID VirtualAddress;
    SIZE_T NumberOfBytes;
};
struct alignas( 4 ) _MEMORY_PREFETCH_INFORMATION
{
    ULONG Flags;
};
struct alignas( 8 ) _CFG_CALL_TARGET_LIST_INFORMATION
{
    ULONG NumberOfEntries;
    ULONG Reserved;
    PULONG NumberOfEntriesProcessed;
    PCFG_CALL_TARGET_INFO CallTargetInfo;
    PVOID Section;
    ULONGLONG FileOffset;
};
struct alignas( 8 ) _MEMORY_PARTITION_CONFIGURATION_INFORMATION
{
    ULONG Flags;
    ULONG NumaNode;
    ULONG Channel;
    ULONG NumberOfNumaNodes;
    SIZE_T ResidentAvailablePages;
    SIZE_T CommittedPages;
    SIZE_T CommitLimit;
    SIZE_T PeakCommitment;
    SIZE_T TotalNumberOfPages;
    SIZE_T AvailablePages;
    SIZE_T ZeroPages;
    SIZE_T FreePages;
    SIZE_T StandbyPages;
    SIZE_T StandbyPageCountByPriority[8];
    SIZE_T RepurposedPagesByPriority[8];
    SIZE_T MaximumCommitLimit;
    SIZE_T Reserved;
    ULONG PartitionId;
};
struct alignas( 8 ) _MEMORY_PARTITION_TRANSFER_INFORMATION
{
    SIZE_T NumberOfPages;
    ULONG NumaNode;
    ULONG Flags;
};
struct alignas( 8 ) _MEMORY_PARTITION_PAGEFILE_INFORMATION
{
    UNICODE_STRING PageFileName;
    LARGE_INTEGER MinimumSize;
    LARGE_INTEGER MaximumSize;
    ULONG Flags;
};
struct alignas( 8 ) _MEMORY_PARTITION_PAGE_COMBINE_INFORMATION
{
    HANDLE StopHandle;
    ULONG Flags;
    SIZE_T TotalNumberOfPages;
};
struct alignas( 8 ) _MEMORY_PARTITION_PAGE_RANGE
{
    ULONG_PTR StartPage;
    ULONG_PTR NumberOfPages;
};
struct alignas( 8 ) _MEMORY_PARTITION_INITIAL_ADD_INFORMATION
{
    ULONG Flags;
    ULONG NumberOfRanges;
    SIZE_T NumberOfPagesAdded;
    MEMORY_PARTITION_PAGE_RANGE PartitionRanges[1];
};
struct alignas( 8 ) _MEMORY_PARTITION_MEMORY_EVENTS_INFORMATION
{
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            ULONG CommitEvents : 1;
            ULONG Spare : 31;
        };
        ULONG AllFlags;
    } Flags;
    ULONG HandleAttributes;
    ACCESS_MASK DesiredAccess;
    HANDLE LowCommitCondition;
    HANDLE HighCommitCondition;
    HANDLE MaximumCommitCondition;
};
struct alignas( 8 ) _OBJECT_BASIC_INFORMATION
{
    ULONG Attributes;
    ACCESS_MASK GrantedAccess;
    ULONG HandleCount;
    ULONG PointerCount;
    ULONG PagedPoolCharge;
    ULONG NonPagedPoolCharge;
    ULONG Reserved[3];
    ULONG NameInfoSize;
    ULONG TypeInfoSize;
    ULONG SecurityDescriptorSize;
    LARGE_INTEGER CreationTime;
};
struct alignas( 8 ) _OBJECT_TYPE_INFORMATION
{
    UNICODE_STRING TypeName;
    ULONG TotalNumberOfObjects;
    ULONG TotalNumberOfHandles;
    ULONG TotalPagedPoolUsage;
    ULONG TotalNonPagedPoolUsage;
    ULONG TotalNamePoolUsage;
    ULONG TotalHandleTableUsage;
    ULONG HighWaterNumberOfObjects;
    ULONG HighWaterNumberOfHandles;
    ULONG HighWaterPagedPoolUsage;
    ULONG HighWaterNonPagedPoolUsage;
    ULONG HighWaterNamePoolUsage;
    ULONG HighWaterHandleTableUsage;
    ULONG InvalidAttributes;
    GENERIC_MAPPING GenericMapping;
    ULONG ValidAccessMask;
    BOOLEAN SecurityRequired;
    BOOLEAN MaintainHandleCount;
    UCHAR TypeIndex;
    CHAR ReservedByte;
    ULONG PoolType;
    ULONG DefaultPagedPoolCharge;
    ULONG DefaultNonPagedPoolCharge;
};
struct alignas( 8 ) _ETW_PER_SESSION_QUOTA
{
    ULONG SessionId;
    ULONG CpuShareWeight;
    LONGLONG CapturedWeightData;
    ULONG64 CyclesAccumulated;
};
struct alignas( 4 ) _OBJECT_TYPES_INFORMATION
{
    ULONG NumberOfTypes;
};
struct alignas( 8 ) _ETW_DFSS_START_NEW_INTERVAL
{
    ULONG CurrentGeneration;
    ULONG SessionCount;
    ULONG64 TotalCycleCredit;
    ULONG64 TotalCyclesAccumulated;
    ETW_PER_SESSION_QUOTA SessionQuota[1];
};
struct alignas( 4 ) _FILE_ACCESS_INFORMATION
{
    ACCESS_MASK AccessFlags;
};
struct alignas( 8 ) _OBJECT_DIRECTORY_INFORMATION
{
    UNICODE_STRING Name;
    UNICODE_STRING TypeName;
};
struct alignas( 4 ) _OBJECT_BOUNDARY_ENTRY
{
    BOUNDARY_ENTRY_TYPE EntryType;
    ULONG EntrySize;
};
struct alignas( 4 ) _OBJECT_BOUNDARY_DESCRIPTOR
{
    ULONG Version;
    ULONG Items;
    ULONG TotalSize;
    union alignas( 4 )
    {
        ULONG Flags;
        struct alignas( 4 )
        {
            ULONG AddAppContainerSid : 1;
            ULONG Reserved : 31;
        };
    };
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_DATA
{
    ULONG Magic;
    ULONG HeaderSize;
    ULONG FormatVersion;
    ULONG TotalSize;
    ULONG DefaultTocOffset;
    ULONG ExtendedTocOffset;
    ULONG AssemblyRosterOffset;
    ULONG Flags;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_DATA_TOC_HEADER
{
    ULONG HeaderSize;
    ULONG EntryCount;
    ULONG FirstEntryOffset;
    ULONG Flags;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_DATA_TOC_ENTRY
{
    ULONG Id;
    ULONG Offset;
    ULONG Length;
    ULONG Format;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_DATA_EXTENDED_TOC_HEADER
{
    ULONG HeaderSize;
    ULONG EntryCount;
    ULONG FirstEntryOffset;
    ULONG Flags;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_DATA_EXTENDED_TOC_ENTRY
{
    GUID ExtensionGuid;
    ULONG TocOffset;
    ULONG Length;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_DATA_ASSEMBLY_ROSTER_HEADER
{
    ULONG HeaderSize;
    ULONG HashAlgorithm;
    ULONG EntryCount;
    ULONG FirstEntryOffset;
    ULONG AssemblyInformationSectionOffset;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_DATA_ASSEMBLY_ROSTER_ENTRY
{
    ULONG Flags;
    ULONG PseudoKey;
    ULONG AssemblyNameOffset;
    ULONG AssemblyNameLength;
    ULONG AssemblyInformationOffset;
    ULONG AssemblyInformationLength;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_STRING_SECTION_HEADER
{
    ULONG Magic;
    ULONG HeaderSize;
    ULONG FormatVersion;
    ULONG DataFormatVersion;
    ULONG Flags;
    ULONG ElementCount;
    ULONG ElementListOffset;
    ULONG HashAlgorithm;
    ULONG SearchStructureOffset;
    ULONG UserDataOffset;
    ULONG UserDataSize;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_STRING_SECTION_ENTRY
{
    ULONG PseudoKey;
    ULONG KeyOffset;
    ULONG KeyLength;
    ULONG Offset;
    ULONG Length;
    ULONG AssemblyRosterIndex;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_STRING_SECTION_HASH_TABLE
{
    ULONG BucketTableEntryCount;
    ULONG BucketTableOffset;
};
struct alignas( 8 ) _TRUSTED_DOMAIN_NAME_INFO
{
    LSA_UNICODE_STRING Name;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_GUID_SECTION_HEADER
{
    ULONG Magic;
    ULONG HeaderSize;
    ULONG FormatVersion;
    ULONG DataFormatVersion;
    ULONG Flags;
    ULONG ElementCount;
    ULONG ElementListOffset;
    ULONG SearchStructureOffset;
    ULONG UserDataOffset;
    ULONG UserDataSize;
};
struct alignas( 4 ) _WMI_JOB_SET_QUERY_INFORMATION
{
    GUID JobId;
    ULONG JobHandle;
    ULONG JobObjectInformationClass;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_GUID_SECTION_ENTRY
{
    GUID Guid;
    ULONG Offset;
    ULONG Length;
    ULONG AssemblyRosterIndex;
};
struct alignas( 4 ) _WMI_JOB_SEND_NOTIFICATION_INFORMATION
{
    GUID JobId;
    ULONG NotificationId;
};
struct alignas( 8 ) _FILE_QUOTA_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG SidLength;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER QuotaUsed;
    LARGE_INTEGER QuotaThreshold;
    LARGE_INTEGER QuotaLimit;
    SID Sid;
};
struct alignas( 4 ) _FILE_GET_QUOTA_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG SidLength;
    SID Sid;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_GUID_SECTION_HASH_BUCKET
{
    ULONG ChainCount;
    ULONG ChainOffset;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_DATA_ASSEMBLY_GLOBAL_INFORMATION
{
    ULONG Size;
    ULONG Flags;
    GUID PolicyCoherencyGuid;
    GUID PolicyOverrideGuid;
    ULONG ApplicationDirectoryPathType;
    ULONG ApplicationDirectoryLength;
    ULONG ApplicationDirectoryOffset;
    ULONG ResourceName;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_DATA_DLL_REDIRECTION
{
    ULONG Size;
    ULONG Flags;
    ULONG TotalPathLength;
    ULONG PathSegmentCount;
    ULONG PathSegmentOffset;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_DATA_DLL_REDIRECTION_PATH_SEGMENT
{
    ULONG Length;
    ULONG Offset;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_DATA_WINDOW_CLASS_REDIRECTION
{
    ULONG Size;
    ULONG Flags;
    ULONG VersionSpecificClassNameLength;
    ULONG VersionSpecificClassNameOffset;
    ULONG DllNameLength;
    ULONG DllNameOffset;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_DATA_COM_SERVER_REDIRECTION
{
    ULONG Size;
    ULONG Flags;
    ULONG ThreadingModel;
    GUID ReferenceClsid;
    GUID ConfiguredClsid;
    GUID ImplementedClsid;
    GUID TypeLibraryId;
    ULONG ModuleLength;
    ULONG ModuleOffset;
    ULONG ProgIdLength;
    ULONG ProgIdOffset;
    ULONG ShimDataLength;
    ULONG ShimDataOffset;
    ULONG MiscStatusDefault;
    ULONG MiscStatusContent;
    ULONG MiscStatusThumbnail;
    ULONG MiscStatusIcon;
    ULONG MiscStatusDocPrint;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_DATA_COM_SERVER_REDIRECTION_SHIM
{
    ULONG Size;
    ULONG Flags;
    ULONG Type;
    ULONG ModuleLength;
    ULONG ModuleOffset;
    ULONG TypeLength;
    ULONG TypeOffset;
    ULONG ShimVersionLength;
    ULONG ShimVersionOffset;
    ULONG DataLength;
    ULONG DataOffset;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_DATA_COM_INTERFACE_REDIRECTION
{
    ULONG Size;
    ULONG Flags;
    GUID ProxyStubClsid32;
    ULONG NumMethods;
    GUID TypeLibraryId;
    GUID BaseInterface;
    ULONG NameLength;
    ULONG NameOffset;
};
struct alignas( 2 ) _ACTIVATION_CONTEXT_DATA_TYPE_LIBRARY_VERSION
{
    USHORT Major;
    USHORT Minor;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_DATA_COM_TYPE_LIBRARY_REDIRECTION
{
    ULONG Size;
    ULONG Flags;
    ULONG NameLength;
    ULONG NameOffset;
    USHORT ResourceId;
    USHORT LibraryFlags;
    ULONG HelpDirLength;
    ULONG HelpDirOffset;
    ACTIVATION_CONTEXT_DATA_TYPE_LIBRARY_VERSION Version;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_DATA_COM_PROGID_REDIRECTION
{
    ULONG Size;
    ULONG Flags;
    ULONG ConfiguredClsidOffset;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_DATA_CLR_SURROGATE
{
    ULONG Size;
    ULONG Flags;
    GUID SurrogateIdent;
    ULONG VersionOffset;
    ULONG VersionLength;
    ULONG TypeNameOffset;
    ULONG TypeNameLength;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_DATA_APPLICATION_SETTINGS
{
    ULONG Size;
    ULONG Flags;
    ULONG SettingNamespaceLength;
    ULONG SettingNamespaceOffset;
    ULONG SettingNameLength;
    ULONG SettingNameOffset;
    ULONG SettingValueLength;
    ULONG SettingValueOffset;
};
struct alignas( 4 ) _COMPATIBILITY_CONTEXT_ELEMENT_LEGACY
{
    GUID Id;
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
};
struct alignas( 4 ) _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION_LEGACY
{
    ULONG ElementCount;
    COMPATIBILITY_CONTEXT_ELEMENT_LEGACY Elements[1];
};
struct alignas( 8 ) _ASSEMBLY_STORAGE_MAP_ENTRY
{
    ULONG Flags;
    UNICODE_STRING DosPath;
    HANDLE Handle;
};
struct alignas( 8 ) _RTL_ACTIVATION_CONTEXT_STACK_FRAME
{
    _RTL_ACTIVATION_CONTEXT_STACK_FRAME* Previous;
    PACTIVATION_CONTEXT ActivationContext;
    ULONG Flags;
};
struct alignas( 8 ) _CURDIR
{
    UNICODE_STRING DosPath;
    HANDLE Handle;
};
struct alignas( 8 ) _RTL_DRIVE_LETTER_CURDIR
{
    USHORT Flags;
    USHORT Length;
    ULONG TimeStamp;
    STRING DosPath;
};
struct alignas( 8 ) _RTL_USER_PROCESS_PARAMETERS
{
    ULONG MaximumLength;
    ULONG Length;
    ULONG Flags;
    ULONG DebugFlags;
    HANDLE ConsoleHandle;
    ULONG ConsoleFlags;
    HANDLE StandardInput;
    HANDLE StandardOutput;
    HANDLE StandardError;
    CURDIR CurrentDirectory;
    UNICODE_STRING DllPath;
    UNICODE_STRING ImagePathName;
    UNICODE_STRING CommandLine;
    PVOID Environment;
    ULONG StartingX;
    ULONG StartingY;
    ULONG CountX;
    ULONG CountY;
    ULONG CountCharsX;
    ULONG CountCharsY;
    ULONG FillAttribute;
    ULONG WindowFlags;
    ULONG ShowWindowFlags;
    UNICODE_STRING WindowTitle;
    UNICODE_STRING DesktopInfo;
    UNICODE_STRING ShellInfo;
    UNICODE_STRING RuntimeData;
    RTL_DRIVE_LETTER_CURDIR CurrentDirectories[32];
    ULONG_PTR EnvironmentSize;
    ULONG_PTR EnvironmentVersion;
    PVOID PackageDependencyData;
    ULONG ProcessGroupId;
    ULONG LoaderThreads;
    UNICODE_STRING RedirectionDllName;
    UNICODE_STRING HeapPartitionName;
    PULONGLONG DefaultThreadpoolCpuSetMasks;
    ULONG DefaultThreadpoolCpuSetMaskCount;
    ULONG DefaultThreadpoolThreadMaximum;
    ULONG HeapMemoryTypeMask;
};
struct alignas( 8 ) _SILO_USER_SHARED_DATA
{
    ULONG ServiceSessionId;
    ULONG ActiveConsoleId;
    LONGLONG ConsoleSessionForegroundProcessId;
    NT_PRODUCT_TYPE NtProductType;
    ULONG SuiteMask;
    ULONG SharedUserSessionId;
    BOOLEAN IsMultiSessionSku;
    BOOLEAN IsStateSeparationEnabled;
    WCHAR NtSystemRoot[260];
    USHORT UserModeGlobalLogger[16];
    ULONG TimeZoneId;
    LONG TimeZoneBiasStamp;
    KSYSTEM_TIME TimeZoneBias;
    LARGE_INTEGER TimeZoneBiasEffectiveStart;
    LARGE_INTEGER TimeZoneBiasEffectiveEnd;
};
;
struct alignas( 8 ) _PEB_LDR_DATA
{
    ULONG Length;
    BOOLEAN Initialized;
    HANDLE SsHandle;
    LIST_ENTRY InLoadOrderModuleList;
    LIST_ENTRY InMemoryOrderModuleList;
    LIST_ENTRY InInitializationOrderModuleList;
    PVOID EntryInProgress;
    BOOLEAN ShutdownInProgress;
    HANDLE ShutdownThreadId;
};
struct alignas( 4 ) _FILE_INTEGRITY_STREAM_INFORMATION
{
    USHORT ChecksumAlgorithm;
    UCHAR ChecksumChunkShift;
    UCHAR ClusterShift;
    ULONG Flags;
};
struct alignas( 4 ) _API_SET_HASH_ENTRY
{
    ULONG Hash;
    ULONG Index;
};
struct alignas( 8 ) _FILE_ID_EXTD_DIR_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    ULONG ReparsePointTag;
    FILE_ID_128 FileId;
    WCHAR FileName[1];
};
struct alignas( 4 ) _API_SET_NAMESPACE_ENTRY
{
    ULONG Flags;
    ULONG NameOffset;
    ULONG NameLength;
    ULONG HashedLength;
    ULONG ValueOffset;
    ULONG ValueCount;
};
struct alignas( 8 ) _ETW_REF_CLOCK
{
    LARGE_INTEGER StartTime;
    LARGE_INTEGER StartPerfClock;
};
struct alignas( 4 ) _TELEMETRY_COVERAGE_HEADER
{
    UCHAR MajorVersion;
    UCHAR MinorVersion;
    struct alignas( 2 )
    {
        USHORT TracingEnabled : 1;
        USHORT Reserved1 : 15;
    };
    ULONG HashTableEntries;
    ULONG HashIndexMask;
    ULONG TableUpdateVersion;
    ULONG TableSizeInBytes;
    ULONG LastResetTick;
    ULONG ResetRound;
    ULONG Reserved2;
    ULONG RecordedCount;
    ULONG Reserved3[4];
    ULONG HashTable[1];
};
struct alignas( 8 ) _WER_RECOVERY_INFO
{
    ULONG Length;
    PVOID Callback;
    PVOID Parameter;
    HANDLE Started;
    HANDLE Finished;
    HANDLE InProgress;
    LONG LastError;
    BOOL Successful;
    ULONG PingInterval;
    ULONG Flags;
};
struct alignas( 2 ) _WER_FILE
{
    USHORT Flags;
    WCHAR Path[260];
};
struct alignas( 8 ) _WER_MEMORY
{
    PVOID Address;
    ULONG Size;
};
struct alignas( 8 ) _WER_GATHER
{
    PVOID Next;
    USHORT Flags;
    union alignas( 8 )
    {
        WER_FILE File;
        WER_MEMORY Memory;
    } v;
};
struct alignas( 8 ) _WER_METADATA
{
    PVOID Next;
    WCHAR Key[64];
    WCHAR Value[128];
};
struct alignas( 8 ) _WER_RUNTIME_DLL
{
    PVOID Next;
    ULONG Length;
    PVOID Context;
    WCHAR CallbackDllPath[260];
};
struct alignas( 8 ) _WER_DUMP_COLLECTION
{
    PVOID Next;
    ULONG ProcessId;
    ULONG ThreadId;
};
struct alignas( 8 ) _WER_HEAP_MAIN_HEADER
{
    WCHAR Signature[16];
    LIST_ENTRY Links;
    HANDLE Mutex;
    PVOID FreeHeap;
    ULONG FreeCount;
};
struct alignas( 8 ) _WER_PEB_HEADER_BLOCK
{
    LONG Length;
    WCHAR Signature[16];
    WCHAR AppDataRelativePath[64];
    WCHAR RestartCommandLine[1024];
    WER_RECOVERY_INFO RecoveryInfo;
    PWER_GATHER Gather;
    PWER_METADATA MetaData;
    PWER_RUNTIME_DLL RuntimeDll;
    PWER_DUMP_COLLECTION DumpCollection;
    LONG GatherCount;
    LONG MetaDataCount;
    LONG DumpCount;
    LONG Flags;
    WER_HEAP_MAIN_HEADER MainHeader;
    PVOID Reserved;
};
struct alignas( 8 ) _PEB
{
    BOOLEAN InheritedAddressSpace;
    BOOLEAN ReadImageFileExecOptions;
    BOOLEAN BeingDebugged;
    union alignas( 1 )
    {
        BOOLEAN BitField;
        struct alignas( 1 )
        {
            BOOLEAN ImageUsesLargePages : 1;
            BOOLEAN IsProtectedProcess : 1;
            BOOLEAN IsImageDynamicallyRelocated : 1;
            BOOLEAN SkipPatchingUser32Forwarders : 1;
            BOOLEAN IsPackagedProcess : 1;
            BOOLEAN IsAppContainer : 1;
            BOOLEAN IsProtectedProcessLight : 1;
            BOOLEAN IsLongPathAwareProcess : 1;
        };
    };
    HANDLE Mutant;
    PVOID ImageBaseAddress;
    PPEB_LDR_DATA Ldr;
    PRTL_USER_PROCESS_PARAMETERS ProcessParameters;
    PVOID SubSystemData;
    PVOID ProcessHeap;
    PRTL_CRITICAL_SECTION FastPebLock;
    PSLIST_HEADER AtlThunkSListPtr;
    PVOID IFEOKey;
    union alignas( 4 )
    {
        ULONG CrossProcessFlags;
        struct alignas( 4 )
        {
            ULONG ProcessInJob : 1;
            ULONG ProcessInitializing : 1;
            ULONG ProcessUsingVEH : 1;
            ULONG ProcessUsingVCH : 1;
            ULONG ProcessUsingFTH : 1;
            ULONG ProcessPreviouslyThrottled : 1;
            ULONG ProcessCurrentlyThrottled : 1;
            ULONG ProcessImagesHotPatched : 1;
            ULONG ReservedBits0 : 24;
        };
    };
    union alignas( 8 )
    {
        PVOID KernelCallbackTable;
        PVOID UserSharedInfoPtr;
    };
    ULONG SystemReserved;
    ULONG AtlThunkSListPtr32;
    PAPI_SET_NAMESPACE ApiSetMap;
    ULONG TlsExpansionCounter;
    PRTL_BITMAP TlsBitmap;
    ULONG TlsBitmapBits[2];
    PVOID ReadOnlySharedMemoryBase;
    PSILO_USER_SHARED_DATA SharedData;
    PVOID* ReadOnlyStaticServerData;
    PVOID AnsiCodePageData;
    PVOID OemCodePageData;
    PVOID UnicodeCaseTableData;
    ULONG NumberOfProcessors;
    ULONG NtGlobalFlag;
    LARGE_INTEGER CriticalSectionTimeout;
    SIZE_T HeapSegmentReserve;
    SIZE_T HeapSegmentCommit;
    SIZE_T HeapDeCommitTotalFreeThreshold;
    SIZE_T HeapDeCommitFreeBlockThreshold;
    ULONG NumberOfHeaps;
    ULONG MaximumNumberOfHeaps;
    PVOID* ProcessHeaps;
    PVOID GdiSharedHandleTable;
    PVOID ProcessStarterHelper;
    ULONG GdiDCAttributeList;
    PRTL_CRITICAL_SECTION LoaderLock;
    ULONG OSMajorVersion;
    ULONG OSMinorVersion;
    USHORT OSBuildNumber;
    USHORT OSCSDVersion;
    ULONG OSPlatformId;
    ULONG ImageSubsystem;
    ULONG ImageSubsystemMajorVersion;
    ULONG ImageSubsystemMinorVersion;
    KAFFINITY ActiveProcessAffinityMask;
    GDI_HANDLE_BUFFER GdiHandleBuffer;
    PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;
    PRTL_BITMAP TlsExpansionBitmap;
    ULONG TlsExpansionBitmapBits[32];
    ULONG SessionId;
    ULARGE_INTEGER AppCompatFlags;
    ULARGE_INTEGER AppCompatFlagsUser;
    PVOID pShimData;
    PVOID AppCompatInfo;
    UNICODE_STRING CSDVersion;
    PACTIVATION_CONTEXT_DATA ActivationContextData;
    PASSEMBLY_STORAGE_MAP ProcessAssemblyStorageMap;
    PACTIVATION_CONTEXT_DATA SystemDefaultActivationContextData;
    PASSEMBLY_STORAGE_MAP SystemAssemblyStorageMap;
    SIZE_T MinimumStackCommit;
    PVOID SparePointers[2];
    PVOID PatchLoaderData;
    PVOID ChpeV2ProcessInfo;
    union alignas( 4 )
    {
        ULONG AppModelFeatureState;
        struct alignas( 4 )
        {
            ULONG ForegroundBoostProcesses : 1;
            ULONG AppModelFeatureStateReserved : 31;
        };
    };
    ULONG SpareUlongs[2];
    USHORT ActiveCodePage;
    USHORT OemCodePage;
    USHORT UseCaseMapping;
    USHORT UnusedNlsField;
    PWER_PEB_HEADER_BLOCK WerRegistrationData;
    PVOID WerShipAssertPtr;
    union alignas( 8 )
    {
        PVOID pContextData;
        PVOID EcCodeBitMap;
    };
    PVOID pImageHeaderHash;
    union alignas( 4 )
    {
        ULONG TracingFlags;
        struct alignas( 4 )
        {
            ULONG HeapTracingEnabled : 1;
            ULONG CritSecTracingEnabled : 1;
            ULONG LibLoaderTracingEnabled : 1;
            ULONG SpareTracingBits : 29;
        };
    };
    ULONGLONG CsrServerReadOnlySharedMemoryBase;
    PRTL_CRITICAL_SECTION TppWorkerpListLock;
    LIST_ENTRY TppWorkerpList;
    PVOID WaitOnAddressHashTable[128];
    PTELEMETRY_COVERAGE_HEADER TelemetryCoverageHeader;
    ULONG CloudFileFlags;
    ULONG CloudFileDiagFlags;
    CHAR PlaceholderCompatibilityMode;
    CHAR PlaceholderCompatibilityModeReserved[7];
    PLEAP_SECOND_DATA LeapSecondData;
    union alignas( 4 )
    {
        ULONG LeapSecondFlags;
        struct alignas( 4 )
        {
            ULONG SixtySecondEnabled : 1;
            ULONG Reserved : 31;
        };
    };
    ULONG NtGlobalFlag2;
    ULONGLONG ExtendedFeatureDisableMask;
};
struct alignas( 4 ) _MOUNTMGR_CHANGE_NOTIFY_INFO
{
    ULONG EpicNumber;
};
struct alignas( 2 ) _MOUNTMGR_VOLUME_MOUNT_POINT
{
    USHORT SourceVolumeNameOffset;
    USHORT SourceVolumeNameLength;
    USHORT TargetVolumeNameOffset;
    USHORT TargetVolumeNameLength;
};
struct alignas( 4 ) _ETW_PRIORITY_EVENT
{
    ULONG ThreadId;
    SCHAR OldPriority;
    SCHAR NewPriority;
    SCHAR DynamicPriority;
    SCHAR Reserved;
};
struct alignas( 4 ) _MOUNTMGR_QUERY_AUTO_MOUNT
{
    MOUNTMGR_AUTO_MOUNT_STATE CurrentState;
};
struct alignas( 8 ) _ETW_THREAD_AFFINITY_EVENT
{
    KAFFINITY Mask;
    ULONG ThreadId;
    USHORT Group;
    USHORT Reserved;
};
struct alignas( 8 ) _TEB_ACTIVE_FRAME_CONTEXT
{
    ULONG Flags;
    PCSTR FrameName;
};
struct alignas( 8 ) _TEB_ACTIVE_FRAME_CONTEXT_EX
{
    TEB_ACTIVE_FRAME_CONTEXT BasicContext;
    PCSTR SourceLocation;
};
struct alignas( 8 ) _TEB_ACTIVE_FRAME
{
    ULONG Flags;
    _TEB_ACTIVE_FRAME* Previous;
    PTEB_ACTIVE_FRAME_CONTEXT Context;
};
struct alignas( 8 ) _TEB_ACTIVE_FRAME_EX
{
    TEB_ACTIVE_FRAME BasicFrame;
    PVOID ExtensionIdentifier;
};
struct alignas( 8 ) _INITIAL_TEB
{
    struct alignas( 8 )
    {
        PVOID OldStackBase;
        PVOID OldStackLimit;
    } OldInitialTeb;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID StackAllocationBase;
};
struct alignas( 4 ) _PAGE_PRIORITY_INFORMATION
{
    ULONG PagePriority;
};
struct alignas( 8 ) _PROCESS_BASIC_INFORMATION
{
    NTSTATUS ExitStatus;
    PPEB PebBaseAddress;
    KAFFINITY AffinityMask;
    KPRIORITY BasePriority;
    HANDLE UniqueProcessId;
    HANDLE InheritedFromUniqueProcessId;
};
struct alignas( 8 ) _PROCESS_EXTENDED_BASIC_INFORMATION
{
    SIZE_T Size;
    union alignas( 8 )
    {
        PROCESS_BASIC_INFORMATION BasicInfo;
        struct alignas( 8 )
        {
            NTSTATUS ExitStatus;
            PPEB PebBaseAddress;
            KAFFINITY AffinityMask;
            KPRIORITY BasePriority;
            HANDLE UniqueProcessId;
            HANDLE InheritedFromUniqueProcessId;
        };
    };
    union alignas( 4 )
    {
        ULONG Flags;
        struct alignas( 4 )
        {
            ULONG IsProtectedProcess : 1;
            ULONG IsWow64Process : 1;
            ULONG IsProcessDeleting : 1;
            ULONG IsCrossSessionCreate : 1;
            ULONG IsFrozen : 1;
            ULONG IsBackground : 1;
            ULONG IsStronglyNamed : 1;
            ULONG IsSecureProcess : 1;
            ULONG IsSubsystemProcess : 1;
            ULONG IsTrustedApp : 1;
            ULONG SpareBits : 22;
        };
    };
};
struct alignas( 8 ) _VM_COUNTERS
{
    SIZE_T PeakVirtualSize;
    SIZE_T VirtualSize;
    ULONG PageFaultCount;
    SIZE_T PeakWorkingSetSize;
    SIZE_T WorkingSetSize;
    SIZE_T QuotaPeakPagedPoolUsage;
    SIZE_T QuotaPagedPoolUsage;
    SIZE_T QuotaPeakNonPagedPoolUsage;
    SIZE_T QuotaNonPagedPoolUsage;
    SIZE_T PagefileUsage;
    SIZE_T PeakPagefileUsage;
};
struct alignas( 8 ) _VM_COUNTERS_EX
{
    SIZE_T PeakVirtualSize;
    SIZE_T VirtualSize;
    ULONG PageFaultCount;
    SIZE_T PeakWorkingSetSize;
    SIZE_T WorkingSetSize;
    SIZE_T QuotaPeakPagedPoolUsage;
    SIZE_T QuotaPagedPoolUsage;
    SIZE_T QuotaPeakNonPagedPoolUsage;
    SIZE_T QuotaNonPagedPoolUsage;
    SIZE_T PagefileUsage;
    SIZE_T PeakPagefileUsage;
    SIZE_T PrivateUsage;
};
struct alignas( 8 ) _VM_COUNTERS_EX2
{
    union alignas( 8 )
    {
        VM_COUNTERS_EX CountersEx;
        struct alignas( 8 )
        {
            SIZE_T PeakVirtualSize;
            SIZE_T VirtualSize;
            ULONG PageFaultCount;
            SIZE_T PeakWorkingSetSize;
            SIZE_T WorkingSetSize;
            SIZE_T QuotaPeakPagedPoolUsage;
            SIZE_T QuotaPagedPoolUsage;
            SIZE_T QuotaPeakNonPagedPoolUsage;
            SIZE_T QuotaNonPagedPoolUsage;
            SIZE_T PagefileUsage;
            SIZE_T PeakPagefileUsage;
            SIZE_T PrivateUsage;
        };
    };
    SIZE_T PrivateWorkingSetSize;
    SIZE_T SharedCommitUsage;
};
struct alignas( 8 ) _KERNEL_USER_TIMES
{
    LARGE_INTEGER CreateTime;
    LARGE_INTEGER ExitTime;
    LARGE_INTEGER KernelTime;
    LARGE_INTEGER UserTime;
};
struct alignas( 8 ) _POOLED_USAGE_AND_LIMITS
{
    SIZE_T PeakPagedPoolUsage;
    SIZE_T PagedPoolUsage;
    SIZE_T PagedPoolLimit;
    SIZE_T PeakNonPagedPoolUsage;
    SIZE_T NonPagedPoolUsage;
    SIZE_T NonPagedPoolLimit;
    SIZE_T PeakPagefileUsage;
    SIZE_T PagefileUsage;
    SIZE_T PagefileLimit;
};
struct alignas( 8 ) _PROCESS_EXCEPTION_PORT
{
    HANDLE ExceptionPortHandle;
    ULONG StateFlags;
};
struct alignas( 8 ) _FILE_FS_FULL_SIZE_INFORMATION_EX
{
    ULONGLONG ActualTotalAllocationUnits;
    ULONGLONG ActualAvailableAllocationUnits;
    ULONGLONG ActualPoolUnavailableAllocationUnits;
    ULONGLONG CallerTotalAllocationUnits;
    ULONGLONG CallerAvailableAllocationUnits;
    ULONGLONG CallerPoolUnavailableAllocationUnits;
    ULONGLONG UsedAllocationUnits;
    ULONGLONG TotalReservedAllocationUnits;
    ULONGLONG VolumeStorageReserveAllocationUnits;
    ULONGLONG AvailableCommittedAllocationUnits;
    ULONGLONG PoolAvailableAllocationUnits;
    ULONG SectorsPerAllocationUnit;
    ULONG BytesPerSector;
};
struct alignas( 8 ) _LSA_FOREST_TRUST_DOMAIN_INFO
{
    PSID Sid;
    LSA_UNICODE_STRING DnsName;
    LSA_UNICODE_STRING NetbiosName;
};
struct alignas( 8 ) _LSA_FOREST_TRUST_SCANNER_INFO
{
    PSID DomainSid;
    LSA_UNICODE_STRING DnsName;
    LSA_UNICODE_STRING NetbiosName;
};
struct alignas( 8 ) _LSA_FOREST_TRUST_BINARY_DATA
{
    ULONG Length;
    PUCHAR Buffer;
};
struct alignas( 8 ) _LSA_FOREST_TRUST_RECORD2
{
    ULONG Flags;
    LSA_FOREST_TRUST_RECORD_TYPE ForestTrustType;
    LARGE_INTEGER Time;
    union alignas( 8 )
    {
        LSA_UNICODE_STRING TopLevelName;
        LSA_FOREST_TRUST_DOMAIN_INFO DomainInfo;
        LSA_FOREST_TRUST_BINARY_DATA BinaryData;
        LSA_FOREST_TRUST_SCANNER_INFO ScannerInfo;
    } ForestTrustData;
};
struct alignas( 4 ) _PROCESS_LDT_SIZE
{
    ULONG Length;
};
struct alignas( 4 ) _PROCESS_MEMBERSHIP_INFORMATION
{
    ULONG ServerSiloId;
};
struct alignas( 8 ) _PROCESS_WS_WATCH_INFORMATION_EX
{
    union alignas( 8 )
    {
        PROCESS_WS_WATCH_INFORMATION BasicInfo;
        struct alignas( 8 )
        {
            PVOID FaultingPc;
            PVOID FaultingVa;
        };
    };
    HANDLE FaultingThreadId;
    ULONG_PTR Flags;
};
struct alignas( 8 ) _THREAD_BASIC_INFORMATION
{
    NTSTATUS ExitStatus;
    PTEB TebBaseAddress;
    CLIENT_ID ClientId;
    KAFFINITY AffinityMask;
    KPRIORITY Priority;
    KPRIORITY BasePriority;
};
struct alignas( 2 ) _PROCESS_PRIORITY_CLASS_EX
{
    union alignas( 2 )
    {
        struct alignas( 2 )
        {
            USHORT ForegroundValid : 1;
            USHORT PriorityClassValid : 1;
        };
        USHORT AllFlags;
    };
    UCHAR PriorityClass;
    BOOLEAN Foreground;
};
struct alignas( 1 ) _PROCESS_FOREGROUND_BACKGROUND
{
    BOOLEAN Foreground;
};
struct alignas( 8 ) _PROCESS_DEVICEMAP_INFORMATION
{
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            HANDLE DirectoryHandle;
        } Set;
        struct alignas( 4 )
        {
            ULONG DriveMap;
            UCHAR DriveType[32];
        } Query;
    };
};
struct alignas( 8 ) _PROCESS_DEVICEMAP_INFORMATION_EX
{
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            HANDLE DirectoryHandle;
        } Set;
        struct alignas( 4 )
        {
            ULONG DriveMap;
            UCHAR DriveType[32];
        } Query;
    };
    ULONG Flags;
};
struct alignas( 4 ) _PROCESS_SESSION_INFORMATION
{
    ULONG SessionId;
};
struct alignas( 4 ) _PROCESS_HANDLE_TRACING_ENABLE
{
    ULONG Flags;
};
struct alignas( 4 ) _PROCESS_HANDLE_TRACING_ENABLE_EX
{
    ULONG Flags;
    ULONG TotalSlots;
};
struct alignas( 8 ) _PROCESS_HANDLE_TRACING_ENTRY
{
    HANDLE Handle;
    CLIENT_ID ClientId;
    ULONG Type;
    PVOID Stacks[16];
};
struct alignas( 8 ) _PROCESS_HANDLE_TRACING_QUERY
{
    HANDLE Handle;
    ULONG TotalTraces;
    PROCESS_HANDLE_TRACING_ENTRY HandleTrace[1];
};
struct alignas( 4 ) _RTL_BALANCED_NODE32
{
    union alignas( 4 )
    {
        ULONG Children[2];
        struct alignas( 4 )
        {
            ULONG Left;
            ULONG Right;
        };
    };
    union alignas( 4 )
    {
        ULONG Red : 1;
        ULONG Balance : 2;
        ULONG ParentValue;
    };
};
struct alignas( 8 ) _LDR_DATA_TABLE_ENTRY32
{
    LIST_ENTRY32 InLoadOrderLinks;
    LIST_ENTRY32 InMemoryOrderLinks;
    union alignas( 4 )
    {
        LIST_ENTRY32 InInitializationOrderLinks;
        LIST_ENTRY32 InProgressLinks;
    };
    ULONG DllBase;
    ULONG EntryPoint;
    ULONG SizeOfImage;
    UNICODE_STRING32 FullDllName;
    UNICODE_STRING32 BaseDllName;
    union alignas( 4 )
    {
        UCHAR FlagGroup[4];
        ULONG Flags;
        struct alignas( 4 )
        {
            ULONG PackagedBinary : 1;
            ULONG MarkedForRemoval : 1;
            ULONG ImageDll : 1;
            ULONG LoadNotificationsSent : 1;
            ULONG TelemetryEntryProcessed : 1;
            ULONG ProcessStaticImport : 1;
            ULONG InLegacyLists : 1;
            ULONG InIndexes : 1;
            ULONG ShimDll : 1;
            ULONG InExceptionTable : 1;
            ULONG ReservedFlags1 : 2;
            ULONG LoadInProgress : 1;
            ULONG LoadConfigProcessed : 1;
            ULONG EntryProcessed : 1;
            ULONG ProtectDelayLoad : 1;
            ULONG ReservedFlags3 : 2;
            ULONG DontCallForThreads : 1;
            ULONG ProcessAttachCalled : 1;
            ULONG ProcessAttachFailed : 1;
            ULONG CorDeferredValidate : 1;
            ULONG CorImage : 1;
            ULONG DontRelocate : 1;
            ULONG CorILOnly : 1;
            ULONG ChpeImage : 1;
            ULONG ReservedFlags5 : 2;
            ULONG Redirected : 1;
            ULONG ReservedFlags6 : 2;
            ULONG CompatDatabaseProcessed : 1;
        };
    };
    USHORT ObsoleteLoadCount;
    USHORT TlsIndex;
    LIST_ENTRY32 HashLinks;
    ULONG TimeDateStamp;
    ULONG EntryPointActivationContext;
    ULONG Lock;
    ULONG DdagNode;
    LIST_ENTRY32 NodeModuleLink;
    ULONG LoadContext;
    ULONG ParentDllBase;
    ULONG SwitchBackContext;
    RTL_BALANCED_NODE32 BaseAddressIndexNode;
    RTL_BALANCED_NODE32 MappingInfoIndexNode;
    ULONG OriginalBase;
    LARGE_INTEGER LoadTime;
    ULONG BaseNameHashValue;
    LDR_DLL_LOAD_REASON LoadReason;
    ULONG ImplicitPathOptions;
    ULONG ReferenceCount;
    ULONG DependentLoadFlags;
    UCHAR SigningLevel;
    ULONG CheckSum;
    ULONG ActivePatchImageBase;
    LDR_HOT_PATCH_STATE HotPatchState;
};
struct alignas( 8 ) _RTL_USER_PROCESS_INFORMATION
{
    ULONG Length;
    HANDLE ProcessHandle;
    HANDLE ThreadHandle;
    CLIENT_ID ClientId;
    SECTION_IMAGE_INFORMATION ImageInformation;
};
struct alignas( 8 ) _PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION
{
    ULONG Version;
    ULONG Reserved;
    PVOID Callback;
};
union alignas( 4 ) _PROCESS_AFFINITY_UPDATE_MODE
{
    ULONG Flags;
    struct alignas( 4 )
    {
        ULONG EnableAutoUpdate : 1;
        ULONG Permanent : 1;
        ULONG Reserved : 30;
    };
};
struct alignas( 8 ) _RTL_USER_PROCESS_EXTENDED_PARAMETERS
{
    USHORT Version;
    USHORT NodeNumber;
    PSECURITY_DESCRIPTOR ProcessSecurityDescriptor;
    PSECURITY_DESCRIPTOR ThreadSecurityDescriptor;
    HANDLE ParentProcess;
    HANDLE DebugPort;
    HANDLE TokenHandle;
    HANDLE JobHandle;
};
union alignas( 4 ) _PROCESS_MEMORY_ALLOCATION_MODE
{
    ULONG Flags;
    struct alignas( 4 )
    {
        ULONG TopDown : 1;
        ULONG Reserved : 31;
    };
};
struct alignas( 4 ) _PROCESS_HANDLE_INFORMATION
{
    ULONG HandleCount;
    ULONG HandleCountHighWatermark;
};
struct alignas( 8 ) _PROCESS_CYCLE_TIME_INFORMATION
{
    ULONGLONG AccumulatedCycles;
    ULONGLONG CurrentCycleCount;
};
struct alignas( 4 ) _PROCESS_WINDOW_INFORMATION
{
    ULONG WindowFlags;
    USHORT WindowTitleLength;
    WCHAR WindowTitle[1];
};
struct alignas( 8 ) _PROCESS_HANDLE_TABLE_ENTRY_INFO
{
    HANDLE HandleValue;
    SIZE_T HandleCount;
    SIZE_T PointerCount;
    ACCESS_MASK GrantedAccess;
    ULONG ObjectTypeIndex;
    ULONG HandleAttributes;
    ULONG Reserved;
};
struct alignas( 8 ) _PROCESS_HANDLE_SNAPSHOT_INFORMATION
{
    ULONG_PTR NumberOfHandles;
    ULONG_PTR Reserved;
    PROCESS_HANDLE_TABLE_ENTRY_INFO Handles[1];
};
struct alignas( 4 ) _PROCESS_MITIGATION_ACTIVATION_CONTEXT_TRUST_POLICY2
{
    union alignas( 4 )
    {
        ULONG Flags;
        struct alignas( 4 )
        {
            ULONG AssemblyManifestRedirectionTrust : 1;
            ULONG ReservedFlags : 31;
        };
    };
};
struct alignas( 4 ) _PROCESS_MITIGATION_POLICY_INFORMATION
{
    PROCESS_MITIGATION_POLICY Policy;
    union alignas( 4 )
    {
        PROCESS_MITIGATION_ASLR_POLICY ASLRPolicy;
        PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY StrictHandleCheckPolicy;
        PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY SystemCallDisablePolicy;
        PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY
        ExtensionPointDisablePolicy;
        PROCESS_MITIGATION_DYNAMIC_CODE_POLICY DynamicCodePolicy;
        PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY ControlFlowGuardPolicy;
        PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY SignaturePolicy;
        PROCESS_MITIGATION_FONT_DISABLE_POLICY FontDisablePolicy;
        PROCESS_MITIGATION_IMAGE_LOAD_POLICY ImageLoadPolicy;
        PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY SystemCallFilterPolicy;
        PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY PayloadRestrictionPolicy;
        PROCESS_MITIGATION_CHILD_PROCESS_POLICY ChildProcessPolicy;
        PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY SideChannelIsolationPolicy;
        PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY UserShadowStackPolicy;
        PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY RedirectionTrustPolicy;
        PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY UserPointerAuthPolicy;
        PROCESS_MITIGATION_SEHOP_POLICY SEHOPPolicy;
    };
};
struct alignas( 8 ) _PROCESS_DYNAMIC_FUNCTION_TABLE_INFORMATION
{
    _DYNAMIC_FUNCTION_TABLE* DynamicFunctionTable;
    BOOLEAN Remove;
};
struct alignas( 8 ) _DYNAMIC_FUNCTION_TABLE
{
    LIST_ENTRY ListEntry;
    PRUNTIME_FUNCTION FunctionTable;
    LARGE_INTEGER TimeStamp;
    ULONG64 MinimumAddress;
    ULONG64 MaximumAddress;
    ULONG64 BaseAddress;
    PGET_RUNTIME_FUNCTION_CALLBACK Callback;
    PVOID Context;
    PWSTR OutOfProcessCallbackDll;
    FUNCTION_TABLE_TYPE Type;
    ULONG EntryCount;
    RTL_BALANCED_NODE TreeNodeMin;
    RTL_BALANCED_NODE TreeNodeMax;
};
struct alignas( 4 ) _PROCESS_KEEPALIVE_COUNT_INFORMATION
{
    ULONG WakeCount;
    ULONG NoWakeCount;
};
struct alignas( 8 ) _PROCESS_REVOKE_FILE_HANDLES_INFORMATION
{
    UNICODE_STRING TargetDevicePath;
};
struct alignas( 4 ) _PROCESS_WORKING_SET_CONTROL
{
    ULONG Version;
    PROCESS_WORKING_SET_OPERATION Operation;
    ULONG Flags;
};
struct alignas( 1 ) _PS_PROTECTION
{
    union alignas( 1 )
    {
        UCHAR Level;
        struct alignas( 1 )
        {
            UCHAR Type : 3;
            UCHAR Audit : 1;
            UCHAR Signer : 4;
        };
    };
};
struct alignas( 4 ) _PROCESS_FAULT_INFORMATION
{
    ULONG FaultFlags;
    ULONG AdditionalInfo;
};
struct alignas( 8 ) _PROCESS_TELEMETRY_ID_INFORMATION
{
    ULONG HeaderSize;
    ULONG ProcessId;
    ULONGLONG ProcessStartKey;
    ULONGLONG CreateTime;
    ULONGLONG CreateInterruptTime;
    ULONGLONG CreateUnbiasedInterruptTime;
    ULONGLONG ProcessSequenceNumber;
    ULONGLONG SessionCreateTime;
    ULONG SessionId;
    ULONG BootId;
    ULONG ImageChecksum;
    ULONG ImageTimeDateStamp;
    ULONG UserSidOffset;
    ULONG ImagePathOffset;
    ULONG PackageNameOffset;
    ULONG RelativeAppNameOffset;
    ULONG CommandLineOffset;
};
struct alignas( 8 ) _PROCESS_COMMIT_RELEASE_INFORMATION
{
    ULONG Version;
    struct alignas( 4 )
    {
        ULONG Eligible : 1;
        ULONG ReleaseRepurposedMemResetCommit : 1;
        ULONG ForceReleaseMemResetCommit : 1;
        ULONG Spare : 29;
    };
    SIZE_T CommitDebt;
    SIZE_T CommittedMemResetSize;
    SIZE_T RepurposedMemResetSize;
};
struct alignas( 8 ) _PROCESS_JOB_MEMORY_INFO
{
    ULONGLONG SharedCommitUsage;
    ULONGLONG PrivateCommitUsage;
    ULONGLONG PeakPrivateCommitUsage;
    ULONGLONG PrivateCommitLimit;
    ULONGLONG TotalCommitLimit;
};
struct alignas( 4 ) _IMAGE_ARM64EC_CODE_RANGE_ENTRY_POINT
{
    ULONG StartRva;
    ULONG EndRva;
    ULONG EntryPoint;
};
struct alignas( 8 ) _VR_LOAD_DIFFERENCING_HIVE_FOR_HOST
{
    ULONG LoadFlags;
    ULONG Flags;
    USHORT KeyPathLength;
    USHORT HivePathLength;
    USHORT NextLayerKeyPathLength;
    HANDLE FileAccessToken;
    WCHAR Strings[1];
};
struct alignas( 8 ) _PROCESS_WAKE_INFORMATION
{
    ULONGLONG NotificationChannel;
    ULONG WakeCounters[7];
    PJOBOBJECT_WAKE_FILTER WakeFilter;
};
struct alignas( 4 ) _MUP_FSCTL_SURROGATE_PROVIDER_ENTRY
{
    ULONG TotalLength;
    LONG ReferenceCount;
    ULONG SurrogateType;
    ULONG SurrogateState;
    ULONG SurrogatePriority;
    USHORT SurrogateNameLength;
    WCHAR SurrogateName[1];
};
struct alignas( 8 ) _MANAGE_WRITES_TO_EXECUTABLE_MEMORY
{
    ULONG Version : 8;
    ULONG ProcessEnableWriteExceptions : 1;
    ULONG ThreadAllowWrites : 1;
    ULONG Spare : 22;
    PVOID KernelWriteToExecutableSignal;
};
struct alignas( 4 ) _POWER_THROTTLING_THREAD_STATE
{
    ULONG Version;
    ULONG ControlMask;
    ULONG StateMask;
};
union alignas( 1 ) _PROCESS_READWRITEVM_LOGGING_INFORMATION
{
    UCHAR Flags;
    struct alignas( 1 )
    {
        UCHAR EnableReadVmLogging : 1;
        UCHAR EnableWriteVmLogging : 1;
        UCHAR Unused : 6;
    };
};
struct alignas( 8 ) _PROCESS_UPTIME_INFORMATION
{
    ULONGLONG QueryInterruptTime;
    ULONGLONG QueryUnbiasedTime;
    ULONGLONG EndInterruptTime;
    ULONGLONG TimeSinceCreation;
    ULONGLONG Uptime;
    ULONGLONG SuspendedTime;
    struct alignas( 4 )
    {
        ULONG HangCount : 4;
        ULONG GhostCount : 4;
        ULONG Crashed : 1;
        ULONG Terminated : 1;
    };
};
union alignas( 4 ) _PROCESS_SYSTEM_RESOURCE_MANAGEMENT
{
    ULONG Flags;
    struct alignas( 4 )
    {
        ULONG Foreground : 1;
        ULONG Reserved : 31;
    };
};
struct alignas( 8 ) _PROCESS_SECURITY_DOMAIN_INFORMATION
{
    ULONGLONG SecurityDomain;
};
struct alignas( 8 ) _PROCESS_COMBINE_SECURITY_DOMAINS_INFORMATION
{
    HANDLE ProcessHandle;
};
union alignas( 4 ) _PROCESS_LOGGING_INFORMATION
{
    ULONG Flags;
    struct alignas( 4 )
    {
        ULONG EnableReadVmLogging : 1;
        ULONG EnableWriteVmLogging : 1;
        ULONG EnableProcessSuspendResumeLogging : 1;
        ULONG EnableThreadSuspendResumeLogging : 1;
        ULONG EnableLocalExecProtectVmLogging : 1;
        ULONG EnableRemoteExecProtectVmLogging : 1;
        ULONG EnableImpersonationLogging : 1;
        ULONG Reserved : 25;
    };
};
struct alignas( 4 ) _PROCESS_LEAP_SECOND_INFORMATION
{
    ULONG Flags;
    ULONG Reserved;
};
struct alignas( 8 ) _PROCESS_FIBER_SHADOW_STACK_ALLOCATION_INFORMATION
{
    ULONGLONG ReserveSize;
    ULONGLONG CommitSize;
    ULONG PreferredNode;
    ULONG Reserved;
    PVOID Ssp;
};
struct alignas( 8 ) _PROCESS_FREE_FIBER_SHADOW_STACK_ALLOCATION_INFORMATION
{
    PVOID Ssp;
};
struct alignas( 4 ) _PROCESS_SYSCALL_PROVIDER_INFORMATION
{
    GUID ProviderId;
    UCHAR Level;
};
struct alignas( 8 ) _LSA_AUTH_CALLBACKS
{
    PFN_LSA_CALL_AUTH_PKG LsaCallAuthPkgFn;
    PFN_LSA_DEREGISTER_PROC LsaDeregisterProcFn;
    PFN_LSA_FREE_BUFFER LsaFreeReturnBufferFn;
    PFN_LSA_LOGON_USER LsaLogonUserFn;
    PFN_LOOKUP_AUTH_PKG LsaLookupAuthPkgFn;
    PFN_LSA_REGISTER_PROC LsaRegisterProcFn;
};
struct alignas( 8 ) _PROCESS_TEB_VALUE_INFORMATION
{
    ULONG ThreadId;
    ULONG TebOffset;
    ULONG_PTR Value;
};
struct alignas( 8 ) _SEGMENT_HEAP_PERFORMANCE_COUNTER_INFORMATION
{
    SIZE_T SegmentReserveSize;
    SIZE_T SegmentCommitSize;
    ULONG_PTR SegmentCount;
    SIZE_T AllocatedSize;
    SIZE_T LargeAllocReserveSize;
    SIZE_T LargeAllocCommitSize;
};
struct alignas( 8 ) _HEAP_PERFORMANCE_COUNTERS_INFORMATION
{
    ULONG Size;
    ULONG Version;
    ULONG HeapIndex;
    ULONG LastHeapIndex;
    PVOID BaseAddress;
    SIZE_T ReserveSize;
    SIZE_T CommitSize;
    ULONG SegmentCount;
    SIZE_T LargeUCRMemory;
    ULONG UCRLength;
    SIZE_T AllocatedSpace;
    SIZE_T FreeSpace;
    ULONG FreeListLength;
    ULONG Contention;
    ULONG VirtualBlocks;
    ULONG CommitRate;
    ULONG DecommitRate;
    SEGMENT_HEAP_PERFORMANCE_COUNTER_INFORMATION SegmentHeapPerfInformation;
};
struct alignas( 4 ) _PF_MIN_WS_AGE_RATE_CONTROL
{
    ULONG Version;
    ULONG SecondsToOldestAge;
};
struct alignas( 8 ) _THREAD_CYCLE_TIME_INFORMATION
{
    ULONGLONG AccumulatedCycles;
    ULONGLONG CurrentCycleCount;
};
struct alignas( 8 ) _PROCESS_HEAP_INFORMATION
{
    SIZE_T ReserveSize;
    SIZE_T CommitSize;
    ULONG NumberOfHeaps;
    ULONG_PTR FirstHeapInformationOffset;
};
struct alignas( 8 ) _HEAP_INFORMATION
{
    PVOID Address;
    ULONG Mode;
    SIZE_T ReserveSize;
    SIZE_T CommitSize;
    ULONG_PTR FirstRegionInformationOffset;
    ULONG_PTR NextHeapInformationOffset;
};
struct alignas( 8 ) _HEAP_REGION_INFORMATION
{
    PVOID Address;
    SIZE_T ReserveSize;
    SIZE_T CommitSize;
    ULONG_PTR FirstRangeInformationOffset;
    ULONG_PTR NextRegionInformationOffset;
};
struct alignas( 8 ) _HEAP_RANGE_INFORMATION
{
    PVOID Address;
    SIZE_T Size;
    ULONG Type;
    ULONG Protection;
    ULONG_PTR FirstBlockInformationOffset;
    ULONG_PTR NextRangeInformationOffset;
};
struct alignas( 8 ) _HEAP_BLOCK_INFORMATION
{
    PVOID Address;
    ULONG Flags;
    SIZE_T DataSize;
    ULONG_PTR OverheadSize;
    ULONG_PTR NextBlockInformationOffset;
};
struct alignas( 8 ) _HEAP_INFORMATION_ITEM
{
    ULONG Level;
    SIZE_T Size;
    union alignas( 8 )
    {
        PROCESS_HEAP_INFORMATION ProcessHeapInformation;
        HEAP_INFORMATION HeapInformation;
        HEAP_REGION_INFORMATION HeapRegionInformation;
        HEAP_RANGE_INFORMATION HeapRangeInformation;
        HEAP_BLOCK_INFORMATION HeapBlockInformation;
        HEAP_PERFORMANCE_COUNTERS_INFORMATION HeapPerfInformation;
        ULONG_PTR DynamicStart;
    };
};
struct alignas( 4 ) _THREAD_LOCK_OWNERSHIP
{
    ULONG SrwLock[1];
};
struct alignas( 8 ) _SCHEDULER_SHARED_DATA_SLOT_INFORMATION
{
    SCHEDULER_SHARED_DATA_SLOT_ACTION Action;
    PVOID SchedulerSharedDataHandle;
    PVOID Slot;
};
struct alignas( 8 ) _THREAD_TEB_INFORMATION
{
    PVOID TebInformation;
    ULONG TebOffset;
    ULONG BytesToRead;
};
struct alignas( 8 ) _COUNTER_READING
{
    HARDWARE_COUNTER_TYPE Type;
    ULONG Index;
    ULONG64 Start;
    ULONG64 Total;
};
struct alignas( 8 ) _THREAD_PERFORMANCE_DATA
{
    USHORT Size;
    USHORT Version;
    PROCESSOR_NUMBER ProcessorNumber;
    ULONG ContextSwitches;
    ULONG HwCountersCount;
    ULONG64 UpdateCount;
    ULONG64 WaitReasonBitMap;
    ULONG64 HardwareCounters;
    COUNTER_READING CycleTime;
    COUNTER_READING HwCounters[16];
};
struct alignas( 8 ) _THREAD_PROFILING_INFORMATION
{
    ULONG64 HardwareCounters;
    ULONG Flags;
    ULONG Enable;
    PTHREAD_PERFORMANCE_DATA PerformanceData;
};
struct alignas( 16 ) _RTL_UMS_CONTEXT
{
    SINGLE_LIST_ENTRY Link;
    CONTEXT Context;
    PVOID Teb;
    PVOID UserContext;
    volatile ULONG ScheduledThread : 1;
    volatile ULONG Suspended : 1;
    volatile ULONG VolatileContext : 1;
    volatile ULONG Terminated : 1;
    volatile ULONG DebugActive : 1;
    volatile ULONG RunningOnSelfThread : 1;
    volatile ULONG DenyRunningOnSelfThread : 1;
    volatile LONG Flags;
    volatile ULONG64 KernelUpdateLock : 2;
    volatile ULONG64 PrimaryClientID : 62;
    volatile ULONG64 ContextLock;
    _RTL_UMS_CONTEXT* PrimaryUmsContext;
    ULONG SwitchCount;
    ULONG KernelYieldCount;
    ULONG MixedYieldCount;
    ULONG YieldCount;
};
struct alignas( 8 ) _RTL_UMS_COMPLETION_LIST
{
    PSINGLE_LIST_ENTRY ThreadListHead;
    PVOID CompletionEvent;
    ULONG CompletionFlags;
    SINGLE_LIST_ENTRY InternalListHead;
};
struct alignas( 8 ) _THREAD_UMS_INFORMATION
{
    THREAD_UMS_INFORMATION_COMMAND Command;
    PRTL_UMS_COMPLETION_LIST CompletionList;
    PRTL_UMS_CONTEXT UmsContext;
    union alignas( 4 )
    {
        ULONG Flags;
        struct alignas( 4 )
        {
            ULONG IsUmsSchedulerThread : 1;
            ULONG IsUmsWorkerThread : 1;
            ULONG SpareBits : 30;
        };
    };
};
struct alignas( 8 ) _THREAD_NAME_INFORMATION
{
    UNICODE_STRING ThreadName;
};
struct alignas( 4 ) _ALPC_WORK_ON_BEHALF_TICKET
{
    ULONG ThreadId;
    ULONG ThreadCreationTimeLow;
};
struct alignas( 4 ) _RTL_WORK_ON_BEHALF_TICKET_EX
{
    ALPC_WORK_ON_BEHALF_TICKET Ticket;
    union alignas( 4 )
    {
        ULONG Flags;
        struct alignas( 4 )
        {
            ULONG CurrentThread : 1;
            ULONG Reserved1 : 31;
        };
    };
    ULONG Reserved2;
};
struct alignas( 4 ) _THREAD_INDEX_INFORMATION
{
    ULONG Index;
    ULONG Sequence;
};
struct alignas( 8 ) _APC_CALLBACK_DATA_CONTEXT
{
    ULONG_PTR Parameter;
    PCONTEXT ContextRecord;
    ULONG_PTR Reserved0;
    ULONG_PTR Reserved1;
};
struct alignas( 4 ) _SE_SAFE_OPEN_PROMPT_RESULTS
{
    SE_SAFE_OPEN_PROMPT_EXPERIENCE_RESULTS Results;
    WCHAR Path[260];
};
struct alignas( 4 ) _PROC_THREAD_BNOISOLATION_ATTRIBUTE
{
    BOOL IsolationEnabled;
    WCHAR IsolationPrefix[136];
};
struct alignas( 8 ) _PEB32
{
    BOOLEAN InheritedAddressSpace;
    BOOLEAN ReadImageFileExecOptions;
    BOOLEAN BeingDebugged;
    union alignas( 1 )
    {
        BOOLEAN BitField;
        struct alignas( 1 )
        {
            BOOLEAN ImageUsesLargePages : 1;
            BOOLEAN IsProtectedProcess : 1;
            BOOLEAN IsImageDynamicallyRelocated : 1;
            BOOLEAN SkipPatchingUser32Forwarders : 1;
            BOOLEAN IsPackagedProcess : 1;
            BOOLEAN IsAppContainer : 1;
            BOOLEAN IsProtectedProcessLight : 1;
            BOOLEAN IsLongPathAwareProcess : 1;
        };
    };
    ULONG Mutant;
    ULONG ImageBaseAddress;
    ULONG Ldr;
    ULONG ProcessParameters;
    ULONG SubSystemData;
    ULONG ProcessHeap;
    ULONG FastPebLock;
    ULONG AtlThunkSListPtr;
    ULONG IFEOKey;
    union alignas( 4 )
    {
        ULONG CrossProcessFlags;
        struct alignas( 4 )
        {
            ULONG ProcessInJob : 1;
            ULONG ProcessInitializing : 1;
            ULONG ProcessUsingVEH : 1;
            ULONG ProcessUsingVCH : 1;
            ULONG ProcessUsingFTH : 1;
            ULONG ReservedBits0 : 27;
        };
    };
    union alignas( 4 )
    {
        ULONG KernelCallbackTable;
        ULONG UserSharedInfoPtr;
    };
    ULONG SystemReserved;
    ULONG AtlThunkSListPtr32;
    ULONG ApiSetMap;
    ULONG TlsExpansionCounter;
    ULONG TlsBitmap;
    ULONG TlsBitmapBits[2];
    ULONG ReadOnlySharedMemoryBase;
    ULONG SharedData;
    ULONG ReadOnlyStaticServerData;
    ULONG AnsiCodePageData;
    ULONG OemCodePageData;
    ULONG UnicodeCaseTableData;
    ULONG NumberOfProcessors;
    ULONG NtGlobalFlag;
    LARGE_INTEGER CriticalSectionTimeout;
    ULONG HeapSegmentReserve;
    ULONG HeapSegmentCommit;
    ULONG HeapDeCommitTotalFreeThreshold;
    ULONG HeapDeCommitFreeBlockThreshold;
    ULONG NumberOfHeaps;
    ULONG MaximumNumberOfHeaps;
    ULONG ProcessHeaps;
    ULONG GdiSharedHandleTable;
    ULONG ProcessStarterHelper;
    ULONG GdiDCAttributeList;
    ULONG LoaderLock;
    ULONG OSMajorVersion;
    ULONG OSMinorVersion;
    USHORT OSBuildNumber;
    USHORT OSCSDVersion;
    ULONG OSPlatformId;
    ULONG ImageSubsystem;
    ULONG ImageSubsystemMajorVersion;
    ULONG ImageSubsystemMinorVersion;
    ULONG ActiveProcessAffinityMask;
    GDI_HANDLE_BUFFER32 GdiHandleBuffer;
    ULONG PostProcessInitRoutine;
    ULONG TlsExpansionBitmap;
    ULONG TlsExpansionBitmapBits[32];
    ULONG SessionId;
    ULARGE_INTEGER AppCompatFlags;
    ULARGE_INTEGER AppCompatFlagsUser;
    ULONG pShimData;
    ULONG AppCompatInfo;
    UNICODE_STRING32 CSDVersion;
    ULONG ActivationContextData;
    ULONG ProcessAssemblyStorageMap;
    ULONG SystemDefaultActivationContextData;
    ULONG SystemAssemblyStorageMap;
    ULONG MinimumStackCommit;
    ULONG SparePointers[2];
    ULONG PatchLoaderData;
    ULONG ChpeV2ProcessInfo;
    ULONG AppModelFeatureState;
    ULONG SpareUlongs[2];
    USHORT ActiveCodePage;
    USHORT OemCodePage;
    USHORT UseCaseMapping;
    USHORT UnusedNlsField;
    ULONG WerRegistrationData;
    ULONG WerShipAssertPtr;
    union alignas( 4 )
    {
        ULONG pContextData;
        ULONG pUnused;
        ULONG EcCodeBitMap;
    };
    ULONG pImageHeaderHash;
    union alignas( 4 )
    {
        ULONG TracingFlags;
        struct alignas( 4 )
        {
            ULONG HeapTracingEnabled : 1;
            ULONG CritSecTracingEnabled : 1;
            ULONG LibLoaderTracingEnabled : 1;
            ULONG SpareTracingBits : 29;
        };
    };
    ULONGLONG CsrServerReadOnlySharedMemoryBase;
    ULONG TppWorkerpListLock;
    LIST_ENTRY32 TppWorkerpList;
    ULONG WaitOnAddressHashTable[128];
    ULONG TelemetryCoverageHeader;
    ULONG CloudFileFlags;
    ULONG CloudFileDiagFlags;
    CHAR PlaceholderCompatibilityMode;
    CHAR PlaceholderCompatibilityModeReserved[7];
    ULONG LeapSecondData;
    union alignas( 4 )
    {
        ULONG LeapSecondFlags;
        struct alignas( 4 )
        {
            ULONG SixtySecondEnabled : 1;
            ULONG Reserved : 31;
        };
    };
    ULONG NtGlobalFlag2;
    ULONGLONG ExtendedFeatureDisableMask;
};
struct alignas( 4 ) _ALPC_MESSAGE_HANDLE_INFORMATION
{
    ULONG Index;
    ULONG Flags;
    ULONG Handle;
    ULONG ObjectType;
    ACCESS_MASK GrantedAccess;
};
struct alignas( 8 ) _RTL_HEAP_TAG
{
    ULONG NumberOfAllocations;
    ULONG NumberOfFrees;
    SIZE_T BytesAllocated;
    USHORT TagIndex;
    USHORT CreatorBackTraceIndex;
    WCHAR TagName[24];
};
struct alignas( 8 ) _RTL_HEAP_INFORMATION_V1
{
    PVOID BaseAddress;
    ULONG Flags;
    USHORT EntryOverhead;
    USHORT CreatorBackTraceIndex;
    SIZE_T BytesAllocated;
    SIZE_T BytesCommitted;
    ULONG NumberOfTags;
    ULONG NumberOfEntries;
    ULONG NumberOfPseudoTags;
    ULONG PseudoTagGranularity;
    ULONG Reserved[5];
    PRTL_HEAP_TAG Tags;
    PRTL_HEAP_ENTRY Entries;
};
struct alignas( 8 ) _RTL_PROCESS_HEAPS_V1
{
    ULONG NumberOfHeaps;
    RTL_HEAP_INFORMATION_V1 Heaps[1];
};
struct alignas( 8 ) _PS_MEMORY_RESERVE
{
    PVOID ReserveAddress;
    SIZE_T ReserveSize;
};
struct alignas( 4 ) _PS_STD_HANDLE_INFO
{
    union alignas( 4 )
    {
        ULONG Flags;
        struct alignas( 4 )
        {
            ULONG StdHandleState : 2;
            ULONG PseudoHandleMask : 3;
        };
    };
    ULONG StdHandleSubsystemType;
};
union alignas( 1 ) _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS
{
    UCHAR Trustlet : 1;
    UCHAR Ntos : 1;
    UCHAR WriteHandle : 1;
    UCHAR ReadHandle : 1;
    UCHAR Reserved : 4;
    UCHAR AccessRights;
};
struct alignas( 4 ) _PS_TRUSTLET_ATTRIBUTE_TYPE
{
    union alignas( 4 )
    {
        struct alignas( 1 )
        {
            UCHAR Version;
            UCHAR DataCount;
            UCHAR SemanticType;
            PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS AccessRights;
        };
        ULONG AttributeType;
    };
};
struct alignas( 4 ) _PS_TRUSTLET_ATTRIBUTE_HEADER
{
    PS_TRUSTLET_ATTRIBUTE_TYPE AttributeType;
    ULONG InstanceNumber : 8;
    ULONG Reserved : 24;
};
struct alignas( 8 ) _PS_TRUSTLET_ATTRIBUTE_DATA
{
    PS_TRUSTLET_ATTRIBUTE_HEADER Header;
    ULONGLONG Data[1];
};
struct alignas( 8 ) _PS_TRUSTLET_CREATE_ATTRIBUTES
{
    ULONGLONG TrustletIdentity;
    PS_TRUSTLET_ATTRIBUTE_DATA Attributes[1];
};
struct alignas( 8 ) _PS_BNO_ISOLATION_PARAMETERS
{
    UNICODE_STRING IsolationPrefix;
    ULONG HandleCount;
    PVOID* Handles;
    BOOLEAN IsolationEnabled;
};
union alignas( 1 ) _PS_PROCESS_CREATION_SVE_VECTOR_LENGTH
{
    ULONG VectorLength : 24;
    ULONG FlagsReserved : 8;
};
struct alignas( 8 ) _PS_CREATE_INFO
{
    SIZE_T Size;
    PS_CREATE_STATE State;
    union alignas( 8 )
    {
        struct alignas( 4 )
        {
            union alignas( 4 )
            {
                ULONG InitFlags;
                struct alignas( 2 )
                {
                    UCHAR WriteOutputOnExit : 1;
                    UCHAR DetectManifest : 1;
                    UCHAR IFEOSkipDebugger : 1;
                    UCHAR IFEODoNotPropagateKeyState : 1;
                    UCHAR SpareBits1 : 4;
                    UCHAR SpareBits2 : 8;
                    USHORT ProhibitedImageCharacteristics : 16;
                };
            };
            ACCESS_MASK AdditionalFileAccess;
        } InitState;
        struct alignas( 8 )
        {
            HANDLE FileHandle;
        } FailSection;
        struct alignas( 2 )
        {
            USHORT DllCharacteristics;
        } ExeFormat;
        struct alignas( 8 )
        {
            HANDLE IFEOKey;
        } ExeName;
        struct alignas( 8 )
        {
            union alignas( 4 )
            {
                ULONG OutputFlags;
                struct alignas( 2 )
                {
                    UCHAR ProtectedProcess : 1;
                    UCHAR AddressSpaceOverride : 1;
                    UCHAR DevOverrideEnabled : 1;
                    UCHAR ManifestDetected : 1;
                    UCHAR ProtectedProcessLight : 1;
                    UCHAR SpareBits1 : 3;
                    UCHAR SpareBits2 : 8;
                    USHORT SpareBits3 : 16;
                };
            };
            HANDLE FileHandle;
            HANDLE SectionHandle;
            ULONGLONG UserProcessParametersNative;
            ULONG UserProcessParametersWow64;
            ULONG CurrentParameterFlags;
            ULONGLONG PebAddressNative;
            ULONG PebAddressWow64;
            ULONGLONG ManifestAddress;
            ULONG ManifestSize;
        } SuccessState;
    };
};
union alignas( 8 ) _RTL_IMAGE_MITIGATION_POLICY
{
    struct alignas( 8 )
    {
        ULONG64 AuditState : 2;
        ULONG64 AuditFlag : 1;
        ULONG64 EnableAdditionalAuditingOption : 1;
        ULONG64 Reserved : 60;
    };
    struct alignas( 8 )
    {
        ULONG64 PolicyState : 2;
        ULONG64 AlwaysInherit : 1;
        ULONG64 EnableAdditionalPolicyOption : 1;
        ULONG64 AuditReserved : 60;
    };
};
struct alignas( 8 ) _RTL_IMAGE_MITIGATION_DEP_POLICY
{
    RTL_IMAGE_MITIGATION_POLICY Dep;
};
struct alignas( 4 ) _FILE_FULL_EA_INFORMATION
{
    ULONG NextEntryOffset;
    UCHAR Flags;
    UCHAR EaNameLength;
    USHORT EaValueLength;
    CHAR EaName[1];
};
struct alignas( 4 ) _PO_WAKE_SOURCE_HEADER
{
    PO_WAKE_SOURCE_TYPE Type;
    ULONG Size;
};
struct alignas( 8 ) _DIAGNOSTIC_BUFFER
{
    SIZE_T Size;
    REQUESTER_TYPE CallerType;
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            SIZE_T ProcessImageNameOffset;
            ULONG ProcessId;
            ULONG ServiceTag;
        };
        struct alignas( 8 )
        {
            SIZE_T DeviceDescriptionOffset;
            SIZE_T DevicePathOffset;
        };
    };
    SIZE_T ReasonOffset;
};
struct alignas( 8 ) _PO_WAKE_SOURCE_TIMER
{
    PO_WAKE_SOURCE_HEADER Header;
    DIAGNOSTIC_BUFFER Reason;
};
struct alignas( 4 ) _PO_WAKE_SOURCE_INTERNAL
{
    PO_WAKE_SOURCE_HEADER Header;
    PO_INTERNAL_WAKE_SOURCE_TYPE InternalWakeSourceType;
};
struct alignas( 8 ) _JOBOBJECT_EXTENDED_ACCOUNTING_INFORMATION
{
    JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
    IO_COUNTERS IoInfo;
    PROCESS_DISK_COUNTERS DiskIoInfo;
    ULONG64 ContextSwitches;
    LARGE_INTEGER TotalCycleTime;
    ULONG64 ReadyTime;
    PROCESS_ENERGY_VALUES EnergyValues;
};
struct alignas( 8 ) _POWER_REQUEST
{
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            ULONG SupportedRequestMask;
            ULONG PowerRequestCount[3];
            DIAGNOSTIC_BUFFER DiagnosticBuffer;
        } V1;
        struct alignas( 8 )
        {
            ULONG SupportedRequestMask;
            ULONG PowerRequestCount[9];
            DIAGNOSTIC_BUFFER DiagnosticBuffer;
        } V2;
        struct alignas( 8 )
        {
            ULONG SupportedRequestMask;
            ULONG PowerRequestCount[5];
            DIAGNOSTIC_BUFFER DiagnosticBuffer;
        } V3;
        struct alignas( 8 )
        {
            ULONG SupportedRequestMask;
            ULONG PowerRequestCount[6];
            DIAGNOSTIC_BUFFER DiagnosticBuffer;
        } V4;
    };
};
struct alignas( 8 ) _JOBOBJECT_WAKE_INFORMATION
{
    HANDLE NotificationChannel;
    ULONG64 WakeCounters[7];
};
struct alignas( 8 ) _JOBOBJECT_WAKE_INFORMATION_V1
{
    HANDLE NotificationChannel;
    ULONG64 WakeCounters[4];
};
struct alignas( 8 ) _JOBOBJECT_INTERFERENCE_INFORMATION
{
    ULONG64 Count;
};
struct alignas( 4 ) _JOBOBJECT_FREEZE_INFORMATION
{
    union alignas( 4 )
    {
        ULONG Flags;
        struct alignas( 4 )
        {
            ULONG FreezeOperation : 1;
            ULONG FilterOperation : 1;
            ULONG SwapOperation : 1;
            ULONG Reserved : 29;
        };
    };
    BOOLEAN Freeze;
    BOOLEAN Swap;
    UCHAR Reserved0[2];
    JOBOBJECT_WAKE_FILTER WakeFilter;
};
struct alignas( 4 ) _JOBOBJECT_CONTAINER_IDENTIFIER_V2
{
    GUID ContainerId;
    GUID ContainerTelemetryId;
    ULONG JobId;
};
struct alignas( 8 ) _JOBOBJECT_MEMORY_USAGE_INFORMATION
{
    ULONG64 JobMemory;
    ULONG64 PeakJobMemoryUsed;
};
struct alignas( 8 ) _JOBOBJECT_MEMORY_USAGE_INFORMATION_V2
{
    JOBOBJECT_MEMORY_USAGE_INFORMATION BasicInfo;
    ULONG64 JobSharedMemory;
    ULONG64 Reserved[2];
};
struct alignas( 8 ) _SILOOBJECT_ROOT_DIRECTORY
{
    union alignas( 8 )
    {
        ULONG ControlFlags;
        UNICODE_STRING Path;
    };
};
struct alignas( 8 ) _SERVERSILO_INIT_INFORMATION
{
    HANDLE DeleteEvent;
    BOOLEAN IsDownlevelContainer;
};
struct alignas( 8 ) _JOBOBJECT_ENERGY_TRACKING_STATE
{
    ULONG64 Value;
    ULONG UpdateMask;
    ULONG DesiredState;
};
struct alignas( 4 ) _JOBOBJECT_IO_PRIORITY_LIMIT
{
    JOBOBJECT_IO_PRIORITY_LIMIT_FLAGS Flags;
    ULONG Priority;
};
struct alignas( 4 ) _JOBOBJECT_PAGE_PRIORITY_LIMIT
{
    JOBOBJECT_PAGE_PRIORITY_LIMIT_FLAGS Flags;
    ULONG Priority;
};
struct alignas( 4 ) _SERVERSILO_DIAGNOSTIC_INFORMATION
{
    NTSTATUS ExitStatus;
    WCHAR CriticalProcessName[15];
};
struct alignas( 8 ) _JOBOBJECT_NETWORK_ACCOUNTING_INFORMATION
{
    ULONG64 DataBytesIn;
    ULONG64 DataBytesOut;
};
struct alignas( 8 ) _NTPSS_MEMORY_BULK_INFORMATION
{
    ULONG QueryFlags;
    ULONG NumberOfEntries;
    PVOID NextValidAddress;
};
struct alignas( 8 ) _DBGKM_EXCEPTION
{
    EXCEPTION_RECORD ExceptionRecord;
    ULONG FirstChance;
};
struct alignas( 4 ) _DBGKM_EXIT_THREAD
{
    NTSTATUS ExitStatus;
};
struct alignas( 4 ) _DBGKM_EXIT_PROCESS
{
    NTSTATUS ExitStatus;
};
struct alignas( 4 ) _SYSTEM_POWER_INFORMATION
{
    ULONG MaxIdlenessAllowed;
    ULONG Idleness;
    ULONG TimeRemaining;
    UCHAR CoolingMode;
};
struct alignas( 8 ) _SYSTEM_HIBERFILE_INFORMATION
{
    ULONG NumberOfMcbPairs;
    LARGE_INTEGER Mcb[1];
};
struct alignas( 8 ) _DBGUI_CREATE_THREAD
{
    HANDLE HandleToThread;
    DBGKM_CREATE_THREAD NewThread;
};
struct alignas( 4 ) _SYSTEM_POWER_STATE_DISABLE_REASON
{
    BOOLEAN AffectedState[8];
    ULONG PowerReasonCode;
    ULONG PowerReasonLength;
};
struct alignas( 8 ) _DBGUI_WAIT_STATE_CHANGE
{
    DBG_STATE NewState;
    CLIENT_ID AppClientId;
    union alignas( 8 )
    {
        DBGKM_EXCEPTION Exception;
        DBGUI_CREATE_THREAD CreateThread;
        DBGUI_CREATE_PROCESS CreateProcessInfo;
        DBGKM_EXIT_THREAD ExitThread;
        DBGKM_EXIT_PROCESS ExitProcess;
        DBGKM_LOAD_DLL LoadDll;
        DBGKM_UNLOAD_DLL UnloadDll;
    } StateInfo;
};
struct alignas( 4 ) _EXTENDED_CREATE_DUAL_OPLOCK_KEYS
{
    GUID ParentOplockKey;
    GUID TargetOplockKey;
};
struct alignas( 8 ) _EXTENDED_CREATE_INFORMATION
{
    LONGLONG ExtendedCreateFlags;
    PVOID EaBuffer;
    ULONG EaLength;
};
struct alignas( 8 ) _EXTENDED_CREATE_INFORMATION_32
{
    LONGLONG ExtendedCreateFlags;
    void* __ptr32 EaBuffer;
    ULONG EaLength;
};
struct alignas( 8 ) _FILE_BASIC_INFORMATION
{
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    ULONG FileAttributes;
};
struct alignas( 4 ) _KEY_VALUE_LAYER_INFORMATION
{
    ULONG IsTombstone : 1;
    ULONG Reserved : 31;
};
struct alignas( 8 ) _FILE_INTERNAL_INFORMATION
{
    union alignas( 8 )
    {
        ULARGE_INTEGER IndexNumber;
        struct alignas( 8 )
        {
            ULONGLONG MftRecordIndex : 48;
            ULONGLONG SequenceNumber : 16;
        };
    };
};
struct alignas( 8 ) _MOUNTMGR_SILO_ARRIVAL_INPUT
{
    HANDLE JobHandle;
};
struct alignas( 8 ) _FILE_POSITION_INFORMATION
{
    LARGE_INTEGER CurrentByteOffset;
};
struct alignas( 4 ) _FILE_MODE_INFORMATION
{
    ULONG Mode;
};
struct alignas( 4 ) _FILE_ALIGNMENT_INFORMATION
{
    ULONG AlignmentRequirement;
};
struct alignas( 4 ) _FILE_NAME_INFORMATION
{
    ULONG FileNameLength;
    WCHAR FileName[1];
};
struct alignas( 8 ) _FILE_ALL_INFORMATION
{
    FILE_BASIC_INFORMATION BasicInformation;
    FILE_STANDARD_INFORMATION StandardInformation;
    FILE_INTERNAL_INFORMATION InternalInformation;
    FILE_EA_INFORMATION EaInformation;
    FILE_ACCESS_INFORMATION AccessInformation;
    FILE_POSITION_INFORMATION PositionInformation;
    FILE_MODE_INFORMATION ModeInformation;
    FILE_ALIGNMENT_INFORMATION AlignmentInformation;
    FILE_NAME_INFORMATION NameInformation;
};
struct alignas( 8 ) _FILE_NETWORK_OPEN_INFORMATION
{
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    ULONG FileAttributes;
};
struct alignas( 4 ) _FILE_ATTRIBUTE_TAG_INFORMATION
{
    ULONG FileAttributes;
    ULONG ReparseTag;
};
struct alignas( 8 ) _FILE_ALLOCATION_INFORMATION
{
    LARGE_INTEGER AllocationSize;
};
struct alignas( 8 ) _FILE_COMPRESSION_INFORMATION
{
    LARGE_INTEGER CompressedFileSize;
    USHORT CompressionFormat;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved[3];
};
struct alignas( 1 ) _FILE_DISPOSITION_INFORMATION
{
    BOOLEAN DeleteFileW;
};
struct alignas( 8 ) _FILE_END_OF_FILE_INFORMATION
{
    LARGE_INTEGER EndOfFile;
};
struct alignas( 8 ) _FILE_END_OF_FILE_INFORMATION_EX
{
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER PagingFileSizeInMM;
    LARGE_INTEGER PagingFileMaxSize;
    ULONG Flags;
};
struct alignas( 8 ) _FILE_VALID_DATA_LENGTH_INFORMATION
{
    LARGE_INTEGER ValidDataLength;
};
struct alignas( 8 ) _FILE_LINK_INFORMATION
{
    BOOLEAN ReplaceIfExists;
    HANDLE RootDirectory;
    ULONG FileNameLength;
    WCHAR FileName[1];
};
struct alignas( 8 ) _FILE_LINK_INFORMATION_EX
{
    ULONG Flags;
    HANDLE RootDirectory;
    ULONG FileNameLength;
    WCHAR FileName[1];
};
struct alignas( 8 ) _FILE_MOVE_CLUSTER_INFORMATION
{
    ULONG ClusterCount;
    HANDLE RootDirectory;
    ULONG FileNameLength;
    WCHAR FileName[1];
};
struct alignas( 8 ) _FILE_RENAME_INFORMATION
{
    BOOLEAN ReplaceIfExists;
    HANDLE RootDirectory;
    ULONG FileNameLength;
    WCHAR FileName[1];
};
struct alignas( 8 ) _FILE_RENAME_INFORMATION_EX
{
    ULONG Flags;
    HANDLE RootDirectory;
    ULONG FileNameLength;
    WCHAR FileName[1];
};
struct alignas( 8 ) _FILE_STREAM_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG StreamNameLength;
    LARGE_INTEGER StreamSize;
    LARGE_INTEGER StreamAllocationSize;
    WCHAR StreamName[1];
};
struct alignas( 8 ) _FILE_TRACKING_INFORMATION
{
    HANDLE DestinationFile;
    ULONG ObjectInformationLength;
    CHAR ObjectInformation[1];
};
struct alignas( 8 ) _FILE_COMPLETION_INFORMATION
{
    HANDLE Port;
    PVOID Key;
};
struct alignas( 4 ) _FILE_PIPE_INFORMATION
{
    ULONG ReadMode;
    ULONG CompletionMode;
};
struct alignas( 4 ) _FILE_PIPE_LOCAL_INFORMATION
{
    ULONG NamedPipeType;
    ULONG NamedPipeConfiguration;
    ULONG MaximumInstances;
    ULONG CurrentInstances;
    ULONG InboundQuota;
    ULONG ReadDataAvailable;
    ULONG OutboundQuota;
    ULONG WriteQuotaAvailable;
    ULONG NamedPipeState;
    ULONG NamedPipeEnd;
};
struct alignas( 8 ) _FILE_PIPE_REMOTE_INFORMATION
{
    LARGE_INTEGER CollectDataTime;
    ULONG MaximumCollectionCount;
};
struct alignas( 1 ) _POWER_USER_ABSENCE_PREDICTION_CAPABILITY
{
    BOOLEAN AbsencePredictionCapability;
};
struct alignas( 4 ) _POWER_INFORMATION_INTERNAL_HEADER
{
    POWER_INFORMATION_LEVEL_INTERNAL InternalType;
    ULONG Version;
};
struct alignas( 4 ) _POWER_PROCESSOR_LATENCY_HINT
{
    POWER_INFORMATION_INTERNAL_HEADER PowerInformationInternalHeader;
    ULONG Type;
};
struct alignas( 4 ) _FILE_STANDARD_LINK_INFORMATION
{
    ULONG NumberOfAccessibleLinks;
    ULONG TotalNumberOfLinks;
    BOOLEAN DeletePending;
    BOOLEAN Directory;
};
struct alignas( 4 ) _FILE_SFIO_RESERVE_INFORMATION
{
    ULONG RequestsPerPeriod;
    ULONG Period;
    BOOLEAN RetryFailures;
    BOOLEAN Discardable;
    ULONG RequestSize;
    ULONG NumOutstandingRequests;
};
struct alignas( 4 ) _FILE_SFIO_VOLUME_INFORMATION
{
    ULONG MaximumRequestsPerPeriod;
    ULONG MinimumPeriod;
    ULONG MinimumTransferSize;
};
struct alignas( 8 ) _FILE_IO_PRIORITY_HINT_INFORMATION
{
    IO_PRIORITY_HINT PriorityHint;
};
struct alignas( 4 ) _FILE_IO_PRIORITY_HINT_INFORMATION_EX
{
    IO_PRIORITY_HINT PriorityHint;
    BOOLEAN BoostOutstanding;
};
struct alignas( 4 ) _FILE_IO_COMPLETION_NOTIFICATION_INFORMATION
{
    ULONG Flags;
};
struct alignas( 8 ) _FILE_PROCESS_IDS_USING_FILE_INFORMATION
{
    ULONG NumberOfProcessIdsInList;
    ULONG_PTR ProcessIdList[1];
};
struct alignas( 1 ) _FILE_IS_REMOTE_DEVICE_INFORMATION
{
    BOOLEAN IsRemote;
};
struct alignas( 2 ) _FILE_NUMA_NODE_INFORMATION
{
    USHORT NodeNumber;
};
struct alignas( 8 ) _FILE_IOSTATUSBLOCK_RANGE_INFORMATION
{
    PUCHAR IoStatusBlockRange;
    ULONG Length;
};
struct alignas( 4 ) _FILE_REMOTE_PROTOCOL_INFORMATION
{
    USHORT StructureVersion;
    USHORT StructureSize;
    ULONG Protocol;
    USHORT ProtocolMajorVersion;
    USHORT ProtocolMinorVersion;
    USHORT ProtocolRevision;
    USHORT Reserved;
    ULONG Flags;
    struct alignas( 4 )
    {
        ULONG Reserved[8];
    } GenericReserved;
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            struct alignas( 4 )
            {
                ULONG Capabilities;
            } Server;
            struct alignas( 4 )
            {
                ULONG Capabilities;
                ULONG ShareFlags;
                UCHAR ShareType;
                UCHAR Reserved0[3];
                ULONG Reserved1;
            } Share;
        } Smb2;
        ULONG Reserved[16];
    } ProtocolSpecific;
};
struct alignas( 4 ) _RTL_DRIVE_LETTER_CURDIR32
{
    USHORT Flags;
    USHORT Length;
    ULONG TimeStamp;
    STRING32 DosPath;
};
struct alignas( 4 ) _CURDIR32
{
    UNICODE_STRING32 DosPath;
    ULONG Handle;
};
struct alignas( 4 ) _RTL_USER_PROCESS_PARAMETERS32
{
    ULONG MaximumLength;
    ULONG Length;
    ULONG Flags;
    ULONG DebugFlags;
    ULONG ConsoleHandle;
    ULONG ConsoleFlags;
    ULONG StandardInput;
    ULONG StandardOutput;
    ULONG StandardError;
    CURDIR32 CurrentDirectory;
    UNICODE_STRING32 DllPath;
    UNICODE_STRING32 ImagePathName;
    UNICODE_STRING32 CommandLine;
    ULONG Environment;
    ULONG StartingX;
    ULONG StartingY;
    ULONG CountX;
    ULONG CountY;
    ULONG CountCharsX;
    ULONG CountCharsY;
    ULONG FillAttribute;
    ULONG WindowFlags;
    ULONG ShowWindowFlags;
    UNICODE_STRING32 WindowTitle;
    UNICODE_STRING32 DesktopInfo;
    UNICODE_STRING32 ShellInfo;
    UNICODE_STRING32 RuntimeData;
    RTL_DRIVE_LETTER_CURDIR32 CurrentDirectories[32];
    ULONG EnvironmentSize;
    ULONG EnvironmentVersion;
    ULONG PackageDependencyData;
    ULONG ProcessGroupId;
    ULONG LoaderThreads;
    UNICODE_STRING32 RedirectionDllName;
    UNICODE_STRING32 HeapPartitionName;
    ULONG DefaultThreadpoolCpuSetMasks;
    ULONG DefaultThreadpoolCpuSetMaskCount;
    ULONG DefaultThreadpoolThreadMaximum;
};
struct alignas( 4 ) _FILE_LINK_ENTRY_FULL_ID_INFORMATION
{
    ULONG NextEntryOffset;
    FILE_ID_128 ParentFileId;
    ULONG FileNameLength;
    WCHAR FileName[1];
};
struct alignas( 4 ) _FILE_LINKS_FULL_ID_INFORMATION
{
    ULONG BytesNeeded;
    ULONG EntriesReturned;
    FILE_LINK_ENTRY_FULL_ID_INFORMATION Entry;
};
struct alignas( 8 ) _FILE_ID_EXTD_BOTH_DIR_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    ULONG ReparsePointTag;
    FILE_ID_128 FileId;
    CCHAR ShortNameLength;
    WCHAR ShortName[12];
    WCHAR FileName[1];
};
struct alignas( 8 ) _FILE_ID_64_EXTD_DIR_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    ULONG ReparsePointTag;
    LARGE_INTEGER FileId;
    WCHAR FileName[1];
};
struct alignas( 8 ) _FILE_ID_64_EXTD_BOTH_DIR_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    ULONG ReparsePointTag;
    LARGE_INTEGER FileId;
    CCHAR ShortNameLength;
    WCHAR ShortName[12];
    WCHAR FileName[1];
};
struct alignas( 8 ) _FILE_ID_ALL_EXTD_DIR_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    ULONG ReparsePointTag;
    LARGE_INTEGER FileId;
    FILE_ID_128 FileId128;
    WCHAR FileName[1];
};
struct alignas( 8 ) _FILE_ID_ALL_EXTD_BOTH_DIR_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    ULONG ReparsePointTag;
    LARGE_INTEGER FileId;
    FILE_ID_128 FileId128;
    CCHAR ShortNameLength;
    WCHAR ShortName[12];
    WCHAR FileName[1];
};
struct alignas( 8 ) _FILE_STAT_INFORMATION
{
    LARGE_INTEGER FileId;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    ULONG FileAttributes;
    ULONG ReparseTag;
    ULONG NumberOfLinks;
    ACCESS_MASK EffectiveAccess;
};
struct alignas( 8 ) _FILE_STAT_BASIC_INFORMATION
{
    LARGE_INTEGER FileId;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    ULONG FileAttributes;
    ULONG ReparseTag;
    ULONG NumberOfLinks;
    ULONG DeviceType;
    ULONG DeviceCharacteristics;
    ULONG Reserved;
    LARGE_INTEGER VolumeSerialNumber;
    FILE_ID_128 FileId128;
};
struct alignas( 8 ) _FILE_MEMORY_PARTITION_INFORMATION
{
    HANDLE OwnerPartitionHandle;
    union alignas( 4 )
    {
        struct alignas( 1 )
        {
            UCHAR NoCrossPartitionAccess;
            UCHAR Spare[3];
        };
        ULONG AllFlags;
    } Flags;
};
struct alignas( 8 ) _FILE_STAT_LX_INFORMATION
{
    LARGE_INTEGER FileId;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    ULONG FileAttributes;
    ULONG ReparseTag;
    ULONG NumberOfLinks;
    ACCESS_MASK EffectiveAccess;
    ULONG LxFlags;
    ULONG LxUid;
    ULONG LxGid;
    ULONG LxMode;
    ULONG LxDeviceIdMajor;
    ULONG LxDeviceIdMinor;
};
struct alignas( 4 ) _FILE_STORAGE_RESERVE_ID_INFORMATION
{
    STORAGE_RESERVE_ID StorageReserveId;
};
struct alignas( 4 ) _FILE_CASE_SENSITIVE_INFORMATION
{
    ULONG Flags;
};
struct alignas( 4 ) _FILE_KNOWN_FOLDER_INFORMATION
{
    FILE_KNOWN_FOLDER_TYPE Type;
};
struct alignas( 8 ) _FILE_STREAM_RESERVATION_INFORMATION
{
    ULONG_PTR TrackedReservation;
    ULONG_PTR EnforcedReservation;
};
struct alignas( 8 ) _MUP_PROVIDER_INFORMATION
{
    ULONG Level;
    PVOID Buffer;
    PULONG BufferSize;
};
struct alignas( 4 ) _FILE_INFORMATION_DEFINITION
{
    FILE_INFORMATION_CLASS Class;
    ULONG NextEntryOffset;
    ULONG FileNameOffset;
    ULONG FileNameLengthOffset;
};
struct alignas( 8 ) _FILE_DIRECTORY_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    WCHAR FileName[1];
};
struct alignas( 8 ) _FILE_FULL_DIR_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    WCHAR FileName[1];
};
struct alignas( 8 ) _FILE_ID_FULL_DIR_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    LARGE_INTEGER FileId;
    WCHAR FileName[1];
};
struct alignas( 8 ) _FILE_BOTH_DIR_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    CCHAR ShortNameLength;
    WCHAR ShortName[12];
    WCHAR FileName[1];
};
struct alignas( 8 ) _FILE_ID_BOTH_DIR_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    CCHAR ShortNameLength;
    WCHAR ShortName[12];
    LARGE_INTEGER FileId;
    WCHAR FileName[1];
};
struct alignas( 4 ) _FILE_NAMES_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG FileIndex;
    ULONG FileNameLength;
    WCHAR FileName[1];
};
struct alignas( 8 ) _FILE_ID_GLOBAL_TX_DIR_INFORMATION
{
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    LARGE_INTEGER FileId;
    GUID LockingTransactionId;
    ULONG TxInfoFlags;
    WCHAR FileName[1];
};
struct alignas( 8 ) _FILE_OBJECTID_INFORMATION
{
    ULONGLONG FileReference;
    UCHAR ObjectId[16];
    union alignas( 1 )
    {
        struct alignas( 1 )
        {
            UCHAR BirthVolumeId[16];
            UCHAR BirthObjectId[16];
            UCHAR DomainId[16];
        };
        UCHAR ExtendedInfo[48];
    };
};
struct alignas( 4 ) _FILE_DIRECTORY_NEXT_INFORMATION
{
    ULONG NextEntryOffset;
};
struct alignas( 2 ) _IMAGE_DVRT_ARM64X_DELTA_FIXUP_RECORD
{
    USHORT Offset : 12;
    USHORT Type : 2;
    USHORT Sign : 1;
    USHORT Scale : 1;
};
struct alignas( 8 ) _TOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
{
    PVOID Value;
    ULONG ValueLength;
};
struct alignas( 8 ) _FILE_FS_VOLUME_INFORMATION
{
    LARGE_INTEGER VolumeCreationTime;
    ULONG VolumeSerialNumber;
    ULONG VolumeLabelLength;
    BOOLEAN SupportsObjects;
    WCHAR VolumeLabel[1];
};
struct alignas( 4 ) _FILE_FS_LABEL_INFORMATION
{
    ULONG VolumeLabelLength;
    WCHAR VolumeLabel[1];
};
struct alignas( 8 ) _FILE_FS_SIZE_INFORMATION
{
    LARGE_INTEGER TotalAllocationUnits;
    LARGE_INTEGER AvailableAllocationUnits;
    ULONG SectorsPerAllocationUnit;
    ULONG BytesPerSector;
};
struct alignas( 8 ) _FILE_FS_CONTROL_INFORMATION
{
    LARGE_INTEGER FreeSpaceStartFiltering;
    LARGE_INTEGER FreeSpaceThreshold;
    LARGE_INTEGER FreeSpaceStopFiltering;
    LARGE_INTEGER DefaultQuotaThreshold;
    LARGE_INTEGER DefaultQuotaLimit;
    ULONG FileSystemControlFlags;
};
struct alignas( 8 ) _FILE_FS_FULL_SIZE_INFORMATION
{
    LARGE_INTEGER TotalAllocationUnits;
    LARGE_INTEGER CallerAvailableAllocationUnits;
    LARGE_INTEGER ActualAvailableAllocationUnits;
    ULONG SectorsPerAllocationUnit;
    ULONG BytesPerSector;
};
struct alignas( 1 ) _FILE_FS_OBJECTID_INFORMATION
{
    UCHAR ObjectId[16];
    union alignas( 1 )
    {
        struct alignas( 1 )
        {
            UCHAR BirthVolumeId[16];
            UCHAR BirthObjectId[16];
            UCHAR DomainId[16];
        };
        UCHAR ExtendedInfo[48];
    };
};
struct alignas( 4 ) _FILE_FS_DEVICE_INFORMATION
{
    DWORD DeviceType;
    ULONG Characteristics;
};
struct alignas( 4 ) _FILE_FS_ATTRIBUTE_INFORMATION
{
    ULONG FileSystemAttributes;
    LONG MaximumComponentNameLength;
    ULONG FileSystemNameLength;
    WCHAR FileSystemName[1];
};
struct alignas( 4 ) _FILE_FS_DRIVER_PATH_INFORMATION
{
    BOOLEAN DriverInPath;
    ULONG DriverNameLength;
    WCHAR DriverName[1];
};
struct alignas( 4 ) _FILE_FS_VOLUME_FLAGS_INFORMATION
{
    ULONG Flags;
};
struct alignas( 4 ) _FILE_FS_SECTOR_SIZE_INFORMATION
{
    ULONG LogicalBytesPerSector;
    ULONG PhysicalBytesPerSectorForAtomicity;
    ULONG PhysicalBytesPerSectorForPerformance;
    ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
    ULONG Flags;
    ULONG ByteOffsetForSectorAlignment;
    ULONG ByteOffsetForPartitionAlignment;
};
struct alignas( 4 ) _FILE_FS_DATA_COPY_INFORMATION
{
    ULONG NumberOfCopies;
};
struct alignas( 4 ) _FILE_FS_GUID_INFORMATION
{
    GUID FsGuid;
};
struct alignas( 8 ) _LSA_TOKEN_INFORMATION_NULL
{
    LARGE_INTEGER ExpirationTime;
    PTOKEN_GROUPS Groups;
};
struct alignas( 4 ) _REPARSE_DATA_BUFFER
{
    ULONG ReparseTag;
    USHORT ReparseDataLength;
    USHORT Reserved;
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            USHORT SubstituteNameOffset;
            USHORT SubstituteNameLength;
            USHORT PrintNameOffset;
            USHORT PrintNameLength;
            ULONG Flags;
            WCHAR PathBuffer[1];
        } SymbolicLinkReparseBuffer;
        struct alignas( 2 )
        {
            USHORT SubstituteNameOffset;
            USHORT SubstituteNameLength;
            USHORT PrintNameOffset;
            USHORT PrintNameLength;
            WCHAR PathBuffer[1];
        } MountPointReparseBuffer;
        struct alignas( 4 )
        {
            ULONG StringCount;
            WCHAR StringList[1];
        } AppExecLinkReparseBuffer;
        struct alignas( 1 )
        {
            UCHAR DataBuffer[1];
        } GenericReparseBuffer;
    };
};
struct alignas( 8 ) _REPARSE_DATA_BUFFER_EX
{
    ULONG Flags;
    ULONG ExistingReparseTag;
    GUID ExistingReparseGuid;
    ULONGLONG Reserved;
    union alignas( 4 )
    {
        REPARSE_DATA_BUFFER ReparseDataBuffer;
        REPARSE_GUID_DATA_BUFFER ReparseGuidDataBuffer;
    };
};
struct alignas( 8 ) _FILE_PIPE_ASSIGN_EVENT_BUFFER
{
    HANDLE EventHandle;
    ULONG KeyValue;
};
struct alignas( 4 ) _FILE_PIPE_PEEK_BUFFER
{
    ULONG NamedPipeState;
    ULONG ReadDataAvailable;
    ULONG NumberOfMessages;
    ULONG MessageLength;
    CHAR Data[1];
};
struct alignas( 4 ) _FILE_PIPE_EVENT_BUFFER
{
    ULONG NamedPipeState;
    ULONG EntryType;
    ULONG ByteCount;
    ULONG KeyValue;
    ULONG NumberRequests;
};
struct alignas( 8 ) _FILE_PIPE_WAIT_FOR_BUFFER
{
    LARGE_INTEGER Timeout;
    ULONG NameLength;
    BOOLEAN TimeoutSpecified;
    WCHAR Name[1];
};
struct alignas( 8 ) _FILE_PIPE_CLIENT_PROCESS_BUFFER
{
    PVOID ClientSession;
    PVOID ClientProcess;
};
struct alignas( 8 ) _FILE_PIPE_CLIENT_PROCESS_BUFFER_V2
{
    ULONGLONG ClientSession;
    PVOID ClientProcess;
};
struct alignas( 8 ) _FILE_PIPE_CLIENT_PROCESS_BUFFER_EX
{
    PVOID ClientSession;
    PVOID ClientProcess;
    USHORT ClientComputerNameLength;
    WCHAR ClientComputerBuffer[16];
};
struct alignas( 8 ) _FILE_PIPE_SILO_ARRIVAL_INPUT
{
    HANDLE JobHandle;
};
struct alignas( 4 ) _FILE_PIPE_CREATE_SYMLINK_INPUT
{
    USHORT NameOffset;
    USHORT NameLength;
    USHORT SubstituteNameOffset;
    USHORT SubstituteNameLength;
    ULONG Flags;
};
struct alignas( 2 ) _FILE_PIPE_DELETE_SYMLINK_INPUT
{
    USHORT NameOffset;
    USHORT NameLength;
};
struct alignas( 4 ) _FILE_MAILSLOT_PEEK_BUFFER
{
    ULONG ReadDataAvailable;
    ULONG NumberOfMessages;
    ULONG MessageLength;
};
struct alignas( 2 ) _MOUNTMGR_CREATE_POINT_INPUT
{
    USHORT SymbolicLinkNameOffset;
    USHORT SymbolicLinkNameLength;
    USHORT DeviceNameOffset;
    USHORT DeviceNameLength;
};
struct alignas( 4 ) _MOUNTMGR_MOUNT_POINT
{
    ULONG SymbolicLinkNameOffset;
    USHORT SymbolicLinkNameLength;
    USHORT Reserved1;
    ULONG UniqueIdOffset;
    USHORT UniqueIdLength;
    USHORT Reserved2;
    ULONG DeviceNameOffset;
    USHORT DeviceNameLength;
    USHORT Reserved3;
};
struct alignas( 4 ) _MOUNTMGR_MOUNT_POINTS
{
    ULONG Size;
    ULONG NumberOfMountPoints;
    MOUNTMGR_MOUNT_POINT MountPoints[1];
};
struct alignas( 2 ) _MOUNTMGR_DRIVE_LETTER_TARGET
{
    USHORT DeviceNameLength;
    WCHAR DeviceName[1];
};
struct alignas( 1 ) _MOUNTMGR_DRIVE_LETTER_INFORMATION
{
    BOOLEAN DriveLetterWasAssigned;
    UCHAR CurrentDriveLetter;
};
struct alignas( 8 ) _LSA_TRANSLATED_SID2
{
    SID_NAME_USE Use;
    PSID Sid;
    LONG DomainIndex;
    ULONG Flags;
};
struct alignas( 2 ) _MOUNTDEV_NAME
{
    USHORT NameLength;
    WCHAR Name[1];
};
struct alignas( 4 ) _MOUNTMGR_VOLUME_PATHS
{
    ULONG MultiSzLength;
    WCHAR MultiSz[1];
};
struct alignas( 8 ) _FLT_CONNECT_CONTEXT
{
    PUNICODE_STRING PortName;
    PUNICODE_STRING64 PortName64;
    USHORT SizeOfContext;
    UCHAR Padding[6];
    UCHAR Context[1];
};
struct alignas( 8 ) _FLT_PORT_FULL_EA
{
    ULONG NextEntryOffset;
    UCHAR Flags;
    UCHAR EaNameLength;
    USHORT EaValueLength;
    CHAR EaName[8];
    FLT_CONNECT_CONTEXT EaValue;
};
struct alignas( 2 ) _FLT_LOAD_PARAMETERS
{
    USHORT FilterNameSize;
    WCHAR FilterName[1];
};
struct alignas( 4 ) _FLT_LINK
{
    FLT_LINK_TYPE Type;
    ULONG ParametersOffset;
};
struct alignas( 2 ) _FLT_FILTER_PARAMETERS
{
    USHORT FilterNameSize;
    USHORT FilterNameOffset;
};
struct alignas( 2 ) _FLT_INSTANCE_PARAMETERS
{
    USHORT FilterNameSize;
    USHORT FilterNameOffset;
    USHORT VolumeNameSize;
    USHORT VolumeNameOffset;
    USHORT InstanceNameSize;
    USHORT InstanceNameOffset;
};
struct alignas( 2 ) _FLT_VOLUME_PARAMETERS
{
    USHORT VolumeNameSize;
    USHORT VolumeNameOffset;
};
struct alignas( 4 ) _FLT_ATTACH
{
    USHORT FilterNameSize;
    USHORT FilterNameOffset;
    USHORT VolumeNameSize;
    USHORT VolumeNameOffset;
    ATTACH_TYPE Type;
    USHORT InstanceNameSize;
    USHORT InstanceNameOffset;
    USHORT AltitudeSize;
    USHORT AltitudeOffset;
};
struct alignas( 8 ) _RTL_IMAGE_MITIGATION_DYNAMIC_CODE_POLICY
{
    RTL_IMAGE_MITIGATION_POLICY BlockDynamicCode;
};
struct alignas( 8 ) _RTL_IMAGE_MITIGATION_STRICT_HANDLE_CHECK_POLICY
{
    RTL_IMAGE_MITIGATION_POLICY StrictHandleChecks;
};
struct alignas( 4 ) _MUP_FSCTL_SURROGATE_PROVIDER_INFORMATION
{
    ULONG TotalEntries;
    MUP_FSCTL_SURROGATE_PROVIDER_ENTRY SurrogateEntry[1];
};
struct alignas( 8 ) _MUP_FSCTL_UNC_HARDENING_PREFIX_TABLE_ENTRY
{
    ULONG NextOffset;
    ULONG PrefixNameOffset;
    USHORT PrefixNameCbLength;
    union alignas( 4 )
    {
        ULONG RequiredHardeningCapabilities;
        struct alignas( 4 )
        {
            ULONG RequiresMutualAuth : 1;
            ULONG RequiresIntegrity : 1;
            ULONG RequiresPrivacy : 1;
        };
    };
    ULONGLONG OpenCount;
};
struct alignas( 4 ) _MUP_FSCTL_QUERY_UNC_HARDENING_CONFIGURATION_IN
{
    ULONG Size;
    ULONG UncPathOffset;
    USHORT UncPathCbLength;
};
struct alignas( 4 ) _MUP_FSCTL_QUERY_UNC_HARDENING_CONFIGURATION_OUT
{
    ULONG Size;
    union alignas( 4 )
    {
        ULONG RequiredHardeningCapabilities;
        struct alignas( 4 )
        {
            ULONG RequiresMutualAuth : 1;
            ULONG RequiresIntegrity : 1;
            ULONG RequiresPrivacy : 1;
        };
    };
};
struct alignas( 8 ) _NAMED_PIPE_CREATE_PARAMETERS
{
    ULONG NamedPipeType;
    ULONG ReadMode;
    ULONG CompletionMode;
    ULONG MaximumInstances;
    ULONG InboundQuota;
    ULONG OutboundQuota;
    LARGE_INTEGER DefaultTimeout;
    BOOLEAN TimeoutSpecified;
};
struct alignas( 8 ) _MAILSLOT_CREATE_PARAMETERS
{
    ULONG MailslotQuota;
    ULONG MaximumMessageSize;
    LARGE_INTEGER ReadTimeout;
    BOOLEAN TimeoutSpecified;
};
struct alignas( 4 ) _OPLOCK_KEY_ECP_CONTEXT
{
    GUID OplockKey;
    ULONG Reserved;
};
struct alignas( 4 ) _OPLOCK_KEY_CONTEXT
{
    USHORT Version;
    USHORT Flags;
    GUID ParentOplockKey;
    GUID TargetOplockKey;
    ULONG Reserved;
};
struct alignas( 8 ) _PORT_DATA_ENTRY
{
    PVOID Base;
    ULONG Size;
};
struct alignas( 8 ) _PORT_DATA_INFORMATION
{
    ULONG CountDataEntries;
    PORT_DATA_ENTRY DataEntries[1];
};
struct alignas( 8 ) _LPC_CLIENT_DIED_MSG
{
    PORT_MESSAGE PortMsg;
    LARGE_INTEGER CreateTime;
};
struct alignas( 8 ) _PORT_VIEW
{
    ULONG Length;
    HANDLE SectionHandle;
    ULONG SectionOffset;
    SIZE_T ViewSize;
    PVOID ViewBase;
    PVOID ViewRemoteBase;
};
struct alignas( 8 ) _REMOTE_PORT_VIEW
{
    ULONG Length;
    SIZE_T ViewSize;
    PVOID ViewBase;
};
struct alignas( 8 ) _PORT_MESSAGE64
{
    union alignas( 4 )
    {
        struct alignas( 2 )
        {
            CSHORT DataLength;
            CSHORT TotalLength;
        } s1;
        ULONG Length;
    } u1;
    union alignas( 4 )
    {
        struct alignas( 2 )
        {
            CSHORT Type;
            CSHORT DataInfoOffset;
        } s2;
        ULONG ZeroInit;
    } u2;
    union alignas( 8 )
    {
        CLIENT_ID64 ClientId;
        double DoNotUseThisField;
    };
    ULONG MessageId;
    union alignas( 8 )
    {
        ULONGLONG ClientViewSize;
        ULONG CallbackId;
    };
};
struct alignas( 8 ) _LPC_CLIENT_DIED_MSG64
{
    PORT_MESSAGE64 PortMsg;
    LARGE_INTEGER CreateTime;
};
struct alignas( 8 ) _PORT_VIEW64
{
    ULONG Length;
    ULONGLONG SectionHandle;
    ULONG SectionOffset;
    ULONGLONG ViewSize;
    ULONGLONG ViewBase;
    ULONGLONG ViewRemoteBase;
};
struct alignas( 8 ) _REMOTE_PORT_VIEW64
{
    ULONG Length;
    ULONGLONG ViewSize;
    ULONGLONG ViewBase;
};
struct alignas( 8 ) _ALPC_CONTEXT_ATTR
{
    PVOID PortContext;
    PVOID MessageContext;
    ULONG Sequence;
    ULONG MessageId;
    ULONG CallbackId;
};
struct alignas( 4 ) _ALPC_HANDLE_ATTR32
{
    ULONG Flags;
    ULONG Reserved0;
    ULONG SameAccess;
    ULONG SameAttributes;
    ULONG Indirect;
    ULONG Inherit;
    ULONG Reserved1;
    ULONG Handle;
    ULONG ObjectType;
    ACCESS_MASK DesiredAccess;
    ACCESS_MASK GrantedAccess;
};
struct alignas( 8 ) _ALPC_HANDLE_ATTR
{
    ULONG Flags;
    ULONG Reserved0;
    ULONG SameAccess;
    ULONG SameAttributes;
    ULONG Indirect;
    ULONG Inherit;
    ULONG Reserved1;
    HANDLE Handle;
    PALPC_HANDLE_ATTR32 HandleAttrArray;
    ULONG ObjectType;
    ULONG HandleCount;
    ACCESS_MASK DesiredAccess;
    ACCESS_MASK GrantedAccess;
};
struct alignas( 8 ) _ALPC_SECURITY_ATTR
{
    ULONG Flags;
    PSECURITY_QUALITY_OF_SERVICE QoS;
    ALPC_HANDLE ContextHandle;
};
struct alignas( 8 ) _ALPC_DATA_VIEW_ATTR
{
    ULONG Flags;
    ALPC_HANDLE SectionHandle;
    PVOID ViewBase;
    SIZE_T ViewSize;
};
struct alignas( 8 ) _ALPC_BASIC_INFORMATION
{
    ULONG Flags;
    ULONG SequenceNo;
    PVOID PortContext;
};
struct alignas( 8 ) _ALPC_PORT_ASSOCIATE_COMPLETION_PORT
{
    PVOID CompletionKey;
    HANDLE CompletionPort;
};
struct alignas( 8 ) _ALPC_SERVER_INFORMATION
{
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            HANDLE ThreadHandle;
        } In;
        struct alignas( 8 )
        {
            BOOLEAN ThreadBlocked;
            HANDLE ConnectedProcessId;
            UNICODE_STRING ConnectionPortName;
        } Out;
    };
};
struct alignas( 8 ) _ALPC_PORT_MESSAGE_ZONE_INFORMATION
{
    PVOID Buffer;
    ULONG Size;
};
struct alignas( 8 ) _ALPC_PORT_COMPLETION_LIST_INFORMATION
{
    PVOID Buffer;
    ULONG Size;
    ULONG ConcurrencyCount;
    ULONG AttributeFlags;
};
struct alignas( 8 ) _ALPC_REGISTER_CALLBACK
{
    PVOID CallbackObject;
    PVOID CallbackContext;
};
struct alignas( 4 ) _RTL_FEATURE_USAGE_SUBSCRIPTION_TARGET
{
    ULONG Data[2];
};
struct alignas( 4 ) _SYSTEM_FEATURE_USAGE_SUBSCRIPTION_DETAILS
{
    RTL_FEATURE_ID FeatureId;
    USHORT ReportingKind;
    USHORT ReportingOptions;
    RTL_FEATURE_USAGE_SUBSCRIPTION_TARGET ReportingTarget;
};
struct alignas( 8 ) _SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION_ENTRY
{
    RTL_FEATURE_CHANGE_STAMP ChangeStamp;
    PVOID Section;
    SIZE_T Size;
};
struct alignas( 8 ) _PF_SYSTEM_PREFETCH_PARAMETERS
{
    PF_ENABLE_STATUS EnableStatus[2];
    PF_TRACE_LIMITS TraceLimits[2];
    ULONG MaxNumActiveTraces;
    ULONG MaxNumSavedTraces;
    WCHAR RootDirPath[32];
    WCHAR HostingApplicationList[128];
};
struct alignas( 4 ) _RTL_FEATURE_USAGE_SUBSCRIPTION_DETAILS
{
    RTL_FEATURE_ID FeatureId;
    USHORT ReportingKind;
    USHORT ReportingOptions;
    RTL_FEATURE_USAGE_SUBSCRIPTION_TARGET ReportingTarget;
};
struct alignas( 4 ) _SYSTEM_FEATURE_USAGE_SUBSCRIPTION_UPDATE_ENTRY
{
    ULONG Remove;
    RTL_FEATURE_USAGE_SUBSCRIPTION_DETAILS Details;
};
struct alignas( 4 ) _PF_BOOT_CONTROL
{
    ULONG Version;
    ULONG DisableBootPrefetching;
};
struct alignas( 8 ) _PREFETCHER_INFORMATION
{
    ULONG Version;
    ULONG Magic;
    PREFETCHER_INFORMATION_CLASS PrefetcherInformationClass;
    PVOID PrefetcherInformation;
    ULONG PrefetcherInformationLength;
};
struct alignas( 4 ) _PF_SYSTEM_SUPERFETCH_PARAMETERS
{
    ULONG EnabledComponents;
    ULONG BootID;
    ULONG SavedSectInfoTracesMax;
    ULONG SavedPageAccessTracesMax;
    ULONG ScenarioPrefetchTimeoutStandby;
    ULONG ScenarioPrefetchTimeoutHibernate;
    ULONG ScenarioPrefetchTimeoutHiberBoot;
};
struct alignas( 8 ) _PF_LOG_EVENT_DATA
{
    ULONG EventType : 5;
    ULONG Flags : 2;
    ULONG DataSize : 25;
    PVOID EventData;
};
struct alignas( 8 ) _PF_PFN_PRIO_REQUEST
{
    ULONG Version;
    ULONG RequestFlags;
    ULONG_PTR PfnCount;
    SYSTEM_MEMORY_LIST_INFORMATION MemInfo;
    MMPFN_IDENTITY PageData[256];
};
struct alignas( 8 ) _PFS_PRIVATE_PAGE_SOURCE
{
    PFS_PRIVATE_PAGE_SOURCE_TYPE Type;
    union alignas( 4 )
    {
        ULONG SessionId;
        ULONG ProcessId;
    };
    ULONG ImagePathHash;
    ULONG_PTR UniqueProcessHash;
};
struct alignas( 8 ) _PF_PRIVSOURCE_INFO
{
    PFS_PRIVATE_PAGE_SOURCE DbInfo;
    PVOID EProcess;
    SIZE_T WsPrivatePages;
    SIZE_T TotalPrivatePages;
    ULONG SessionID;
    CHAR ImageName[16];
    union alignas( 8 )
    {
        ULONG_PTR WsSwapPages;
        ULONG_PTR SessionPagedPoolPages;
        ULONG_PTR StoreSizePages;
    };
    ULONG_PTR WsTotalPages;
    ULONG DeepFreezeTimeMs;
    ULONG ModernApp : 1;
    ULONG DeepFrozen : 1;
    ULONG Foreground : 1;
    ULONG PerProcessStore : 1;
    ULONG Spare : 28;
};
struct alignas( 8 ) _PF_PRIVSOURCE_QUERY_REQUEST
{
    ULONG Version;
    ULONG Flags;
    ULONG InfoCount;
    PF_PRIVSOURCE_INFO InfoArray[1];
};
struct alignas( 4 ) _PF_SCENARIO_PHASE_INFO
{
    ULONG Version;
    PF_PHASED_SCENARIO_TYPE ScenType;
    ULONG PhaseId;
    ULONG SequenceNumber;
    ULONG Flags;
    ULONG FUSUserId;
};
struct alignas( 8 ) _PF_MEMORY_LIST_NODE
{
    ULONGLONG Node : 8;
    ULONGLONG Spare : 56;
    ULONGLONG StandbyLowPageCount;
    ULONGLONG StandbyMediumPageCount;
    ULONGLONG StandbyHighPageCount;
    ULONGLONG FreePageCount;
    ULONGLONG ModifiedPageCount;
};
struct alignas( 4 ) _PF_ROBUST_PROCESS_ENTRY
{
    ULONG ImagePathHash;
    ULONG Pid;
    ULONG Alignment;
};
struct alignas( 4 ) _PF_ROBUST_FILE_ENTRY
{
    ULONG FilePathHash;
};
struct alignas( 4 ) _PF_ROBUSTNESS_CONTROL
{
    ULONG Version;
    PF_ROBUSTNESS_CONTROL_COMMAND Command;
    ULONG DeprioProcessCount;
    ULONG ExemptProcessCount;
    ULONG DeprioFileCount;
    ULONG ExemptFileCount;
    PF_ROBUST_PROCESS_ENTRY ProcessEntries[1];
    PF_ROBUST_FILE_ENTRY FileEntries[1];
};
struct alignas( 4 ) _PF_TIME_CONTROL
{
    LONG TimeAdjustment;
};
struct alignas( 8 ) _PF_MEMORY_LIST_INFO
{
    ULONG Version;
    ULONG Size;
    ULONG NodeCount;
    PF_MEMORY_LIST_NODE Nodes[1];
};
struct alignas( 8 ) _PF_PHYSICAL_MEMORY_RANGE
{
    ULONG_PTR BasePfn;
    ULONG_PTR PageCount;
};
struct alignas( 8 ) _PF_PHYSICAL_MEMORY_RANGE_INFO_V1
{
    ULONG Version;
    ULONG RangeCount;
    PF_PHYSICAL_MEMORY_RANGE Ranges[1];
};
struct alignas( 8 ) _PF_PHYSICAL_MEMORY_RANGE_INFO_V2
{
    ULONG Version;
    ULONG Flags;
    ULONG RangeCount;
    PF_PHYSICAL_MEMORY_RANGE Ranges[1];
};
struct alignas( 8 ) _PF_REPURPOSED_BY_PREFETCH_INFO
{
    ULONG Version;
    SIZE_T RepurposedByPrefetch;
};
struct alignas( 8 ) _RTL_BSD_ITEM
{
    RTL_BSD_ITEM_TYPE Type;
    PVOID DataBuffer;
    ULONG DataLength;
};
struct alignas( 8 ) _SUPERFETCH_INFORMATION
{
    ULONG Version;
    ULONG Magic;
    SUPERFETCH_INFORMATION_CLASS SuperfetchInformationClass;
    PVOID SuperfetchInformation;
    ULONG SuperfetchInformationLength;
};
struct alignas( 8 ) _PLUGPLAY_EVENT_BLOCK
{
    GUID EventGuid;
    PLUGPLAY_EVENT_CATEGORY EventCategory;
    PULONG Result;
    ULONG Flags;
    ULONG TotalSize;
    PVOID DeviceObject;
    union alignas( 8 )
    {
        struct alignas( 4 )
        {
            GUID ClassGuid;
            WCHAR SymbolicLinkName[1];
        } DeviceClass;
        struct alignas( 2 )
        {
            WCHAR DeviceIds[1];
        } TargetDevice;
        struct alignas( 2 )
        {
            WCHAR DeviceId[1];
        } InstallDevice;
        struct alignas( 8 )
        {
            PVOID NotificationStructure;
            WCHAR DeviceIds[1];
        } CustomNotification;
        struct alignas( 8 )
        {
            PVOID Notification;
        } ProfileNotification;
        struct alignas( 4 )
        {
            ULONG NotificationCode;
            ULONG NotificationData;
        } PowerNotification;
        struct alignas( 4 )
        {
            PNP_VETO_TYPE VetoType;
            WCHAR DeviceIdVetoNameBuffer[1];
        } VetoNotification;
        struct alignas( 4 )
        {
            GUID BlockedDriverGuid;
        } BlockedDriverNotification;
        struct alignas( 2 )
        {
            WCHAR ParentId[1];
        } InvalidIDNotification;
    } u;
};
struct alignas( 4 ) _ETW_UMS_EVENT_DIRECTED_SWITCH_START
{
    ULONG ProcessId;
    ULONG ScheduledThreadId;
    ULONG PrimaryThreadId;
    ULONG SwitchFlags;
};
struct alignas( 8 ) _USER_ADMIN_COMMENT_INFORMATION
{
    UNICODE_STRING AdminComment;
};
struct alignas( 4 ) _PROCESSOR_POWER_INFORMATION
{
    ULONG Number;
    ULONG MaxMhz;
    ULONG CurrentMhz;
    ULONG MhzLimit;
    ULONG MaxIdleState;
    ULONG CurrentIdleState;
};
struct alignas( 8 ) _USER_PROFILE_INFORMATION
{
    UNICODE_STRING ProfilePath;
};
struct alignas( 8 ) _USER_WORKSTATIONS_INFORMATION
{
    UNICODE_STRING WorkStations;
};
struct alignas( 4 ) _SYSTEM_POWER_LOGGING_ENTRY
{
    ULONG Reason;
    ULONG States;
};
struct alignas( 8 ) _USER_SET_PASSWORD_INFORMATION
{
    UNICODE_STRING Password;
    BOOLEAN PasswordExpired;
};
struct alignas( 8 ) _POWER_REQUEST_ACTION
{
    HANDLE PowerRequestHandle;
    POWER_REQUEST_TYPE_INTERNAL RequestType;
    BOOLEAN SetAction;
    HANDLE ProcessHandle;
};
union alignas( 4 ) _POWER_STATE
{
    SYSTEM_POWER_STATE SystemState;
    DEVICE_POWER_STATE DeviceState;
};
struct alignas( 4 ) _SYSTEM_POWER_STATE_CONTEXT
{
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            ULONG Reserved1 : 8;
            ULONG TargetSystemState : 4;
            ULONG EffectiveSystemState : 4;
            ULONG CurrentSystemState : 4;
            ULONG IgnoreHibernationPath : 1;
            ULONG PseudoTransition : 1;
            ULONG KernelSoftReboot : 1;
            ULONG DirectedDripsTransition : 1;
            ULONG Reserved2 : 8;
        };
        ULONG ContextAsUlong;
    };
};
struct alignas( 8 ) _COUNTED_REASON_CONTEXT_RELATIVE
{
    ULONG Flags;
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            SIZE_T ResourceFileNameOffset;
            USHORT ResourceReasonId;
            ULONG StringCount;
            SIZE_T SubstitutionStringsOffset;
        };
        SIZE_T SimpleStringOffset;
    };
};
struct alignas( 8 ) _WAKE_TIMER_INFO
{
    SIZE_T OffsetToNext;
    LARGE_INTEGER DueTime;
    ULONG Period;
    DIAGNOSTIC_BUFFER ReasonContext;
};
struct alignas( 4 ) _PROCESSOR_PERF_CAP_HV
{
    ULONG Version;
    ULONG InitialApicId;
    ULONG Ppc;
    ULONG Tpc;
    ULONG ThermalCap;
};
struct alignas( 8 ) PROCESSOR_IDLE_TIMES
{
    ULONG64 StartTime;
    ULONG64 EndTime;
    ULONG Reserved[4];
};
struct alignas( 8 ) _PROCESSOR_IDLE_STATE
{
    UCHAR StateType;
    ULONG StateFlags;
    ULONG HardwareLatency;
    ULONG Power;
    ULONG_PTR Context;
    PPROCESSOR_IDLE_HANDLER Handler;
};
struct alignas( 8 ) _PROCESSOR_IDLE_STATES
{
    ULONG Size;
    ULONG Revision;
    ULONG Count;
    ULONG Type;
    KAFFINITY TargetProcessors;
    PROCESSOR_IDLE_STATE State[1];
};
struct alignas( 2 ) _PROCESSOR_LOAD
{
    PROCESSOR_NUMBER ProcessorNumber;
    UCHAR BusyPercentage;
    UCHAR FrequencyPercentage;
    USHORT Padding;
};
struct alignas( 4 ) _PROCESSOR_CAP
{
    ULONG Version;
    PROCESSOR_NUMBER ProcessorNumber;
    ULONG PlatformCap;
    ULONG ThermalCap;
    ULONG LimitReasons;
};
struct alignas( 4 ) _PO_WAKE_SOURCE_INFO
{
    ULONG Count;
    ULONG Offsets[1];
};
struct alignas( 4 ) _PO_WAKE_SOURCE_HISTORY
{
    ULONG Count;
    ULONG Offsets[1];
};
struct alignas( 2 ) _IMAGE_DVRT_ARM64X_FIXUP_RECORD
{
    USHORT Offset : 12;
    USHORT Type : 2;
    USHORT Size : 2;
};
struct alignas( 4 ) _PO_WAKE_SOURCE_DEVICE
{
    PO_WAKE_SOURCE_HEADER Header;
    WCHAR InstancePath[1];
};
struct alignas( 8 ) _DOMAIN_DISPLAY_OEM_USER
{
    ULONG Index;
    OEM_STRING User;
};
struct alignas( 4 ) _PO_WAKE_SOURCE_FIXED
{
    PO_WAKE_SOURCE_HEADER Header;
    PO_FIXED_WAKE_SOURCE_TYPE FixedWakeSourceType;
};
struct alignas( 8 ) _DOMAIN_LOCALIZABLE_ACCOUNTS_ENTRY
{
    ULONG Rid;
    SID_NAME_USE Use;
    UNICODE_STRING Name;
    UNICODE_STRING AdminComment;
};
struct alignas( 8 ) _HEAP_EVENT_COMMIT_DECOMMIT
{
    PVOID HeapHandle;
    PVOID Block;
    SIZE_T Size;
    ULONG Caller;
};
struct alignas( 8 ) _POWER_REQUEST_LIST
{
    ULONG_PTR Count;
    ULONG_PTR PowerRequestOffsets[1];
};
struct alignas( 8 ) _POWER_STATE_HANDLER
{
    POWER_STATE_HANDLER_TYPE Type;
    BOOLEAN RtcWake;
    UCHAR Spare[3];
    PENTER_STATE_HANDLER Handler;
    PVOID Context;
};
struct alignas( 8 ) _POWER_STATE_NOTIFY_HANDLER
{
    PENTER_STATE_NOTIFY_HANDLER Handler;
    PVOID Context;
};
struct alignas( 8 ) _POWER_REQUEST_ACTION_INTERNAL
{
    PVOID PowerRequestPointer;
    POWER_REQUEST_TYPE_INTERNAL RequestType;
    BOOLEAN SetAction;
};
struct alignas( 4 ) _POWER_S0_LOW_POWER_IDLE_INFO
{
    POWER_S0_DISCONNECTED_REASON DisconnectedReason;
    union alignas( 1 )
    {
        BOOLEAN Storage : 1;
        BOOLEAN WiFi : 1;
        BOOLEAN Mbn : 1;
        BOOLEAN Ethernet : 1;
        BOOLEAN Reserved : 4;
        UCHAR AsUCHAR;
    } CsDeviceCompliance;
    union alignas( 1 )
    {
        BOOLEAN DisconnectInStandby : 1;
        BOOLEAN EnforceDs : 1;
        BOOLEAN Reserved : 6;
        UCHAR AsUCHAR;
    } Policy;
};
struct alignas( 1 ) _PERFINFO_DRIVER_COMPLETIONROUTINE
{
    PVOID Routine;
    PVOID IrpPtr;
    ULONG UniqMatchId;
};
struct alignas( 8 ) _POWER_USER_ABSENCE_PREDICTION
{
    POWER_INFORMATION_INTERNAL_HEADER Header;
    LARGE_INTEGER ReturnTime;
};
struct alignas( 8 ) _SAM_OPERATION_OBJCHG_INPUT
{
    BOOLEAN Register;
    ULONG64 EventHandle;
    SECURITY_DB_OBJECT_TYPE ObjectType;
    ULONG ProcessID;
};
union alignas( 8 ) _SAM_GENERIC_OPERATION_INPUT
{
    SAM_OPERATION_OBJCHG_INPUT ObjChangeIn;
};
struct alignas( 4 ) _POWER_STANDBY_NETWORK_REQUEST
{
    POWER_INFORMATION_INTERNAL_HEADER PowerInformationInternalHeader;
    BOOLEAN Active;
};
struct alignas( 4 ) _POWER_SET_BACKGROUND_TASK_STATE
{
    POWER_INFORMATION_INTERNAL_HEADER PowerInformationInternalHeader;
    BOOLEAN Engaged;
};
struct alignas( 8 ) _LSA_TOKEN_INFORMATION_V1
{
    LARGE_INTEGER ExpirationTime;
    TOKEN_USER User;
    PTOKEN_GROUPS Groups;
    TOKEN_PRIMARY_GROUP PrimaryGroup;
    PTOKEN_PRIVILEGES Privileges;
    TOKEN_OWNER Owner;
    TOKEN_DEFAULT_DACL DefaultDacl;
};
struct alignas( 4 ) _POWER_BOOT_SESSION_STANDBY_ACTIVATION_INFO
{
    ULONG StandbyTotalTime;
    ULONG DripsTotalTime;
    ULONG ActivatorClientTotalActiveTime;
    ULONG PerActivatorClientTotalActiveTime[98];
};
struct alignas( 4 ) _POWER_SESSION_POWER_STATE
{
    POWER_INFORMATION_INTERNAL_HEADER Header;
    ULONG SessionId;
    BOOLEAN On;
    BOOLEAN IsConsole;
    POWER_MONITOR_REQUEST_REASON RequestReason;
};
struct alignas( 1 ) _POWER_INTERNAL_PROCESSOR_QOS_SUPPORT
{
    BOOLEAN QosSupportedAndConfigured;
    BOOLEAN SchedulerDirectedPerfStatesSupported;
    BOOLEAN QosGroupPolicyDisable;
};
struct alignas( 4 ) _POWER_INTERNAL_HOST_ENERGY_SAVER_STATE
{
    POWER_INFORMATION_INTERNAL_HEADER Header;
    BOOLEAN EsEnabledOnHost;
};
struct alignas( 4 ) _POWER_INTERNAL_PROCESSOR_BRANDED_FREQUENCY_INPUT
{
    POWER_INFORMATION_LEVEL_INTERNAL InternalType;
    PROCESSOR_NUMBER ProcessorNumber;
};
struct alignas( 4 ) _POWER_INTERNAL_PROCESSOR_BRANDED_FREQUENCY_OUTPUT
{
    ULONG Version;
    ULONG NominalFrequency;
};
struct alignas( 4 ) _PROCESSOR_IDLE_VETO
{
    ULONG Version;
    PROCESSOR_NUMBER ProcessorNumber;
    ULONG StateIndex;
    ULONG VetoReason;
    UCHAR Increment;
};
struct alignas( 4 ) _PLATFORM_IDLE_VETO
{
    ULONG Version;
    ULONG StateIndex;
    ULONG VetoReason;
    UCHAR Increment;
};
struct alignas( 4 ) _POWER_INTERNAL_BOOTAPP_DIAGNOSTIC
{
    ULONG BootAppErrorDiagCode;
    ULONG BootAppFailureStatus;
};
struct alignas( 8 ) _KEY_BASIC_INFORMATION
{
    LARGE_INTEGER LastWriteTime;
    ULONG TitleIndex;
    ULONG NameLength;
    WCHAR Name[1];
};
struct alignas( 8 ) _KEY_NODE_INFORMATION
{
    LARGE_INTEGER LastWriteTime;
    ULONG TitleIndex;
    ULONG ClassOffset;
    ULONG ClassLength;
    ULONG NameLength;
    WCHAR Name[1];
};
struct alignas( 8 ) _KEY_FULL_INFORMATION
{
    LARGE_INTEGER LastWriteTime;
    ULONG TitleIndex;
    ULONG ClassOffset;
    ULONG ClassLength;
    ULONG SubKeys;
    ULONG MaxNameLength;
    ULONG MaxClassLength;
    ULONG Values;
    ULONG MaxValueNameLength;
    ULONG MaxValueDataLength;
    WCHAR Class[1];
};
struct alignas( 4 ) _KEY_NAME_INFORMATION
{
    ULONG NameLength;
    WCHAR Name[1];
};
struct alignas( 8 ) _KEY_CACHED_INFORMATION
{
    LARGE_INTEGER LastWriteTime;
    ULONG TitleIndex;
    ULONG SubKeys;
    ULONG MaxNameLength;
    ULONG Values;
    ULONG MaxValueNameLength;
    ULONG MaxValueDataLength;
    ULONG NameLength;
    WCHAR Name[1];
};
struct alignas( 4 ) _KEY_FLAGS_INFORMATION
{
    ULONG Wow64Flags;
    ULONG KeyFlags;
    ULONG ControlFlags;
};
struct alignas( 4 ) _KEY_VIRTUALIZATION_INFORMATION
{
    ULONG VirtualizationCandidate : 1;
    ULONG VirtualizationEnabled : 1;
    ULONG VirtualTarget : 1;
    ULONG VirtualStore : 1;
    ULONG VirtualSource : 1;
    ULONG Reserved : 27;
};
struct alignas( 4 ) _KEY_TRUST_INFORMATION
{
    ULONG TrustedKey : 1;
    ULONG Reserved : 31;
};
struct alignas( 4 ) _KEY_LAYER_INFORMATION
{
    ULONG IsTombstone : 1;
    ULONG IsSupersedeLocal : 1;
    ULONG IsSupersedeTree : 1;
    ULONG ClassIsInherited : 1;
    ULONG Reserved : 28;
};
struct alignas( 8 ) _KEY_WRITE_TIME_INFORMATION
{
    LARGE_INTEGER LastWriteTime;
};
struct alignas( 4 ) _KEY_WOW64_FLAGS_INFORMATION
{
    ULONG UserFlags;
};
struct alignas( 4 ) _KEY_HANDLE_TAGS_INFORMATION
{
    ULONG HandleTags;
};
struct alignas( 4 ) _KEY_SET_LAYER_INFORMATION
{
    ULONG IsTombstone : 1;
    ULONG IsSupersedeLocal : 1;
    ULONG IsSupersedeTree : 1;
    ULONG ClassIsInherited : 1;
    ULONG Reserved : 28;
};
struct alignas( 4 ) _KEY_CONTROL_FLAGS_INFORMATION
{
    ULONG ControlFlags;
};
struct alignas( 4 ) _KEY_SET_VIRTUALIZATION_INFORMATION
{
    ULONG VirtualTarget : 1;
    ULONG VirtualStore : 1;
    ULONG VirtualSource : 1;
    ULONG Reserved : 29;
};
struct alignas( 4 ) _KEY_VALUE_BASIC_INFORMATION
{
    ULONG TitleIndex;
    ULONG Type;
    ULONG NameLength;
    WCHAR Name[1];
};
struct alignas( 4 ) _KEY_VALUE_FULL_INFORMATION
{
    ULONG TitleIndex;
    ULONG Type;
    ULONG DataOffset;
    ULONG DataLength;
    ULONG NameLength;
    WCHAR Name[1];
};
struct alignas( 4 ) _KEY_VALUE_PARTIAL_INFORMATION
{
    ULONG TitleIndex;
    ULONG Type;
    ULONG DataLength;
    UCHAR Data[1];
};
struct alignas( 8 ) _LOGON_HOURS
{
    USHORT UnitsPerWeek;
    PUCHAR LogonHours;
};
struct alignas( 8 ) _SR_SECURITY_DESCRIPTOR
{
    ULONG Length;
    PUCHAR SecurityDescriptor;
};
struct alignas( 4 ) _USER_ALL_INFORMATION
{
    LARGE_INTEGER LastLogon;
    LARGE_INTEGER LastLogoff;
    LARGE_INTEGER PasswordLastSet;
    LARGE_INTEGER AccountExpires;
    LARGE_INTEGER PasswordCanChange;
    LARGE_INTEGER PasswordMustChange;
    UNICODE_STRING UserName;
    UNICODE_STRING FullName;
    UNICODE_STRING HomeDirectory;
    UNICODE_STRING HomeDirectoryDrive;
    UNICODE_STRING ScriptPath;
    UNICODE_STRING ProfilePath;
    UNICODE_STRING AdminComment;
    UNICODE_STRING WorkStations;
    UNICODE_STRING UserComment;
    UNICODE_STRING Parameters;
    UNICODE_STRING LmPassword;
    UNICODE_STRING NtPassword;
    UNICODE_STRING PrivateData;
    SR_SECURITY_DESCRIPTOR SecurityDescriptor;
    ULONG UserId;
    ULONG PrimaryGroupId;
    ULONG UserAccountControl;
    ULONG WhichFields;
    LOGON_HOURS LogonHours;
    USHORT BadPasswordCount;
    USHORT LogonCount;
    USHORT CountryCode;
    USHORT CodePage;
    BOOLEAN LmPasswordPresent;
    BOOLEAN NtPasswordPresent;
    BOOLEAN PasswordExpired;
    BOOLEAN PrivateDataSensitive;
};
struct alignas( 4 ) _USER_INTERNAL4_INFORMATION_NEW
{
    USER_ALL_INFORMATION I1;
    ENCRYPTED_USER_PASSWORD_NEW UserPassword;
};
struct alignas( 4 ) _KEY_VALUE_PARTIAL_INFORMATION_ALIGN64
{
    ULONG Type;
    ULONG DataLength;
    UCHAR Data[1];
};
struct alignas( 8 ) _LSA_REFERENCED_DOMAIN_LIST
{
    ULONG Entries;
    PLSA_TRUST_INFORMATION Domains;
};
struct alignas( 8 ) _ETW_DFSS_RELEASE_THREAD_ON_IDLE
{
    ULONG CurrentGeneration;
    ULONG SessionSelectedToRun;
    ULONG64 CycleBaseAllowance;
    LONG64 CyclesRemaining;
};
struct alignas( 8 ) _CM_EXTENDED_PARAMETER
{
    struct alignas( 8 )
    {
        ULONG64 Type : 8;
        ULONG64 Reserved : 56;
    };
    union alignas( 8 )
    {
        ULONG64 ULong64;
        PVOID Pointer;
        SIZE_T Size;
        HANDLE Handle;
        ULONG ULong;
        ACCESS_MASK AccessMask;
    };
};
struct alignas( 8 ) _USER_INTERNAL6_INFORMATION
{
    USER_ALL_INFORMATION I1;
    LARGE_INTEGER LastBadPasswordTime;
    ULONG ExtendedFields;
    BOOLEAN UPNDefaulted;
    UNICODE_STRING UPN;
    PUSER_ALLOWED_TO_DELEGATE_TO_LIST A2D2List;
};
struct alignas( 8 ) _KEY_VALUE_ENTRY
{
    PUNICODE_STRING ValueName;
    ULONG DataLength;
    ULONG DataOffset;
    ULONG Type;
};
struct alignas( 4 ) _REG_NOTIFY_INFORMATION
{
    ULONG NextEntryOffset;
    REG_ACTION Action;
    ULONG KeyLength;
    WCHAR Key[1];
};
struct alignas( 8 ) _KEY_PID_ARRAY
{
    HANDLE ProcessId;
    UNICODE_STRING KeyName;
};
struct alignas( 8 ) _KEY_OPEN_SUBKEYS_INFORMATION
{
    ULONG Count;
    KEY_PID_ARRAY KeyArray[1];
};
struct alignas( 8 ) _VR_INITIALIZE_JOB_FOR_VREG
{
    HANDLE Job;
};
struct alignas( 8 ) _VR_LOAD_DIFFERENCING_HIVE
{
    HANDLE Job;
    ULONG NextLayerIsHost;
    ULONG Flags;
    ULONG LoadFlags;
    USHORT KeyPathLength;
    USHORT HivePathLength;
    USHORT NextLayerKeyPathLength;
    HANDLE FileAccessToken;
    WCHAR Strings[1];
};
struct alignas( 8 ) _VR_CREATE_NAMESPACE_NODE
{
    HANDLE Job;
    USHORT ContainerPathLength;
    USHORT HostPathLength;
    ULONG Flags;
    ACCESS_MASK AccessMask;
    WCHAR Strings[1];
};
struct alignas( 8 ) _VR_MODIFY_FLAGS
{
    HANDLE Job;
    ULONG AddFlags;
    ULONG RemoveFlags;
};
struct alignas( 4 ) _NAMESPACE_NODE_DATA
{
    ACCESS_MASK AccessMask;
    USHORT ContainerPathLength;
    USHORT HostPathLength;
    ULONG Flags;
    WCHAR Strings[1];
};
struct alignas( 8 ) _VR_CREATE_MULTIPLE_NAMESPACE_NODES
{
    HANDLE Job;
    ULONG NumNewKeys;
    NAMESPACE_NODE_DATA Keys[1];
};
struct alignas( 8 ) _VR_UNLOAD_DYNAMICALLY_LOADED_HIVES
{
    HANDLE Job;
};
struct alignas( 8 ) _VR_GET_VIRTUAL_ROOT
{
    HANDLE Job;
    ULONG Index;
};
struct alignas( 4 ) _TRUSTED_POSIX_OFFSET_INFO
{
    ULONG Offset;
};
struct alignas( 8 ) _TRUSTED_CONTROLLERS_INFO
{
    ULONG Entries;
    PLSA_UNICODE_STRING Names;
};
struct alignas( 8 ) _RTL_IMAGE_MITIGATION_ASLR_POLICY
{
    RTL_IMAGE_MITIGATION_POLICY ForceRelocateImages;
    RTL_IMAGE_MITIGATION_POLICY BottomUpRandomization;
    RTL_IMAGE_MITIGATION_POLICY HighEntropyRandomization;
};
struct alignas( 8 ) _VR_GET_VIRTUAL_ROOT_RESULT
{
    HANDLE Key;
};
struct alignas( 4 ) _VR_UNLOAD_DIFFERENCING_HIVE_FOR_HOST
{
    ULONG Reserved;
    USHORT TargetKeyPathLength;
    WCHAR TargetKeyPath[1];
};
struct alignas( 8 ) _WMI_PROCESS_INFORMATION64
{
    ULONG64 UniqueProcessKey64;
    ULONG ProcessId;
    ULONG ParentId;
    ULONG SessionId;
    NTSTATUS ExitStatus;
    ULONG64 DirectoryTableBase;
    ULONG Flags;
    ULONG Sid;
};
struct alignas( 8 ) _TRUSTED_DOMAIN_INFORMATION_EX2
{
    LSA_UNICODE_STRING Name;
    LSA_UNICODE_STRING FlatName;
    PSID Sid;
    ULONG TrustDirection;
    ULONG TrustType;
    ULONG TrustAttributes;
    ULONG ForestTrustLength;
    PUCHAR ForestTrustInfo;
};
struct alignas( 8 ) _RTL_IMAGE_MITIGATION_SYSTEM_CALL_DISABLE_POLICY
{
    RTL_IMAGE_MITIGATION_POLICY BlockWin32kSystemCalls;
};
struct alignas( 8 ) _RTL_BALANCED_LINKS
{
    _RTL_BALANCED_LINKS* Parent;
    _RTL_BALANCED_LINKS* LeftChild;
    _RTL_BALANCED_LINKS* RightChild;
    CHAR Balance;
    UCHAR Reserved[3];
};
struct alignas( 8 ) _RTL_AVL_TABLE
{
    RTL_BALANCED_LINKS BalancedRoot;
    PVOID OrderedPointer;
    ULONG WhichOrderedElement;
    ULONG NumberGenericTableElements;
    ULONG DepthOfTree;
    PRTL_BALANCED_LINKS RestartKey;
    ULONG DeleteCount;
    PRTL_AVL_COMPARE_ROUTINE CompareRoutine;
    PRTL_AVL_ALLOCATE_ROUTINE AllocateRoutine;
    PRTL_AVL_FREE_ROUTINE FreeRoutine;
    PVOID TableContext;
};
struct alignas( 8 ) _RTL_SPLAY_LINKS
{
    _RTL_SPLAY_LINKS* Parent;
    _RTL_SPLAY_LINKS* LeftChild;
    _RTL_SPLAY_LINKS* RightChild;
};
struct alignas( 8 ) _RTL_GENERIC_TABLE
{
    PRTL_SPLAY_LINKS TableRoot;
    LIST_ENTRY InsertOrderList;
    PLIST_ENTRY OrderedPointer;
    ULONG WhichOrderedElement;
    ULONG NumberGenericTableElements;
    PRTL_GENERIC_COMPARE_ROUTINE CompareRoutine;
    PRTL_GENERIC_ALLOCATE_ROUTINE AllocateRoutine;
    PRTL_GENERIC_FREE_ROUTINE FreeRoutine;
    PVOID TableContext;
};
struct alignas( 8 ) _RTL_RB_TREE
{
    PRTL_BALANCED_NODE Root;
    PRTL_BALANCED_NODE Min;
};
struct alignas( 8 ) _RTL_DYNAMIC_HASH_TABLE_ENTRY
{
    LIST_ENTRY Linkage;
    ULONG_PTR Signature;
};
struct alignas( 8 ) _RTL_DYNAMIC_HASH_TABLE_CONTEXT
{
    PLIST_ENTRY ChainHead;
    PLIST_ENTRY PrevLinkage;
    ULONG_PTR Signature;
};
struct alignas( 8 ) _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR
{
    RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
    PLIST_ENTRY ChainHead;
    ULONG BucketIndex;
};
struct alignas( 8 ) _RTL_DYNAMIC_HASH_TABLE
{
    ULONG Flags;
    ULONG Shift;
    ULONG TableSize;
    ULONG Pivot;
    ULONG DivisorMask;
    ULONG NumEntries;
    ULONG NonEmptyBuckets;
    ULONG NumEnumerators;
    PVOID Directory;
};
struct alignas( 8 ) _RTL_RESOURCE
{
    RTL_CRITICAL_SECTION CriticalSection;
    HANDLE SharedSemaphore;
    volatile ULONG NumberOfWaitingShared;
    HANDLE ExclusiveSemaphore;
    volatile ULONG NumberOfWaitingExclusive;
    volatile LONG NumberOfActive;
    HANDLE ExclusiveOwnerThread;
    ULONG Flags;
    PRTL_RESOURCE_DEBUG DebugInfo;
};
struct alignas( 8 ) _PREFIX_TABLE_ENTRY
{
    CSHORT NodeTypeCode;
    CSHORT NameLength;
    _PREFIX_TABLE_ENTRY* NextPrefixTree;
    RTL_SPLAY_LINKS Links;
    PSTRING Prefix;
};
struct alignas( 8 ) _PREFIX_TABLE
{
    CSHORT NodeTypeCode;
    CSHORT NameLength;
    PPREFIX_TABLE_ENTRY NextPrefixTree;
};
struct alignas( 8 ) _UNICODE_PREFIX_TABLE_ENTRY
{
    CSHORT NodeTypeCode;
    CSHORT NameLength;
    _UNICODE_PREFIX_TABLE_ENTRY* NextPrefixTree;
    _UNICODE_PREFIX_TABLE_ENTRY* CaseMatch;
    RTL_SPLAY_LINKS Links;
    PUNICODE_STRING Prefix;
};
struct alignas( 8 ) _UNICODE_PREFIX_TABLE
{
    CSHORT NodeTypeCode;
    CSHORT NameLength;
    PUNICODE_PREFIX_TABLE_ENTRY NextPrefixTree;
    PUNICODE_PREFIX_TABLE_ENTRY LastNextEntry;
};
struct alignas( 4 ) _COMPRESSED_DATA_INFO
{
    USHORT CompressionFormatAndEngine;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved;
    USHORT NumberOfChunks;
    ULONG CompressedChunkSizes[1];
};
struct alignas( 8 ) _RTL_MEMORY_ZONE_SEGMENT
{
    _RTL_MEMORY_ZONE_SEGMENT* NextSegment;
    SIZE_T Size;
    PVOID Next;
    PVOID Limit;
};
struct alignas( 8 ) _RTL_MEMORY_ZONE
{
    RTL_MEMORY_ZONE_SEGMENT Segment;
    RTL_SRWLOCK Lock;
    ULONG LockCount;
    PRTL_MEMORY_ZONE_SEGMENT FirstSegment;
};
struct alignas( 8 ) _LSA_DISPATCH_TABLE
{
    PLSA_CREATE_LOGON_SESSION CreateLogonSession;
    PLSA_DELETE_LOGON_SESSION DeleteLogonSession;
    PLSA_ADD_CREDENTIAL AddCredential;
    PLSA_GET_CREDENTIALS GetCredentials;
    PLSA_DELETE_CREDENTIAL DeleteCredential;
    PLSA_ALLOCATE_LSA_HEAP AllocateLsaHeap;
    PLSA_FREE_LSA_HEAP FreeLsaHeap;
    PLSA_ALLOCATE_CLIENT_BUFFER AllocateClientBuffer;
    PLSA_FREE_CLIENT_BUFFER FreeClientBuffer;
    PLSA_COPY_TO_CLIENT_BUFFER CopyToClientBuffer;
    PLSA_COPY_FROM_CLIENT_BUFFER CopyFromClientBuffer;
};
struct alignas( 8 ) _RTL_DEBUG_INFORMATION
{
    HANDLE SectionHandleClient;
    PVOID ViewBaseClient;
    PVOID ViewBaseTarget;
    ULONG_PTR ViewBaseDelta;
    HANDLE EventPairClient;
    HANDLE EventPairTarget;
    HANDLE TargetProcessId;
    HANDLE TargetThreadHandle;
    ULONG Flags;
    SIZE_T OffsetFree;
    SIZE_T CommitSize;
    SIZE_T ViewSize;
    union alignas( 8 )
    {
        PRTL_PROCESS_MODULES Modules;
        PRTL_PROCESS_MODULE_INFORMATION_EX ModulesEx;
    };
    PRTL_PROCESS_BACKTRACES BackTraces;
    PVOID Heaps;
    PRTL_PROCESS_LOCKS Locks;
    PVOID SpecificHeap;
    HANDLE TargetProcessHandle;
    PRTL_PROCESS_VERIFIER_OPTIONS VerifierOptions;
    PVOID ProcessHeap;
    HANDLE CriticalSectionHandle;
    HANDLE CriticalSectionOwnerThread;
    PVOID Reserved[4];
};
struct alignas( 8 ) _WMI_BUFFER_HEADER
{
    ULONG BufferSize;
    ULONG SavedOffset;
    volatile ULONG CurrentOffset;
    volatile LONG ReferenceCount;
    LARGE_INTEGER TimeStamp;
    LONGLONG SequenceNumber;
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            ULONGLONG ClockType : 3;
            ULONGLONG Frequency : 61;
        };
        SINGLE_LIST_ENTRY SlistEntry;
        PWMI_BUFFER_HEADER NextBuffer;
    };
    ETW_BUFFER_CONTEXT ClientContext;
    ETW_BUFFER_STATE State;
    ULONG Offset;
    USHORT BufferFlag;
    USHORT BufferType;
    union alignas( 8 )
    {
        ULONG Padding1[4];
        ETW_REF_CLOCK ReferenceTime;
        LIST_ENTRY GlobalEntry;
        struct alignas( 8 )
        {
            PVOID Pointer0;
            PVOID Pointer1;
        };
    };
};
struct alignas( 8 ) _RTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION
{
    HANDLE ReflectionProcessHandle;
    HANDLE ReflectionThreadHandle;
    CLIENT_ID ReflectionClientId;
};
struct alignas( 4 ) _CONTEXT_CHUNK
{
    LONG Offset;
    ULONG Length;
};
struct alignas( 4 ) _CONTEXT_EX
{
    CONTEXT_CHUNK All;
    CONTEXT_CHUNK Legacy;
    CONTEXT_CHUNK XState;
    CONTEXT_CHUNK KernelCet;
};
struct alignas( 8 ) _RTLP_CURDIR_REF
{
    LONG ReferenceCount;
    HANDLE DirectoryHandle;
};
struct alignas( 8 ) _RTL_RELATIVE_NAME_U
{
    UNICODE_STRING RelativeName;
    HANDLE ContainingDirectory;
    PRTLP_CURDIR_REF CurDirRef;
};
struct alignas( 8 ) _RTL_BUFFER
{
    PUCHAR Buffer;
    PUCHAR StaticBuffer;
    SIZE_T Size;
    SIZE_T StaticSize;
};
struct alignas( 8 ) _RTL_UNICODE_STRING_BUFFER
{
    UNICODE_STRING String;
    RTL_BUFFER ByteBuffer;
    UCHAR MinimumStaticBufferForTerminalNul[2];
};
struct alignas( 4 ) _GENERATE_NAME_CONTEXT
{
    USHORT Checksum;
    BOOLEAN CheckSumInserted;
    UCHAR NameLength;
    WCHAR NameBuffer[8];
    ULONG ExtensionLength;
    WCHAR ExtensionBuffer[4];
    ULONG LastIndexValue;
};
struct alignas( 8 ) _RTL_HEAP_ENTRY
{
    SIZE_T Size;
    USHORT Flags;
    USHORT AllocatorBackTraceIndex;
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            SIZE_T Settable;
            ULONG Tag;
        } s1;
        struct alignas( 8 )
        {
            SIZE_T CommittedSize;
            PVOID FirstBlock;
        } s2;
    } u;
};
struct alignas( 8 ) _ETW_AUTOBOOST_CLEAR_PRIORITY_FLOOR_EVENT
{
    PVOID Lock;
    ULONG ThreadId;
    union alignas( 2 )
    {
        struct alignas( 2 )
        {
            USHORT IoBoost : 1;
            USHORT CpuBoostsBitmap : 15;
        };
        USHORT BoostBitmap;
    };
    USHORT Reserved;
};
struct alignas( 8 ) _SYSTEM_FEATURE_CONFIGURATION_SECTIONS_REQUEST
{
    RTL_FEATURE_CHANGE_STAMP PreviousChangeStamps[3];
};
struct alignas( 8 ) _DOMAIN_PASSWORD_INFORMATION
{
    USHORT MinPasswordLength;
    USHORT PasswordHistoryLength;
    ULONG PasswordProperties;
    LARGE_INTEGER MaxPasswordAge;
    LARGE_INTEGER MinPasswordAge;
};
struct alignas( 8 ) _SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION
{
    RTL_FEATURE_CHANGE_STAMP OverallChangeStamp;
    SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION_ENTRY Descriptors[3];
};
struct alignas( 8 ) _RTL_HEAP_INFORMATION_V2
{
    PVOID BaseAddress;
    ULONG Flags;
    USHORT EntryOverhead;
    USHORT CreatorBackTraceIndex;
    SIZE_T BytesAllocated;
    SIZE_T BytesCommitted;
    ULONG NumberOfTags;
    ULONG NumberOfEntries;
    ULONG NumberOfPseudoTags;
    ULONG PseudoTagGranularity;
    ULONG Reserved[5];
    PRTL_HEAP_TAG Tags;
    PRTL_HEAP_ENTRY Entries;
    ULONG64 HeapTag;
};
struct alignas( 8 ) _RTL_PROCESS_HEAPS_V2
{
    ULONG NumberOfHeaps;
    RTL_HEAP_INFORMATION_V2 Heaps[1];
};
struct alignas( 8 ) _RTL_SEGMENT_HEAP_VA_CALLBACKS
{
    HANDLE CallbackContext;
    PALLOCATE_VIRTUAL_MEMORY_EX_CALLBACK AllocateVirtualMemory;
    PFREE_VIRTUAL_MEMORY_EX_CALLBACK FreeVirtualMemory;
    PQUERY_VIRTUAL_MEMORY_CALLBACK QueryVirtualMemory;
};
struct alignas( 8 ) _RTL_SEGMENT_HEAP_MEMORY_SOURCE
{
    ULONG Flags;
    ULONG MemoryTypeMask;
    ULONG NumaNode;
    union alignas( 8 )
    {
        HANDLE PartitionHandle;
        RTL_SEGMENT_HEAP_VA_CALLBACKS* Callbacks;
    };
    SIZE_T Reserved[2];
};
struct alignas( 8 ) _RTL_SEGMENT_HEAP_PARAMETERS
{
    USHORT Version;
    USHORT Size;
    ULONG Flags;
    RTL_SEGMENT_HEAP_MEMORY_SOURCE MemorySource;
    SIZE_T Reserved[4];
};
struct alignas( 8 ) _RTL_HEAP_PARAMETERS
{
    ULONG Length;
    SIZE_T SegmentReserve;
    SIZE_T SegmentCommit;
    SIZE_T DeCommitFreeBlockThreshold;
    SIZE_T DeCommitTotalFreeThreshold;
    SIZE_T MaximumAllocationSize;
    SIZE_T VirtualMemoryThreshold;
    SIZE_T InitialCommit;
    SIZE_T InitialReserve;
    PRTL_HEAP_COMMIT_ROUTINE CommitRoutine;
    SIZE_T Reserved[2];
};
struct alignas( 8 ) _RTL_HEAP_TAG_INFO
{
    ULONG NumberOfAllocations;
    ULONG NumberOfFrees;
    SIZE_T BytesAllocated;
};
struct alignas( 8 ) _RTL_HEAP_USAGE_ENTRY
{
    _RTL_HEAP_USAGE_ENTRY* Next;
    PVOID Address;
    SIZE_T Size;
    USHORT AllocatorBackTraceIndex;
    USHORT TagIndex;
};
struct alignas( 8 ) _RTL_HEAP_USAGE
{
    ULONG Length;
    SIZE_T BytesAllocated;
    SIZE_T BytesCommitted;
    SIZE_T BytesReserved;
    SIZE_T BytesReservedMaximum;
    PRTL_HEAP_USAGE_ENTRY Entries;
    PRTL_HEAP_USAGE_ENTRY AddedEntries;
    PRTL_HEAP_USAGE_ENTRY RemovedEntries;
    ULONG_PTR Reserved[8];
};
struct alignas( 8 ) _RTL_HEAP_WALK_ENTRY
{
    PVOID DataAddress;
    SIZE_T DataSize;
    UCHAR OverheadBytes;
    UCHAR SegmentIndex;
    USHORT Flags;
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            SIZE_T Settable;
            USHORT TagIndex;
            USHORT AllocatorBackTraceIndex;
            ULONG Reserved[2];
        } Block;
        struct alignas( 8 )
        {
            ULONG CommittedSize;
            ULONG UnCommittedSize;
            PVOID FirstEntry;
            PVOID LastEntry;
        } Segment;
    };
};
struct alignas( 8 ) _RTLP_TAG_INFO
{
    GUID Id;
    ULONG_PTR CurrentAllocatedBytes;
};
struct alignas( 8 ) _RTLP_HEAP_TAGGING_INFO
{
    USHORT Version;
    USHORT Flags;
    PVOID ProcessHandle;
    ULONG_PTR EntriesCount;
    RTLP_TAG_INFO Entries[1];
};
struct alignas( 8 ) _LSA_FOREST_TRUST_INFORMATION
{
    ULONG RecordCount;
    PLSA_FOREST_TRUST_RECORD* Entries;
};
struct alignas( 8 ) _RTL_BSD_DATA_POWER_TRANSITION
{
    LARGE_INTEGER PowerButtonTimestamp;
    struct alignas( 1 )
    {
        BOOLEAN SystemRunning : 1;
        BOOLEAN ConnectedStandbyInProgress : 1;
        BOOLEAN UserShutdownInProgress : 1;
        BOOLEAN SystemShutdownInProgress : 1;
        BOOLEAN SleepInProgress : 4;
    } Flags;
    UCHAR ConnectedStandbyScenarioInstanceId;
    UCHAR ConnectedStandbyEntryReason;
    UCHAR ConnectedStandbyExitReason;
    USHORT SystemSleepTransitionCount;
    LARGE_INTEGER LastReferenceTime;
    ULONG LastReferenceTimeChecksum;
    ULONG LastUpdateBootId;
};
struct alignas( 8 ) _RTL_BSD_POWER_BUTTON_PRESS_INFO
{
    LARGE_INTEGER LastPressTime;
    ULONG CumulativePressCount;
    USHORT LastPressBootId;
    UCHAR LastPowerWatchdogStage;
    struct alignas( 1 )
    {
        UCHAR WatchdogArmed : 1;
        UCHAR ShutdownInProgress : 1;
    } Flags;
    LARGE_INTEGER LastReleaseTime;
    ULONG CumulativeReleaseCount;
    USHORT LastReleaseBootId;
    USHORT ErrorCount;
    UCHAR CurrentConnectedStandbyPhase;
    ULONG TransitionLatestCheckpointId;
    ULONG TransitionLatestCheckpointType;
    ULONG TransitionLatestCheckpointSequenceNumber;
};
struct alignas( 8 ) _LSA_FOREST_TRUST_COLLISION_RECORD
{
    ULONG Index;
    LSA_FOREST_TRUST_COLLISION_RECORD_TYPE Type;
    ULONG Flags;
    LSA_UNICODE_STRING Name;
};
struct alignas( 8 ) _ETW_OPTICALIO_READWRITE
{
    ULONG DiskNumber;
    ULONG IrpFlags;
    ULONG Size;
    ULONG Reserved;
    ULONGLONG ByteOffset;
    PVOID FileObject;
    PVOID IrpAddress;
    ULONGLONG HighResResponseTime;
    ULONG IssuingThreadId;
};
struct alignas( 8 ) _WMI_DISKIO_IO_REDIRECTED_INIT
{
    PVOID Irp;
    PVOID FileKey;
};
struct alignas( 8 ) _HEAP_EXTENDED_INFORMATION
{
    HANDLE ProcessHandle;
    PVOID HeapHandle;
    ULONG Level;
    PRTL_HEAP_EXTENDED_ENUMERATION_ROUTINE CallbackRoutine;
    PVOID CallbackContext;
    union alignas( 8 )
    {
        PROCESS_HEAP_INFORMATION ProcessHeapInformation;
        HEAP_INFORMATION HeapInformation;
    };
};
struct alignas( 4 ) _RTLP_HEAP_STACK_TRACE_SERIALIZATION_INIT
{
    ULONG Count;
    ULONG Total;
    ULONG Flags;
};
struct alignas( 8 ) _RTLP_HEAP_STACK_TRACE_SERIALIZATION_HEADER
{
    USHORT Version;
    USHORT PointerSize;
    PVOID Heap;
    SIZE_T TotalCommit;
    SIZE_T TotalReserve;
};
struct alignas( 8 ) _RTLP_HEAP_STACK_TRACE_SERIALIZATION_ALLOCATION
{
    PVOID Address;
    ULONG Flags;
    SIZE_T DataSize;
};
struct alignas( 8 ) _RTLP_HEAP_STACK_TRACE_SERIALIZATION_STACKFRAME
{
    PVOID StackFrame[8];
};
struct alignas( 8 ) _RTL_HEAP_STACK_QUERY
{
    ULONG Version;
    HANDLE ProcessHandle;
    RTL_HEAP_STACK_WRITE_ROUTINE WriteRoutine;
    PVOID SerializationContext;
    UCHAR QueryLevel;
    UCHAR Flags;
};
struct alignas( 8 ) _RTL_HEAP_STACK_CONTROL
{
    USHORT Version;
    USHORT Flags;
    HANDLE ProcessHandle;
};
struct alignas( 8 ) _HEAP_DEBUGGING_INFORMATION
{
    PRTL_HEAP_DEBUGGING_INTERCEPTOR_ROUTINE InterceptorFunction;
    USHORT InterceptorValue;
    ULONG ExtendedOptions;
    ULONG StackTraceDepth;
    SIZE_T MinTotalBlockSize;
    SIZE_T MaxTotalBlockSize;
    PRTL_HEAP_LEAK_ENUMERATION_ROUTINE HeapLeakEnumerationRoutine;
};
struct alignas( 8 ) _CI_LOG_MMCSS_STOP
{
    EVENT_TRACE_HEADER Header;
};
struct alignas( 8 ) _CI_LOG_MMCSS_START
{
    EVENT_TRACE_HEADER Header;
};
struct alignas( 4 ) _ETW_UMS_EVENT_DIRECTED_SWITCH_END
{
    ULONG ProcessId;
    ULONG ScheduledThreadId;
    ULONG PrimaryThreadId;
    ULONG SwitchFlags;
};
struct alignas( 4 ) _RTL_PROCESS_VERIFIER_OPTIONS
{
    ULONG SizeStruct;
    ULONG Option;
    UCHAR OptionData[1];
};
struct alignas( 8 ) _PARSE_MESSAGE_CONTEXT
{
    ULONG fFlags;
    ULONG cwSavColumn;
    SIZE_T iwSrc;
    SIZE_T iwDst;
    SIZE_T iwDstSpace;
    va_list lpvArgStart;
};
;
;
struct alignas( 2 ) _TIME_FIELDS
{
    CSHORT Year;
    CSHORT Month;
    CSHORT Day;
    CSHORT Hour;
    CSHORT Minute;
    CSHORT Second;
    CSHORT Milliseconds;
    CSHORT Weekday;
};
struct alignas( 4 ) _RTL_TIME_ZONE_INFORMATION
{
    LONG Bias;
    WCHAR StandardName[32];
    TIME_FIELDS StandardStart;
    LONG StandardBias;
    WCHAR DaylightName[32];
    TIME_FIELDS DaylightStart;
    LONG DaylightBias;
};
struct alignas( 4 ) _RTL_BITMAP_RUN
{
    ULONG StartingIndex;
    ULONG NumberOfBits;
};
struct alignas( 8 ) _RTL_BITMAP_EX
{
    ULONG64 SizeOfBitMap;
    PULONG64 Buffer;
};
struct alignas( 8 ) _RTL_HANDLE_TABLE_ENTRY
{
    union alignas( 8 )
    {
        ULONG Flags;
        _RTL_HANDLE_TABLE_ENTRY* NextFree;
    };
};
struct alignas( 8 ) _RTL_HANDLE_TABLE
{
    ULONG MaximumNumberOfHandles;
    ULONG SizeOfHandleTableEntry;
    ULONG Reserved[2];
    PRTL_HANDLE_TABLE_ENTRY FreeHandles;
    PRTL_HANDLE_TABLE_ENTRY CommittedHandles;
    PRTL_HANDLE_TABLE_ENTRY UnCommittedHandles;
    PRTL_HANDLE_TABLE_ENTRY MaxReservedHandles;
};
struct alignas( 4 ) _COMPOUND_ACCESS_ALLOWED_ACE
{
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    USHORT CompoundAceType;
    USHORT Reserved;
    ULONG SidStart;
};
struct alignas( 8 ) _RTL_ACE_DATA
{
    UCHAR AceType;
    UCHAR InheritFlags;
    UCHAR AceFlags;
    ACCESS_MASK AccessMask;
    PSID* Sid;
};
struct alignas( 8 ) _RTL_QUERY_REGISTRY_TABLE
{
    PRTL_QUERY_REGISTRY_ROUTINE QueryRoutine;
    ULONG Flags;
    PWSTR Name;
    PVOID EntryContext;
    ULONG DefaultType;
    PVOID DefaultData;
    ULONG DefaultLength;
};
union alignas( 4 ) _RTL_ELEVATION_FLAGS
{
    ULONG Flags;
    struct alignas( 4 )
    {
        ULONG ElevationEnabled : 1;
        ULONG VirtualizationEnabled : 1;
        ULONG InstallerDetectEnabled : 1;
        ULONG AdminApprovalModeType : 2;
        ULONG ReservedBits : 27;
    };
};
struct alignas( 8 ) _RTL_UNLOAD_EVENT_TRACE
{
    PVOID BaseAddress;
    SIZE_T SizeOfImage;
    ULONG Sequence;
    ULONG TimeDateStamp;
    ULONG CheckSum;
    WCHAR ImageName[32];
    ULONG Version[2];
};
struct alignas( 4 ) _RTL_UNLOAD_EVENT_TRACE32
{
    ULONG BaseAddress;
    ULONG SizeOfImage;
    ULONG Sequence;
    ULONG TimeDateStamp;
    ULONG CheckSum;
    WCHAR ImageName[32];
    ULONG Version[2];
};
struct alignas( 1 ) _ETW_HEAP_EVENT_EXPANSION
{
    SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    SIZE_T CommittedSize;
    PVOID Address;
    SIZE_T FreeSpace;
    SIZE_T CommittedSpace;
    SIZE_T ReservedSpace;
    ULONG NoOfUCRs;
    SIZE_T AllocatedSpace;
};
struct alignas( 8 ) _HEAP_COMMIT_DECOMMIT
{
    SYSTEM_TRACE_HEADER Header;
    HEAP_EVENT_COMMIT_DECOMMIT Event;
};
struct alignas( 8 ) _RTL_IMAGE_MITIGATION_EXTENSION_POINT_DISABLE_POLICY
{
    RTL_IMAGE_MITIGATION_POLICY DisableExtensionPoints;
};
struct alignas( 8 ) _RTL_IMAGE_MITIGATION_CONTROL_FLOW_GUARD_POLICY
{
    RTL_IMAGE_MITIGATION_POLICY ControlFlowGuard;
    RTL_IMAGE_MITIGATION_POLICY StrictControlFlowGuard;
};
struct alignas( 8 ) _RTL_IMAGE_MITIGATION_BINARY_SIGNATURE_POLICY
{
    RTL_IMAGE_MITIGATION_POLICY BlockNonMicrosoftSignedBinaries;
    RTL_IMAGE_MITIGATION_POLICY EnforceSigningOnModuleDependencies;
};
struct alignas( 8 ) _RTL_IMAGE_MITIGATION_FONT_DISABLE_POLICY
{
    RTL_IMAGE_MITIGATION_POLICY DisableNonSystemFonts;
};
struct alignas( 8 ) _RTL_IMAGE_MITIGATION_IMAGE_LOAD_POLICY
{
    RTL_IMAGE_MITIGATION_POLICY BlockRemoteImageLoads;
    RTL_IMAGE_MITIGATION_POLICY BlockLowLabelImageLoads;
    RTL_IMAGE_MITIGATION_POLICY PreferSystem32;
};
struct alignas( 8 ) _RTL_IMAGE_MITIGATION_PAYLOAD_RESTRICTION_POLICY
{
    RTL_IMAGE_MITIGATION_POLICY EnableExportAddressFilter;
    RTL_IMAGE_MITIGATION_POLICY EnableExportAddressFilterPlus;
    RTL_IMAGE_MITIGATION_POLICY EnableImportAddressFilter;
    RTL_IMAGE_MITIGATION_POLICY EnableRopStackPivot;
    RTL_IMAGE_MITIGATION_POLICY EnableRopCallerCheck;
    RTL_IMAGE_MITIGATION_POLICY EnableRopSimExec;
    WCHAR EafPlusModuleList[512];
};
struct alignas( 8 ) _RTL_IMAGE_MITIGATION_CHILD_PROCESS_POLICY
{
    RTL_IMAGE_MITIGATION_POLICY DisallowChildProcessCreation;
};
struct alignas( 8 ) _RTL_IMAGE_MITIGATION_SEHOP_POLICY
{
    RTL_IMAGE_MITIGATION_POLICY Sehop;
};
struct alignas( 8 ) _RTL_IMAGE_MITIGATION_HEAP_POLICY
{
    RTL_IMAGE_MITIGATION_POLICY TerminateOnHeapErrors;
};
struct alignas( 8 ) _RTL_IMAGE_MITIGATION_USER_SHADOW_STACK_POLICY
{
    RTL_IMAGE_MITIGATION_POLICY UserShadowStack;
    RTL_IMAGE_MITIGATION_POLICY SetContextIpValidation;
    RTL_IMAGE_MITIGATION_POLICY BlockNonCetBinaries;
};
struct alignas( 8 ) _RTL_IMAGE_MITIGATION_REDIRECTION_TRUST_POLICY
{
    RTL_IMAGE_MITIGATION_POLICY BlockUntrustedRedirections;
};
struct alignas( 8 ) _RTL_IMAGE_MITIGATION_USER_POINTER_AUTH_POLICY
{
    RTL_IMAGE_MITIGATION_POLICY PointerAuthUserIp;
};
struct alignas( 4 ) _PS_PKG_CLAIM
{
    ULONG Flags;
    ULONG Origin;
};
struct alignas( 1 ) _PERFINFO_DRIVER_COMPLETE_REQUEST_RET
{
    PVOID Irp;
    ULONG UniqMatchId;
};
struct alignas( 1 ) _PERFINFO_DRIVER_COMPLETE_REQUEST
{
    PVOID RoutineAddr;
    PVOID Irp;
    ULONG UniqMatchId;
};
struct alignas( 4 ) _RTL_BSD_DATA_ERROR_INFO
{
    ULONG BootId;
    ULONG RepeatCount;
    ULONG OtherErrorCount;
    ULONG Code;
    ULONG OtherErrorCount2;
};
struct alignas( 4 ) _PERFINFO_BATTERY_LIFE_INFO
{
    ULONG RemainingCapacity;
    ULONG Rate;
};
struct alignas( 4 ) _RTL_FEATURE_USAGE_REPORT
{
    ULONG FeatureId;
    USHORT ReportingKind;
    USHORT ReportingOptions;
};
struct alignas( 4 ) _RTL_FEATURE_CONFIGURATION
{
    RTL_FEATURE_ID FeatureId;
    union alignas( 4 )
    {
        ULONG Flags;
        struct alignas( 4 )
        {
            ULONG Priority : 4;
            ULONG EnabledState : 2;
            ULONG IsWexpConfiguration : 1;
            ULONG HasSubscriptions : 1;
            ULONG Variant : 6;
            ULONG VariantPayloadKind : 2;
            ULONG Reserved : 16;
        };
    };
    RTL_FEATURE_VARIANT_PAYLOAD VariantPayload;
};
struct alignas( 4 ) _RTL_FEATURE_CONFIGURATION_TABLE
{
    ULONG FeatureCount;
    RTL_FEATURE_CONFIGURATION Features[1];
};
struct alignas( 4 ) _RTL_FEATURE_CONFIGURATION_UPDATE
{
    RTL_FEATURE_ID FeatureId;
    RTL_FEATURE_CONFIGURATION_PRIORITY Priority;
    RTL_FEATURE_ENABLED_STATE EnabledState;
    RTL_FEATURE_ENABLED_STATE_OPTIONS EnabledStateOptions;
    RTL_FEATURE_VARIANT Variant;
    UCHAR Reserved[3];
    RTL_FEATURE_VARIANT_PAYLOAD_KIND VariantPayloadKind;
    RTL_FEATURE_VARIANT_PAYLOAD VariantPayload;
    RTL_FEATURE_CONFIGURATION_OPERATION Operation;
};
struct alignas( 4 ) _RTL_FEATURE_USAGE_DATA
{
    RTL_FEATURE_ID FeatureId;
    USHORT ReportingKind;
    USHORT Reserved;
};
struct alignas( 4 ) _RTL_FEATURE_USAGE_SUBSCRIPTION_TABLE
{
    ULONG SubscriptionCount;
    RTL_FEATURE_USAGE_SUBSCRIPTION_DETAILS Subscriptions[1];
};
struct alignas( 4 ) _SYSTEM_FEATURE_CONFIGURATION_QUERY
{
    RTL_FEATURE_CONFIGURATION_TYPE ConfigurationType;
    RTL_FEATURE_ID FeatureId;
};
struct alignas( 8 ) _SYSTEM_FEATURE_CONFIGURATION_INFORMATION
{
    RTL_FEATURE_CHANGE_STAMP ChangeStamp;
    RTL_FEATURE_CONFIGURATION Configuration;
};
struct alignas( 8 ) _SYSTEM_FEATURE_CONFIGURATION_UPDATE
{
    SYSTEM_FEATURE_CONFIGURATION_UPDATE_TYPE UpdateType;
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            RTL_FEATURE_CHANGE_STAMP PreviousChangeStamp;
            RTL_FEATURE_CONFIGURATION_TYPE ConfigurationType;
            ULONG UpdateCount;
            RTL_FEATURE_CONFIGURATION_UPDATE Updates[1];
        } Update;
        struct alignas( 8 )
        {
            RTL_FEATURE_CHANGE_STAMP PreviousChangeStamp;
            RTL_FEATURE_CONFIGURATION_TYPE ConfigurationType;
            SIZE_T BufferSize;
            PVOID Buffer;
        } Overwrite;
    };
};
struct alignas( 8 ) _ETW_CLOCK_STATE_CHANGE_EVENT
{
    UCHAR NewState;
    UCHAR PrevState;
    UCHAR Reserved[6];
    union alignas( 8 )
    {
        struct alignas( 8 )
        {
            ULONG64 DeliveredIncrement;
            ULONG64 RequestedIncrement;
        };
        ULONG64 NextClockUpdateTime;
    };
};
struct alignas( 8 ) _SAM_BYTE_ARRAY_32K
{
    ULONG Size;
    PUCHAR Data;
};
struct alignas( 4 ) _SYSTEM_FEATURE_USAGE_SUBSCRIPTION_UPDATE
{
    ULONG UpdateCount;
    SYSTEM_FEATURE_USAGE_SUBSCRIPTION_UPDATE_ENTRY Updates[1];
};
struct alignas( 4 ) _IMAGE_DEBUG_POGO_ENTRY
{
    ULONG Rva;
    ULONG Size;
    CHAR Name[1];
};
struct alignas( 4 ) _IMAGE_DEBUG_POGO_SIGNATURE
{
    ULONG Signature;
};
struct alignas( 2 ) _IMAGE_RELOCATION_RECORD
{
    USHORT Offset : 12;
    USHORT Type : 4;
};
struct alignas( 4 ) _IMAGE_CHPE_METADATA_X86
{
    ULONG Version;
    ULONG CHPECodeAddressRangeOffset;
    ULONG CHPECodeAddressRangeCount;
    ULONG WowA64ExceptionHandlerFunctionPointer;
    ULONG WowA64DispatchCallFunctionPointer;
    ULONG WowA64DispatchIndirectCallFunctionPointer;
    ULONG WowA64DispatchIndirectCallCfgFunctionPointer;
    ULONG WowA64DispatchRetFunctionPointer;
    ULONG WowA64DispatchRetLeafFunctionPointer;
    ULONG WowA64DispatchJumpFunctionPointer;
    ULONG CompilerIATPointer;
    ULONG WowA64RdtscFunctionPointer;
};
struct alignas( 4 ) _IMAGE_CHPE_RANGE_ENTRY
{
    union alignas( 4 )
    {
        ULONG StartOffset;
        struct alignas( 4 )
        {
            ULONG NativeCode : 1;
            ULONG AddressBits : 31;
        };
    };
    ULONG Length;
};
struct alignas( 4 ) _IMAGE_ARM64EC_METADATA
{
    ULONG Version;
    ULONG CodeMap;
    ULONG CodeMapCount;
    ULONG CodeRangesToEntryPoints;
    ULONG RedirectionMetadata;
    ULONG tbd__os_arm64x_dispatch_call_no_redirect;
    ULONG tbd__os_arm64x_dispatch_ret;
    ULONG tbd__os_arm64x_dispatch_call;
    ULONG tbd__os_arm64x_dispatch_icall;
    ULONG tbd__os_arm64x_dispatch_icall_cfg;
    ULONG AlternateEntryPoint;
    ULONG AuxiliaryIAT;
    ULONG CodeRangesToEntryPointsCount;
    ULONG RedirectionMetadataCount;
    ULONG GetX64InformationFunctionPointer;
    ULONG SetX64InformationFunctionPointer;
    ULONG ExtraRFETable;
    ULONG ExtraRFETableSize;
    ULONG __os_arm64x_dispatch_fptr;
    ULONG AuxiliaryIATCopy;
};
struct alignas( 4 ) _IMAGE_ARM64EC_CODE_MAP_ENTRY
{
    union alignas( 4 )
    {
        ULONG StartOffset;
        struct alignas( 4 )
        {
            ULONG Type : 2;
            ULONG AddressBits : 30;
        };
    };
    ULONG Length;
};
struct alignas( 4 ) _IMAGE_ARM64EC_REDIRECTION_ENTRY
{
    ULONG Source;
    ULONG Destination;
};
struct alignas( 8 ) _WMI_PROCESS_INFORMATION
{
    ULONG_PTR UniqueProcessKey;
    ULONG ProcessId;
    ULONG ParentId;
    ULONG SessionId;
    NTSTATUS ExitStatus;
    ULONG_PTR DirectoryTableBase;
    ULONG Flags;
    ULONG Sid;
};
struct alignas( 8 ) _TOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE
{
    ULONG64 Version;
    UNICODE_STRING Name;
};
struct alignas( 8 ) _TOKEN_SECURITY_ATTRIBUTE_V1
{
    UNICODE_STRING Name;
    USHORT ValueType;
    USHORT Reserved;
    ULONG Flags;
    ULONG ValueCount;
    union alignas( 8 )
    {
        PLONG64 Int64;
        PULONG64 Uint64;
        PUNICODE_STRING String;
        PTOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE Fqbn;
        PTOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE OctetString;
    } Values;
};
struct alignas( 8 ) _TOKEN_SECURITY_ATTRIBUTE_RELATIVE_V1
{
    UNICODE_STRING Name;
    USHORT ValueType;
    USHORT Reserved;
    ULONG Flags;
    ULONG ValueCount;
    union alignas( 4 )
    {
        ULONG Int64[1];
        ULONG Uint64[1];
        ULONG String[1];
        ULONG Fqbn[1];
        ULONG OctetString[1];
    } Values;
};
struct alignas( 8 ) _TOKEN_SECURITY_ATTRIBUTES_INFORMATION
{
    USHORT Version;
    USHORT Reserved;
    ULONG AttributeCount;
    union alignas( 8 )
    {
        PTOKEN_SECURITY_ATTRIBUTE_V1 AttributeV1;
    };
};
struct alignas( 8 ) _TOKEN_SECURITY_ATTRIBUTES_AND_OPERATION_INFORMATION
{
    PTOKEN_SECURITY_ATTRIBUTES_INFORMATION Attributes;
    PTOKEN_SECURITY_ATTRIBUTE_OPERATION Operations;
};
struct alignas( 8 ) _TOKEN_PROCESS_TRUST_LEVEL
{
    PSID TrustLevelSid;
};
struct alignas( 8 ) _TOKEN_LOGGING_INFORMATION
{
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    DWORD IntegrityLevel;
    SID_AND_ATTRIBUTES User;
    PSID TrustLevelSid;
    DWORD SessionId;
    DWORD AppContainerNumber;
    LUID AuthenticationId;
    DWORD GroupCount;
    DWORD GroupsLength;
    PSID_AND_ATTRIBUTES Groups;
};
struct alignas( 8 ) _SE_FILE_CACHE_CLAIM_INFORMATION
{
    ULONG Size;
    PVOID Claim;
};
struct alignas( 8 ) _SE_SET_FILE_CACHE_INFORMATION
{
    ULONG Size;
    UNICODE_STRING CatalogDirectoryPath;
    SE_FILE_CACHE_CLAIM_INFORMATION OriginClaimInfo;
};
;
struct alignas( 8 ) _KCONTINUE_ARGUMENT
{
    KCONTINUE_TYPE ContinueType;
    ULONG ContinueFlags;
    ULONGLONG Reserved[2];
};
struct alignas( 4 ) _RTL_RB_TREE32
{
    ULONG Root;
    ULONG Min;
};
struct alignas( 4 ) _PEB_LDR_DATA32
{
    ULONG Length;
    BOOLEAN Initialized;
    ULONG SsHandle;
    LIST_ENTRY32 InLoadOrderModuleList;
    LIST_ENTRY32 InMemoryOrderModuleList;
    LIST_ENTRY32 InInitializationOrderModuleList;
    ULONG EntryInProgress;
    BOOLEAN ShutdownInProgress;
    ULONG ShutdownThreadId;
};
struct alignas( 4 ) _LDR_SERVICE_TAG_RECORD32
{
    ULONG Next;
    ULONG ServiceTag;
};
struct alignas( 4 ) _LDRP_CSLIST32
{
    ULONG Tail;
};
struct alignas( 4 ) _LDR_DDAG_NODE32
{
    LIST_ENTRY32 Modules;
    ULONG ServiceTagList;
    ULONG LoadCount;
    ULONG LoadWhileUnloadingCount;
    ULONG LowestLink;
    union alignas( 4 )
    {
        LDRP_CSLIST32 Dependencies;
        SINGLE_LIST_ENTRY32 RemovalLink;
    };
    LDRP_CSLIST32 IncomingDependencies;
    LDR_DDAG_STATE State;
    SINGLE_LIST_ENTRY32 CondenseLink;
    ULONG PreorderNumber;
};
struct alignas( 8 ) _MESSAGE_TRACE_USER
{
    MESSAGE_TRACE_HEADER MessageHeader;
    GUID MessageGuid;
    ULONG MessageFlags;
    ULONG DataSize;
    ULONG64 Data;
};
struct alignas( 4 ) _GDI_TEB_BATCH32
{
    ULONG Offset;
    ULONG HDC;
    ULONG Buffer[310];
};
struct alignas( 8 ) _TEB32
{
    NT_TIB32 NtTib;
    ULONG EnvironmentPointer;
    CLIENT_ID32 ClientId;
    ULONG ActiveRpcHandle;
    ULONG ThreadLocalStoragePointer;
    ULONG ProcessEnvironmentBlock;
    ULONG LastErrorValue;
    ULONG CountOfOwnedCriticalSections;
    ULONG CsrClientThread;
    ULONG Win32ThreadInfo;
    ULONG User32Reserved[26];
    ULONG UserReserved[5];
    ULONG WOW32Reserved;
    LCID CurrentLocale;
    ULONG FpSoftwareStatusRegister;
    ULONG ReservedForDebuggerInstrumentation[16];
    ULONG SystemReserved1[36];
    UCHAR WorkingOnBehalfTicket[8];
    NTSTATUS ExceptionCode;
    ULONG ActivationContextStackPointer;
    ULONG InstrumentationCallbackSp;
    ULONG InstrumentationCallbackPreviousPc;
    ULONG InstrumentationCallbackPreviousSp;
    BOOLEAN InstrumentationCallbackDisabled;
    UCHAR SpareBytes[23];
    ULONG TxFsContext;
    GDI_TEB_BATCH32 GdiTebBatch;
    CLIENT_ID32 RealClientId;
    ULONG GdiCachedProcessHandle;
    ULONG GdiClientPID;
    ULONG GdiClientTID;
    ULONG GdiThreadLocalInfo;
    ULONG Win32ClientInfo[62];
    ULONG glDispatchTable[233];
    ULONG glReserved1[29];
    ULONG glReserved2;
    ULONG glSectionInfo;
    ULONG glSection;
    ULONG glTable;
    ULONG glCurrentRC;
    ULONG glContext;
    NTSTATUS LastStatusValue;
    UNICODE_STRING32 StaticUnicodeString;
    WCHAR StaticUnicodeBuffer[261];
    ULONG DeallocationStack;
    ULONG TlsSlots[64];
    LIST_ENTRY32 TlsLinks;
    ULONG Vdm;
    ULONG ReservedForNtRpc;
    ULONG DbgSsReserved[2];
    ULONG HardErrorMode;
    ULONG Instrumentation[9];
    GUID ActivityId;
    ULONG SubProcessTag;
    ULONG PerflibData;
    ULONG EtwTraceData;
    ULONG WinSockData;
    ULONG GdiBatchCount;
    union alignas( 4 )
    {
        PROCESSOR_NUMBER CurrentIdealProcessor;
        ULONG IdealProcessorValue;
        struct alignas( 1 )
        {
            UCHAR ReservedPad0;
            UCHAR ReservedPad1;
            UCHAR ReservedPad2;
            UCHAR IdealProcessor;
        };
    };
    ULONG GuaranteedStackBytes;
    ULONG ReservedForPerf;
    ULONG ReservedForOle;
    ULONG WaitingOnLoaderLock;
    ULONG SavedPriorityState;
    ULONG ReservedForCodeCoverage;
    ULONG ThreadPoolData;
    ULONG TlsExpansionSlots;
    ULONG MuiGeneration;
    ULONG IsImpersonating;
    ULONG NlsCache;
    ULONG pShimData;
    USHORT HeapVirtualAffinity;
    USHORT LowFragHeapDataSlot;
    ULONG CurrentTransactionHandle;
    ULONG ActiveFrame;
    ULONG FlsData;
    ULONG PreferredLanguages;
    ULONG UserPrefLanguages;
    ULONG MergedPrefLanguages;
    ULONG MuiImpersonation;
    union alignas( 2 )
    {
        USHORT CrossTebFlags;
        USHORT SpareCrossTebBits : 16;
    };
    union alignas( 2 )
    {
        USHORT SameTebFlags;
        struct alignas( 2 )
        {
            USHORT SafeThunkCall : 1;
            USHORT InDebugPrint : 1;
            USHORT HasFiberData : 1;
            USHORT SkipThreadAttach : 1;
            USHORT WerInShipAssertCode : 1;
            USHORT RanProcessInit : 1;
            USHORT ClonedThread : 1;
            USHORT SuppressDebugMsg : 1;
            USHORT DisableUserStackWalk : 1;
            USHORT RtlExceptionAttached : 1;
            USHORT InitialThread : 1;
            USHORT SessionAware : 1;
            USHORT LoadOwner : 1;
            USHORT LoaderWorker : 1;
            USHORT SpareSameTebBits : 2;
        };
    };
    ULONG TxnScopeEnterCallback;
    ULONG TxnScopeExitCallback;
    ULONG TxnScopeContext;
    ULONG LockCount;
    LONG WowTebOffset;
    ULONG ResourceRetValue;
    ULONG ReservedForWdf;
    ULONGLONG ReservedForCrt;
    GUID EffectiveContainerId;
};
union alignas( 4 ) _WOW64_EXECUTE_OPTIONS
{
    ULONG Flags;
    struct alignas( 4 )
    {
        ULONG StackReserveSize : 8;
        ULONG StackCommitSize : 4;
        ULONG Deprecated0 : 1;
        ULONG DisableWowAssert : 1;
        ULONG DisableTurboDispatch : 1;
        ULONG Unused : 13;
        ULONG Reserved0 : 1;
        ULONG Reserved1 : 1;
        ULONG Reserved2 : 1;
        ULONG Reserved3 : 1;
    };
};
struct alignas( 4 ) _WOW64INFO
{
    ULONG NativeSystemPageSize;
    ULONG CpuFlags;
    WOW64_EXECUTE_OPTIONS Wow64ExecuteFlags;
    ULONG InstrumentationCallback;
};
struct alignas( 8 ) _PEB32_WITH_WOW64INFO
{
    PEB32 Peb32;
    WOW64INFO Wow64Info;
};
struct alignas( 8 ) _ETW_AUTOBOOST_NO_ENTRIES_EVENT
{
    PVOID Lock;
    ULONG ThreadId;
};
struct alignas( 8 ) _LSA_TRANSLATED_NAME
{
    SID_NAME_USE Use;
    LSA_UNICODE_STRING Name;
    LONG DomainIndex;
};
struct alignas( 8 ) _POLICY_ACCOUNT_DOMAIN_INFO
{
    LSA_UNICODE_STRING DomainName;
    PSID DomainSid;
};
struct alignas( 8 ) _POLICY_DNS_DOMAIN_INFO
{
    LSA_UNICODE_STRING Name;
    LSA_UNICODE_STRING DnsDomainName;
    LSA_UNICODE_STRING DnsForestName;
    GUID DomainGuid;
    PSID Sid;
};
struct alignas( 4 ) _SE_ADT_OBJECT_TYPE
{
    GUID ObjectType;
    USHORT Flags;
    USHORT Level;
    ACCESS_MASK AccessMask;
};
struct alignas( 8 ) _SE_ADT_PARAMETER_ARRAY_ENTRY
{
    SE_ADT_PARAMETER_TYPE Type;
    ULONG Length;
    ULONG_PTR Data[2];
    PVOID Address;
};
struct alignas( 8 ) _SE_ADT_ACCESS_REASON
{
    ACCESS_MASK AccessMask;
    ULONG AccessReasons[32];
    ULONG ObjectTypeIndex;
    ULONG AccessGranted;
    PSECURITY_DESCRIPTOR SecurityDescriptor;
};
struct alignas( 8 ) _SE_ADT_CLAIMS
{
    ULONG Length;
    PCLAIMS_BLOB Claims;
};
struct alignas( 8 ) _SE_ADT_PARAMETER_ARRAY
{
    ULONG CategoryId;
    ULONG AuditId;
    ULONG ParameterCount;
    ULONG Length;
    USHORT FlatSubCategoryId;
    USHORT Type;
    ULONG Flags;
    SE_ADT_PARAMETER_ARRAY_ENTRY Parameters[32];
};
struct alignas( 8 ) _SE_ADT_PARAMETER_ARRAY_EX
{
    ULONG CategoryId;
    ULONG AuditId;
    ULONG Version;
    ULONG ParameterCount;
    ULONG Length;
    USHORT FlatSubCategoryId;
    USHORT Type;
    ULONG Flags;
    SE_ADT_PARAMETER_ARRAY_ENTRY Parameters[32];
};
struct alignas( 8 ) _LSA_ADT_STRING_LIST_ENTRY
{
    ULONG Flags;
    UNICODE_STRING String;
};
struct alignas( 8 ) _LSA_ADT_STRING_LIST
{
    ULONG cStrings;
    PLSA_ADT_STRING_LIST_ENTRY Strings;
};
struct alignas( 8 ) _LSA_ADT_SID_LIST_ENTRY
{
    ULONG Flags;
    PSID Sid;
};
struct alignas( 8 ) _LSA_ADT_SID_LIST
{
    ULONG cSids;
    PLSA_ADT_SID_LIST_ENTRY Sids;
};
struct alignas( 8 ) _LSA_TOKEN_INFORMATION_V3
{
    LARGE_INTEGER ExpirationTime;
    TOKEN_USER User;
    PTOKEN_GROUPS Groups;
    TOKEN_PRIMARY_GROUP PrimaryGroup;
    PTOKEN_PRIVILEGES Privileges;
    TOKEN_OWNER Owner;
    TOKEN_DEFAULT_DACL DefaultDacl;
    TOKEN_USER_CLAIMS UserClaims;
    TOKEN_DEVICE_CLAIMS DeviceClaims;
    PTOKEN_GROUPS DeviceGroups;
};
struct alignas( 8 ) _ETW_UMS_EVENT_CONTEXT_SWITCH
{
    SYSTEM_TRACE_HEADER Header;
    ULONG ScheduledThreadId;
    ULONG SwitchCount;
    ULONG KernelYieldCount;
    ULONG MixedYieldCount;
    ULONG YieldCount;
};
struct alignas( 4 ) _LSA_TRANSLATED_SID
{
    SID_NAME_USE Use;
    ULONG RelativeId;
    LONG DomainIndex;
};
struct alignas( 8 ) _POLICY_PRIVILEGE_DEFINITION
{
    LSA_UNICODE_STRING Name;
    LUID LocalValue;
};
struct alignas( 8 ) _POLICY_AUDIT_LOG_INFO
{
    ULONG AuditLogPercentFull;
    ULONG MaximumLogSize;
    LARGE_INTEGER AuditRetentionPeriod;
    BOOLEAN AuditLogFullShutdownInProgress;
    LARGE_INTEGER TimeToShutdown;
    ULONG NextAuditRecordId;
};
struct alignas( 8 ) _POLICY_AUDIT_EVENTS_INFO
{
    BOOLEAN AuditingMode;
    PPOLICY_AUDIT_EVENT_OPTIONS EventAuditingOptions;
    ULONG MaximumAuditEventCount;
};
struct alignas( 8 ) _POLICY_AUDIT_SUBCATEGORIES_INFO
{
    ULONG MaximumSubCategoryCount;
    PPOLICY_AUDIT_EVENT_OPTIONS EventAuditingOptions;
};
struct alignas( 8 ) _POLICY_AUDIT_CATEGORIES_INFO
{
    ULONG MaximumCategoryCount;
    PPOLICY_AUDIT_SUBCATEGORIES_INFO SubCategoriesInfo;
};
struct alignas( 8 ) _POLICY_PRIMARY_DOMAIN_INFO
{
    LSA_UNICODE_STRING Name;
    PSID Sid;
};
struct alignas( 8 ) _POLICY_PD_ACCOUNT_INFO
{
    LSA_UNICODE_STRING Name;
};
struct alignas( 4 ) _POLICY_LSA_SERVER_ROLE_INFO
{
    POLICY_LSA_SERVER_ROLE LsaServerRole;
};
struct alignas( 8 ) _POLICY_REPLICA_SOURCE_INFO
{
    LSA_UNICODE_STRING ReplicaSource;
    LSA_UNICODE_STRING ReplicaAccountName;
};
struct alignas( 8 ) _POLICY_DEFAULT_QUOTA_INFO
{
    QUOTA_LIMITS QuotaLimits;
};
struct alignas( 8 ) _POLICY_MODIFICATION_INFO
{
    LARGE_INTEGER ModifiedId;
    LARGE_INTEGER DatabaseCreationTime;
};
struct alignas( 1 ) _POLICY_AUDIT_FULL_SET_INFO
{
    BOOLEAN ShutDownOnFull;
};
struct alignas( 1 ) _POLICY_AUDIT_FULL_QUERY_INFO
{
    BOOLEAN ShutDownOnFull;
    BOOLEAN LogIsFull;
};
struct alignas( 8 ) _POLICY_DOMAIN_EFS_INFO
{
    ULONG InfoLength;
    PUCHAR EfsBlob;
};
struct alignas( 8 ) _POLICY_DOMAIN_KERBEROS_TICKET_INFO
{
    ULONG AuthenticationOptions;
    LARGE_INTEGER MaxServiceTicketAge;
    LARGE_INTEGER MaxTicketAge;
    LARGE_INTEGER MaxRenewAge;
    LARGE_INTEGER MaxClockSkew;
    LARGE_INTEGER Reserved;
};
struct alignas( 8 ) _POLICY_MACHINE_ACCT_INFO
{
    ULONG Rid;
    PSID Sid;
};
struct alignas( 8 ) _POLICY_MACHINE_ACCT_INFO2
{
    ULONG Rid;
    PSID Sid;
    GUID ObjectGuid;
};
struct alignas( 8 ) _LSA_AUTH_INFORMATION
{
    LARGE_INTEGER LastUpdateTime;
    ULONG AuthType;
    ULONG AuthInfoLength;
    PUCHAR AuthInfo;
};
struct alignas( 8 ) _TRUSTED_DOMAIN_AUTH_INFORMATION
{
    ULONG IncomingAuthInfos;
    PLSA_AUTH_INFORMATION IncomingAuthenticationInformation;
    PLSA_AUTH_INFORMATION IncomingPreviousAuthenticationInformation;
    ULONG OutgoingAuthInfos;
    PLSA_AUTH_INFORMATION OutgoingAuthenticationInformation;
    PLSA_AUTH_INFORMATION OutgoingPreviousAuthenticationInformation;
};
struct alignas( 8 ) _TRUSTED_DOMAIN_FULL_INFORMATION
{
    TRUSTED_DOMAIN_INFORMATION_EX Information;
    TRUSTED_POSIX_OFFSET_INFO PosixOffset;
    TRUSTED_DOMAIN_AUTH_INFORMATION AuthInformation;
};
struct alignas( 8 ) _TRUSTED_DOMAIN_FULL_INFORMATION2
{
    TRUSTED_DOMAIN_INFORMATION_EX2 Information;
    TRUSTED_POSIX_OFFSET_INFO PosixOffset;
    TRUSTED_DOMAIN_AUTH_INFORMATION AuthInformation;
};
struct alignas( 4 ) _TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES
{
    ULONG SupportedEncryptionTypes;
};
struct alignas( 8 ) _LSA_FOREST_TRUST_RECORD
{
    ULONG Flags;
    LSA_FOREST_TRUST_RECORD_TYPE ForestTrustType;
    LARGE_INTEGER Time;
    union alignas( 8 )
    {
        LSA_UNICODE_STRING TopLevelName;
        LSA_FOREST_TRUST_DOMAIN_INFO DomainInfo;
        LSA_FOREST_TRUST_BINARY_DATA Data;
    } ForestTrustData;
};
struct alignas( 8 ) _PERFINFO_SET_POWER_ACTION_RET
{
    PVOID Trigger;
    NTSTATUS Status;
};
struct alignas( 8 ) _LSA_ENUMERATION_INFORMATION
{
    PSID Sid;
};
struct alignas( 8 ) _LSA_LAST_INTER_LOGON_INFO
{
    LARGE_INTEGER LastSuccessfulLogon;
    LARGE_INTEGER LastFailedLogon;
    ULONG FailedAttemptCountSinceLastSuccessfulLogon;
};
struct alignas( 8 ) _SECURITY_LOGON_SESSION_DATA
{
    ULONG Size;
    LUID LogonId;
    LSA_UNICODE_STRING UserName;
    LSA_UNICODE_STRING LogonDomain;
    LSA_UNICODE_STRING AuthenticationPackage;
    ULONG LogonType;
    ULONG Session;
    PSID Sid;
    LARGE_INTEGER LogonTime;
    LSA_UNICODE_STRING LogonServer;
    LSA_UNICODE_STRING DnsDomainName;
    LSA_UNICODE_STRING Upn;
    ULONG UserFlags;
    LSA_LAST_INTER_LOGON_INFO LastLogonInfo;
    LSA_UNICODE_STRING LogonScript;
    LSA_UNICODE_STRING ProfilePath;
    LSA_UNICODE_STRING HomeDirectory;
    LSA_UNICODE_STRING HomeDirectoryDrive;
    LARGE_INTEGER LogoffTime;
    LARGE_INTEGER KickOffTime;
    LARGE_INTEGER PasswordLastSet;
    LARGE_INTEGER PasswordCanChange;
    LARGE_INTEGER PasswordMustChange;
};
struct alignas( 8 ) _CENTRAL_ACCESS_POLICY_ENTRY
{
    LSA_UNICODE_STRING Name;
    LSA_UNICODE_STRING Description;
    LSA_UNICODE_STRING ChangeId;
    ULONG LengthAppliesTo;
    PUCHAR AppliesTo;
    ULONG LengthSD;
    PSECURITY_DESCRIPTOR SD;
    ULONG LengthStagedSD;
    PSECURITY_DESCRIPTOR StagedSD;
    ULONG Flags;
};
struct alignas( 8 ) _CENTRAL_ACCESS_POLICY
{
    PSID CAPID;
    LSA_UNICODE_STRING Name;
    LSA_UNICODE_STRING Description;
    LSA_UNICODE_STRING ChangeId;
    ULONG Flags;
    ULONG CAPECount;
    PCENTRAL_ACCESS_POLICY_ENTRY* CAPEs;
};
struct alignas( 8 ) _NEGOTIATE_PACKAGE_PREFIX
{
    ULONG_PTR PackageId;
    PVOID PackageDataA;
    PVOID PackageDataW;
    ULONG_PTR PrefixLen;
    UCHAR Prefix[32];
};
struct alignas( 4 ) _NEGOTIATE_PACKAGE_PREFIXES
{
    ULONG MessageType;
    ULONG PrefixCount;
    ULONG Offset;
    ULONG Pad;
};
struct alignas( 4 ) _NEGOTIATE_CALLER_NAME_REQUEST
{
    ULONG MessageType;
    LUID LogonId;
};
struct alignas( 8 ) _NEGOTIATE_CALLER_NAME_RESPONSE
{
    ULONG MessageType;
    PWSTR CallerName;
};
struct alignas( 8 ) _NEGOTIATE_PACKAGE_NAMES
{
    ULONG NamesCount;
    UNICODE_STRING Names[1];
};
struct alignas( 4 ) _NEGOTIATE_PACKAGE_PREFIX_WOW
{
    ULONG PackageId;
    ULONG PackageDataA;
    ULONG PackageDataW;
    ULONG PrefixLen;
    UCHAR Prefix[32];
};
struct alignas( 4 ) _NEGOTIATE_CALLER_NAME_RESPONSE_WOW
{
    ULONG MessageType;
    ULONG CallerName;
};
struct alignas( 8 ) _LSA_USER_REGISTRATION_INFO
{
    LSA_UNICODE_STRING Sid;
    LSA_UNICODE_STRING DeviceId;
    LSA_UNICODE_STRING Username;
    LSA_UNICODE_STRING Thumbprint;
    LARGE_INTEGER RegistrationTime;
};
struct alignas( 8 ) _LSA_REGISTRATION_INFO
{
    ULONG RegisteredCount;
    PLSA_USER_REGISTRATION_INFO* UserRegistrationInfo;
};
struct alignas( 8 ) _SAM_RID_ENUMERATION
{
    ULONG RelativeId;
    UNICODE_STRING Name;
};
struct alignas( 8 ) _SAM_SID_ENUMERATION
{
    PSID Sid;
    UNICODE_STRING Name;
};
struct alignas( 8 ) _SAM_BYTE_ARRAY
{
    ULONG Size;
    PUCHAR Data;
};
;
struct alignas( 8 ) _ETW_CPU_CACHE_FLUSH_EVENT
{
    PVOID Address;
    SIZE_T Bytes;
    BOOLEAN Clean;
    BOOLEAN FullFlush;
    BOOLEAN Rectangle;
    BOOLEAN Reserved0;
    ULONG Reserved1;
};
struct alignas( 8 ) _DOMAIN_LOGOFF_INFORMATION
{
    LARGE_INTEGER ForceLogoff;
};
struct alignas( 8 ) _DOMAIN_OEM_INFORMATION
{
    UNICODE_STRING OemInformation;
};
struct alignas( 8 ) _DOMAIN_NAME_INFORMATION
{
    UNICODE_STRING DomainName;
};
struct alignas( 4 ) _DOMAIN_SERVER_ROLE_INFORMATION
{
    DOMAIN_SERVER_ROLE DomainServerRole;
};
struct alignas( 8 ) _DOMAIN_REPLICATION_INFORMATION
{
    UNICODE_STRING ReplicaSourceNodeName;
};
struct alignas( 8 ) _DOMAIN_MODIFIED_INFORMATION
{
    LARGE_INTEGER DomainModifiedCount;
    LARGE_INTEGER CreationTime;
};
struct alignas( 8 ) _DOMAIN_MODIFIED_INFORMATION2
{
    LARGE_INTEGER DomainModifiedCount;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER ModifiedCountAtLastPromotion;
};
struct alignas( 4 ) _DOMAIN_STATE_INFORMATION
{
    DOMAIN_SERVER_ENABLE_STATE DomainServerState;
};
struct alignas( 8 ) _DOMAIN_LOCKOUT_INFORMATION
{
    LARGE_INTEGER LockoutDuration;
    LARGE_INTEGER LockoutObservationWindow;
    USHORT LockoutThreshold;
};
struct alignas( 8 ) _DOMAIN_DISPLAY_USER
{
    ULONG Index;
    ULONG Rid;
    ULONG AccountControl;
    UNICODE_STRING LogonName;
    UNICODE_STRING AdminComment;
    UNICODE_STRING FullName;
};
struct alignas( 8 ) _DOMAIN_DISPLAY_MACHINE
{
    ULONG Index;
    ULONG Rid;
    ULONG AccountControl;
    UNICODE_STRING Machine;
    UNICODE_STRING Comment;
};
struct alignas( 8 ) _WMI_JOB_SET_QUERY_NET_RATE
{
    ULONG Flags;
    ULONG64 MaxBandwidth;
    UCHAR DscpTag;
};
struct alignas( 4 ) _GROUP_MEMBERSHIP
{
    ULONG RelativeId;
    ULONG Attributes;
};
struct alignas( 8 ) _GROUP_GENERAL_INFORMATION
{
    UNICODE_STRING Name;
    ULONG Attributes;
    ULONG MemberCount;
    UNICODE_STRING AdminComment;
};
struct alignas( 8 ) _GROUP_NAME_INFORMATION
{
    UNICODE_STRING Name;
};
struct alignas( 4 ) _GROUP_ATTRIBUTE_INFORMATION
{
    ULONG Attributes;
};
struct alignas( 8 ) _GROUP_ADM_COMMENT_INFORMATION
{
    UNICODE_STRING AdminComment;
};
struct alignas( 8 ) _ALIAS_GENERAL_INFORMATION
{
    UNICODE_STRING Name;
    ULONG MemberCount;
    UNICODE_STRING AdminComment;
};
struct alignas( 8 ) _ALIAS_NAME_INFORMATION
{
    UNICODE_STRING Name;
};
struct alignas( 8 ) _ALIAS_ADM_COMMENT_INFORMATION
{
    UNICODE_STRING AdminComment;
};
struct alignas( 8 ) _ALIAS_EXTENDED_INFORMATION
{
    ULONG WhichFields;
    SAM_SHELL_OBJECT_PROPERTIES ShellAdminObjectProperties;
};
struct alignas( 8 ) _USER_GENERAL_INFORMATION
{
    UNICODE_STRING UserName;
    UNICODE_STRING FullName;
    ULONG PrimaryGroupId;
    UNICODE_STRING AdminComment;
    UNICODE_STRING UserComment;
};
struct alignas( 8 ) _USER_PREFERENCES_INFORMATION
{
    UNICODE_STRING UserComment;
    UNICODE_STRING Reserved1;
    USHORT CountryCode;
    USHORT CodePage;
};
struct alignas( 4 ) _USER_LOGON_INFORMATION
{
    UNICODE_STRING UserName;
    UNICODE_STRING FullName;
    ULONG UserId;
    ULONG PrimaryGroupId;
    UNICODE_STRING HomeDirectory;
    UNICODE_STRING HomeDirectoryDrive;
    UNICODE_STRING ScriptPath;
    UNICODE_STRING ProfilePath;
    UNICODE_STRING WorkStations;
    LARGE_INTEGER LastLogon;
    LARGE_INTEGER LastLogoff;
    LARGE_INTEGER PasswordLastSet;
    LARGE_INTEGER PasswordCanChange;
    LARGE_INTEGER PasswordMustChange;
    LOGON_HOURS LogonHours;
    USHORT BadPasswordCount;
    USHORT LogonCount;
    ULONG UserAccountControl;
};
struct alignas( 8 ) _USER_LOGON_HOURS_INFORMATION
{
    LOGON_HOURS LogonHours;
};
struct alignas( 4 ) _USER_ACCOUNT_INFORMATION
{
    UNICODE_STRING UserName;
    UNICODE_STRING FullName;
    ULONG UserId;
    ULONG PrimaryGroupId;
    UNICODE_STRING HomeDirectory;
    UNICODE_STRING HomeDirectoryDrive;
    UNICODE_STRING ScriptPath;
    UNICODE_STRING ProfilePath;
    UNICODE_STRING AdminComment;
    UNICODE_STRING WorkStations;
    LARGE_INTEGER LastLogon;
    LARGE_INTEGER LastLogoff;
    LOGON_HOURS LogonHours;
    USHORT BadPasswordCount;
    USHORT LogonCount;
    LARGE_INTEGER PasswordLastSet;
    LARGE_INTEGER AccountExpires;
    ULONG UserAccountControl;
};
struct alignas( 8 ) _USER_NAME_INFORMATION
{
    UNICODE_STRING UserName;
    UNICODE_STRING FullName;
};
struct alignas( 8 ) _USER_ACCOUNT_NAME_INFORMATION
{
    UNICODE_STRING UserName;
};
struct alignas( 8 ) _USER_FULL_NAME_INFORMATION
{
    UNICODE_STRING FullName;
};
struct alignas( 4 ) _USER_PRIMARY_GROUP_INFORMATION
{
    ULONG PrimaryGroupId;
};
struct alignas( 8 ) _USER_HOME_INFORMATION
{
    UNICODE_STRING HomeDirectory;
    UNICODE_STRING HomeDirectoryDrive;
};
struct alignas( 8 ) _USER_SCRIPT_INFORMATION
{
    UNICODE_STRING ScriptPath;
};
struct alignas( 1 ) _CYPHER_BLOCK
{
    CHAR data[8];
};
struct alignas( 1 ) _ENCRYPTED_NT_OWF_PASSWORD
{
    CYPHER_BLOCK data[2];
};
struct alignas( 1 ) _ENCRYPTED_LM_OWF_PASSWORD
{
    CYPHER_BLOCK data[2];
};
struct alignas( 1 ) _USER_INTERNAL1_INFORMATION
{
    ENCRYPTED_NT_OWF_PASSWORD EncryptedNtOwfPassword;
    ENCRYPTED_LM_OWF_PASSWORD EncryptedLmOwfPassword;
    BOOLEAN NtPasswordPresent;
    BOOLEAN LmPasswordPresent;
    BOOLEAN PasswordExpired;
};
struct alignas( 8 ) _USER_INTERNAL2_INFORMATION
{
    ULONG StatisticsToApply;
    LARGE_INTEGER LastLogon;
    LARGE_INTEGER LastLogoff;
    USHORT BadPasswordCount;
    USHORT LogonCount;
};
struct alignas( 8 ) _USER_PARAMETERS_INFORMATION
{
    UNICODE_STRING Parameters;
};
struct alignas( 4 ) _USER_INTERNAL3_INFORMATION
{
    USER_ALL_INFORMATION I1;
    LARGE_INTEGER LastBadPasswordTime;
};
struct alignas( 1 ) _ENCRYPTED_USER_PASSWORD
{
    UCHAR Buffer[516];
};
struct alignas( 4 ) _USER_INTERNAL4_INFORMATION
{
    USER_ALL_INFORMATION I1;
    ENCRYPTED_USER_PASSWORD UserPassword;
};
struct alignas( 1 ) _USER_INTERNAL5_INFORMATION
{
    ENCRYPTED_USER_PASSWORD UserPassword;
    BOOLEAN PasswordExpired;
};
struct alignas( 8 ) _USER_EXTENDED_INFORMATION
{
    ULONG ExtendedWhichFields;
    SAM_USER_TILE UserTile;
    UNICODE_STRING PasswordHint;
    BOOLEAN DontShowInLogonUI;
    SAM_SHELL_OBJECT_PROPERTIES ShellAdminObjectProperties;
};
struct alignas( 4 ) _ETW_DEBUG_PRINT_EVENT
{
    ULONG Component;
    ULONG Level;
    CHAR Message[1];
};
struct alignas( 1 ) _USER_LOGON_UI_INFORMATION
{
    BOOLEAN PasswordIsBlank;
    BOOLEAN AccountIsDisabled;
};
struct alignas( 8 ) _ENCRYPTED_PASSWORD_AES
{
    UCHAR AuthData[64];
    UCHAR Salt[16];
    ULONG cbCipher;
    PUCHAR Cipher;
    ULONGLONG PBKDF2Iterations;
};
struct alignas( 8 ) _USER_INTERNAL7_INFORMATION
{
    ENCRYPTED_PASSWORD_AES UserPassword;
    BOOLEAN PasswordExpired;
};
struct alignas( 8 ) _USER_INTERNAL8_INFORMATION
{
    USER_ALL_INFORMATION I1;
    ENCRYPTED_PASSWORD_AES UserPassword;
};
struct alignas( 8 ) _USER_PWD_CHANGE_FAILURE_INFORMATION
{
    ULONG ExtendedFailureReason;
    UNICODE_STRING FilterModuleName;
};
struct alignas( 4 ) _SAM_GROUP_MEMBER_ID
{
    ULONG MemberRid;
};
struct alignas( 8 ) _SAM_ALIAS_MEMBER_ID
{
    PSID MemberSid;
};
union alignas( 8 ) _SAM_DELTA_DATA
{
    SAM_GROUP_MEMBER_ID GroupMemberId;
    SAM_ALIAS_MEMBER_ID AliasMemberId;
    ULONG AccountControl;
};
struct alignas( 8 ) _SAM_VALIDATE_PASSWORD_HASH
{
    ULONG Length;
    PUCHAR Hash;
};
struct alignas( 8 ) _SAM_VALIDATE_PERSISTED_FIELDS
{
    ULONG PresentFields;
    LARGE_INTEGER PasswordLastSet;
    LARGE_INTEGER BadPasswordTime;
    LARGE_INTEGER LockoutTime;
    ULONG BadPasswordCount;
    ULONG PasswordHistoryLength;
    PSAM_VALIDATE_PASSWORD_HASH PasswordHistory;
};
struct alignas( 8 ) _SAM_VALIDATE_STANDARD_OUTPUT_ARG
{
    SAM_VALIDATE_PERSISTED_FIELDS ChangedPersistedFields;
    SAM_VALIDATE_VALIDATION_STATUS ValidationStatus;
};
struct alignas( 8 ) _SAM_VALIDATE_AUTHENTICATION_INPUT_ARG
{
    SAM_VALIDATE_PERSISTED_FIELDS InputPersistedFields;
    BOOLEAN PasswordMatched;
};
struct alignas( 8 ) _SAM_VALIDATE_PASSWORD_CHANGE_INPUT_ARG
{
    SAM_VALIDATE_PERSISTED_FIELDS InputPersistedFields;
    UNICODE_STRING ClearPassword;
    UNICODE_STRING UserAccountName;
    SAM_VALIDATE_PASSWORD_HASH HashedPassword;
    BOOLEAN PasswordMatch;
};
struct alignas( 8 ) _SAM_VALIDATE_PASSWORD_RESET_INPUT_ARG
{
    SAM_VALIDATE_PERSISTED_FIELDS InputPersistedFields;
    UNICODE_STRING ClearPassword;
    UNICODE_STRING UserAccountName;
    SAM_VALIDATE_PASSWORD_HASH HashedPassword;
    BOOLEAN PasswordMustChangeAtNextLogon;
    BOOLEAN ClearLockout;
};
union alignas( 8 ) _SAM_VALIDATE_INPUT_ARG
{
    SAM_VALIDATE_AUTHENTICATION_INPUT_ARG ValidateAuthenticationInput;
    SAM_VALIDATE_PASSWORD_CHANGE_INPUT_ARG ValidatePasswordChangeInput;
    SAM_VALIDATE_PASSWORD_RESET_INPUT_ARG ValidatePasswordResetInput;
};
union alignas( 8 ) _SAM_VALIDATE_OUTPUT_ARG
{
    SAM_VALIDATE_STANDARD_OUTPUT_ARG ValidateAuthenticationOutput;
    SAM_VALIDATE_STANDARD_OUTPUT_ARG ValidatePasswordChangeOutput;
    SAM_VALIDATE_STANDARD_OUTPUT_ARG ValidatePasswordResetOutput;
};
struct alignas( 8 ) _ETW_DISKIO_READWRITE_V3
{
    ULONG DiskNumber;
    ULONG IrpFlags;
    ULONG Size;
    ULONG Reserved;
    ULONGLONG ByteOffset;
    PVOID FileObject;
    PVOID IrpAddress;
    ULONGLONG HighResResponseTime;
    ULONG IssuingThreadId;
};
struct alignas( 8 ) _WMI_DISKIO_READWRITE_INIT
{
    PVOID Irp;
    ULONG IssuingThreadId;
};
struct alignas( 8 ) _ETW_OPTICALIO_FLUSH_BUFFERS
{
    ULONG DiskNumber;
    ULONG IrpFlags;
    ULONGLONG HighResResponseTime;
    PVOID IrpAddress;
    ULONG IssuingThreadId;
};
struct alignas( 8 ) _EVENT_INSTANCE_GUID_HEADER
{
    USHORT Size;
    union alignas( 2 )
    {
        USHORT FieldTypeFlags;
        struct alignas( 1 )
        {
            UCHAR HeaderType;
            UCHAR MarkerFlags;
        };
    };
    union alignas( 4 )
    {
        ULONG Version;
        struct alignas( 2 )
        {
            UCHAR Type;
            UCHAR Level;
            USHORT Version;
        } Class;
    };
    ULONG ThreadId;
    ULONG ProcessId;
    LARGE_INTEGER TimeStamp;
    union alignas( 8 )
    {
        GUID Guid;
        ULONGLONG GuidPtr;
    };
    union alignas( 8 )
    {
        struct alignas( 4 )
        {
            ULONG ClientContext;
            ULONG Flags;
        };
        struct alignas( 4 )
        {
            ULONG KernelTime;
            ULONG UserTime;
        };
        ULONG64 ProcessorTime;
    };
    ULONG InstanceId;
    ULONG ParentInstanceId;
    GUID ParentGuid;
};
struct alignas( 8 ) _PERFINFO_TRACE_HEADER
{
    union alignas( 4 )
    {
        ULONG Marker;
        struct alignas( 2 )
        {
            USHORT Version;
            UCHAR HeaderType;
            UCHAR Flags;
        };
    };
    union alignas( 4 )
    {
        ULONG Header;
        WMI_TRACE_PACKET Packet;
    };
    union alignas( 8 )
    {
        PERFINFO_TIMESTAMP TS;
        LARGE_INTEGER SystemTime;
    };
    UCHAR Data[1];
};
struct alignas( 2 ) _TRACE_ENABLE_FLAG_EXTENSION
{
    USHORT Offset;
    UCHAR Length;
    UCHAR Flag;
};
struct alignas( 2 ) _TRACE_ENABLE_FLAG_EXT_HEADER
{
    USHORT Length;
    USHORT Items;
};
struct alignas( 2 ) _TRACE_ENABLE_FLAG_EXT_ITEM
{
    USHORT Offset;
    USHORT Type;
};
struct alignas( 4 ) _ETW_STACK_CACHING_CONFIG
{
    ULONG CacheSize;
    ULONG BucketCount;
};
struct alignas( 4 ) _PERFINFO_GROUPMASK
{
    ULONG Masks[8];
};
struct alignas( 8 ) _CPU_CONFIG_RECORD
{
    ULONG ProcessorSpeed;
    ULONG NumberOfProcessors;
    ULONG MemorySize;
    ULONG PageSize;
    ULONG AllocationGranularity;
    WCHAR ComputerName[256];
    WCHAR DomainName[134];
    ULONG_PTR HyperThreadingFlag;
    ULONG_PTR HighestUserAddress;
    USHORT ProcessorArchitecture;
    USHORT ProcessorLevel;
    USHORT ProcessorRevision;
    BOOLEAN NxEnabled;
    BOOLEAN PaeEnabled;
    ULONG MemorySpeed;
};
struct alignas( 8 ) _PHYSICAL_DISK_RECORD
{
    ULONG DiskNumber;
    ULONG BytesPerSector;
    ULONG SectorsPerTrack;
    ULONG TracksPerCylinder;
    ULONGLONG Cylinders;
    ULONG SCSIPortNumber;
    ULONG SCSIPathId;
    ULONG SCSITargetId;
    ULONG SCSILun;
    WCHAR Manufacturer[256];
    ULONG PartitionCount;
    BOOLEAN WriteCacheEnabled;
    WCHAR BootDriveLetter[3];
};
struct alignas( 8 ) _LOGICAL_DISK_EXTENTS
{
    ULONGLONG StartingOffset;
    ULONGLONG PartitionSize;
    ULONG DiskNumber;
    ULONG Size;
    ULONG DriveType;
    WCHAR DriveLetterString[4];
    ULONG Pad;
    ULONG PartitionNumber;
    ULONG SectorsPerCluster;
    ULONG BytesPerSector;
    LONGLONG NumberOfFreeClusters;
    LONGLONG TotalNumberOfClusters;
    WCHAR FileSystemType[16];
    ULONG VolumeExt;
};
struct alignas( 8 ) _OPTICAL_MEDIA_RECORD
{
    USHORT DiskNumber;
    USHORT BusType;
    USHORT DeviceType;
    USHORT MediaType;
    ULONGLONG StartingOffset;
    ULONGLONG Size;
    ULONGLONG NumberOfFreeBlocks;
    ULONGLONG TotalNumberOfBlocks;
    ULONGLONG NextWritableAddress;
    ULONG NumberOfSessions;
    ULONG NumberOfTracks;
    ULONG BytesPerSector;
    USHORT DiscStatus;
    USHORT LastSessionStatus;
    WCHAR Data[1];
};
struct alignas( 4 ) _NIC_RECORD
{
    WCHAR NICName[256];
    ULONG Index;
    ULONG PhysicalAddrLen;
    WCHAR PhysicalAddr[8];
    ULONG Size;
    LONG IpAddress;
    LONG SubnetMask;
    LONG DhcpServer;
    LONG Gateway;
    LONG PrimaryWinsServer;
    LONG SecondaryWinsServer;
    LONG DnsServer[4];
    ULONG Data;
};
struct alignas( 4 ) _VIDEO_RECORD
{
    ULONG MemorySize;
    ULONG XResolution;
    ULONG YResolution;
    ULONG BitsPerPixel;
    ULONG VRefresh;
    WCHAR ChipType[256];
    WCHAR DACType[256];
    WCHAR AdapterString[256];
    WCHAR BiosString[256];
    WCHAR DeviceId[256];
    ULONG StateFlags;
};
struct alignas( 4 ) _WMI_DPI_RECORD
{
    ULONG MachineDPI;
    ULONG UserDPI;
};
struct alignas( 1 ) _WMI_POWER_RECORD
{
    BOOLEAN SystemS1;
    BOOLEAN SystemS2;
    BOOLEAN SystemS3;
    BOOLEAN SystemS4;
    BOOLEAN SystemS5;
    BOOLEAN AoAc;
    CHAR Pad2;
    CHAR Pad3;
};
struct alignas( 8 ) _WMI_IRQ_RECORD
{
    ULONG64 IRQAffinity;
    USHORT IRQGroup;
    USHORT Reserved;
    ULONG IRQNum;
    ULONG DeviceDescriptionLen;
    WCHAR DeviceDescription[1];
};
struct alignas( 4 ) _WMI_PNP_RECORD_V3
{
    ULONG IDLength;
    ULONG DescriptionLength;
    ULONG FriendlyNameLength;
    WCHAR Strings[1];
};
struct alignas( 4 ) _WMI_PNP_RECORD_V4
{
    GUID ClassGuid;
    ULONG UpperFilterCount;
    ULONG LowerFilterCount;
    WCHAR Strings[1];
};
struct alignas( 4 ) _WMI_PNP_RECORD_V5
{
    GUID ClassGuid;
    ULONG UpperFilterCount;
    ULONG LowerFilterCount;
    ULONG DevStatus;
    ULONG DevProblem;
    WCHAR Strings[1];
};
struct alignas( 4 ) _WMI_IDE_CHANNEL_RECORD
{
    ULONG TargetId;
    ULONG DeviceType;
    ULONG DeviceTimingMode;
    ULONG LocationInformationLen;
    WCHAR LocationInformation[1];
};
struct alignas( 4 ) _WMI_JOB_INFORMATION
{
    GUID JobId;
    ULONG JobHandle;
    ULONG Flags;
    NTSTATUS Status;
};
struct alignas( 4 ) _WMI_JOB_ASSIGN_PROCESS
{
    GUID JobId;
    ULONG JobHandle;
    ULONG UniqueProcessId;
    NTSTATUS Status;
};
struct alignas( 4 ) _WMI_JOB_REMOVE_PROCESS
{
    GUID JobId;
    ULONG UniqueProcessId;
    ULONG RemovalFlags;
    NTSTATUS ExitStatus;
};
struct alignas( 4 ) _WMI_THREAD_INFORMATION
{
    ULONG ProcessId;
    ULONG ThreadId;
};
struct alignas( 8 ) _WMI_EXTENDED_THREAD_INFORMATION
{
    ULONG ProcessId;
    ULONG ThreadId;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID UserStackBase;
    PVOID UserStackLimit;
    union alignas( 8 )
    {
        PVOID StartAddress;
        KAFFINITY Affinity;
    };
    PVOID Win32StartAddress;
    PVOID TebBase;
    ULONG SubProcessTag;
    SCHAR BasePriority;
    UCHAR PagePriority;
    UCHAR IoPriority;
    UCHAR Flags;
};
struct alignas( 8 ) _WMI_EXTENDED_THREAD_INFORMATION64
{
    ULONG ProcessId;
    ULONG ThreadId;
    ULONG64 StackBase64;
    ULONG64 StackLimit64;
    ULONG64 UserStackBase64;
    ULONG64 UserStackLimit64;
    union alignas( 8 )
    {
        ULONG64 StartAddress64;
        ULONG64 Affinity;
    };
    ULONG64 Win32StartAddress64;
    ULONG64 TebBase64;
    ULONG SubProcessTag;
    SCHAR BasePriority;
    UCHAR PagePriority;
    UCHAR IoPriority;
    UCHAR Flags;
};
struct alignas( 8 ) _WMI_IMAGELOAD_INFORMATION
{
    PVOID ImageBase;
    SIZE_T ImageSize;
    ULONG ProcessId;
    ULONG ImageChecksum;
    ULONG TimeDateStamp;
    UCHAR SignatureLevel;
    UCHAR SignatureType;
    USHORT Reserved0;
    PVOID DefaultBase;
    ULONG Reserved1;
    ULONG Reserved2;
    ULONG Reserved3;
    ULONG Reserved4;
    WCHAR FileName[1];
};
struct alignas( 4 ) _WMI_IMAGELOAD_INFORMATION32
{
    ULONG32 ImageBase32;
    ULONG32 ImageSize32;
    ULONG ProcessId;
    ULONG ImageChecksum;
    ULONG TimeDateStamp;
    UCHAR SignatureLevel;
    UCHAR SignatureType;
    USHORT Reserved0;
    ULONG32 DefaultBase32;
    ULONG Reserved1;
    ULONG Reserved2;
    ULONG Reserved3;
    ULONG Reserved4;
    WCHAR FileName[1];
};
struct alignas( 8 ) _WMI_IMAGELOAD_INFORMATION64
{
    ULONG64 ImageBase64;
    ULONG64 ImageSize64;
    ULONG ProcessId;
    ULONG ImageChecksum;
    ULONG TimeDateStamp;
    UCHAR SignatureLevel;
    UCHAR SignatureType;
    USHORT Reserved0;
    ULONG64 DefaultBase64;
    ULONG Reserved1;
    ULONG Reserved2;
    ULONG Reserved3;
    ULONG Reserved4;
    WCHAR FileName[1];
};
struct alignas( 1 ) _WMI_IMAGEID_INFORMATION
{
    PVOID ImageBase;
    SIZE_T ImageSize;
    ULONG ProcessId;
    ULONG TimeDateStamp;
    WCHAR OriginalFileName[1];
};
struct alignas( 1 ) _WMI_IMAGEID_INFORMATION32
{
    ULONG32 ImageBase32;
    ULONG32 ImageSize32;
    ULONG ProcessId;
    ULONG TimeDateStamp;
    WCHAR OriginalFileName[1];
};
struct alignas( 1 ) _WMI_IMAGEID_INFORMATION64
{
    ULONG64 ImageBase64;
    ULONG64 ImageSize64;
    ULONG ProcessId;
    ULONG TimeDateStamp;
    WCHAR OriginalFileName[1];
};
struct alignas( 8 ) _ETW_DISKIO_READWRITE_V2
{
    ULONG DiskNumber;
    ULONG IrpFlags;
    ULONG Size;
    ULONG Reserved;
    ULONGLONG ByteOffset;
    PVOID FileObject;
    PVOID IrpAddress;
    ULONGLONG HighResResponseTime;
};
struct alignas( 8 ) _ETW_DISKIO_FLUSH_BUFFERS_V2
{
    ULONG DiskNumber;
    ULONG IrpFlags;
    ULONGLONG HighResResponseTime;
    PVOID IrpAddress;
};
struct alignas( 8 ) _ETW_OPTICALIO_INIT
{
    PVOID Irp;
    ULONG IssuingThreadId;
};
struct alignas( 8 ) _WMI_REGISTRY
{
    LONGLONG InitialTime;
    ULONG Status;
    union alignas( 4 )
    {
        ULONG Index;
        ULONG InfoClass;
    };
    PVOID Kcb;
    WCHAR Name[1];
};
struct alignas( 8 ) _WMI_TXR
{
    LONGLONG InitialTime;
    GUID TxRGUID;
    ULONG Status;
    ULONG UowCount;
    WCHAR Hive[1];
};
struct alignas( 8 ) _ETW_REGNOTIF_REGISTER
{
    PVOID Notification;
    PVOID Kcb;
    UCHAR Type;
    BOOLEAN WatchTree;
    BOOLEAN Primary;
};
struct alignas( 8 ) _WMI_FILE_IO
{
    PVOID FileObject;
    WCHAR FileName[1];
};
struct alignas( 4 ) _WMI_TCPIP_V4
{
    ULONG ProcessId;
    ULONG TransferSize;
    UCHAR DestinationAddress[4];
    UCHAR SourceAddress[4];
    USHORT DestinationPort;
    USHORT SourcePort;
};
struct alignas( 4 ) _WMI_TCPIP_V6
{
    ULONG ProcessId;
    ULONG TransferSize;
    UCHAR DestinationAddress[16];
    UCHAR SourceAddress[16];
    USHORT DestinationPort;
    USHORT SourcePort;
};
struct alignas( 4 ) _WMI_UDP_V4
{
    ULONG ProcessId;
    USHORT TransferSize;
    UCHAR DestinationAddress[4];
    UCHAR SourceAddress[4];
    USHORT DestinationPort;
    USHORT SourcePort;
};
struct alignas( 4 ) _WMI_UDP_V6
{
    ULONG ProcessId;
    USHORT TransferSize;
    UCHAR DestinationAddress[16];
    UCHAR SourceAddress[16];
    USHORT DestinationPort;
    USHORT SourcePort;
};
struct alignas( 8 ) _WMI_PAGE_FAULT
{
    PVOID VirtualAddress;
    PVOID ProgramCounter;
};
struct alignas( 4 ) _WMI_CONTEXTSWAP
{
    ULONG NewThreadId;
    ULONG OldThreadId;
    CHAR NewThreadPriority;
    CHAR OldThreadPriority;
    union alignas( 1 )
    {
        UCHAR PreviousCState;
        UCHAR OldThreadRank;
    };
    union alignas( 1 )
    {
        CHAR NewThreadPriorityDecrement;
        CHAR SpareByte;
    };
    UCHAR OldThreadWaitReason;
    CHAR OldThreadWaitMode;
    UCHAR OldThreadState;
    UCHAR OldThreadIdealProcessor;
    ULONG NewThreadWaitTime;
    LONG OldThreadRemainingQuantum;
};
struct alignas( 1 ) _WMI_SPINLOCK
{
    PVOID SpinLockAddress;
    PVOID CallerAddress;
    ULONG64 AcquireTime;
    ULONG64 ReleaseTime;
    ULONG WaitTimeInCycles;
    ULONG SpinCount;
    ULONG ThreadId;
    ULONG InterruptCount;
    UCHAR Irql;
    UCHAR AcquireDepth;
    union alignas( 1 )
    {
        struct alignas( 1 )
        {
            UCHAR AcquireMode : 6;
            UCHAR ExecuteDpc : 1;
            UCHAR ExecuteIsr : 1;
        };
        UCHAR Flags;
    };
    UCHAR Reserved[5];
};
struct alignas( 8 ) _WMI_RESOURCE
{
    ULONG64 AcquireTime;
    ULONG64 HoldTime;
    ULONG64 WaitTime;
    ULONG MaxRecursionDepth;
    ULONG ThreadId;
    PVOID Resource;
    ULONG Action;
    ULONG ContentionDelta;
};
struct alignas( 8 ) _WMI_QUEUE
{
    PVOID Queue;
    ULONG ThreadId;
    UCHAR Action;
};
struct alignas( 8 ) _WMI_PUSHLOCK
{
    PVOID PushLock;
    ULONG ThreadId;
    UCHAR Action;
};
struct alignas( 8 ) _WMI_WAIT_SINGLE
{
    ULONG ThreadId;
    PVOID Object;
    UCHAR ObjectType;
};
struct alignas( 8 ) _WMI_WAIT_OBJECT_RECORD
{
    PVOID Object;
    UCHAR ObjectType;
};
struct alignas( 8 ) _WMI_WAIT_MULTIPLE
{
    ULONG ThreadId;
    UCHAR WaitType;
    UCHAR ObjectCount;
    WMI_WAIT_OBJECT_RECORD ObjectRecord[64];
};
struct alignas( 8 ) _WMI_DELAY_EXECUTION
{
    ULONG ThreadId;
    ULONGLONG Delta;
};
struct alignas( 4 ) _ETW_READY_THREAD_EVENT
{
    ULONG ThreadId;
    UCHAR AdjustReason;
    SCHAR AdjustIncrement;
    union alignas( 1 )
    {
        struct alignas( 1 )
        {
            UCHAR ExecutingDpc : 1;
            UCHAR KernelStackNotResident : 1;
            UCHAR ProcessOutOfMemory : 1;
            UCHAR DirectSwitchAttempt : 1;
            UCHAR Reserved : 4;
        };
        UCHAR Flags;
    };
    UCHAR SpareByte;
};
struct alignas( 8 ) _ETW_KQUEUE_ENQUEUE_EVENT
{
    PVOID Entry;
    ULONG ThreadId;
};
struct alignas( 8 ) _ETW_KQUEUE_DEQUEUE_EVENT
{
    ULONG ThreadId;
    ULONG EntryCount;
    PVOID Entries[1];
};
struct alignas( 4 ) _ETW_ANTI_STARVATION_BOOST_EVENT
{
    ULONG ThreadId;
    USHORT ProcessorIndex;
    SCHAR OldPriority;
    UCHAR SpareByte;
};
struct alignas( 8 ) _ETW_AUTOBOOST_SET_PRIORITY_FLOOR_EVENT
{
    PVOID Lock;
    ULONG ThreadId;
    SCHAR NewCpuPriorityFloor;
    SCHAR OldCpuPriority;
    union alignas( 1 )
    {
        struct alignas( 1 )
        {
            SCHAR NewIoPriorityFloor : 4;
            SCHAR OldIoPriority : 4;
        };
        SCHAR IoPriorities;
    };
    union alignas( 1 )
    {
        struct alignas( 1 )
        {
            UCHAR ExecutingDpc : 1;
            UCHAR WakeupBoost : 1;
            UCHAR BoostedOutstandingIrps : 1;
            UCHAR Reserved : 5;
        };
        UCHAR Flags;
    };
};
struct alignas( 8 ) _ETW_POOL_EVENT
{
    ULONG PoolType;
    ULONG Tag;
    SIZE_T NumberOfBytes;
    PVOID Entry;
};
struct alignas( 8 ) _ETW_CREATE_HANDLE_EVENT
{
    PVOID Object;
    ULONG Handle;
    USHORT ObjectType;
};
struct alignas( 1 ) _ETW_DUPLICATE_HANDLE_EVENT
{
    PVOID Object;
    ULONG SourceHandle;
    ULONG TargetHandle;
    ULONG TargetProcessId;
    USHORT ObjectType;
    ULONG SourceProcessId;
};
struct alignas( 2 ) _ETW_OBJECT_TYPE_EVENT
{
    USHORT ObjectType;
    USHORT Reserved;
    WCHAR Name[1];
};
struct alignas( 8 ) _ETW_OBJECT_HANDLE_EVENT
{
    PVOID Object;
    ULONG ProcessId;
    ULONG Handle;
    USHORT ObjectType;
};
struct alignas( 8 ) _ETW_REFDEREF_OBJECT_EVENT
{
    PVOID Object;
    ULONG Tag;
    ULONG Count;
};
struct alignas( 8 ) _ETW_CREATEDELETE_OBJECT_EVENT
{
    PVOID Object;
    USHORT ObjectType;
};
struct alignas( 8 ) _ETW_WAKE_COUNTER_EVENT
{
    PVOID Object;
    ULONG_PTR Tag;
    ULONG ProcessId;
    LONG Count;
};
struct alignas( 1 ) _ETW_HEAP_EVENT_COMMON
{
    SYSTEM_TRACE_HEADER Header;
    PVOID Handle;
};
struct alignas( 1 ) _ETW_HEAP_EVENT_ALLOC
{
    SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    SIZE_T Size;
    PVOID Address;
    ULONG Source;
};
struct alignas( 1 ) _ETW_HEAP_EVENT_FREE
{
    SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    PVOID Address;
    ULONG Source;
};
struct alignas( 8 ) _HEAP_SUBSEGMENT_FREE
{
    SYSTEM_TRACE_HEADER Header;
    HEAP_EVENT_SUBSEGMENT_ALLOC_FREE Event;
};
struct alignas( 8 ) _HEAP_SUBSEGMENT_ALLOC
{
    SYSTEM_TRACE_HEADER Header;
    HEAP_EVENT_SUBSEGMENT_ALLOC_FREE Event;
};
struct alignas( 1 ) _HEAP_SUBSEGMENT_INIT
{
    SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    PVOID SubSegment;
    SIZE_T BlockSize;
    SIZE_T BlockCount;
    ULONG AffinityIndex;
};
struct alignas( 1 ) _HEAP_AFFINITY_MANAGER_ENABLE
{
    SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    ULONG BucketIndex;
};
struct alignas( 1 ) _HEAP_AFFINITY_SLOT_ASSIGN
{
    SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    PVOID SubSegment;
    ULONG SlotIndex;
};
struct alignas( 1 ) _HEAP_REUSE_THRESHOLD_ACTIVATED
{
    SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    PVOID SubSegment;
    ULONG BucketIndex;
};
struct alignas( 1 ) _HEAP_SUBSEGMENT_ACTIVATED
{
    SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    PVOID SubSegment;
};
struct alignas( 1 ) _ETW_HEAP_EVENT_SNAPSHOT
{
    SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    SIZE_T FreeSpace;
    SIZE_T CommittedSpace;
    SIZE_T ReservedSpace;
    ULONG Flags;
    ULONG ProcessId;
    SIZE_T LargeUCRSpace;
    ULONG FreeListLength;
    ULONG UCRLength;
    SIZE_T AllocatedSpace;
};
struct alignas( 1 ) _ETW_HEAP_EVENT_RUNDOWN_RANGE
{
    PVOID Address;
    SIZE_T Size;
};
struct alignas( 1 ) _ETW_HEAP_EVENT_RUNDOWN
{
    SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
    ULONG Flags;
    ULONG ProcessId;
    ULONG RangeCount;
    ULONG Reserved;
    ETW_HEAP_EVENT_RUNDOWN_RANGE Ranges[1];
};
struct alignas( 8 ) _HEAP_EVENT_RANGE_CREATE
{
    PVOID HeapHandle;
    SIZE_T FirstRangeSize;
    ULONG Flags;
};
struct alignas( 8 ) _HEAP_EVENT_RANGE
{
    PVOID HeapHandle;
    PVOID Address;
    SIZE_T Size;
};
struct alignas( 8 ) _HEAP_RANGE_CREATE
{
    SYSTEM_TRACE_HEADER Header;
    HEAP_EVENT_RANGE_CREATE Event;
};
struct alignas( 8 ) _HEAP_RANGE_DESTROY
{
    SYSTEM_TRACE_HEADER Header;
    PVOID HeapHandle;
};
struct alignas( 8 ) _HEAP_RANGE_LOG
{
    SYSTEM_TRACE_HEADER Header;
    HEAP_EVENT_RANGE Range;
};
struct alignas( 8 ) _ETW_CRITSEC_EVENT_COLLISION
{
    SYSTEM_TRACE_HEADER Header;
    ULONG LockCount;
    ULONG SpinCount;
    PVOID OwningThread;
    PVOID Address;
};
struct alignas( 8 ) _ETW_CRITSEC_EVENT_INIT
{
    SYSTEM_TRACE_HEADER Header;
    PVOID SpinCount;
    PVOID Address;
};
struct alignas( 8 ) _STACK_WALK_EVENT_DATA
{
    ULONGLONG TimeStamp;
    ULONG ProcessId;
    ULONG ThreadId;
    PVOID Addresses[1];
};
struct alignas( 2 ) _LOAD_DLL_EVENT_DATA
{
    WCHAR ImageName[1];
};
struct alignas( 8 ) _CM_PERF_COUNTERS
{
    ULONGLONG OpenedKeys;
    ULONGLONG DelayCloseKCBs;
    ULONGLONG PrivateAllocPages;
    ULONGLONG PrivateAllocFree;
    ULONGLONG PrivateAllocUsed;
    ULONGLONG LookupCacheHit;
    ULONGLONG LookupCacheMissFound;
    ULONGLONG LookupCacheMissNotFound;
    ULONGLONG ViewMap;
    ULONGLONG ViewUnMap;
    ULONGLONG HiveShrink;
};
struct alignas( 8 ) _CI_LOG_SCHEDULER_EVENT
{
    EVENT_TRACE_HEADER Header;
    ULONG ProcessId;
    ULONG ThreadId;
    ULONG Priority;
    ULONG TaskIndex;
};
struct alignas( 8 ) _CI_LOG_SCHEDULER_WAKEUP
{
    EVENT_TRACE_HEADER Header;
    ULONG Reason;
};
struct alignas( 8 ) _CI_LOG_SCHEDULER_SLEEP
{
    EVENT_TRACE_HEADER Header;
};
struct alignas( 8 ) _CI_LOG_SCHEDULER_SLEEP_RESPONSE
{
    EVENT_TRACE_HEADER Header;
};
struct alignas( 8 ) _ETW_SET_TIMER_EVENT
{
    ULONG64 ExpectedDueTime;
    ULONG_PTR TimerAddress;
    USHORT TargetProcessorGroup;
    UCHAR TargetProcessorIndex;
    UCHAR Flags;
    ULONG Period;
    UCHAR EncodedDelay;
    UCHAR Reserved0;
    USHORT Reserved1;
};
struct alignas( 8 ) _ETW_CANCEL_TIMER_EVENT
{
    ULONG_PTR TimerAddress;
};
struct alignas( 8 ) _ETW_TIMER_EXPIRATION_EVENT
{
    ULONG64 ExpectedDueTime;
    ULONG_PTR TimerAddress;
    ULONG_PTR DeferredRoutine;
    UCHAR EncodedDelay;
};
struct alignas( 8 ) _ETW_TIMER_EXPIRATION_START_EVENT
{
    ULONG64 InterruptTime;
};
struct alignas( 8 ) _ETW_SET_KTIMER2_EVENT
{
    ULONG64 DueTime;
    ULONG64 MaximumDueTime;
    ULONG64 Period;
    ULONG_PTR TimerKey;
    ULONG_PTR Callback;
    ULONG_PTR CallbackContextKey;
    UCHAR Flags;
};
struct alignas( 8 ) _ETW_CANCEL_KTIMER2_EVENT
{
    ULONG_PTR TimerKey;
};
struct alignas( 8 ) _ETW_DISABLE_KTIMER2_EVENT
{
    ULONG_PTR TimerKey;
    ULONG_PTR DisableCallback;
    ULONG_PTR DisableContextKey;
    UCHAR Flags;
};
struct alignas( 8 ) _ETW_FINALIZE_KTIMER2_EVENT
{
    ULONG_PTR TimerKey;
    ULONG_PTR DisableCallback;
    ULONG_PTR DisableContextKey;
};
struct alignas( 4 ) _ETW_CLOCK_CONFIGURATION_EVENT
{
    ULONG KnownType;
    ULONG Capabilities;
    PERFINFO_DYNAMIC_TICK_DISABLE_REASON DisableReason;
};
struct alignas( 8 ) _ETW_TP_EVENT_CALLBACK_ENQUEUE
{
    SYSTEM_TRACE_HEADER Header;
    PVOID PoolId;
    PVOID TaskId;
    PVOID Callback;
    PVOID Context;
    PVOID SubProcessTag;
};
struct alignas( 8 ) _ETW_TP_EVENT_CALLBACK_START
{
    SYSTEM_TRACE_HEADER Header;
    PVOID PoolId;
    PVOID TaskId;
    PVOID Callback;
    PVOID Context;
    PVOID SubProcessTag;
};
struct alignas( 8 ) _ETW_TP_EVENT_CALLBACK_CANCEL
{
    SYSTEM_TRACE_HEADER Header;
    PVOID PoolId;
    PVOID TaskId;
    PVOID Callback;
    PVOID Context;
    PVOID SubProcessTag;
    ULONG CancelCount;
};
struct alignas( 8 ) _ETW_TP_EVENT_POOL_CREATE
{
    SYSTEM_TRACE_HEADER Header;
    PVOID PoolId;
};
struct alignas( 8 ) _ETW_TP_EVENT_POOL_CLOSE
{
    SYSTEM_TRACE_HEADER Header;
    PVOID PoolId;
};
struct alignas( 8 ) _ETW_TP_EVENT_POOL_TH_MIN_SET
{
    SYSTEM_TRACE_HEADER Header;
    PVOID PoolId;
    ULONG ThreadNum;
};
struct alignas( 8 ) _ETW_TP_EVENT_POOL_TH_MAX_SET
{
    SYSTEM_TRACE_HEADER Header;
    PVOID PoolId;
    ULONG ThreadNum;
};
struct alignas( 8 ) _ETW_TP_EVENT_WORKER_NUMANODE_SWITCH
{
    SYSTEM_TRACE_HEADER Header;
    PVOID PoolId;
    ULONG CurrentNode;
    ULONG NextNode;
    USHORT CurrentGroup;
    USHORT NextGroup;
    ULONG CurrentWorkerCount;
    ULONG NextWorkerCount;
};
struct alignas( 1 ) _ETW_TP_EVENT_TIMER_SET
{
    SYSTEM_TRACE_HEADER Header;
    LONG64 DueTime;
    PVOID SubQueue;
    PVOID Timer;
    ULONG Period;
    ULONG WindowLength;
    ULONG Absolute;
};
struct alignas( 1 ) _ETW_TP_EVENT_TIMER_CANCELLED
{
    SYSTEM_TRACE_HEADER Header;
    PVOID SubQueue;
    PVOID Timer;
};
struct alignas( 1 ) _ETW_TP_EVENT_TIMER_SET_NTTIMER
{
    SYSTEM_TRACE_HEADER Header;
    LONG64 DueTime;
    PVOID SubQueue;
    ULONG TolerableDelay;
};
struct alignas( 1 ) _ETW_TP_EVENT_TIMER_CANCEL_NTTIMER
{
    SYSTEM_TRACE_HEADER Header;
    PVOID SubQueue;
};
struct alignas( 1 ) _ETW_TP_EVENT_TIMER_EXPIRATION_BEGIN
{
    SYSTEM_TRACE_HEADER Header;
    PVOID SubQueue;
};
struct alignas( 1 ) _ETW_TP_EVENT_TIMER_EXPIRATION_END
{
    SYSTEM_TRACE_HEADER Header;
    PVOID SubQueue;
};
struct alignas( 1 ) _ETW_TP_EVENT_TIMER_EXPIRATION
{
    SYSTEM_TRACE_HEADER Header;
    LONG64 DueTime;
    PVOID SubQueue;
    PVOID Timer;
    ULONG Period;
    ULONG WindowLength;
};
struct alignas( 8 ) _ETW_THREAD_EVENT_SUBPROCESSTAG
{
    SYSTEM_TRACE_HEADER Header;
    ULONG OldTag;
    ULONG NewTag;
};
struct alignas( 8 ) _ETW_WNF_EVENT_SUBSCRIBE
{
    SYSTEM_TRACE_HEADER Header;
    LARGE_INTEGER StateName;
    PVOID Subscription;
    PVOID NameSub;
    PVOID Callback;
    ULONG RefCount;
    ULONG DeliveryFlags;
};
struct alignas( 8 ) _ETW_WNF_EVENT_CALLBACK
{
    SYSTEM_TRACE_HEADER Header;
    LARGE_INTEGER StateName;
    PVOID Subscription;
    PVOID NameSub;
    PVOID Callback;
    ULONG ChangeStamp;
    ULONG DeliveryFlags;
    ULONG Return;
};
struct alignas( 8 ) _ETW_WNF_EVENT_PUBLISH
{
    SYSTEM_TRACE_HEADER Header;
    LARGE_INTEGER StateName;
    ULONG DataLength;
};
struct alignas( 8 ) _ETW_WNF_EVENT_NAME_SUB_RUNDOWN
{
    SYSTEM_TRACE_HEADER Header;
    LARGE_INTEGER StateName;
    PVOID NameSub;
};
struct alignas( 4 ) _PERFINFO_MARK_EVENT
{
    ULONG TranId;
    UCHAR Level;
    UCHAR AppId;
    USHORT OpId;
    WCHAR Text[1];
};
struct alignas( 1 ) _PERFINFO_DRIVER_MAJORFUNCTION
{
    ULONG MajorFunction;
    ULONG MinorFunction;
    PVOID RoutineAddr;
    PVOID FileNamePointer;
    PVOID Irp;
    ULONG UniqMatchId;
};
struct alignas( 1 ) _PERFINFO_DRIVER_MAJORFUNCTION_RET
{
    PVOID Irp;
    ULONG UniqMatchId;
};
struct alignas( 4 ) _PERFINFO_SET_DEVICES_STATE
{
    ULONG SystemState;
    BOOLEAN Waking;
    BOOLEAN Shutdown;
    UCHAR IrpMinor;
};
struct alignas( 4 ) _PERFINFO_SET_DEVICES_STATE_RET
{
    NTSTATUS Status;
};
struct alignas( 8 ) _PERFINFO_PO_NOTIFY_DEVICE
{
    PVOID Irp;
    PVOID DriverStart;
    UCHAR OrderLevel;
    UCHAR MajorFunction;
    UCHAR MinorFunction;
    POWER_STATE_TYPE Type;
    POWER_STATE State;
    ULONG DeviceNameLength;
    WCHAR DeviceName[1];
};
struct alignas( 8 ) _PERFINFO_PO_NOTIFY_DEVICE_COMPLETE
{
    PVOID Irp;
    NTSTATUS Status;
};
struct alignas( 4 ) _PERFINFO_PO_SESSION_CALLOUT
{
    POWER_ACTION SystemAction;
    SYSTEM_POWER_STATE MinSystemState;
    ULONG Flags;
    ULONG PowerStateTask;
};
struct alignas( 8 ) _PERFINFO_PO_PRESLEEP
{
    LARGE_INTEGER PerformanceCounter;
    LARGE_INTEGER PerformanceFrequency;
};
struct alignas( 8 ) _PERFINFO_PO_POSTSLEEP
{
    LARGE_INTEGER PerformanceCounter;
};
struct alignas( 8 ) _PERFINFO_PO_CALIBRATED_PERFCOUNTER
{
    LARGE_INTEGER PerformanceCounter;
};
struct alignas( 4 ) _PERFINFO_BOOT_PHASE_START
{
    LONG Phase;
};
struct alignas( 4 ) _PERFINFO_BOOT_PREFETCH_INFORMATION
{
    LONG Action;
    NTSTATUS Status;
    LONG Pages;
};
struct alignas( 4 ) _PERFINFO_PO_SESSION_CALLOUT_RET
{
    NTSTATUS Status;
};
struct alignas( 8 ) _PERFINFO_PPM_IDLE_STATE_CHANGE
{
    ULONG NewState;
    ULONG OldState;
    ULONG64 Processors;
};
struct alignas( 8 ) _PERFINFO_PPM_IDLE_STATE_ENTER
{
    ULONG State;
    union alignas( 4 )
    {
        struct alignas( 2 )
        {
            USHORT Properties;
            UCHAR ExpectedWakeReason;
            UCHAR Reserved;
        };
        ULONG Flags;
    };
    ULONG64 ExpectedDuration;
};
struct alignas( 4 ) _PERFINFO_PPM_IDLE_STATE_EXIT
{
    ULONG State;
    ULONG Status;
};
struct alignas( 4 ) _PERFINFO_PPM_STATE_SELECTION
{
    ULONG SelectedState;
    ULONG VetoedStates;
    ULONG VetoReason[1];
};
struct alignas( 4 ) _PERFINFO_PPM_IDLE_EXIT_LATENCY
{
    ULONG Flags;
    ULONG PlatformState;
    ULONG ProcessorState;
    ULONG ReturnLatency;
    ULONG TotalLatency;
};
struct alignas( 8 ) _PERFINFO_PPM_PERF_STATE_CHANGE
{
    ULONG Type;
    ULONG NewState;
    ULONG OldState;
    NTSTATUS Result;
    ULONG64 Processors;
};
struct alignas( 8 ) _PERFINFO_PPM_THERMAL_CONSTRAINT
{
    ULONG Constraint;
    ULONG64 Processors;
};
struct alignas( 8 ) _PERFINFO_FILEOBJECT_INFORMATION
{
    PVOID FileObject;
};
struct alignas( 8 ) _PERFINFO_FILENAME_SAME_INFORMATION
{
    PVOID OldFile;
    PVOID NewFile;
};
struct alignas( 8 ) _PERFINFO_PFMAPPED_SECTION_INFORMATION
{
    PVOID RangeBase;
    PVOID RangeEnd;
    ULONG CreatingProcessId;
};
struct alignas( 8 ) _PERFINFO_PFMAPPED_SECTION_OBJECT_INFORMATION
{
    PVOID SectionObject;
    PVOID RangeBase;
};
struct alignas( 8 ) _PERFINFO_SAMPLED_PROFILE_INFORMATION
{
    PVOID InstructionPointer;
    ULONG ThreadId;
    USHORT Count;
    union alignas( 1 )
    {
        struct alignas( 1 )
        {
            UCHAR ExecutingDpc : 1;
            UCHAR ExecutingIsr : 1;
            UCHAR Reserved : 1;
            UCHAR Priority : 5;
        };
        UCHAR Flags;
    };
    UCHAR Rank;
};
struct alignas( 8 ) _PERFINFO_SAMPLED_PROFILE_CACHE
{
    ULONG Entries;
    PERFINFO_SAMPLED_PROFILE_INFORMATION Sample[20];
};
struct alignas( 4 ) _PERFINFO_SAMPLED_PROFILE_CONFIG
{
    ULONG Source;
    ULONG NewInterval;
    ULONG OldInterval;
};
struct alignas( 8 ) _PERFINFO_PMC_SAMPLE_INFORMATION
{
    PVOID InstructionPointer;
    ULONG ThreadId;
    USHORT ProfileSource;
    USHORT Reserved;
};
struct alignas( 8 ) _PERFINFO_DPC_INFORMATION
{
    ULONGLONG InitialTime;
    PVOID DpcRoutine;
};
struct alignas( 8 ) _PERFINFO_DPC_ENQUEUE_INFORMATION
{
    ULONG_PTR Key;
    LONG DpcQueueDepth;
    ULONG DpcCount;
    ULONG TargetProcessorIndex;
    UCHAR Importance;
    UCHAR Reserved[3];
};
struct alignas( 8 ) _PERFINFO_DPC_EXECUTION_INFORMATION
{
    PVOID DpcRoutine;
    ULONG_PTR Key;
};
struct alignas( 4 ) _PERFINFO_YIELD_PROCESSOR_INFORMATION
{
    ULONG YieldReason;
    ULONG DpcWatchdogCount;
    ULONG DpcTimeCount;
};
struct alignas( 1 ) _PERFINFO_INTERRUPT_INFORMATION
{
    ULONGLONG InitialTime;
    PVOID ServiceRoutine;
    UCHAR ReturnValue;
    USHORT Vector;
    UCHAR Reserved;
};
struct alignas( 8 ) _PERFINFO_CLOCK_INTERRUPT_INFORMATION
{
    ULONG64 InterruptTime;
    SHORT Flags;
};
struct alignas( 1 ) _PERFINFO_SPINLOCK_CONFIG
{
    ULONG SpinLockSpinThreshold;
    ULONG SpinLockContentionSampleRate;
    ULONG SpinLockAcquireSampleRate;
    ULONG SpinLockHoldThreshold;
};
struct alignas( 4 ) _PERFINFO_EXECUTIVE_RESOURCE_CONFIG
{
    ULONG ReleaseSamplingRate;
    ULONG ContentionSamplingRate;
    ULONG NumberOfExcessiveTimeouts;
};
struct alignas( 8 ) _PERFINFO_SESSIONCREATE_INFORMATION
{
    ULONG_PTR UniqueSessionId;
    ULONG SessionId;
};
struct alignas( 8 ) _PERFINFO_PAGE_RANGE_IDENTITY
{
    struct alignas( 8 )
    {
        ULONGLONG UseDescription : 4;
        ULONGLONG UniqueKey : 48;
        ULONGLONG Reserved : 12;
    };
    union alignas( 8 )
    {
        PVOID ProtoPteAddress;
        ULONG_PTR PageFrameIndex;
        PVOID VirtualAddress;
    };
    SIZE_T PageCount;
};
struct alignas( 8 ) _PERFINFO_KERNELMEMORY_RANGE_USAGE
{
    ULONG UsageType : 5;
    ULONG Spare : 27;
    PVOID VirtualAddress;
    SIZE_T PageCount;
};
struct alignas( 8 ) _PERFINFO_PAGECOMBINE_AGGREGATE_STAT
{
    ULONG StatType : 6;
    ULONG Spare : 26;
    ULONG CombineScanCount;
    ULONGLONG PagesScanned;
    ULONGLONG PagesCombined;
    LONG CombinedBlocksInUse;
    LONG SumCombinedBlocksReferenceCount;
};
struct alignas( 4 ) _PERFINFO_PAGECOMBINE_ITERATION_STAT
{
    ULONG StatType : 6;
    ULONG Spare : 26;
    ULONG PagesScanned;
    ULONG PagesCombined;
};
struct alignas( 8 ) _PERFINFO_HARDPAGEFAULT_INFORMATION
{
    LARGE_INTEGER ReadOffset;
    PVOID VirtualAddress;
    PVOID FileObject;
    ULONG ThreadId;
    ULONG ByteCount;
};
struct alignas( 8 ) _PERFINFO_VIRTUAL_ALLOC
{
    PVOID CapturedBase;
    SIZE_T CapturedRegionSize;
    ULONG ProcessId;
    ULONG Flags;
};
struct alignas( 8 ) _PERFINFO_VAD_ROTATE_INFO
{
    PVOID BaseAddress;
    SIZE_T SizeInBytes;
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            ULONG Direction : 4;
            ULONG Spare : 28;
        };
        ULONG Flags;
    };
};
struct alignas( 8 ) _PERFINFO_MEM_RESET_INFO
{
    PVOID BaseAddress;
    SIZE_T SizeInBytes;
    union alignas( 4 )
    {
        struct alignas( 4 )
        {
            ULONG TypeInfo : 2;
            ULONG Spare : 30;
        };
        ULONG Flags;
    };
};
struct alignas( 8 ) _PERFINFO_CC_WORKITEM_ENQUEUE
{
    ULONG_PTR WorkItemKey;
    ULONG_PTR FileObjectKey;
    UCHAR QueueType;
    UCHAR WorkItemType;
    BOOLEAN Requeue;
    UCHAR Reserved;
};
struct alignas( 8 ) _PERFINFO_CC_WORKITEM_DEQUEUE
{
    ULONG_PTR WorkItemKey;
};
struct alignas( 8 ) _PERFINFO_CC_WORKITEM_COMPLETE
{
    ULONG_PTR WorkItemKey;
};
struct alignas( 8 ) _PERFINFO_CC_READ_AHEAD
{
    ULONG_PTR WorkItemKey;
    ULONGLONG FileOffset;
    ULONG Size;
    ULONG PagePriority;
    ULONG DetectedPattern;
    ULONG Reserved;
};
struct alignas( 8 ) _PERFINFO_CC_SCHEDULE_READ_AHEAD
{
    ULONG_PTR WorkItemKey;
    ULONG_PTR FileObjectKey;
    ULONGLONG FileOffset;
    ULONG Length;
    ULONG ReadAheadUnit;
    ULONG ReadAheadLength;
    ULONGLONG ReadAheadOffset;
    ULONGLONG ReadAheadBeyondLastByte;
    UCHAR ReadPattern;
    ULONG SequentialReadCount;
    ULONG SharedCacheMapFlags;
    ULONG ReadAheadSettingsChanged : 1;
    ULONG ReadAheadActive : 1;
};
struct alignas( 8 ) _PERFINFO_CC_LAZY_WRITE_SCAN
{
    ULONG_PTR WorkItemKey;
    ULONG ReasonForFlush;
    ULONG PagesToWrite;
    SIZE_T TotalDirtyPages;
    SIZE_T AvailablePages;
    SIZE_T DirtyPageThreshold;
    SIZE_T NumberOfMappedVacbs;
    SIZE_T TopDirtyPageThreshold;
    SIZE_T BottomDirtyPageThreshold;
    SIZE_T AverageAvailablePages;
    SIZE_T AverageDirtyPages;
    SIZE_T ConsecutiveWorklessLazywriteScans;
};
struct alignas( 8 ) _PERFINFO_CC_CAN_WRITE_FAIL
{
    ULONG_PTR FileObjectKey;
    SIZE_T TotalDirtyPages;
    SIZE_T DirtyPageThreshold;
    ULONG BytesToWrite;
};
struct alignas( 8 ) _PERFINFO_CC_FLUSH_SECTION
{
    ULONG_PTR WorkItemKey;
    ULONG_PTR FileObjectKey;
    ULONGLONG Offset;
    ULONG Length;
    ULONG MmFlushFlags;
};
struct alignas( 8 ) _PERFINFO_CC_FLUSH_CACHE
{
    ULONG_PTR WorkItemKey;
    ULONG_PTR FileObjectKey;
    ULONGLONG Offset;
    ULONG Length;
    ULONG SharedCacheMapFlags;
    ULONG Flags;
    ULONG Reserved;
};
struct alignas( 8 ) _PERFINFO_CC_LOGGED_STREAM_INFO
{
    ULONG_PTR FileObjectKey;
    ULONG ReasonForFlush;
    ULONG PagesToWrite;
    SIZE_T DirtyLoggedPages;
    SIZE_T DirtyLoggedPageThreshold;
    LARGE_INTEGER LargestLsnForLWS;
};
struct alignas( 8 ) _PERFINFO_CC_EXTRA_WB_THREAD_INFO
{
    ULONG ThreadAction;
    ULONG ActiveExtraWBThreads;
    SIZE_T TotalDirtyPages;
    SIZE_T DirtyPageThreshold;
    SIZE_T AvailablePages;
};
struct alignas( 8 ) _PERFINFO_IMAGELOAD_IN_PAGEFILE_INFO
{
    PVOID FileObject;
    ULONG DeviceCharacteristics;
    USHORT FileCharacteristics;
    union alignas( 2 )
    {
        USHORT Flags;
        struct alignas( 2 )
        {
            USHORT ActiveDataReference : 1;
            USHORT DeviceEjectable : 1;
            USHORT WritableHandles : 1;
        };
    } Flags;
};
struct alignas( 8 ) _PERFINFO_SYSCALL_ENTER_DATA
{
    PVOID SysCallAddr;
};
struct alignas( 4 ) _PERFINFO_SYSCALL_EXIT_DATA
{
    NTSTATUS ReturnValue;
};
struct alignas( 1 ) _PERFINFO_MARK_INFORMATION
{
    char Name[1];
};
struct alignas( 8 ) _PERFINFO_FILE_CREATE
{
    ULONG_PTR Irp;
    ULONG_PTR FileObject;
    ULONG IssuingThreadId;
    ULONG Options;
    ULONG Attributes;
    ULONG ShareAccess;
    WCHAR OpenPath[1];
};
struct alignas( 8 ) _PERFINFO_FILE_INFORMATION
{
    ULONG_PTR Irp;
    ULONG_PTR FileObject;
    ULONG_PTR FileKey;
    ULONG_PTR ExtraInformation;
    ULONG IssuingThreadId;
    ULONG InfoClass;
};
struct alignas( 8 ) _PERFINFO_FILE_DIRENUM
{
    ULONG_PTR Irp;
    ULONG_PTR FileObject;
    ULONG_PTR FileKey;
    ULONG IssuingThreadId;
    ULONG Length;
    ULONG InfoClass;
    ULONG FileIndex;
    WCHAR FileName[1];
};
struct alignas( 8 ) _PERFINFO_FILE_PATH_OPERATION
{
    ULONG_PTR Irp;
    ULONG_PTR FileObject;
    ULONG_PTR FileKey;
    ULONG_PTR ExtraInformation;
    ULONG IssuingThreadId;
    ULONG InfoClass;
    WCHAR Path[1];
};
struct alignas( 1 ) _PERFINFO_FILE_READ_WRITE
{
    ULONGLONG Offset;
    ULONG_PTR Irp;
    ULONG_PTR FileObject;
    ULONG_PTR FileKey;
    ULONG IssuingThreadId;
    ULONG Size;
    ULONG Flags;
    ULONG ExtraFlags;
};
struct alignas( 1 ) _PERFINFO_FILE_SIMPLE_OPERATION
{
    ULONG_PTR Irp;
    ULONG_PTR FileObject;
    ULONG_PTR FileKey;
    ULONG IssuingThreadId;
};
struct alignas( 1 ) _PERFINFO_FILE_OPERATION_END
{
    ULONG_PTR Irp;
    ULONG_PTR ExtraInformation;
    NTSTATUS Status;
};
struct alignas( 1 ) _PERFINFO_FLT_OPERATION
{
    PVOID RoutineAddr;
    PVOID FileObject;
    PVOID FsContext;
    PVOID IrpPtr;
    PVOID CbdPtr;
    LONG MajorFunction;
};
struct alignas( 1 ) _PERFINFO_FLT_OPERATION_STATUS
{
    PVOID RoutineAddr;
    PVOID FileObject;
    PVOID FsContext;
    PVOID IrpPtr;
    PVOID CbdPtr;
    LONG MajorFunction;
    NTSTATUS Status;
};
struct alignas( 8 ) _PERFINFO_MEMORY_INFORMATION
{
    SIZE_T ZeroPageCount;
    SIZE_T FreePageCount;
    SIZE_T ModifiedPageCount;
    SIZE_T ModifiedNoWritePageCount;
    SIZE_T BadPageCount;
    SIZE_T PageCountByPriority[8];
    SIZE_T RepurposedPagesByPriority[8];
    SIZE_T ModifiedPageCountPageFile;
};
struct alignas( 8 ) _PERFINFO_SYSTEM_MEMORY_INFORMATION
{
    SIZE_T PagedPoolCommitPageCount;
    SIZE_T NonPagedPoolPageCount;
    SIZE_T MdlPageCount;
    SIZE_T CommitPageCount;
};
struct alignas( 1 ) _PERFINFO_WORKINGSET_ENTRY
{
    union alignas( 1 )
    {
        ULONG UniqueProcessId;
        ULONG SessionId;
    };
    SIZE_T WorkingSetPageCount;
    SIZE_T CommitPageCount;
    union alignas( 1 )
    {
        SIZE_T PagedPoolPageCount;
        SIZE_T VirtualSizeInPages;
    };
    SIZE_T PrivateWorkingSetPageCount;
    SIZE_T StoreSizeInPages;
    SIZE_T StoredPageCount;
    SIZE_T CommitDebtInPages;
    SIZE_T SharedCommitInPages;
};
struct alignas( 1 ) _PERFINFO_WORKINGSET_INFORMATION
{
    ULONG Count;
    PERFINFO_WORKINGSET_ENTRY WsEntry[1];
};
struct alignas( 8 ) _PERFINFO_CONTIGUOUS_PAGE_GENERATE
{
    ULONGLONG ThreadId;
    ULONGLONG NumberOfBytes;
};
struct alignas( 4 ) _PERFINFO_DEBUG_EVENT
{
    ULONG ProcessId;
    ULONG ThreadId;
    PERFINFO_DEBUG_EVENT_REASON Reason;
};
struct alignas( 8 ) _PERFINFO_CCSWAP_BUFFER
{
    LONGLONG FirstTimeStamp;
    ULONG TidTable[16];
    SCHAR ThreadBasePriority[16];
};
struct alignas( 2 ) _PERFINFO_CCSWAP_IDLE_SHORT
{
    USHORT DataType : 2;
    USHORT TimeDelta : 14;
};
struct alignas( 4 ) _PERFINFO_CCSWAP_IDLE
{
    ULONG DataType : 2;
    ULONG TimeDelta : 30;
};
struct alignas( 4 ) _PERFINFO_CCSWAP_LITE
{
    ULONG DataType : 2;
    ULONG OldThreadIdIndex : 4;
    ULONG OldThreadPriInc : 3;
    ULONG OldThreadStateWr : 6;
    ULONG TimeDelta : 17;
};
struct alignas( 4 ) _PERFINFO_CCSWAP
{
    ULONG DataType : 2;
    ULONG TimeDelta : 30;
    ULONG OldThreadIdIndex : 4;
    ULONG OldThreadStateWr : 6;
    ULONG OldThreadPriority : 5;
    ULONG NewThreadWaitTime : 17;
};
struct alignas( 8 ) _PERFINFO_PROCESS_PERFCTR
{
    ULONG ProcessId;
    ULONG PageFaultCount;
    ULONG HandleCount;
    ULONG Reserved;
    SIZE_T PeakVirtualSize;
    SIZE_T PeakWorkingSetSize;
    SIZE_T PeakPagefileUsage;
    SIZE_T QuotaPeakPagedPoolUsage;
    SIZE_T QuotaPeakNonPagedPoolUsage;
    SIZE_T VirtualSize;
    SIZE_T WorkingSetSize;
    SIZE_T PagefileUsage;
    SIZE_T QuotaPagedPoolUsage;
    SIZE_T QuotaNonPagedPoolUsage;
    SIZE_T PrivatePageCount;
};
struct alignas( 4 ) _PERFINFO_PROCESS_PERFCTR32
{
    ULONG ProcessId;
    ULONG PageFaultCount;
    ULONG HandleCount;
    ULONG Reserved;
    ULONG32 PeakVirtualSize;
    ULONG32 PeakWorkingSetSize;
    ULONG32 PeakPagefileUsage;
    ULONG32 QuotaPeakPagedPoolUsage;
    ULONG32 QuotaPeakNonPagedPoolUsage;
    ULONG32 VirtualSize;
    ULONG32 WorkingSetSize;
    ULONG32 PagefileUsage;
    ULONG32 QuotaPagedPoolUsage;
    ULONG32 QuotaNonPagedPoolUsage;
    ULONG32 PrivatePageCount;
};
struct alignas( 8 ) _PERFINFO_PROCESS_PERFCTR64
{
    ULONG ProcessId;
    ULONG PageFaultCount;
    ULONG HandleCount;
    ULONG Reserved;
    ULONG64 PeakVirtualSize;
    ULONG64 PeakWorkingSetSize;
    ULONG64 PeakPagefileUsage;
    ULONG64 QuotaPeakPagedPoolUsage;
    ULONG64 QuotaPeakNonPagedPoolUsage;
    ULONG64 VirtualSize;
    ULONG64 WorkingSetSize;
    ULONG64 PagefileUsage;
    ULONG64 QuotaPagedPoolUsage;
    ULONG64 QuotaNonPagedPoolUsage;
    ULONG64 PrivatePageCount;
};
struct alignas( 8 ) _PERFINFO_PROCESS_INSWAP
{
    ULONG_PTR DirectoryTableBase;
    ULONG ProcessId;
};
struct alignas( 8 ) _PERFINFO_IO_TIMER
{
    PVOID DeviceObject;
    PVOID RoutineAddress;
};
struct alignas( 8 ) _WMI_LOGGER_INFORMATION
{
    WNODE_HEADER Wnode;
    ULONG BufferSize;
    ULONG MinimumBuffers;
    ULONG MaximumBuffers;
    ULONG MaximumFileSize;
    ULONG LogFileMode;
    ULONG FlushTimer;
    ULONG EnableFlags;
    union alignas( 4 )
    {
        LONG AgeLimit;
        LONG FlushThreshold;
    };
    ULONG Wow;
    union alignas( 8 )
    {
        HANDLE LogFileHandle;
        ULONG64 LogFileHandle64;
    };
    union alignas( 4 )
    {
        ULONG NumberOfBuffers;
        ULONG InstanceCount;
    };
    union alignas( 4 )
    {
        ULONG FreeBuffers;
        ULONG InstanceId;
    };
    union alignas( 4 )
    {
        ULONG EventsLost;
        ULONG NumberOfProcessors;
    };
    ULONG BuffersWritten;
    union alignas( 4 )
    {
        ULONG LogBuffersLost;
        ULONG Flags;
    };
    ULONG RealTimeBuffersLost;
    union alignas( 8 )
    {
        HANDLE LoggerThreadId;
        ULONG64 LoggerThreadId64;
    };
    union alignas( 8 )
    {
        UNICODE_STRING LogFileName;
        UNICODE_STRING64 LogFileName64;
    };
    union alignas( 8 )
    {
        UNICODE_STRING LoggerName;
        UNICODE_STRING64 LoggerName64;
    };
    ULONG RealTimeConsumerCount;
    ULONG SpareUlong;
    union alignas( 8 )
    {
        PVOID LoggerExtension;
        ULONG64 LoggerExtension64;
    } DUMMYUNIONNAME10;
};
struct alignas( 1 ) _ETW_UMGL_KEY
{
    UCHAR LoggerId;
    UCHAR Flags;
};
struct alignas( 4 ) _ETW_KERNEL_HEADER_EXTENSION
{
    PERFINFO_GROUPMASK GroupMasks;
    ULONG Version;
};
struct alignas( 4 ) _ETW_SET_MARK_INFORMATION
{
    ULONG Flag;
    WCHAR Mark[1];
};
struct alignas( 8 ) _ETW_NOTIFICATION_HEADER
{
    ETW_NOTIFICATION_TYPE NotificationType;
    ULONG NotificationSize;
    ULONG Offset;
    BOOLEAN ReplyRequested;
    ULONG Timeout;
    union alignas( 4 )
    {
        ULONG ReplyCount;
        ULONG NotifyeeCount;
    };
    ULONGLONG Reserved2;
    ULONG TargetPID;
    ULONG SourcePID;
    GUID DestinationGuid;
    GUID SourceGuid;
};
struct alignas( 8 ) _ETW_SESSION_NOTIFICATION_PACKET
{
    ETW_NOTIFICATION_HEADER NotificationHeader;
    ETW_SESSION_NOTIFICATION_TYPE Type;
    NTSTATUS Status;
    TRACEHANDLE TraceHandle;
    ULONG Reserved[2];
};
struct alignas( 8 ) _EVENT_DESCRIPTOR
{
    USHORT Id;
    UCHAR Version;
    UCHAR Channel;
    UCHAR Level;
    UCHAR Opcode;
    USHORT Task;
    ULONGLONG Keyword;
};
;
struct alignas( 4 ) _ETW_TRACE_PROVIDER_INSTANCE_INFO
{
    ULONG NextOffset;
    ULONG EnableCount;
    ULONG Pid;
    ULONG Flags;
};
struct alignas( 4 ) _ETW_TRACE_GUID_INFO
{
    ULONG InstanceCount;
    ULONG Reserved;
};
struct alignas( 8 ) _TELEMETRY_COVERAGE_POINT
{
    PWSTR Name;
    ULONG Hash;
    ULONG LastCoveredRound;
    ULONG Flags;
};
struct alignas( 8 ) _MOFRESOURCEINFOA
{
    PSTR ImagePath;
    PSTR ResourceName;
    ULONG ResourceSize;
    PUCHAR ResourceBuffer;
};
struct alignas( 8 ) _MOFRESOURCEINFOW
{
    LPWSTR ImagePath;
    LPWSTR ResourceName;
    ULONG ResourceSize;
    PUCHAR ResourceBuffer;
};
struct alignas( 4 ) _WMIGUIDINFORMATION
{
    ULONG Size;
    BOOLEAN IsExpensive;
    BOOLEAN IsEventOnly;
};
